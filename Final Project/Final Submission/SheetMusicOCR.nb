(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframDesktop 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[   3508355,      62152]
NotebookOptionsPosition[   3486243,      61789]
NotebookOutlinePosition[   3486578,      61804]
CellTagsIndexPosition[   3486535,      61801]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["OCR for Sheet Music", "Title",
 CellChangeTimes->{{3.771582205206677*^9, 
  3.771582209692707*^9}},ExpressionUUID->"304d7b4f-525d-47b2-8d27-\
52f7023b6fcf"],

Cell["Final Project for the Wolfram Summer School 2019", "Subtitle",
 CellChangeTimes->{{3.771582224528473*^9, 
  3.771582249346344*^9}},ExpressionUUID->"a502bbf1-7728-4e09-bf0e-\
ed402a3c8f04"],

Cell["Daniel Csillag", "Subtitle",
 CellChangeTimes->{{3.7715822111244717`*^9, 
  3.7715822170856857`*^9}},ExpressionUUID->"6f34044e-f150-4ace-8e2a-\
b018baa1e1ea"],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Code",
 CellChangeTimes->{{3.771631250621045*^9, 3.771631255974697*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"6a3870a3-0f24-4c37-87c0-8e754816e49e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", "[", 
  RowBox[{"NotebookDirectory", "[", "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.7716312639729347`*^9, 3.771631274140493*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"3c5a3b11-7203-4f9e-b247-58e3360ee17f"],

Cell[BoxData["\<\"/home/daniel/WSS19/MusicOCR\"\>"], "Output",
 CellChangeTimes->{
  3.771631274679695*^9, 3.771631776180928*^9, 3.771632274765284*^9, 
   3.77166446261626*^9, 3.7716974100372353`*^9, 3.7717214488503113`*^9, 
   3.771750679268997*^9, 3.771765136218636*^9, 3.771838422807125*^9, {
   3.771853322352778*^9, 3.77185333653236*^9}, 3.776172210972268*^9, 
   3.777301435823407*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"215c2f0c-0819-4f81-a9be-9fc30256c787"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task Description", "Chapter",
 CellChangeTimes->{{3.771582305993486*^9, 
  3.771582308635454*^9}},ExpressionUUID->"160e4edf-d88e-43a2-a2b8-\
fe0fc491cdf8"],

Cell["\<\
Given an image of some sheet music, generate some internal representation of \
it that can then be played, reprinted or exported to some external musical \
notation software.\
\>", "Text",
 CellChangeTimes->{{3.7715823156095657`*^9, 3.771582426362464*^9}, {
  3.7717698584882593`*^9, 
  3.771769876234091*^9}},ExpressionUUID->"aab3be59-8c4f-40d9-aff7-\
0c0f4f4a068b"],

Cell[CellGroupData[{

Cell["How we did it", "Section",
 CellChangeTimes->{{3.771582649265979*^9, 3.771582672817192*^9}, {
  3.7715827353962603`*^9, 
  3.771582739700378*^9}},ExpressionUUID->"e4bd7dd5-3d6d-40f0-8fc9-\
3b3b05f111d4"],

Cell["\<\
The solution used is a mixture of classical computer vision techniques, \
machine learning techniques and parsing algorithms.
First, we use a morphological transformation to detect the staff lines, find \
groupings of five of them, find the distance between each line in the staff \
and split the sheet music into subimages with the lines removed for each \
staff. Then, we use a SegNet trained on the DeepScores dataset (after some \
preprocessing) to find bounding boxes for each musical symbol in the score; \
this is then passed to a LeNet to classify each symbol and another to \
classify rhythm for the note heads. Finally, this is passed to a parser that \
generates the sheet music representation.\
\>", "Text",
 CellChangeTimes->{{3.771582747095882*^9, 3.7715827721222563`*^9}, {
  3.771582820639555*^9, 3.771582868309353*^9}, {3.771582899095948*^9, 
  3.771582914636874*^9}, {3.7715829578870173`*^9, 3.771583006431904*^9}, {
  3.771583048472205*^9, 3.771583095862275*^9}, {3.771583173753808*^9, 
  3.7715831889427423`*^9}, {3.771583265777752*^9, 3.7715832711413*^9}, {
  3.771583456430642*^9, 3.7715834564338703`*^9}, {3.771583498956003*^9, 
  3.771583535611198*^9}, {3.77158356812298*^9, 3.771583572454852*^9}, {
  3.77158372403231*^9, 3.7715837438596487`*^9}, {3.7715837967583*^9, 
  3.771583818232265*^9}},ExpressionUUID->"5e4ae5f6-7bbf-48e5-8cd1-\
b68f4dc9ceb1"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Datasets", "Chapter",
 CellChangeTimes->{{3.771583907550316*^9, 
  3.771583911864593*^9}},ExpressionUUID->"18ce7658-92cd-4e66-a117-\
beee0528c3e9"],

Cell["Two datasets were used for this project:", "Text",
 CellChangeTimes->{{3.771583916962373*^9, 3.771583934395649*^9}, {
  3.7715839818694277`*^9, 
  3.771583985216288*^9}},ExpressionUUID->"edc157c7-97b3-4ac2-bde2-\
76e6804844d1"],

Cell[CellGroupData[{

Cell["DeepScores Segmentation Dataset", "Item",
 CellChangeTimes->{{3.771583988835764*^9, 3.771583993430237*^9}, {
  3.771584051954485*^9, 3.771584051954571*^9}, {3.7717708703692923`*^9, 
  3.7717708795955973`*^9}, {3.771770973875375*^9, 
  3.771770982311803*^9}},ExpressionUUID->"67a04f79-8727-4601-9e66-\
2c628bc05b51"],

Cell[TextData[ButtonBox["https://drive.google.com/drive/folders/1KFxqi0rO-\
bJrd03rLk87fF1iOmnjpaoG",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://drive.google.com/drive/folders/1KFxqi0rO-\
bJrd03rLk87fF1iOmnjpaoG"], None},
 ButtonNote->
  "https://drive.google.com/drive/folders/1KFxqi0rO-bJrd03rLk87fF1iOmnjpaoG"]]\
, "Subitem",
 CellChangeTimes->{{3.771583988835764*^9, 3.771583993430237*^9}, {
  3.771584051954485*^9, 3.771584051954571*^9}, {3.7717708703692923`*^9, 
  3.7717708795955973`*^9}, {3.771770973875375*^9, 
  3.7717709907908916`*^9}},ExpressionUUID->"d7516f79-3583-4805-b1e0-\
e7d59e939f46"],

Cell["DeepScores Classification Dataset", "Item",
 CellChangeTimes->{{3.771583988835764*^9, 3.771583993430237*^9}, {
  3.771584051954485*^9, 3.771584051954571*^9}, {3.7717708703692923`*^9, 
  3.7717708795955973`*^9}, {3.771770974476675*^9, 
  3.771770992355962*^9}},ExpressionUUID->"4acdda3b-c908-41b4-812e-\
f1ad124cc1cb"],

Cell[TextData[ButtonBox["https://drive.google.com/file/d/1bdBrX0dAX734I3MA_ \
6-wH_-N2eqq_tf _/view",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://drive.google.com/file/d/1bdBrX0dAX734I3MA_6-wH_-N2eqq_tf_/\
view"], None},
 ButtonNote->
  "https://drive.google.com/file/d/1bdBrX0dAX734I3MA_6-wH_-N2eqq_tf_/view"]], \
"Subitem",
 CellChangeTimes->{{3.771583988835764*^9, 3.771583993430237*^9}, {
  3.771584051954485*^9, 3.771584051954571*^9}, {3.7717708703692923`*^9, 
  3.7717708795955973`*^9}, {3.771770974476675*^9, 
  3.771771004317479*^9}},ExpressionUUID->"0538c523-2274-4dde-aa66-\
2204f550db61"]
}, Closed]],

Cell[CellGroupData[{

Cell["Loading the Datasets", "Section",
 CellChangeTimes->{{3.771590596968686*^9, 
  3.7715906037791033`*^9}},ExpressionUUID->"b5abda3a-5643-491b-9744-\
d5660163ecb3"],

Cell["These are some functions to load the datasets:", "Text",
 CellChangeTimes->{{3.771590608697578*^9, 3.771590641568645*^9}, {
   3.771630649095229*^9, 3.771630652961672*^9}, 
   3.771630830853136*^9},ExpressionUUID->"d418d747-9d3c-417e-90b6-\
0a2da6f9a569"],

Cell[CellGroupData[{

Cell["SegNet", "Subsection",
 CellChangeTimes->{{3.771630866361438*^9, 
  3.771630870040924*^9}},ExpressionUUID->"91078346-8d10-4571-b19b-\
f6e7025bd26e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"loadDataOutOfCore", "[", 
   RowBox[{"path_String", "?", "DirectoryQ"}], "]"}], " ", ":=", " ", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{"MapThread", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"File", "[", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "]"}],
           "\[Rule]", 
          RowBox[{"File", "[", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
           "]"}]}], "&"}], "/@", 
        RowBox[{"Thread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"#1", ",", "#2"}], "}"}], "&"}], "[", 
          RowBox[{
           RowBox[{"FileNames", "[", 
            RowBox[{"All", ",", "#1"}], "]"}], ",", 
           RowBox[{"FileNames", "[", 
            RowBox[{"All", ",", "#2"}], "]"}]}], "]"}], "]"}]}], "&"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"FileNames", "[", 
         RowBox[{"All", ",", 
          RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
            RowBox[{"path", ",", "\"\<images_png\>\""}], "}"}], "]"}]}], 
         "]"}], ",", 
        RowBox[{"FileNames", "[", 
         RowBox[{"All", ",", 
          RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
            RowBox[{"path", ",", "\"\<pix_annotations_png\>\""}], "}"}], 
           "]"}]}], "]"}]}], "}"}]}], "]"}], ",", "1"}], "]"}]}]], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"5597a45f-71c0-4617-9f25-a058b6e3260a"]
}, Closed]],

Cell[CellGroupData[{

Cell["Symbol Classifier", "Subsection",
 CellChangeTimes->{{3.771630874911302*^9, 
  3.771630883889162*^9}},ExpressionUUID->"ab975a4e-0532-499e-8ad6-\
e3cb5a9ca6df"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"min", "[", 
   RowBox[{"All", ",", "x_Integer"}], "]"}], " ", ":=", " ", 
  "x"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"min", "[", 
   RowBox[{"x_Integer", ",", "y_Integer"}], "]"}], " ", ":=", " ", 
  RowBox[{"Min", "[", 
   RowBox[{"x", ",", "y"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.771635255764472*^9, 3.7716352685783567`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"1f8a36b7-961c-435e-897a-9f839bad4b9f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"importDeepScoresSymbolDataset", "[", 
   RowBox[{
    RowBox[{"inputPath_String", "?", "DirectoryQ"}], ",", 
    RowBox[{"nFiles_Integer", "?", "Positive"}], ",", "nSymbols_"}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"symbolPath", "\[Function]", 
      RowBox[{"(", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Center", ":", " ", 
         RowBox[{"(", 
          RowBox[{"15", ",", "15"}], ")"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "\"\<augmentationDot\>\"", "}"}], ",", 
           RowBox[{"FileNameTake", "[", "symbolPath", "]"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"rowspan", ",", "colspan"}], "}"}], "=", 
           RowBox[{"Switch", "[", 
            RowBox[{
             RowBox[{"FileNameTake", "[", "symbolPath", "]"}], ",", 
             "\[IndentingNewLine]", 
             InterpretationBox[
              DynamicModuleBox[{Typeset`open = False}, 
               TemplateBox[{"Expression","SequenceIcon",GridBox[{{
                    RowBox[{
                    TagBox["\"Head: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["Sequence", "IconizedItem"]}]}, {
                    RowBox[{
                    TagBox["\"Length: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["248", "IconizedItem"]}]}, {
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["36008", "IconizedItem"]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 Dynamic[Typeset`open]},
                "IconizedObject"]],
              Sequence[
              "brace", {{1, 64}, {22, 36}}, "repeatDot", {{28, 46}, {27, 39}},
                "segno", {{17, 48}, {15, 50}}, "coda", {{18, 47}, {12, 53}}, 
               "gClef", {{7, 55}, {15, 50}}, "cClefAlto", {{13, 53}, {14, 
               53}}, "cClefTenor", {{18, 48}, {15, 50}}, "fClef", {{15, 47}, {
               15, 50}}, "unpitchedPercussionClef1", {{23, 42}, {23, 42}}, 
               "gClefChange", {{10, 55}, {19, 46}}, "cClefAltoChange", {{18, 
               45}, {16, 48}}, "cClefTenorChange", {{20, 45}, {18, 47}}, 
               "fClefChange", {{22, 43}, {18, 48}}, "clef8", {{27, 38}, {23, 
               36}}, "clef15", {{26, 38}, {19, 42}}, "timeSig0", {{24, 42}, {
               24, 41}}, "timeSig1", {{23, 42}, {23, 42}}, "timeSig2", {{23, 
               42}, {23, 42}}, "timeSig3", {{23, 42}, {23, 42}}, 
               "timeSig4", {{23, 42}, {23, 42}}, "timeSig5", {{23, 42}, {23, 
               42}}, "timeSig6", {{23, 42}, {23, 42}}, "timeSig7", {{23, 
               42}, {23, 42}}, "timeSig8", {{23, 42}, {23, 42}}, 
               "timeSig9", {{23, 42}, {23, 42}}, "timeSig12", {{1, 64}, {1, 
               64}}, "timeSig16", {{1, 64}, {1, 64}}, "timeSigCommon", {{24, 
               40}, {20, 45}}, "timeSigCutCommon", {{20, 44}, {20, 45}}, 
               "noteheadBlack", {{28, 38}, {24, 41}}, "noteheadBlackSmall", {{
               12, 38}, {25, 49}}, "noteheadHalf", {{26, 38}, {22, 43}}, 
               "noteheadHalfSmall", {{13, 37}, {25, 40}}, "noteheadWhole", {{
               26, 38}, {19, 46}}, "noteheadWholeSmall", {{28, 37}, {32, 34}},
                "noteheadDoubleWhole", {{26, 39}, {19, 46}}, 
               "noteheadDoubleWholeSmall", {{1, 64}, {1, 64}}, 
               "augmentationDot", {{30, 34}, {28, 37}}, "flag8thUp", {{20, 
               40}, {23, 41}}, "flag8thUpSmall", {{25, 41}, {25, 40}}, 
               "flag16thUp", {{19, 39}, {23, 40}}, "flag32ndUp", {{24, 48}, {
               23, 41}}, "flag64thUp", {{14, 48}, {24, 40}}, "flag128thUp", {{
               11, 50}, {24, 40}}, "flag8thDown", {{22, 45}, {20, 45}}, 
               "flag8thDownSmall", {{25, 41}, {25, 40}}, "flag16thDown", {{20,
                46}, {22, 42}}, "flag32ndDown", {{24, 48}, {23, 41}}, 
               "flag64thDown", {{16, 50}, {23, 41}}, "flag128thDown", {{12, 
               54}, {24, 40}}, "accidentalFlat", {{22, 43}, {25, 40}}, 
               "accidentalFlatSmall", {{26, 40}, {28, 38}}, 
               "accidentalNatural", {{20, 44}, {26, 38}}, 
               "accidentalNaturalSmall", {{24, 41}, {28, 37}}, 
               "accidentalSharp", {{20, 44}, {24, 41}}, 
               "accidentalSharpSmall", {{22, 43}, {26, 38}}, 
               "accidentalDoubleSharp", {{28, 38}, {25, 40}}, 
               "accidentalDoubleFlat", {{23, 42}, {18, 33}}, "keyFlat", {{22, 
               44}, {25, 40}}, "keyNatural", {{16, 48}, {26, 38}}, 
               "keySharp", {{22, 43}, {25, 40}}, "articAccentAbove", {{26, 
               38}, {18, 46}}, "articAccentBelow", {{26, 38}, {18, 46}}, 
               "articStaccatoAbove", {{29, 36}, {29, 37}}, 
               "articStaccatoBelow", {{29, 36}, {29, 37}}, 
               "articTenutoAbove", {{30, 35}, {22, 42}}, 
               "articTenutoBelow", {{30, 35}, {22, 42}}, 
               "articStaccatissimoAbove", {{18, 37}, {28, 38}}, 
               "articStaccatissimoBelow", {{21, 41}, {28, 38}}, 
               "articMarcatoAbove", {{28, 36}, {26, 40}}, 
               "articMarcatoBelow", {{28, 36}, {26, 40}}, "fermataAbove", {{
               27, 40}, {18, 47}}, "fermataBelow", {{27, 40}, {18, 47}}, 
               "caesura", {{27, 39}, {27, 38}}, "restMaxima", {{1, 64}, {1, 
               64}}, "restLonga", {{22, 42}, {23, 43}}, "restDoubleWhole", {{
               28, 37}, {28, 37}}, "restWhole", {{29, 36}, {22, 43}}, 
               "restHalf", {{29, 35}, {22, 43}}, "restQuarter", {{20, 44}, {
               24, 40}}, "rest8th", {{25, 40}, {25, 42}}, "rest16th", {{21, 
               43}, {23, 42}}, "rest32nd", {{20, 45}, {23, 42}}, 
               "rest64th", {{15, 50}, {20, 45}}, "rest128th", {{12, 53}, {20, 
               45}}, "restHBar", {{1, 64}, {1, 64}}, "dynamicPiano", {{25, 
               40}, {20, 46}}, "dynamicMezzo", {{25, 40}, {23, 42}}, 
               "dynamicForte", {{22, 43}, {18, 47}}, "dynamicPPPPP", {{24, 
               40}, {1, 64}}, "dynamicPPPP", {{25, 40}, {1, 64}}, 
               "dynamicPPP", {{24, 41}, {13, 53}}, "dynamicPP", {{25, 40}, {
               11, 55}}, "dynamicMP", {{24, 40}, {10, 55}}, "dynamicMF", {{23,
                43}, {11, 54}}, "dynamicFF", {{22, 44}, {11, 54}}, 
               "dynamicFFF", {{23, 43}, {5, 61}}, "dynamicFFFF", {{22, 43}, {
               1, 64}}, "dynamicFFFFF", {{21, 42}, {1, 64}}, 
               "dynamicFortePiano", {{23, 43}, {12, 52}}, 
               "dynamicSforzando1", {{22, 42}, {16, 50}}, 
               "dynamicSforzato", {{20, 41}, {13, 51}}, 
               "dynamicRinforzando2", {{22, 44}, {11, 54}}, 
               "graceNoteAcciaccaturaStemUp", {{26, 40}, {26, 40}}, 
               "graceNoteAppoggiaturaStemUp", {{23, 37}, {25, 38}}, 
               "graceNoteAcciaccaturaStemDown", {{22, 38}, {22, 42}}, 
               "graceNoteAppoggiaturaStemDown", {{26, 51}, {19, 40}}, 
               "ornamentTrill", {{23, 41}, {16, 49}}, "ornamentTurn", {{26, 
               38}, {15, 50}}, "ornamentTurnInverted", {{26, 39}, {15, 50}}, 
               "ornamentMordent", {{26, 38}, {19, 46}}, "stringsDownBow", {{
               26, 38}, {22, 43}}, "stringsUpBow", {{24, 40}, {26, 39}}, 
               "arpeggiato", {{14, 50}, {28, 38}}, "keyboardPedalPed", {{25, 
               40}, {10, 55}}, "keyboardPedalUp", {{24, 41}, {1, 23}}, 
               "tuplet3", {{26, 39}, {26, 40}}, "tuplet6", {{25, 39}, {25, 
               42}}, "fingering0", {{26, 39}, {26, 39}}, "fingering1", {{26, 
               39}, {26, 39}}, "fingering2", {{26, 39}, {26, 39}}, 
               "fingering3", {{26, 39}, {26, 39}}, "fingering4", {{26, 39}, {
               26, 39}}, "fingering5", {{26, 39}, {26, 39}}],
              SelectWithContents->True,
              Selectable->False]}], "\[IndentingNewLine]", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"ImageResize", "[", 
                 RowBox[{
                  RowBox[{"ImageTake", "[", 
                   RowBox[{
                    RowBox[{"ImageResize", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "256"}], "}"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"4", "rowspan"}], "+", "1"}], ",", 
                    RowBox[{"4", "colspan"}]}], "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"64", ",", "64"}], "}"}]}], "]"}], "\[Rule]", 
                RowBox[{"FileNameTake", "[", "symbolPath", "]"}]}], "&"}], "/@", 
              RowBox[{"Flatten", "[", 
               RowBox[{
                RowBox[{"ImagePartition", "[", 
                 RowBox[{
                  RowBox[{"Import", "[", "#", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"120", ",", "220"}], "}"}]}], "]"}], ",", "1"}], 
               "]"}]}], "&"}], ")"}], "\[IndentingNewLine]", "/@", 
           RowBox[{"RandomSample", "[", 
            RowBox[{
             RowBox[{"FileNames", "[", 
              RowBox[{"All", ",", "symbolPath"}], "]"}], ",", 
             RowBox[{"min", "[", 
              RowBox[{"nFiles", ",", 
               RowBox[{"Length", "@", 
                RowBox[{"FileNames", "[", 
                 RowBox[{"All", ",", "symbolPath"}], "]"}]}]}], "]"}]}], 
            "]"}]}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
       ")"}]}], ")"}], "/@", 
    RowBox[{"Select", "[", 
     RowBox[{
      RowBox[{"Take", "[", 
       RowBox[{
        RowBox[{"FileNames", "[", 
         RowBox[{"All", ",", "inputPath"}], "]"}], ",", "nSymbols"}], "]"}], 
      ",", "DirectoryQ"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771636481278582*^9, 3.771636482362092*^9}, {
   3.7716664956424*^9, 3.7716665157127857`*^9}, {3.771666601650639*^9, 
   3.771666606191237*^9}, {3.771666730840252*^9, 3.771666733820919*^9}, {
   3.7716692227140293`*^9, 3.771669223745647*^9}, {3.771669264882019*^9, 
   3.771669271968646*^9}, {3.7716693514641113`*^9, 3.771669366453145*^9}, {
   3.771669505849519*^9, 3.771669512136539*^9}, {3.771669676265891*^9, 
   3.771669679136396*^9}, {3.771670219197372*^9, 3.771670280054172*^9}, {
   3.771670345412813*^9, 3.771670346983094*^9}, {3.771670382299198*^9, 
   3.7716704137167273`*^9}, {3.7716708091178102`*^9, 
   3.7716709374961042`*^9}, {3.77167102685075*^9, 3.77167102766978*^9}, {
   3.771671694911289*^9, 3.771671695805835*^9}, {3.771671767835688*^9, 
   3.7716717719545183`*^9}, {3.7716718725086308`*^9, 3.771671944081188*^9}, {
   3.771672058813923*^9, 3.771672064568368*^9}, {3.771672111985189*^9, 
   3.771672129384994*^9}, {3.7716721976110697`*^9, 3.771672208423483*^9}, {
   3.771672238642941*^9, 3.771672247232479*^9}, 3.771672285015546*^9, 
   3.771692839712221*^9, {3.7716951210680656`*^9, 3.771695144396368*^9}, 
   3.771695188369714*^9, {3.771695316797552*^9, 3.771695328576791*^9}, {
   3.771700035707041*^9, 3.771700055626048*^9}, {3.7717000885642633`*^9, 
   3.771700089726746*^9}, {3.771700136954986*^9, 3.771700235027911*^9}, {
   3.771700268136457*^9, 3.771700293995489*^9}, {3.771721697871216*^9, 
   3.771721698704249*^9}, {3.771750658007352*^9, 3.77175067111174*^9}, {
   3.771750807816744*^9, 3.771750820636077*^9}, {3.77175215174769*^9, 
   3.77175216821347*^9}, {3.771752473074778*^9, 3.771752484356395*^9}, {
   3.771755005764256*^9, 3.771755015699314*^9}, {3.771756469508638*^9, 
   3.771756530993495*^9}, {3.771756936872175*^9, 3.771756962308467*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"a0a7d66f-2781-4655-b3de-18e08cf328bc"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Getting Some Example Sheet Music", "Chapter",
 CellChangeTimes->{{3.7716314691627607`*^9, 
  3.7716314760372467`*^9}},ExpressionUUID->"98ee5f3d-6901-421c-a313-\
fe5c510ecef6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"exampleSheetMusic", "=", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzs3XecFPXhP/4r9KpIE2L/oAYMFkRRFPNR7CiiIgE9Mfkolo9iD2CNIgEL
EcWG32+KmqKImiCWWIgGFQtRUSzBoBIVKUIElH7nb3S+v8lm727Z2zZXns8/
fMjclNfMzu7NvV+7szv85PzjR5QUFRVd3Cz4z/E/HvXfF1304zEnbBH8Y/DI
i88+c+QZpx858pIzzjzjoj4/KQ0mftWmqGhyi6Kib///GwAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgIyM
GTNmcIJ58+bFnQgAAAAAAAAAGooZM2YU/aeZM2fGHQoAAAAAAAAAGoRVq1Z9
73vfU9wDAAAAAAAAQCzOPffcokoU9wAAAAAAAABQAK+++mppaaniHgAAAAAA
AAAKb8OGDT179gyb+pKSEsU9AAAAAAAAABTS+PHjw5q+c+fOxxxzjOIeAAAA
AAAAAArmo48+atmyZVjTP/jgg2VlZYp7AAAAAAAAACiYQw89NOzojzzyyOCf
insAAAAAAAAAKJh77703LOhbtGjx4YcffqO4BwAAAAAAAIBC+eKLLzp27BgW
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
O3duYil/zTXXhNP/z//5PyUlJVUW9w888EC8mau0cePG0tLSysX9LrvsEiV/
8cUXY0wIANRyy5cv/+ijj+JOAQAAAABQV2Vcka9atapnz57hggceeGDSTeA3
bNhw3HHHhT/dZpttFi1aVJhUhbRy5crEUv6OO+6IfnTjjTdWWdyPHTs2xsDV
WbhwYZQwsbjv3LlzNP3999+PMSEAUMvtvffewQVDcPEwaNCgm2666YUXXli7
dm3coQAAAAAAaq+hQ4cOTtC8efOonD3hhBMSf7RixYrUq1q4cOEOO+wQLvv9
73//d7/73YIFC4KJDz/8cHSX9Y4dO86dO7eQqQppyy23jHLefffd0fTy8vID
DzywcnE/YsSIGNNW529/+1uVxX2LFi2i6Z9//nmMCQGAWm777bcPLhiKi4uj
i4cmTZrst99+F1544YMPPljl3ZkAAAAAABqyJk2aVPlh8MrSGWJduXJlWVlZ
4iBtoqOPPnrx4sWFT1Uwu+++exTs9ttvT/zRyy+/XDn8sGHD4oqawnPPPRcl
fOedd8KJGzZsiCYGj++6deviDQkA1GZhcZ/C1ltvPWDAgAkTJsyaNct1BQAA
AADAtGnTpqZnzZo1aa7zww8/HDt27MCBA3v37r3nnnsec8wxl112WVQBx5Wq
AIJdjoajJ06cmPTTfv36JQ1ZH3vssbHkTG3GjBlRwrfffjuc+MUXX0QTO3fu
HG9CAKCW22xxn/g+z+bNm/ft23fkyJHBpd3SpUvjzg4AAAAAQN12wQUXREPQ
48ePT/rp6NGjk4asDz744FhypvbAAw9ECd98881w4vz586OJ++23X7wJAYBa
brPFfQpbb7314MGDJ02aNGfOnPLy8rh3BeKxatWqPn36DBo06O677/7000/j
jgMAAAAAdcktt9wSjTmPHj066adXXXVV0rj0PvvsE0vO1H75y19GCV9//fVw
4vPPPx9NPOWUU4Ip69evnzZt2umnn963b98HH3ww1sgAObN69ephw4Ydeuih
jz/+eNxZoA7r2rVrxsV9opYtWwZXGqNGjZo+ffry5cvj3i0onLlz50ZPhOLi
4j322OOyyy574YUXNm3aFHc0AAAAAKjtpk+fHg2vjRgxIumn5557btJYdK9e
vWLJmdqkSZOihHPnzg0n3n///dHE66677rbbbttmm22iKWVlZfFmBsiVZ599
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
HnkkfGk6+uij484CdVhui/sUgiuKIUOG3HzzzS+99NLy5ctXJDyLjzrqqJzs
y7Jly4KV33HHHcOHD99ll102+wH8hQsX5mS7Offxxx9/yIcfxv04pGvWrFnh
GbXPPvsUbKN///vfg1N94MCB0fdkVTZu3LiC5QEAAIA6rby8PO6+FGK2adOm
xE9zAwAAAAAAABTSNttss2LFiriLU4jTunXrttpqq7ifiwAAAAAAAEADVVxc
/Oc//znu4hRitmTJkmeeeebpODz88MONGzeu7hl6+OGHx5KqOrfffvuMGTMS
pwwYMCDIWVJS8tRTT0UTb7311ur2aJdddtnsVjp37hzMedBBB0VTgo0mruRP
f/pTDneqThs0aFB4TJo0adK3b99f/epXcSeCBuf6668Pn4bBczDuLFWYOHFi
4utn8Esn7kTE7LzzzovOh3bt2sUd5986dOgQptpmm202e2/5PCnwAWnTpk24
3ccff7yQ203TnnvuGcujUAt16tQp7kcjLVOmTAkD9+jRI+4s3+rTp0+Y56ab
boo7S1219dZbR+fhiBEj4o5DzJL+KB4/fnzciYjZ5MmTE0+JP/zhD3EnImYX
X3xxdD60atUq7jjE7/jjj49OiR/84Adxx4Gc+d///d/o3G7fvn3ccSA3gmu5
xEu7V155Je7WFBquW265JcU44cyZM+MOuBlnnXVWkHOLLbZInBi8zlS3R9ts
s03qFX755ZfhcP2RRx4ZTVy8eHHiSjZt2pSXnamDzj///MQj07hx4+CP97hD
QcMSveIdd9xxcWepwnPPPZf4KrF8+fK4ExGz2267LToftt5667jj/Nv2228f
plq2bNmqVatmzZo1YcKEAQMGtG3bNgqc70K/c+fOhdzl6I5P69atK+R203TI
IYfk9WjXIdttt13cj0Za5s6dGwbef//9487yrfD9vYG//OUvcWepq3bcccfo
PLzxxhvjjkPMvv7668SXpieffDLuRMTslVdeSTwlPv3007gTEbNf/vKX0fmQ
NExHw3TBBRdEp8SBBx4YdxzImcTPDHbt2jXuOJAbwbVc4qWd4h5itMcee1Q3
SBj83qn9DfWPf/zjIOr3vve9aMqTTz4Zjb1X1rp169QrjIYc+/fvH02cP39+
tIZWrVrla2fqoKTiPnTWWWeVl5fHHQ0aCsU9dUudKO4TpwfXQvPmzZsyZUpZ
WdkOO+xQ3QVGTijuEynuI4r7zCjus6e4J5HiniSKe5Io7kmiuKe+UtxTLynu
oZZ4/fXXUwwSjho1Ku6Am3fSSSdFvyKD3Tn88MNTj3wWFxenXmF0A8DE4v61
116L1rDtttvmd5fqlCqL+0BZWVntf9cH1A+Ke+qWOlfcJ/nss8+mTp06cuTI
vn37Jn7ZUE4+jK+4T7TPPvtkf0jrh44dO8b9aKRFcV//KO5JpLgnieKeJIp7
kijuqa8U99RLinuoJcL7zFfnrbfeijvg5h155JFF333Hfa9evdIcM09dKEff
zplY3D/77LPR4rvvvnv+d6vOqK64D5x++ulxp4MGQXFP3VLXi/tEq1evju6o
v8UWW0T7lXGJr7hPFMWjcePGcT8aaVHc1z+KexIp7kmiuCeJ4p4kinvqK8U9
9ZLiHmqD1atXt2nTproRwp49e8YdcPPKy8u32Wab9Ic9Q+vXr0+xziuuuCKc
7dBDD40mPvzww9HiP/zhD/O/Z3VGiuI+8POf/zzugFD/Ke6pW+pTcZ8o8Y76
3bt3r+nFSUhxn6hdu3aZHcb6p1GjRnE/GmlR3Nc/insSKe5JorgnieKeJIp7
6ivFPfWS4h5qgzvuuCPFCOH1118fd8DNeP/994899tg0BzwTpR6dPv3008PZ
Eov73/zmN9HigwYNyv/O1Rmpi/vi4uJ77rkn7oxQzynuqVvqa3GfZNGiRdOn
Tx81alSN7qivuE+kuI8o7jOjuM+e4p5EinuSKO5JorgnieKe+kpxT72kuIfa
YPfdd08xQvjmm2/GHbBan3322RlnnNGoUaM0RzuTbNiwIcXKhwwZEs52yCGH
RBNvueWWaPGf/OQn+d/FOiN1cR9o0qTJzJkz444J9ZninrqlgRT3ib766qvg
V+G111575JFHtm3bNtr9yiW+4j6R4j6iuM+M4j57insSKe5JorgnieKeJIp7
6ivFPfWS4h5i99JLL6UeIfzb3/4Wd8YqrF279uc//3mrVq3SGeSsTnl5eYpN
HH300eFsBx98cDRx7Nix0eJXXnll/ne0zthscR/o0KGDP+EhfxT31C0NsLhP
FFyEvPXWW3feeWdZWVliIxZS3CeKjk/r1q23jFuLFi3CMM2aNSvYRrfYYotw
o8Glb9yPRloU9/WP4p5EinuSKO5JorgnieKe+kpxT72kuIfYnXrqqUUpPf/8
83FnTDZ//vyePXumjr1Z7dq1S72Vgw46KJwz+J9o4sUXXxytIfhLJL/7Waek
U9wH+vXrt3HjxrjDQv2kuKduaeDFfZJFixZNmzbthBNOCDf9X//1XwXb9De1
vrg/5JBDwngvv/xy3Fn+/Q1Tl156acE2GpyK4UaDk7NgG82G4r7+UdyTSHFP
EsU9SRT3JFHcU18p7qmXFPcQrxUrVkSfG6rOY489FnfMZNH4bTbGjx+feiu9
evUK5zzggAOiiSeffHK0hnDor6KiYvbs2cGv6bFjxzbkSjrN4j5w+eWXxx2W
+D3zzDMTJkx4/PHH4w5SryjuqVsU95UFr43hpgcOHFjI7Sru06e4T4fivkaC
x/cXv/jFxIkTV61aFXeWainuSaS4J4niniSKe5Io7qmvFPfUS4p7iNfEiRMr
1arJ/vCHP8QdM1lUqWemVatW995772a3sssuu1S+pDz44IOj9SxatOjXv/51
NFvgrbfeyud+12rpF/clJSVPPPFE3HmJWVgS1ZVb/tYVinvqFsV9ZYr7Kinu
FfdZquXF/bhx48J4U6ZMiTtLtRT3JFLck0RxTxLFPUkU99RXinvqJcU9xKii
omLnnXcu2py77ror7qTJdtppp83Grk737t3ffvvtdLYS/LYNF0n8jvtdd901
nFhaWlr56D333HN52+naLv3ivui7L7tfsmRJ3JGJU3ivj5KSkriD1CuKe+oW
xX1livsqKe4V91mq5cX9FVdcEca7+eab485SLcU9iRT3JFHck0RxTxLFPfWV
4p56SXEPMYoqntQmTJgQd9JkXbp0SSd5ksaNG1922WVr165Ncytt27YNF4wq
sIqKimhilWbNmpW3na7talTcF9XWYpGCUdzng+KeukVxX5nivkqKe8V9lhT3
2VPck0hxTxLFPUkU9yRR3FNfKe6plxT3EKMTTjihKA1jxoyJO2myDIr7PfbY
Y86cOTXaSmlpabjsT37yk+Cff//734cMGZJ6K2+++WZ+9rgOqGlxH7j//vvj
Tk1sFPf5oLinblHcV6a4r5LiXnGfJcV99hT3JFLck0RxTxLFPUkU99RXinvq
JcU9xOXzzz9v3LhxURrOPvvsuMMmi25in6Zg/k2bNtVoE2vWrIkW79Gjx267
7ZbOhj788MM87XLtl0Fx36lTpxUrVsQdnHgo7vNBcU/dorivTHFfJcW94j5L
ivvsKe5JpLgnieKeJIp7kijuqa8U99RLinuIy9ixY4vSM2zYsLjDJkscOErH
HnvsUdNNLFmypEabCH3xxRf52N86IYPiPnDOOefEHZx4KO7zQXFP3aK4r0xx
X6W99947jFdWVjYqbocddlgYZsSIEQU7Aor7LCnus6e4J5HiniSKe5Io7kmi
uKe+UtxTLynuIRbl5eXbbbddUfW6d+8e/f9RRx0Vd95kPXr0SBG+Y8eODzzw
wJIlSxo1ahROOeigg2q0/k2bNl1yySUpNlGlli1bVlRU5GeP64DMivvGjRv7
o75hUtzng+KeukVxX5nivkrt2rXL4Boj3/bdd9+CHQHFfZYU99lT3JNIcU8S
xT1JFPckUdxTXynuqZcU9xCLxx9/PMU45H777XfNNddE/+zbt2/ceZMdeuih
KfK//vrr4Wxt2rQJp9Sow3r11Vf79OmTYv3V2WuvvfKzu3VDZsV94LLLLos7
OzFQ3OeD4p66RXFfmeK+SrWzuN9nn30KdgQU91lS3GdPcU8ixT1JFPckUdyT
RHFPfaW4p15S3EMsBg4cmGIcMrjAvvvuu6N/9ujRI+68yc4555zEwFtuueW+
++4b/XPx4sXhbMFfB+GU4cOHp7PaRYsWnXzyycXFxSkOTgpDhw7N4z7XehkX
9+3bt1+/fn3c8Sk0xX0+KO6pWxT3lSnuq6S4V9xnSXGfPcU9iRT3JFHck0Rx
TxLFPfWV4p56SXEPSZYvXz4nz5544onS0tLqBiFbtWr117/+9eabb46mdOzY
Md+Ramry5MlhsEGDBk2aNGn27Nnjx4+PAs+aNSucrXXr1uGU448/frPrvOGG
G9q2bVvdYUlHcBWa5/2u1YYOHRoehwze+XDLLbfEHZ9Ca9asWdF3xX3cQeqV
O+64I3xO/fCHP4w7SxUS3xIWmDlzZtyJiNlPf/rT6Hxo37593HH+rUuXLmGq
Z555psCbjp7FBx10UCG3G10CvfTSS4XcbpqieyjVKj169CjYEYje0RGcnAXb
aDb+8Ic/hIF79uwZd5ZvHXjggWGeKVOmxJ2lCv/zP/8TxrvooovizlKtrl27
Rif/+eefH3ccYvbCCy8kvh4Gf57HnYiY3XPPPYmnxOOPPx53ImJ21VVXRedD
69at445D/IYNGxadEnvuuWfccSBnLr300ujcroUdCmQm6X7dinsauHXr1gWv
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
ZjglenkpLi5eu3ZtimVTFPf9+vVLnPOaa64JpxdyqLau2GxxH7jxxhtTnIeB
G264IU/xFPeRk046Ke6k31Lc54PivpCC3yxLly5dsGDBnDlz3n333U8++WT9
+vVxh6pjFPeVKe6rpLhX3GdJcZ89xT2JFPckUdyTRHFPEsV9A6S4h7pLcQ+F
seuuuxZVo1u3buXl5ZUXmT9/fjRPz549C5+5Rjp37hxGvfDCC8MpixcvDqds
tdVWqZdNKu7322+/8ePHh/8/aNCgxDl/+tOfhtMvu+yy4J/r1q278847jzzy
yJNPPjlP+1WHpFPcB/7nf/6nulMxMHjw4DzFU9wnmjJlStxhFfd5objPn/fe
e2/y5MkjRozo169f8BunypvYNGrUqEePHqeeeurDDz+8Zs2auCPXAbEU90uX
Lv3jH/84YcKEUd+57rrrbrnlluC5E0yP5lHc1zaKe8V9lhT32VPck0hxTxLF
PUkU9yRR3DdAinuouxT3UAAvv/xy5X4hMnny5CqXWr16dTRPhw4dCpy5poI/
BMKoY8aMCaf861//Cqf06NEj9bIXX3xxMFtpaemQIUNee+21YMqaNWvCZU89
9dTEOc8555xw+lVXXRVc12233XbRIfroo4/ys2d1RprF/dq1a/fee+/qzsbg
kOYpnuI+UbNmzV5//fV40yru80Fxn3MvvPDCWWedlfhqn6Ytt9xy/PjxX3/9
ddx7UKsVsrhft27dvffee8ABBwQvO9U9ar179540aVJwDaC4r20U94r7LCnu
s6e4J5HiniSKe5Io7kmiuG+AFPex27BhQ/DUGzJkyMyZM+POUq+8//77ZWVl
p5122pIlS+LOki+KeyiAqG6urE2bNim+8LpVq1bhbCUlJcFLfSEz11SzZs3C
qGPHjg2nVFRUNGnSpCiN+/zPmTPnzjvvXLhwYTQl2Nkqr9lOPfXUcHrTpk2T
juRDDz2U852qW9Is7gP/+Mc/olOrssWLF+cjnuI+yc4777x69eoY0yru80Fx
nyvLli0bN25ct27d0n9OVWmXXXaZP39+3HtTexWmuA+uB+67776oi9+sHXbY
IbqNj+K+llDcK+6zpLjPnuKeRIp7kijuSaK4J4nivgFS3MfupZdeCoMFfw3F
naVeGT16dHhg77777riz5IviHvJt/fr17du3r2Jg+jvnn39+imUTx2c++eST
gmWuqYqKiuLi4srjXeEoffBaWtMVRsV90rLRJUdlv/jFL3KwJ3VZ+sV9YPLk
ydUdyaeeeiof8RT3lY0YMSLGtIr7fFDcZ+/jjz8OXiVatmxZo2dTCu3atfvg
gw/i3q1aqgDF/UcffXTwwQfX9FGLLioU97WE4l5xnyXFffYU9yRS3JNEcU8S
xT1JFPcNkOI+dn/961/DYEceeWTcWeqVSy+9NDywd9xxR9xZ8kVxD/k2bdq0
Koakv1NcXPz++++nWHa//faLZn711VcLlrmm1q5dG+W85557ounDhw8Ppjz7
7LM1XWF0q/xx48ZFEx977LEOHTpUdzCvuuqq3OxMnVWj4r6ioiK4ZqjySKaz
eAYU91UKzuq40iru80Fxn41PPvnkjDPOaNSoUeVnSjBxn332Cf7qHDBgwO67
757iXutV2muvvWr5XWviku/i/vnnn+/YsWNNXxgTKe5rCcW94j5LivvsKe5J
pLgnieKeJIp7kijuGyDFfewU93miuAeyd+yxx1YzGl101FFHpV524MCB0cx/
+tOfChM4A4njBjNmzIimv/HGGxdeeGEGK4xGR6+//vrgn/PmzYuG+6oTXILm
bH/qphoV94EFCxaE32WQ5IorrshHPMV9lYJLymCpWNIq7vNBcZ+ZNWvWXHbZ
Zc2bN6/8HGnZsuV1112XFHXRokXBL5cqK/7qTJ06Na69q83yWtxPmjSpRo9R
lRT3tYTiXnGfJcV99hT3JFLck0RxTxLFPUkU9w2Q4j52ivs8UdwDWVq6dGnj
xo2rGY0uevzxx1MvPmLEiGjmu+66qzCZM1BRURF9/jEnLyMff/xxuLZ+/foF
lxnpfLjS1V1Ni/vAueeeW/lInnrqqfmIp7ivTvAoxJJWcZ8PivsMzJw5c6ed
dqry2bHddtuluC/NtGnT0u+FN/tOuYYpT8V9cFVw1llnZfB6WJnivpZQ3Cvu
s6S4z57inkSKe5Io7kmiuCeJ4r4BUtzHTnGfJ4p7IEuTJk2qZij62z6ivLw8
9eLRIFJRrb8VfOvWrcOc//jHP7JfW1K7lI4zzzwz++3WaRkU90uXLo0euEie
qgrFfXVKS0tff/31wqdV3OeD4r5GNm3aFPxqq+6tWd26dfvkk09Sr+Giiy5K
84m2zTbbFGan6pY8FfcXX3xxBi+GVVLc1xKKe8V9lhT32VPck0hxTxLFPUkU
9yRR3DdAivvYKe7zRHEPZGmvvfaqZii66Nprr93s4pMnT47mHz58eJob/fzz
z2fMmHHDDTdceOGFI0aM+OlPf3r99dc//vjjK1asyGpnUgp+M4Y5s7/v94IF
C4JryOqOW3WCPc3JjtRdGRT3gSuvvDLpSB522GH5iKe4T+Gkk04qfFrFfT4o
7tO3Zs2aFF8l07Rp03Te0PLFF19U+ZUflZWWlm7atKkA+1W35KO4z2FrH1i1
alVOUqVPcV8lxb3iPkuK++wp7kmkuCeJ4p4kinuSKO4bIMV97BT3eaK4B7Lx
9ttvVzMO/W2DkM5fUlOnTo0W6devX+qZP/zww6uvvnqPPfaobqPFxcWHHnro
H//4x4qKihzt4r8dfPDBwSY6dOiQzUoWL1587rnnptnCJPGJ+8yK+yVLliQd
8IMOOigf8RT3KTRq1GjhwoUFTqu4zwfFfZrWrFkT/FJL8aS4/vrr01xV8OdP
ms+yfPzuq+tyXtyPHz++pi+AqRW+xVbcV0lxr7jPkuI+e4p7EinuSaK4J4ni
niSK+wZIcR87xX2eKO6BbESvIZUdc8wx6awhsWRJcZvf4Jl77LHHFhcXV7e5
JP379//4449zt6PfGj16dFEWH9besGHDpEmT2rRpk+YuVHbOOefkdo/qnMyK
+8DgwYMTj+Rm3yKSmQZV3Kf/ZIxceeWVBU6ruM8HxX06ysvLg+OT4unQpUuX
tWvXprm2yrcNqdIuu+yS152qo3Jb3D/77LOlpaU1ffVLIYd370+f4r5KinvF
fZYU99lT3JNIcU8SxT1JFPckUdw3QIr72Cnu80RxDw3Q3Llz77777ilZu+uu
u4Jr42qGor+9FElnJddcc020SElJye233540wy9+8Yv9998/g5awVatWV155
Zfa7Gbn++usPPfTQK664IoNlL7/88o4dO9Z0F5IcfvjhOdyduigaVD/11FNr
tOAZZ5yReCR33nnnfMQLUoXrP/jgg/Ox/tpg0qRJ4T42bdq0pidwp06dCpw2
vNNC8OpR4O3WdcFr+0033TRu3LjgRe+WW25J+mn0t/Aee+wRS7zUku5hHvwG
iSVG0puFKgv+okl/bcOHD0/nKdavX7/87VHdNXTo0OgQtW3bNptVTZ48Oaqe
c2XvvffO1Z4mSv0svvDCC8Ot77777vnYenVatmwZbrfyxV5tsOuuu4bxRo8e
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
dtW66N27t2JbGMcQMEMhISHy/cHJyYl2Obojn+JSpUpx/BQXK1asXbt2In+K
yQmiT58+5AzevXv3sLCwgQMHjh8/XnECea7N+Ls4yHi1f//+pLZu3bqRA8WA
AQMYI9hy5crJyuvbt69uqyCtLlKkCMdtVLp0adJXfLRMCyNHjiRtJ+slYy3S
zMGDB0+cOFH+X0eNGiWrjbRCuBqGDx/u6enJsZdIJS1btqSywygbN26cbBci
HSjbhcaMGaM4QcWKFWVlizDC0YH8EknniywRKL5VrXnz5rTLAcrIUVrxgEA+
fbQrAsr69eunuEuMGDGCdkVAmfwODGFra0u7HKBPfs+QKFOmDO1y/g9ydSYr
rE6dOrRrMSmVK1c2h3FCcHCwfN/W4X6soMhVsKwwLy8v2rWYlAYNGsg6llwR
065FKGQspzi0Q3APZk7dD+cBAAAAAAAAAAAAAAAAAMQRFxdHOzgFoCwqKipY
e/LvsCmqWLEil3nLlCnD8qm0srJq3LgxmUzxBzjlypXToUiWx0E3aNBAhwUK
xMfHR15Ys2bNZH+sUqWK7C++vr50yxNN8+bNyS4k+1m0Rk5OTvKfDJMO1Lhw
f39/+bzu7u4iNEe+WcmeLMLqqAgMDJS10dbWVtt5a9eurbhBGzZsKESFiiQS
SaHvv7gXekXG5YcffiDbghxwKlWq5OXl5e3tXbNmzUaNGtGuix+KH3zFAyyY
Lfm5VbcDl2EykE8xGbyRcRc5xnI5iXt4eMhP9y1atBChvKZNm5LTMcdvq7q6
usp/LF+vXj391x4QEODn50cGz2ScQ7YR+QcZ3ZE/6r9krZC2KD7PigXpKPk4
3N7eXpzyyDZi7Mk1atQgI/agoCBxCmBHziBly5bluAu5fCf7NzkT0a5dhQoV
KsjKI3sj7VrUUnzfBNkfaJcDlJFLRcVPGTlc0K4IKKtfv77iLkGGQ7QrAsoU
b6xZWVnRLgfoIyM3+S5RtGhR2uX8H9WrV5cVZsI3DKmQBwGmPU4w5Nsa8idd
FCtWjHYtJkX+SMCqVavSrkUoZCynOLQznNcIAhiXSZMmKd+kOn/+vMYZP3z4
YGdnp+42l6Wl5cGDB2VTLl68WP738PBwbSs8evSourUQnz590rrNglF85W52
drbsj3FxcbK/JCUl0S1PHPHx8fJzEEfydIDLO+7lt3rIXLdv3xahRXjHPbsX
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
8iI3wTAdPHhQOYtv1aqVuoFi165d2Tt29OjRIjcBAECjjRs3Kh6pVq5cSbsi
MB1v377V+K02FhYWFkOGDPn8+TPtdmjQokULndtI1K1b9/bt27QbAQAAAAAg
LO4/iCZq164dExNz8uTJpKSkJ0+eXLt2befOncOHD3dxcVE3S2hoqMqf6YHh
u3PnDssrj93c3Dj+oLJ79+4cd7CEhAShGwUAAMqkUinLqbzQ95uBY8aMOXfu
3OHDhxcsWODv7688Tb169W7cuEG7KYbl9OnT7Ce+YsWKrVq16vz587t37yY9
rPxDe0tLy0GDBqWnp9Nuiin4/Pmzr6+v8lZYvny5ulnevXvH/tOwDh06iNkE
w3Tx4kXlb5vY2Ng8evRI3Swav9Oyfv16MZsAAMDFyZMnFY9U48aNo10RmJSf
fvqJ/eSoTsWKFf/++2/a5XNy8OBB3dpob29PrkHy8vJotwAAAAAAQHBnz561
tLTUbeTMwsrKqlu3bpcuXaLdPtBRcnJyyZIlWTbx2rVrOS6KTMlxt3n48KGg
jQIAAHXCwsJ0PumXKFFi3bp1BQUFtBthcLKzs93c3HTu2Pr161++fJl2I0yE
VCrt0KGDcieT0Q77MyJUfk1FbujQoaI1wTC9evWKHAGUe2bAgAEsc2l8y+2R
I0dEawIAAEcXLlxQPFL16NGDdkVgUjIyMlgeeKiSi4tLdHS0cb1zcOLEiVq1
USKRkM8abhYBAAAAgFmZNm2aVsNmdpUqVZo+ffrLly9pNwtU+/LlS+fOnW1t
bXnc6EJzcnL6z3/+gxf7CuTp06dNmjSxsrKivZ21UKxYsYULF9LuOZN18eJF
Hx8fCwsL2ttZC2XLlt23bx/tnjNuSUlJdnZ22vZ88eLFZ82a9enTJ9rlG65l
y5bpsEv7+fnt3LkT34XQyuPHjxs1aqT/u1P1RAYtI0aMMKVfhO3Zs8fT05Nu
rxb6/sKI7du30+4MADBr169fVzwuBQQE0K4ITE1WVtbo0aOtra01nhZLlSq1
YMGCL1++0C5ZF+SErvJbfww2Njbh4eEPHjygXS8AAAAAAAVLly7VJ8m1sLDw
8/ObNGlSYmIi7aaABlOnTtV5Q9OFdwgKpFOnTrS3rY7OnTtHu/NMk/ILoI2C
vb3969evaXeecVu9ejX3Di9duvSSJUsyMzNpV23oCgoK2rdvz71jGzdufOjQ
IalUSrtw49OmTRvtjxxCWbFiBe3+4MenT5/I0ZV2d/4vGxubp0+f0u4SADBf
ly9fVjwolS9fnnZFYJqSk5OnTp1at25dxm06ch6sVavWlClTzp8/b+y/a/j6
9Su59GjdurWrqyvjdF+2bNnw8PA9e/Z8/vyZdpkAAAAAADQ9e/ZsxIgR3B/o
am1tTa4j/vOf/2zZsgVZiRHp27evPrdMKYqIiKDdeaapdu3atLetjlatWkW7
80xQfn6+cT2RQ1FCQgLt/jN6CxcuZH+Bjp2dXY8ePY4cOWJKPygWWlZWVqtW
rdj3Xnd39/Hjx9+6dYt2sUbMx8eH1yOKXkaOHEm7P/jx8OFD2n35fxw/fpx2
lwCA+WK8497BwYF2RWDiyKXZ8+fPHzx4cOfOnWfPnpnq8Pvdu3dPnjy5ceMG
+V/jeuw/AAAAAIAIyHXBxYsXV61aNWbMmF69eoWGhgYHB3fs2LFbt26DBg0a
NmxYdHT0jh07yIj627dvtIsFXZw9e5bLg9cMjZWVFSI5gaxdu5b25tWFi4sL
XskhkFGjRtHevLrw8fHBiYkXly5datu2rY2NjbxvbW1ta9euPXr06L1796an
p9Mu0ChJpdI1a9Yw3ltapEgRMsqaNWvWmTNnjP1nU4bgt99+E/3Ao5opDVrI
rtuyZUvaPfq/KlasiKd8AABFcXFxigclCwsLnL4BAAAAAAAAQE/Xrl2bPn36
JDUKFy6s8cbpsGHD1M2uLCQkhH1pEolk4MCBLEsg1V69epV2t5myEydOREZG
ct+mDOHh4TVq1GD/la5WrKys+vfvz7LGOXPmJCcn0+42kyWVSnfs2KHz/kD0
6tXLy8uLr/2h0Pd3Ro8cOZJljYsWLfr48SPtnjMpWVlZjx8/TkpKQsfyi/Tn
3bt3nz59SnqYdi0m6OjRo8qnM5bHHTg6OrIfzcj4RN28AQEBKmchgxYTe3XU
t2/fVq5cqdxSluN8rVq12Du2WbNmKmckY8K+ffuqnCU2Nvbdu3e0OwMAzNr8
+fMZRy08yhsAAAAAAAAAhJOWlqYpQPuvf//9l/syf/jhB/al4YHnxuvBgwfd
u3e3sLBQ3qzOzs6tW7ceOnTogAEDWrVq5eDgwGXXkvPy8srIyKDdPtBaQkJC
06ZNVW7TEiVKdOrUadiwYf369SPTWFlZabVLBAUF0W4cABglcp5Sd2BxdXVl
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
hw4d2rBhA+nqX375Zdu2badOnfr06RNfywcAAEVkePPPP//IhjcLFiyQDW9u
375t+GthD+5fvXq1fPlyMmSVDaK6du06fvx4MorIysrSrymmj5zo//rrLzLK
ImOtRYsWkXEX6benT58a/lrYg3sywCAD+O7du5P9ISQkpGfPnmSMd+bMmby8
PL1aYirIdcfRo0c3b968ZMmSxYsXb9q0KT4+/sWLF4a/FvbgnlyszZkzhxwB
yHZv1apV7969Z86ceeHCBXLJrF9TAIxednb22bNn4+LiyOmSHB7Xrl27f//+
a9euSaVSA18Le3D//v178pfw8HByqCcf/B9//HH06NF//vnnly9f9G4NJ2/e
vDl27NiWLVvIgY6c4GQHumfPnhn+WtiD+7t3786bN69bt26kV8kYrFevXtHR
0efPnzfAwyk5s1+8eHHfvn0rVqwgex35X/Jv8hd+z/hCrIU9uM/IyCADp2HD
hrVu3ZpshU6dOpF/b9u2jfc7b+p8+vTp1KlTZI3Lli2LjY3dsGHDoUOHyPjK
8NfCHtynpKSQzxEZIQQFBbVo0aJHjx6TJ08+ceIEv/fqAQAAwAD99ddf5OKi
RIkShVRxdHTs2LEjGXLrGX4JtxZ1wT252iL/yc3NTeUaraysyDBSuDFkVlYW
WXurVq0Yt2vkypQpM2TIkAsXLhjsWtQF92SkOmLECNKBKtdIOpxc9hrC9dHD
hw/Hjx9frVo1lXVKJJJGjRrNnz9fz31AuLWwBPdkgzLG9oqaNWt29epVfRpl
OMin2F+9rl27yqdMTk4ml+fW1tbKHVK4cOGoqCh94vWbN29GRERUrFhRZYeT
z0JgYCC5mPr8+TMfjQYAMHdfv35duXJlSEiIra2tygOvp6fn0KFDL126ZLBr
URfcf/z4kSxT3SCqZMmSv//+O7+phGkg46h58+Y1bNiQjKxUdp2Pj8+ECRMe
PXpksGtRF9yTAUxoaKjK1RFVqlTZv3+/Po0yaq9evZoxY0bdunUtLCxU9o+f
n19kZKSeYZCga1EX3CclJQUHB6vb7r6+vsePH9enUQBGKicnZ+PGje3bt3dw
cFD56SAnygEDBpw6dcpg16IuuCejDnIGUTfkKFq0aExMDI9fOGdIS0ubPXt2
/fr1LS0tVRZQs2bNyZMnk1OSwa5FXXD/8OHD1q1bq1wdUb169fj4eH0axZeC
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
2njjjRNm1YsTZUVO4j4qmPkkRB37a6+99qOPPsq8rdHnMDq9BOeNWivXSqgO
C5DBKrV8+fKePXsG37JSp6mPtrz55pvjQ1/q1KmTcLLo4kRZUVriPjNcMKrk
5JNPfumllzITtkTn/Pfee++iiy7KHckTvZ4wVn6zZ8+OziHxyg844ICvvvoq
d8u5c+f26NEjvuVGG22UcNnu4kRZkZO4jwpuuummtVbOenf11VdPnDgxczqN
ojzzzDNBZ6/WyjH8qcwJedVVV8WbEe3FI488UuqW0evBPl555ZXVKkpu4j77
ypFHHjls2LDMApGLFy+Oft2uueaaYMRjrdj6m5UU9Z87duwYr3mnnXaaNGlS
7pbRp6J3797x+9LrrLPO6NGjq0+UFTmJ+1dffTXzdNtaa60VnSKi65TMzaXo
2uHll1+OzjDBszzRcV51i8ACAMX05ptvxleCrlevXv5niL744otgsN/f/va3
ahJlRU7i/ogjjmjevHlmOqxSBwnMmjUreFa6Xbt2SQKV6/LLL49Xu/nmm+fv
Pj3wwAPx7Zs0aZJkyHFxoqzISdxHl5m1Vt6iLPX+dmTEiBHBCuP9+vVLEqiq
zJs3b6uttoo3IOrl5tl+yZIl++23X3z7ww8/vNypHooTZUVpifuoYPSP7t27
l/pA97Jly4477rh4kehbUMlV6qqbsWPHxndw2223zdxK7dSp05dffpm7/bRp
04K7sk2bNk2SUp89e3YwlOj666/Ps/2CBQt+9atfxbc/7bTTKr6fAGueP/7x
j/GzaPRTm3+c2z333BPfft111/3888+rSZQVOYn7TCeqZcuW0Q9Zqdvnzh5z
xRVXJAm0uop6SpluT9YBBxyQ/5Z78Bzl1ltvXe40vMWJkhEk7jMfiR122GHG
jBmlbh91PGr9r3//+99JAtVo0cHfe++943sd9Xvzd5uDTFzUH1u8eHF1iJIR
JO4z7/uvf/3rzMDyXJdccknwvr/wwgtJAkHN9de//jX+mY+uwkq9sssaNmxY
/OHThg0bJsl0FyfKipzEfeZb36RJk1deeaXU7V9//fXgsfEzzjgjSaD8li1b
1rlz53i1hx12WP6BQGeeeWZ8++23377cC+fiRMkI0s2ZA9uhQ4evv/661O0H
DBgQnE6Lv5hg1LuL51jXXnvt999/P8/20V+jbbLbR2WTPHdTnCgrchL3xx9/
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
mx122CE4LXfs2DHJ0qirOkowlVMe3bt3jxdM2KeNNqvIAa3hol5T9PMXpD6b
NWsW9bKivlbU44r6XUGKJPLb3/424cQIqzTKwIEDE34krrjiimyp6HudsFTU
sa/4ka3eSkpKoo5WfIBNrZWJ9eOOO+7CCy+86KKLog5zMINBpFevXkGeKJUo
/fv3T/gOxhdZ+OCDDxKWirqmFT+yKz3xxBNp/4LxP+6///5Kvqerh2effTa4
qxBdWB100EFnn3129NN8yimnBE9qR3bcccfPP/889Sjjx49P+P0NztvRdWXC
ggX9qMUtW7bs8ssvDwb2t2jRokePHhdccMHFF18c/ZYFY5NqrXzWIMnE6as6
SjAlTh7xEU0ff/xxwlKdO3eu2FEt1Pvvvx+MWIiOVadOnU4//fToUxedBPbZ
Z5/g6G266abvvPNO6lEWLFiQ8GBuuOGG8YLB0Jc8Pvzww4oc05Xuuuuuhg0b
xmtr0qTJkUceef7550e/7yeddNIvf/nLIFzUsLlz56Ye5aGHHkp4fKI3Llsq
6n4kLLXFFltU8JgCUDMFw+So/qK+cf73dPHixVFnOBiDWqr69ev//ve/r9ic
26siSnVO3K9YuQzib37zm6BXXKqWLVvecsstJSUl1SHK6pG4z3jqqady+8+l
2nvvveNPr6cbReI+V4qJ+xUrb+Y/8MADubfrSxVdoJW7RmrFRNdowVSrADVx
EpUkMk+uJenebLjhhrfffnvFOlFVHkXiftV5//33gymkytK2bdsnn3yymkSR
uK+k0aNH52bQStW+fftnn322mkSp/on7zp07J4xFcWyzzTaVfE9XG998882p
p54aPNZRqmbNml177bUFjdVZdVGqc+I+I7pMDhZeKUu7du2GDx9eTaKsNon7
FSuX2rn44ouDafpKtdZaa1144YW5M0GlEqWaJ+4jn3zyyWGHHRaMwSvVpptu
Gl06FfS0zqqLInEPQNX67rvv3qNGmTlzZpJ3NuqtDRky5Pjjj2/RokXwcx91
+bp06XL77bfnWaYqoaqN8sEHHyQ8CPFS06ZNS1iqYv3kwBdffDFw4MADDjgg
GJ8ZadWq1SmnnPLYY49V8hKsaqP8+OOPCY9PMN/+uHHjkpQaO3ZsJXe2IMuW
LXvuuef69OmTe0Vcp06dDh06XHHFFe9VNGW/iqJMmTIl4VsQn5p17ty5CUvl
zpZW/X366acJ9y4+z963336bsFSS5zSXLFkybNiws846KxjEXmvluh577bXX
tddeO2HChFV5GP7vTn7CPQLWBFFHqGIJ65oi6mnceOON+++/f4MGDYIT7y9+
8YvTTjvt8ccfTzgndnGiRF3HhO9d8OBewj5ttFkld7amiw7CgAEDdt1119zh
FlEfrHfv3qNGjUq45lFxosyePTvhRyJ+yfbzzz8nLJVwRdqa7s033+zXr99O
O+2Ue8N8u+22u+iii15++eWK3YdfRVGidzPhO/jNN99kS0UXawlLJV9brSzJ
LxwojuSTNq8hoivW22677ZBDDglWGKm1csr6E0444eGHH6787ZoqjBL1ExK+
18F5e+LEiQkLVv7XLfL222/3799/5513zv2B23bbbS+88MIXX3yx8oGqMEp0
nV6BL9FPP/2UsFR8ob3i+O677wYPHnz00Uevu+66wcFp2rRp9+7d77777oo9
LbWKokTvVMKDGawlEf1UJSxY+c78ipVfpeuuu65jx4716tULdnmzzTbr1avX
0KFDKzbOZxVFmTNnTsLjM23atGypqB+SsNSqvjcFABTfwoULM6nD6JqiSpLX
KUapVqKO2UcfffTeysxpQdOOVcMoNdGSJUtmzpw5bty4qAc7e/bsKrnyTSsK
6Vq8ePGMGTPGjh07adKkyl9WA1Cu77//PurevP/++6u0e1OcKFRe1L+KellR
XyvqcUX9rqj3VXOjkFxJScmsWbM+/PDD8ePHf/3118Fi9DUrCpDQf//7308+
+eS9996bOnVq5R95SDdK9ZH5gYtOdEX4GV3VUWqu+fPnZ7Lb0X+jf9foKNXK
t99+O2nSpLFjx86YMWPx4sU1OgoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABFMGXK
lKeeeuqWW24ZNGjQY4899vHHH6fdIgAAAAAAAABYJZYuXXrDDTesvfbatVb6
+eef063queee69SpU+3atWv9r1133fXRRx+tcNsAAAAAAAAAoBp69913d9pp
p3h+vMKJ+8pXVVJScuGFF2ZS9tF/DznkkKuuuupPf/pT9+7d69atm6nzpJNO
WrRoUcVaCAAAAAAAAADVx/z58/v06ZNNiFcmcV9VVV144YWZgk2bNn355Zfj
f/rggw823HDDzF+PO+645cuXF9rIVWHp0qX9+vU79NBDe/fuPXHixLSbs2rN
mzcv7SYAAAAAAAAArD6GDx++6aabZvLgRx99dLNmzSqcba+qqh566KFswWee
eSZ3g/fffz87NuD6668vqJGryKmnnpptc506dU4//fT58+en3ahV4u23327Z
sqW5DgAAAAAAAACqRO/evTO55o033vg///lP9MovfvGLimXbq6qqRYsWRTVk
SnXt2rWszc4888zMNk2aNPn222+Tt3NVmDhxYmZW/7itttrq7bffTrdhq0Kn
Tp2ivQumQQAAAAAAAACgYvbcc886deqcd955P/74Y+aVCifuq6qqgQMHZksN
Hz68rM0++OCD7GYXXnhh8nauCn//+99rlaZ+/fq33HJLum2rWt99911miEL0
NqXdFgAAAAAAAIDVQa9evcaMGRN/pcKJ+6qqascdd8wUadas2ZIlS/JsufXW
W2e23GijjZYtW5a8qVXugQceKDVxn3HJJZek2Laq9fTTT2d2qnfv3mm3BQAA
AAAAAGD1VOHEfZVU9dlnn2WLHHzwwfk37tmzZ3bj1157rTJNraQXX3wxT+I+
0rdv3xSbV4WiHcnsUY8ePdJuCwAAAAAAAMDqKd3E/Z133pkt0q9fv/wb33bb
bdmN+/fvX5mmVtInn3ySP3Ef+etf/5piC6vKoYcemtmdLl26pN0WAAAAAAAA
gNVTuon7s88+O1tk8ODB+TceMWJEduOjjjqqMk2tpPnz55ebuK9Xr96rr76a
YiOrRPv27TO7c8ABB6TdFgAAAAAAAIDVU7qJ+3322SdbZOTIkfk3HjduXHbj
tm3bVqaplde0adNyc/etWrWaNWtWuu2spOxuHnTQQWm3BQAAAAAAAGD1lG7i
vk2bNtkiY8eOzb/x7Nmzsxs3aNCgMk2tvG233bbcxH3kuOOOS7edlTFv3rzs
jhx66KFpNwcAAAAAAABg9ZRu4r558+bZIp988kn+jeN55MjixYsr09pKOuig
g5Ik7iOvvfZaiu2sjI8//ji7F127dk27OQAAAAAAAACrp3QT9w0aNMgWmTp1
av6NozrjCfHvvvuuMq2tpNNPPz1h4n7nnXdetmxZik2tsLfffju7F926dUu7
OQAAAAAAAACrpxQT9yUlJfEE94wZM8otUrt27ez206ZNq0xrK+naa69NmLiP
PPbYYyk2tcKef/757C4cffTRaTcHAAAAAAAAYPXkifuKefDBB5Mn7vfff/8U
m1phTz75ZHYXevTokXZzAAAAAAAAAFZP1rivmNGjRydP3NeuXfvTTz9NsbUV
889//jO7C8cff3zazQEAAAAAAABYPaWbuG/Tpk22yNixY/NvPHv27OzGDRo0
qExTK+/LL79MnriP/OEPf0i3wRVw++23Z9t/yimnpN0cAAAAAAAAgNVTuon7
Tp06ZYuMHDky/8bjxo3Lbrz11ltXpqmVV1JSUr9+/eSJ++jgLF++PN0253fJ
JZcMGjQo/sp1112Xbf8555yTVsMAAAAAAAAAVm/pJu7POuusbJHBgwfn33jE
iBHZjbt161aZplaJzTffPHniPjJp0qS0m1ym2bNn16lTp3Xr1vEX//jHP2Yb
37dv37TaBgAAAAAAALB6Szdxf8cdd2SLXHrppfk3js/cftlll1WmqVVi3333
LShxHzzPXq08+OCDmUbOnz8/++LZZ5+dbfyVV16ZYvMAAAAAAAAAVmPpJu4n
T56cLXLwwQfn37hnz57ZjV999dXKNLVKxNuTRNeuXdNucpn69OmTaeSUKVOy
L5544onZxt94440pNg8AAAAAAABgNZZu4j7Svn37TJHmzZsvXbo0z5a//OUv
M1u2bNmypKSkMk2tEgMGDCgocb/eeuul3eQydenSJdPITz75JPvi4Ycfnm38
XXfdlWLzAAAAAAAAAFZjqSfub7jhhmypkSNHlrXZhx9+mN2sT58+lWlnVbnn
nnsKStxHZs+enXarS7fDDjtkWvjRRx9lX9xnn32yLX/00UdTbB4AAAAAAADA
aiz1xP3ChQtbtWqVKdWtW7eyNjv33HMz2zRu3LiapL9ffPHFeFL+mGOOmTdv
3pAhQ1q2bFlW4r46zPBfqmbNmmVa+PHHH2df3GmnnbItf/7551NsHgAAAAAA
AMBqLPXEfeTee+/NFnzuuedyNxg3bly9evUyG1xzzTWVaWQV+vzzz+NJ+euv
vz7z+vTp0zfbbLNSE/eDBw9Ot82lWrhwYbaF8cT9FltskX393XffTbGFAAAA
AAAAAKux6pC4j5xzzjmZguutt97o0aPjf5owYUK25qOOOmrZsmWVaWQVivax
Tp062V3+xz/+kf3TmDFj6tatm5u479u3b4oNLsunn35aauJ+/fXXz77++eef
p9hCAAAAAAAAgNVJgwYNSn0YPNfMmTOLVtXSpUvPPvvs2rVrRxtH/z388MOv
u+6666+/vkePHtln7aN/L1y4sOqORBVo3bp1dh///ve/x//Up0+f3ONwyimn
pNXUPMaMGVNq4r5+/frZ1+fMmZNiCwEAAAAAAABWJ9UzcZ8xfPjwPfbYI7d4
+/btH3zwwarY+yq25557Zht56623xv80e/bstddeO9iRHj16pNXUPF544YVs
CydOnJh5cdGiRdkX69evX30mOgAAAAAAAABgVZs8efIjjzwycODA66+/fsiQ
IRMmTEi7RWX67W9/m81u33jjjcFfTzzxxCBx36VLl1Tamd/TTz+dbeGHH36Y
eXHWrFnZF7fccst0WwgAAAAAAGuICRMmvAdU1JQpU9L+EgMpuOyyy7LZ7Wuu
uSb46xVXXBEk7jt16pRKO/MbMmRItoXjxo3LvPjhhx9mXzzwwAPj28+YMWPJ
kiVptBQAAAAAgDQtXbp07ty5JSUlaTdktRV/1A6ogHr16n399ddpf5WBYhs8
eHD2PHDhhRcGf+3Xr19wrth5551TaWd+d911V7aFY8eOzbz47LPPZl8855xz
oldeeumlY445pkmTJtEr/fv3T7XJAAAAAAAUW0lJyZZbblkr52kvqtDdd9+9
apOasAb46KOP0v4qA8X24osvZk8CJ598cvDX3//+98GJYrfddkulnfnddNNN
2RZmFya477774rvWsWPH+I706NEj3TYDAAAAAFBkP/74Y+YWcatWrdJuy2pL
4h4qT+Ie1kBTpkzJngSOOOKI4K/RK8GJYp999kmjmeW48sorsy387LPPMi9e
d911ec54xxxzTLptBgAAAACgyCTui0DiHipP4h7WQEuXLq1Xr17mJLD77rsH
f81MGRR32GGHpdLO/C666KJsC+fMmRO9Mm/evL322ivPGe93v/td2q0GAAAA
AKCoJO6LQOIeKk/iHtZMbdq0yZwENt544/jrUQemdu3awYnitNNOS6udefTq
1SvTvKjBTz/99JlnnrneeuvlP+Ode+65abcaAAAAAICikrgvghtuuKEq85ew
Rpo4cWLaX2UgBfvvv3/mJFC/fv1ly5ZlX3/jjTdyTxT9+/dPsallOeGEEwo9
41122WVptxoAAAAAgKKSuC+Cnj17ViZfCURGjBiR9lcZSMFpp52WPQ/MmjUr
+/qNN96Ye6K46667UmxqqUpKSnbeeedCz3g333xzxcLdfffdt956a9XuAgAA
AAAARSBxXwS/+93vKpysBDKGDx+e9lcZSME111yTPQ+8//772de7du2ae6J4
5ZVXUmxqrgkTJnTs2LFoZ7xZs2Y1atQoiljlOwIAAAAAwKomcV8EEvdQeRL3
sGYaMmRI9jwwdOjQzIvLli0rdZn4b7/9Nt3WZs2dO/f888+vV69exc54n3/+
eQWCDho0KCrbsGHDkpKSKt8jAAAAAABWKYn7IpC4h8qTuIc1U3wt+7/97W+Z
F8eOHZt7lthggw3SbWrW448/3qJFiwqf7ho1alSxzHv37t0zNcyYMaPKdwoA
AAAAgFVK4r4Irr322sxB3nTTTTvXEE2aNMm0ec8990y7LTVbs2bNMkdyt912
S7stNVLTpk0zB3DcuHFpf5WBFHz99dfZjHbfvn0zL/75z3/OzXd36dIl3aZm
nHfeeRVO2Wf85je/qVjojTbaKFPDW2+9VbU7BQAAAADAqiZxXwT/+Mc/Mgf5
ggsuSLstSe28886ZNn/66adpt6Vm22effTJH8r333ku7LTXSrrvumjmAH330
UdptAVKwfPnytddeO3MeOOaYYzIvdurUKTfffeWVV6bb1Mhbb71Vyax91B+r
2PPyM2fOzFYyatSoKt81AAAAAABWKYn7IpC4X5NJ3FeSxD2w7bbbZs4Dv/rV
r6L//eGHH0pdO/6ZZ55Ju6UrBgwYUJms/eabbz5+/PiKhY6PGXj66aerdr8A
AAAAAFaRkpKSRYsWpd2KakHivggk7tdkEveVJHEPHHrooZnzwLrrrhv976OP
Ppqb8m7YsOH8+fPTbumKww47rMJZ+2OPPfb777+vcOh//etf2aqGDh1ahTsF
AAAAAFAxixcv/uqrr8aNGzdq1KghQ4YMGjSof//+Z5555lFHHdWxY8dtttmm
RYsWtWrVaty4cbRZ2o1Nn8R9EUjcr8kk7itJ4h4455xzsinp77//vmfPnrlZ
786dO6fdzP+z/fbbVyBlv9dee7322muVDH3jjTdmKxwxYkSV7A4AAAAAQFkW
LFgwderUMWPGDB8+/P7777/pppv69u17yimndO3adY899thyyy2bNGmS/9Zo
7dq1s/9+55130t6h9EncF4HE/ZpM4r6SJO6BqL+X7bw9++yzzZs3z+3gDRw4
MO1m/p9mzZoVlLKPTJw4sUpC9+nTJ36UqqROAAAAAGDNtGjRopkzZ7733ntD
hw795z//OWjQoAEDBpxxxhldu3bda6+92rVrt+666+a/8xlPyichcb9C4r4o
JO7XZBL3lSRxDzzxxBPZztuOO+5Yaqdu0qRJaTdzxZIlSwrqiGZUVfT4RAQv
vPBCVVULAAAAAKxmFi1a9MUXX4wePTqTlP/LX/5y/vnnn3TSSZmk/BZbbNGg
QYMK3OqsJIn7FRL3RSFxvyaTuK8kiXvg/fffz9+j22STTdJu4/+ZM2dOkv5n
1O+955571llnncz/VlX07t27Z0O8/PLLVVUtAAAAAFCDzJ07d+LEiZmk/N//
/vcBAwZkkvKdO3du165dq1at6tWrlyiPXnQS9ysk7otC4n5NJnFfSRL3QNTV
zN+j69WrV9pt/D/Tpk3L38769etHneQFCxZEGzdq1CjzYlVFP/DAA7OBXnvt
taqqFgAAAACoDjJz12eS8v/+978zc9eff/75xx57bGbu+o022qhOnTrJE+XV
jcT9Con7opC4X5NJ3FeSxD0QWW+99fL06IYNG5Z2A//PpEmT8jSyQ4cO2fNY
SUlJ5sXatWtXVfTdd989G+uNN96oqmoBAAAAgFWt+AvKV0OPPvpo2u9D+iTu
i0Difk0mcV9JEvdAJOqaltWdW3/99X/++ee0G/h/JkyYkKfbOXr06OyW8+bN
y7zYoEGDqoq+3XbbZWO9++67VVUtAAAAAFAZ1XNB+Wro/vvvT/u9Sp/EfRFI
3K/JJO4rSeIeqoOxY8f+PT0333xznime9t133xTbFjdgwICgbY0bN27SpEnm
39ddd112yxtuuCHzYsOGDTOv/D/27js+imr/G7ibYkJ6QggklBQgFCnBYOgY
IIAKoYcgvSVAkAAChssFAgIaidKkRRCkCgFBEBSMRqUXUSm5FAnFSK8hhBBC
luc8zu917t7s7uzstLPl8/7DV1xmZr9ndsqZ+ezOWb58+b/+9a/BgwcvWrTI
5BstXryY9OrLTOnn50ffd8aMGfI2DQAAAAAAAAAAAPTNnz8/NTV10qRJo0eP
7t+/f+fOndu2bdu0adMGDRoEBwd7e3tb9bPrVTZ48GDWnyd7Cxcu5NYG2XhY
12KzyK7KreSYmBjWtQhVrVo1rub333+fdS3WLTw8nFuTU6ZMYV2LVQoJCeFW
IKscCkNFAzx58oQOyA4AAAAAAAAAAAAAAAAAoDIHB4fTp0+zDk4BWNJqtT17
9gxjx8XFxdge6uzszLCwMkJCQkg9Hh4egYGB9EUvLy+u1NDQUPpilSpV6BGm
XLlyui1yd3c3+UbcLGTJui/qLiQ4OFjGdgGAdLrHMR8fH9blAABYAScnJ3LM
JP9lXYhU5LBPTwHkdMC6HAAAkFlgYKDu9XhISAjrigBAELK3Vq1aNSgoqFKl
ShUqVPDz8/P29vbw8HBzcyN9NtILtYHx4q2R7m1Vheg+ttSi7i1T9Nesjo6O
rGuxWWSv51Yy2fFZ1yIUvbtIjl2sa7Fu9GeqlStXZl2LVWKyKdInTnB++eUX
1sEpgP3iHzh+5syZrAs0YeTIkS/9c5NW98X9+/cba1HdunX5F6jVan19fcmU
Xbt2pS/m5+frLqSwsFCRxgCAWHQUKuLf//4363IAAKwAN8on+S/rQqT617/+
RU8BjRs3Zl0OAADI7KefftK9Hr9//z7rigCg7IDyCxYsSElJwYDyDLm6ugYG
BtatWzcmJoZ8EMnJyampqRkZGeQDIh/TmTNnWrVqxU157NgxpTePjz76iBZW
o0YNpd9OBIxxrwKMcW/PMMa9REzGuP/77791TytHjx5V7a0BoIxx48YZ6/Jp
NJqLFy+yLtCEESNGkFL9/f11X1y+fLmxRlWqVIl/gfQA1bFjR/piXl4eXYKj
o6NWq1WkMQAgFoJ7AABzIbgHAACrgOAeQGVkLztz5gwXymdkZKSmpiYnJ3Oh
fGRkZGBgIPfgJlCNq6trWFhYixYtyEfAhfJpaWlr1qzhQvnc3Nzi4mKTH2ub
Nm24pSG4f4HgXhUI7u0ZgnuJENwD2DPSr6NPrdFHOoSsCzSN9FdJqdWqVeP+
lxxeBg8ezPOsLdLX5V/g4cOHuSnbtWtHX8zJyaFL8PPzU7A9ACAKgnsAAHMh
uAcAAKuA4B5ALkVFRdeuXeNC+czMzAULFnChfFxcXIsWLerWrVupUiUHBwdj
t9TAXELGAvD19SVrngvlExMTySdCPhculP/111/J51VSUiLLp4/gXheCexUg
uLdnCO4lQnAPYM+2bNnC03VcunQp6wJN69Gjx0v/hOkXLlyYPHmym5ubyS4x
/+/lyZULN1lMTAx98dChQxbe4QSwcwjuAQDMheAeAACsAoJ7ACGePHnChfJZ
WVncs+tTU1MTExO5Z9dzoTz/7TKMOG8Wk6vLxcWFe3Y9Wf9xcXHcs+vJ55KZ
mck9u558XqWlpaptIQjudSG4VwGCe3uG4F4iBPcA9iwmJsZY99LZ2fnOnTus
CzQtOjpaWIf6v/i/qjp//nxusvbt29MX9+zZQ2fHDWEAC4TgHgDAXAjuAQDA
KiC4BzA5oLyLi4u5N8dACpMDyl+7do31VlMWgntdCO5VgODeniG4lwjBPYDd
unjxIs/zr2JjY1kXaFpeXp6Hh4e5veunT5/yLHPChAncZLrB/ebNm+nsHTp0
UL5lAGAeBPcAAOZCcA8AAFYBwT3YNgwob2lMDijPf1/RYiG414XgXgUI7u0Z
gnuJENwD2C2aUBu0adMm1gXyefz48ezZs729vUX0wPk72IMGDeIm031U/ooV
K+js8fHxyrcPAMyD4B4AwFwI7gEAwCoguAcrZWxA+QEDBsTExGBAedmZO6A8
+SBSUlIUGlDeAiG414XgXgUI7u0ZgnuJENwD2Cdy+VC+fHmermxOTg7rGg0r
LS0l532TI3Px4O+E9+zZk5usbdu29MVPPvmEzj5q1CjlWwkA5kFwDwBgLgT3
AABgFRDcgwXCgPIqEz2gPPl0yGek/oDyFgjBvS4E9ypAcG/PENxLhOAewD6t
XbuWv8drmTvm4cOHIyIiTPbneTg4OGi1Wp636NixIzcl6dDSF6dPn06X8OGH
HyrfUAAwD4J7AABzIbgHAACrgOAeVMaF8r/++isGlLcQNJS3ogHlLRCCe10I
7lWA4N6eIbiXCME9gH1q3rw5f6/4xx9/ZF1jWStWrHB2dpbU13/ppdDQUP53
IVdh3JStW7emL77zzjt0CZs3b1a4oQBgNgT3AADmQnAPAABWAcE9yEh3QPk1
a9akpaWVGVBe+n0nMIurqytZ7WTl0wHl6cMKMjMzrXdAeQuE4F4XgnsVILi3
ZwjuJUJwD2CHTp48abLn/PXXX7Mus6xWrVqJuwqgAgICTpw4wf8uDRs25CZu
2bIlfbFHjx50Idzp5rfffhs3blzz5s1feeWV/Px8ZVsOAKYguAcA9f3++++k
JxAVFUX+YF2LGAjuAQDAKiC4ByFMDigfGBjo6Ogo8bYSmMXkgPLPnj3T/yjr
16/PzX7p0iX1NyQbhuBeF4J7FSC4t2cI7iVCcA9gh0aNGmWyd7127VrWZZZF
u+7itG7dmhx8TL5L9erVuenJ+YW+2KxZM+5FcpX3888/v/HGG7pLPnz4sILN
BgABENwDgPo+/PBD7rDj5eXVr1+/CxcusK7IPAjuAQDAKiC4B87Zs2d37ty5
atWqjz76aMKECYMGDerUqVOTJk1CQkLc3d357whhQHl5ubq6Vq1alVyGv/HG
G/379x8/fvycOXNWrlz59ddfHzhw4Ny5c1L2UwT3CkFwrwvBvQoQ3NszBPcS
IbgHsDcFBQVeXl4mO+GLFi1iXWlZwcHB4i4onJycpk+f/vz5cyHvUrFiRW6u
Dh060BfJZSBdmoODQ5nl//zzz4o1GgAEQXAPAOr74IMPdPsDLi4un376Keui
zIDgHgAArAKCeyCuXLmC38urw9PTs3r16k2bNu3cufOQIUMmTZr08ccff/HF
F7t27Tpy5Mjly5cfP36s6GeN4F4hCO51IbhXAYJ7e4bgXiIE9wD2ZtmyZUI6
6rNmzWJdaVlBQUEirjgaNmxoVo+Ufk+7d+/e3Cs3btxwcXHheQv84h6AOQT3
AKC+MsE9JzExUeB3BZlDcA8AAFYBwT0Qf/zxh4g7QlCGv79/7dq1W7Zs2b17
d9JrnTp16oIFC9avX793716yhv/++29LGFAewb1CENzrQnCvAgT39gzBvUQI
7gHsjW68xWPixImsKy3L3ODe2dl57ty5JSUlwt+itLSUPj9t5MiRp0+ffv/9
9+lv8I3JyclRrtUAIASCewBQn8HgnoiPjzc4XqelQXAPAABWAcE9vEBwL4C4
AeUtEIJ7hSC414XgXgUI7u0ZgnuJENwD2JXDhw8L7PAPHz6cdbFlVa1a1axr
lpo1a5r7Fvn5+XR2Z2dngW+Ul5enRHsBQDgE9wCgPmPBPTF48GCtVsu6QBMQ
3AMAgFVAcA8vbDq4p78fMcbFxSUwMJAL5ePi4pKTk1NTU7lQPisr68yZM9eu
XbOWJz4JgeBeIQjudSG4VwGCe3uG4F4iBPcAdmXw4MECLxx69erFutiyatas
yV+zj49Pu3bt6P+KuHNLTsoC14+ugoICJdoLAMIhuAcA9fEE90RqairrAk1A
cA8AAFYBwT28sN3gnobyMTExAwYMoKF8Zmbm/v37uVDe8r8OKi8E9wpBcK8L
wb0KENzbMwT3EiG4B7AfDx48cHNzM3ax4Orq2qtXL/q/7du3Z11vWfwP+e/Z
s2d+fj65nCENEdeE06dPCxxHQFelSpUUai8ACIfgHgDUxx/cE0uXLmVdIx8E
9wAAYBUQ3ANx9OhRc2/XMOfq6hoYGBgZGck9uz45Odnb25v7p+++++7MmTMP
Hz5kvV4tEYJ7hSC414XgXgUI7u0ZgnuJENwD2I9PP/2U54KCXETMnTuX/i85
OLCut6yuXbvy1H/16lVuMi8vL+6V+Ph4gUt+8OBBSkoKd/vaXOQ0pFSDAUAw
BPcAoD6Twb2zs/OePXtYl2kUgnsAALAKCO6ByMzMFHHHRjmurq5hYWHmDihf
pUoVbvYHDx6ovw6tBYJ7hSC414XgXgUI7u0ZgnuJENwD2A/a9TUoOzt77dq1
9H/Dw8NZ11vWjBkzaHl+fn5Dhw5999136St3797lJvP19eVeIRMIWSy5sPL3
9+e/IuORmJioZKMBQBAE9wCgPpPB/Uv/jONjsbccEdwDAIBVQHAPL+QL7k0O
KE+6RnRA+c6dOycmJso4oDyCeyEQ3CsEwb0uBPcqQHBvzxDcS4TgHsASkAuQ
FIX179+f58LEz8+PTBMfH09fcXNzU7okc5HLpaCgoKioqD59+kyaNIm8Ehsb
SwueOHEiN5mLiwv3SqNGjfgXSLoNtWvX5r9kM6lr166KtxwATKlYsSLdK5s1
a8a6HACwC/RSlF9gYCDtpVgUR0dHUh75L+tCpGratCld25UqVWJdDgAAyOzt
t9/WPbGOHTuWdUXAAP8zGAVydnb29vYOCgqqXr16/fr1o6Ki2rRp89Zbb/Xq
1WvAgAEjRowYP368oq3w9PTkKhk3bpyib2TVKlSowK2lkSNHsq7FplSrVo1b
sQMHDlT6vaKjo+l+5+vrq/TbiUB2dq48Dw8P1rXYrDfeeINbya+99hrrWoSi
dxcTEhJY12Ldqlatyq3JQYMGsa7FKgUGBnIrcPjw4aq9aVJSkm6vCcE92LnC
wkIHBwfpFyAAAAAAAAAAAAAAAAAAAOJkZmayDk4BGJs+fXqMkqKjo7kfVRnk
5OREJiCTlfnhWJs2bRStSrpatWpxpTo7O9MX6XPPQkJC+GcvV66clGOXp6dn
69atFW4iAAhCf7lAhIaGsi4HwJYFBwdz+1rDhg1Z18JYjRo1hHcbGjRowLre
srgvjpL/si5EKtLlo+vZy8uLdTkGkD4210H19vZmXQsAgPWJjIzUPaWSgyrr
igwgJ6CX/nkMu2WWZwPoM2NdXFzCwsJq1apVv359sm00bdq0devW7dq1Y12g
IPQRkdxdODDIw8ODW0stWrRgXYtNoUOLRkVFKf1eNWvWpAdtNzc3pd9OBDpw
ANkrWddis+rUqcOt5GrVqrGuRSh6d7F58+asa7Fuah5wbBLXsXzpn+fKqvam
rVq10u1yHzp0iHVqCmDjFi1axHMnmQ40o9Vq6UUEcfnyZaZVmzZ37lzaAaAv
0uA+NTWVZ95bt27xrBOT+vfv//jxY8VbCADCYIx7ANWMHDmS29fWrVvHuhbG
hIxxT/n5+V27do11yf8DY9yr5q+//uLKq1OnDutaAACsj1WMcU/jCXLMZ12L
bfrjjz+4NdyiRQvWtYiHMe6FwBj3CsEY97owxr0KMMa9PcMY9xJhjHsAe9Cw
YUNjt5E1Go3umYgOeEQcP36cYc1CzJgxgyu1du3a3CslJSW0/vT0dJ55Dx48
aGyd8Ktbt+53332nSvsAQCgE9wCqQXBPmRXcEx06dNBqtayr/i8E96pBcA8A
IAWCe3iB4N6eILhXCIJ7XQjuVYDg3p4huJcIwT2AzeNPqGNjY3UnbtKkCf0n
y4+nJ0yYwJVKzqrcK0+ePKH1L1u2jGfezMxMntViUGRkZHZ2tkXdcgcADoJ7
ANUguKfMDe6Jzz//nHXV/4XgXjUI7gEApEBwDy8Q3NsTBPcKQXCvC8G9ChDc
2zME9xIhuAeweYMGDeK5gfz999/rTty1a1f6T5Z/Qz4hIaHMhVt+fj6tf/36
9Tzz8g8fYNCYMWNUaRYAmA3BPYBqENxTIoJ7b2/v69evsy78/yC4Vw2CewAA
KRDcwwsE9/YEwb1CENzrQnCvAgT39gzBvUQI7gFs28OHD93c3IzdPQ4PDy/z
+3F6N55YsGABq7IFio+P50pt374998rdu3dp/V9//TXPvLNnzza2WnRVq1Yt
NjaW+xvBPYDFQnAPoBoE95SI4J4YMGAA68L/D4J71SC4BwCQAsE9vEBwb08Q
3CsEwb0uBPcqQHBvzxDcS4TgHsC28f+ufMmSJWWmp6PGE9OmTWNSs3BvvPEG
V2qXLl24V27evEnr/+GHH3jmfe+993jWDOHs7JySklJUVLR69WruFQT3ABYL
wT2AahDcU+KCe41Gc+7cOda1/38I7lWD4B4AQAoE9/ACwb09QXCvEAT3uhDc
qwDBvT1DcC8RgnsA29awYUNj9409PT3z8/PLTJ+RkUEnGDVqFJOahSPXa1yp
8fHx3Ct5eXm0/t9++41n3qSkJGNrhmjVqhU9QS9evJh7EcE9gMVCcA+gGgT3
lLjgniCdENa1/38I7lWD4B4AQAoE9/ACwb09QXCvEAT3uhDcqwDBvT1DcC8R
gnsAG3bo0CGem8Zjx47Vn2Xnzp10gri4OPVrNku9evW4UgcPHsy9Qu+LEjdu
3OCZd8SIEcbWTFhYWGlpKZ2S9jatqJsBYG8Q3AOoBsE9JTq49/Dw0P/ypPoQ
3KsGwT0AgBQI7uEFgnt7guBeIQjudSG4VwGCe3uG4F4iBPcANiwhIcHYHWON
RmPwBEQ6b3QacoBVvWTzBAcHc6XSX65du3aNe8XJyen58+c88+oH9w4ODtwf
HTt21J1y2rRp3OspKSn0RXKRdffuXSUaBQAiILgHUA2Ce4oG96TXYazHZYwl
rD0E96pBcA8AIAWCe3iB4N6eILhXCIJ7XQjuVYDg3p4huJcIwT2ArSoqKvLx
8TF2u7hz584G59J91Hx4eLjKNZurQoUKXKkTJ07kXrl16xb3SuXKlfnnHTVq
FG1pzZo1Fy5ceO7cOe5/e/furTvlu+++y70+derUF//cNIiOjnZwcKhYsWJx
cbFCTQMAsyC4B1ANgnuKBvdt27Y11uMypkuXLqzLR3CvHgT3AABSILiHFwju
7QmCe4UguNeF4F4FCO5t0u3bt1evXj148GBy6R0aGhocHPzKK680bdp00KBB
H3/88alTp7jJENxLhOAewFZt2rSJ53bxnj17DM717NkzjUbDTePp6alyzeYi
FXKlcpE68fjxY4G3bVNTUx0cHFq3br1t2zbuwfjFxcXcvEOHDtWdMjExkXu9
b9++b775pu5q/O233xRqGgCYBcE9gGoQ3FM0uH///fdbtmzJ0+/S5+Li8vDh
Q7b1I7hXDYJ7AAApENzDCwT39gTBvUIQ3OtCcK8CBPc25uTJk3369OFuI/Co
V6/eV199heBeIgT3ALaqTMSsq2bNmlqt1tiM5cuXp1MWFBSoWbO5nJ2duTo/
+OAD+iKX5pf51bw+0kMr86z7Z8+ecUsbO3as7ut9+/Y1tiZXrVolY3MAQDQE
9/aDG6kkNzf33LlzpP9/8ODBrKysHTt2ZGZmkmPy3r17WRdo+xDcUzS4nz17
9u3bt0n/iv8Ctoy1a9eyrR/BvWoQ3KumpKRk/fr1GQCgCrK78Y9PJxcE9/AC
wb09QXCvEAT3uhDcqwDBvc24ffv2wIED6SjDQtDnJCO4FwfBPYBNunnzJs9w
q4sXL+aZt27dunTKCxcuqFazuZ4/f07rXLJkCX29UaNG5JX09HRzF0iDe/r7
fc5bb71lbE2SjqgMLQEAyRDcW6bHjx/fv3//ypUrubm5J06cOHbsWFZW1rff
fpuZmblu3bqMjIz58+enpaWRo25KSsrIkSMTEhLi4uJ69OgRExPTunXryMhI
ckoKCwurWLGij4+Po6OjyUsDjUaDm2BKQ3BP6Qb35H8vXbpUtWpVk1spFR8f
z7Z+BPeqQXCvmp07dwrfBwFAut27d6uwayO4hxcI7u0JgnuFILjXheBeBQju
bQO5wvL39xfdV0RwLw6CewCblJ6ebuxo6enpmZ+fzzNvdHQ0nfiXX35RrWZz
0afiE5s2baKv//vf/3Z2dr58+bK5CywoKOCWRuP4GzduDBgwgOfUM3nyZLma
AwBSILiXrri4+P79+9euXcvNzT116hTpWmdnZ2dlZW3ZsoUcYzMyMhYvXpyW
ljZz5syUlJQxY8YkJia+/fbbcXFxHTp0aNeuXWRkZERERFhYWJUqVXx9fV1d
Xc3ox/OiA7gIdPPmTdbr0sYhuKfKBPfElStXQkJCBG6rZE9R54eKxiC4Vw2C
e9Vs3rzZrFMGAEi0detWFXZtBPfwAsG9PUFwrxAE97oQ3KsAwb2102q1s2fP
NuuH9voQ3IuD4B7AJjVo0MDY0XLcuHH888bHx9OJdQNxS0OHpCeysrLo6wUF
BQcOHBCxwBs3bnBLI6ek/Pz81NRUDw8P/lPPmDFj5GsQAIhnh8H9kydPaM5+
5swZ0hPev38/ORju3LkzMzNzzZo1CxYsSEtLI4eylJSU5OTkxMTEAQMGxMXF
de7cOSYmpkWLFtzv2clVqq+vr8kxqqwIgnulIbin9IN74vLly8HBwQI31yNH
jjCsH8G9ahDcqwbBPYDKENxTCO6VhuDefiC4VwiCe10I7lWA4N6qFRUV9e/f
X3pfEcG9OAjuAWzPb7/9ZuxQqdFoTJ53kpOT6fTz589Xp2Zx6Bj3v//+u/Sl
XbhwgVta+fLly5UrJ+TUk5SUJP19AUA6Cw/uS0pK7t+/f/ny5YsXL5Iu65Ej
R7Kysnbv3s0l7BkZGfPmzUtLS5syZUpKSkpiYuLw4cPj4uK6desWExPTsmXL
yMjIOnXqhIWFVahQwdfXV+KXXXXPCOb+mN0qILhXGoJ7ymBw/+KfHkXlypWF
bK4zZ85kVfwLBPcqQnCvGgT3ACpDcE8huFcagnv7geBeIQjudSG4VwGCe+tV
UFDQvHlzWfqKhw8fZt0aq4TgHsD2jBs3ztihMjo62uTss2fPptNPnDhRhYJF
8/X15eqU5dJ4/fr15p56EhMTpb8vAEhnycF9aWlpaGiouYcXfTYZsisBwb3S
ENxTxoL7F/9k9wEBASY3V3ItzKRyDoJ71SC4Vw2CewCVIbinENwrDcG9/UBw
rxAE97oQ3KsAwb2VevLkCT1cSJednc26QVYJwT2AjXn27BnPjeINGzaYXMKK
FSvo9L169RLypmfPnl2wYEH//v3J2S0oKMjX17datWoREREDBw5ctmzZjRs3
JDfLMNL3I0U6Ojo+ffpUynKKiorS09N9fHzMPfUguAewEJYc3JMer7nHFpBC
uZMOcBDcUzzBPXHs2DGTY+6QPsy9e/fUr5yD4F41CO5Vs2jRIvnPKwBg3PLl
y1XYtRHcwwsE9/YEwb1CENzrQnCvAgT31ujp06cdO3aUsa948uRJ1m2ySgju
AWzMzp07jR0n/fz8ioqKzFpCZGQkz5S3b9/+8MMPa9euzX98fvnll99++20l
+ts9e/Ykyw8NDRW9hNLS0s8//7xq1ariTj0jR46UsTkAIBqCe6BOnz7N+jO3
cQjuKf7gnti7dy8d1seYbdu2qVw2heBeNQjuVcPz5DEAUMKkSZNU2LUR3MML
BPf2BMG9QhDc60JwrwIE99ZoyJAh8vYVr1y5wrpNVgnBPYCN6dWrl7Hj5Lhx
44Qs4ciRI3QWPz8/g9M8fPhwwoQJ7u7uwo/SHh4eK1eulLWtL5YuXUqWPGzY
MHGz79+/XzfsE2H06NHytggAxEFwDxSCe6UhuKdMBvfE4sWL+bfYlJQUNWvW
heBeNQjuVYPgHkBlCO4pBPdKQ3BvPxDcK8QOg3tyQP7+++9XrVo1d+7ctLS0
JUuWfP3113fv3n2B4F4VCO6tztq1a+XtKHp7ez9//px1s6wSgnsAS/D+++/H
yCE6OtrBwcHYobJZs2ZCFkIugnTnIsssMwHpQru4uIg7XIeHh8vSUk67du2i
oqLatm0rYl7Sb5Q+YHRYWJiMzQEA0Tw9PemOGRoayrqc/0GOURIPNWCWpk2b
sv7MbRy93/jKK6+wroUxbsgeonr16jyTVa5cmWeL9fX1Va3gMrhOI/kvqwLk
EhISQtenl5cX63IMaNmyJVeeu7s761psXLVq1ZQ4swCAMcHBwSrs2pGRkbpv
+vrrr6vwpuaiv2sgx3zWtdimJk2acGvYx8eHdS3i0Ztp+rfagKKjTbVo0YJ1
LVaDu0FKLtBq1qxJLlJq165N/iavtGnThk5Drju4FUteV7oeUgY9aLu5uSn9
drratm3boEGDwMBAY/euNRpN+fLlGzduzP0vmUzN8mwJ2UPJqg4PDyebHPlv
3bp1X3311datW9MJ6FfaSBedYZ0U2TZee+01UifdTerVq1cmWaB3F5s3b86w
VCZI/8rkAwPNFRAQwLpZ1srLy4tbhwITPVm0atVK9+M7fPgw69QUgKXCwkKe
tB0AAAAAAAAAAAAAAAAAQGmbN29mHZwCMLZx48YUOYSHhxvb0Tp16iR8Odyj
Uzk9evTgXhwyZAj9qo8U5cqVe+edd2Rpr2j9+vWT2Irq1asnJyezbYXl4L4O
7eDgMGnSJNa12LKIiAhu8+vZsyfrWixOxYoV6e7ZrFkz1uX8Dzy2V0YuLi7k
JOLj4+Pn51epUqUqVaqEhIRw35SmZy7mpxib16hRI25Vd+7cmXUtjL3++uvc
qmjdujX/lElJSa6ursY27GHDhqlTcBmOjo7k3cl/mby7jJo2bUpXJjkysC7H
gFGjRnHllS9fnnUtNo5c8nCrOiAgoKmlopdU9evXZ12LXYuKiuI+CGdnZ9a1
WJ8KFSpway82NlaFXfvtt9/WPW+OHTtWhTc1FznCc+WRYz7rWmwTHXWXXAKw
rkU8+ltOcpHIuhbLRY8wI0eOZF2LRRswYEDVqlUFXkp7e3uT3hH398CBA5Wu
LTo6mr61r6+v0m83fvx4clp3cnISuDZ0eXh4KF2ezUhOTm7cuDF3FWkSmax6
9erc36+99hqrmvv27RsUFCRwY/D7B/d3QkICq5qZIDuR7D+3Dw4OZt0sKxYY
GMitxuHDh6v2pklJSbqfIB6VDyCLx48fu7m5GTxOku5ZYWGh8EXREysxf/58
8kpmZqaxhYswYsQIxVaDILt27RJdPOkHpqamlpaWsm2CRaH3KJ4+fcq6FltG
71SQ/ZF1LRbHkse4v3fvnpQDplVzdXUlF+mkt1m3bt3IyEjuUYedO3eOi4sb
MGBAYmIi9w0oclBNS0tbsGDBmjVryOa9c+fOrKys/fv3//rrr2fOnMnNzb12
7dr9+/e1Wi3PeqZnrps3b6r24donjHFPCRnjnlq1apWxPWXDhg0qVKsPY9yr
BmPcq2bz5s3cqh46dCjrWoyi3/khpznWtdg1cvnMfRAVK1ZkXYv1GThwILf2
vvrqKxXeDmPcwwuMcW9PMMa9SQUFBaNHjzb38a10wFAbG+N++/bt/GOT8cMY
9wJt3LiRfqnGXEzGuCeH2SFDhpg7Ti7drextjPv169eL+3CN8fDwOHfuHOtm
WTGMcQ9gMzIzM40dKpOSksxaVPPmzem87733XlpamvTh4HW5urqyDVa2bt0q
rvKoqKiTJ08yrNwyIbhXB4J7HnYb3Mt4cHZxceFC9rCwMPoEg/DwcGMhe0ZG
Bs3Z9UP258+fq7yeEdyrBsE9ZVZwT/Ts2dPg3keWo3SpBiG4Vw2Ce9UguAfh
ENxLgeBeH4J7pSG4tx8I7vmRg4zuDRARbCa4LywsTEhIkLIqXvrniVgKlWcz
SkpKUlJSpKxk9YP78+fP165dW0rN9hbcDx8+XMrqKkOj0WzatIl1m6wbgnsA
mxEfH2/saPn777+btahu3brReekjYuQl8Ba3QkQE925ubmlpaepHUVYBwb06
ENzzsKvgnnSAfXx8KlSoEBYWRq5EIiMjW7ZsGRMTQw7dcXFxw4YNS0xMJFdV
U6ZMIUetTz75hCbsu3btysrKOnLkyK+//nrx4sVLly7dv3//0aNH+jV//PHH
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
zZvrtzE4OLhdu3YdOnQQGOgjuOd37969mJgYKVsd+ZhYNwIAAADgvzp27Cil
b1NGlSpV8Jh6ANvw6NGjihUrynh8kG7kyJGs1wqoBMG9OhDcWykE9wI9fvy4
V69e0s8+CO6FyMjIcHJykriqrS64nzp1qvQNjOPg4LBs2TLWDQL1LFq0qMwu
o9FoxowZc/nyZToNPXLy8Pf3Z9cIq/HLL79Iee4KJz4+nnU7jEJwbyHsPLjX
arVpaWkSvy35kg0F9wcOHNAfBqVdu3YHDx6k0xw9erRcuXIm1wmCex7nzp2r
VauWxK2uXr16rNsBAAAA8F916tSR2L2hyLVJTk4O6wYBgGwyMzPlOj5IFxsb
W1JSwnqVgEoQ3KsDwb2VQnAvRH5+fpMmTWQ5ASG4Nyk5OVmWVW11z9V57733
ZGl4uXLlbCanAJO0Wu3YsWPLbAOurq67d+/Wn7h169b8G4+Hh4f6TbAuW7Zs
kf61IqJly5asm2IUgnsLYc/BPTmyDR8+XPqORnz++eesWyMDclp3cXEp07Qp
U6aUlpaWmXLWrFkm1wl+IWXMkSNH6Dj1UlSuXJl1UwAAAAD+q3r16tJ7OETd
unV1fx0AALahb9++shwiJOratSvG4LArCO7VgeDeSiG4N6mwsJCmGNLdvn1b
hZqtl4xj60ybNo11a8wzf/586a0mp7z9+/ezbgqoRKvVJiQk6G8GGzduNDj9
V199xb/9uLu7q9wE6/Ldd9/pZ2fiNGrUiHVrjEJwbyHsObifMGGCLDsakZ6e
zro1Um3YsEH/+0KDBw82OPG9e/defvll/nVy6dIllZtgFf744w8/Pz9Ztjor
uqoCAAAAe9CyZUvpPZy2bds+ePCAdVMAQH4FBQUSh4OUjlzhPnv2jPWaAFUh
uFcHgnsrheCeH1k/pGsq42no3r17StdsvaZPny7jql69ejXrBpln3759Epvc
vHlz3I23Kwaf0tCtWzdj0z9+/Jg/d65Ro4aa9VuXPXv2yJXaE71792bdIKMQ
3FsIuw3uJ06cKNeORmzZsoV1gyT57rvv9Eeur1Sp0qNHj4zNYrLjeuPGDTWb
YBVOnz7t7+8v11YXERHBukEAAAAA/6X/mD6zODg4jBs3DpkagA27dOlSlSpV
5LogMsvLL7+8ePFi1isAGEBwrw4E91YKwT2/+Ph4Gc9EGo0Gj3wxZsWKFTKu
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
g5qrS5cujvPXvWvXLpmH7mjat2/voAomIHr27Gn0c/gv69evN7ol7ExcXNzi
xYu117VzlChRYty4cc+ePdObeJkyZerUqeNqVkRYWFjhwoX79OnD/V3+NaOO
i4wossP1Zh0eHh4YGNijRw9d23QTKJGRkdS9Fy9eXNtQV69ebdy4sfi++zRp
0jRv3vzkyZOGFB4AAAAAAAAAEi6c+1A7yjfAjkyZMkVyFcIJFClSxOj2cBSX
L1+25eZo+0IluXbtmtFNksAYPny40c/tv2zevFmywHFxcRkzZjS6vG5Zs2a1
74N4+fLlxo0b+/TpU6dOnU8//bRo0aKlSpX68ssvu3XrtnbtWr3rxkBAbGzs
0aNHhw0b1rhx43LlyhUvXvyTTz6pVKlS27ZtZ8+effPmTaMLCICrEBkZWbdu
XXPdoKenZ/ny5emrsUWfOnDggOJAuHPnztQN2rHwrgn188pV0a1atTIX5uLF
i5MnT27Tps1nn31GAwENB9RTNW3adMyYMWfOnHG0b+oTJ044byg1T5cuXRxa
zQTB0KFDjX4O/2Xr1q1Gt4RDIGPg0KFDQ4YM+frrr4OCgooVK1ayZMnKlSu3
a9du3rx5d+7csTplsiio3XLlyvX333/bscC2sGrVKj8/PyrVyJEjuZ+oS6FG
8Pb2NvcC5MmThwLQjM/q3GmMCAwMdPvglSVxXyF36tQpeu5UU3qjzPXV9GrN
nTu3Q4cOVatWVXr4smXLNmrUaPDgwYcPH7ZiXwQAAAAAAAAAgHjNURQfHx+j
SwRMEB0d/fnnnzt2JUsOf3//3bt3G90eDmTEiBGuoN1TGYKDg41ujITHs2fP
ypQpY+yzq1+/vq51qs2bNydPntzAAidLlmzdunWOeygAAOA67N27t3379hUq
VChWrFjlypWbNWs2cODAHTt2vHjxwi7p79y5U1GUcuXKtWfPHruk6YLcv39f
vVy7devWruw+pUePHgaOsETu3Lmxh4p4+vRp6dKljX0WDRs2hJKol+fPn5cr
V87tg7k4ZcoUYxswIiKiXbt2ykzthx9+MKcmX7hwgTr2KlWqUD9PvX2DBg2o
H1i5cuXdu3ftUgz6ovPkyUNlSJEixcyZM125A7SOqKio/v37e3p6un24Asxe
4yMAAAAAAAAAAEkWLVrErWm8efPG6EIBE8TFxV26dClUmt27d5cvX97GBa7j
x4+zaf7xxx80kTe6JRzOgwcP5Nv51KlTHTp0EPsJtMj48eO5ZMPDw41uhoTK
+/fvL1y4IPn4Tpw48fXXX1u9VSNNmjRcglevXrWizC9evDhz5gybzooVK2x5
o7SkSpVq+/bt2hagfHH+HQAA7AgZBlmzZlX63urVq58+fdroEtmTp0+fDhw4
ULnkhYyf4cOHO/rUvO3cvXtX2qwLpRopWy+sY9myZWxqf//9d1Lwpy0JWWj/
/POP/LOwgiNHjigPIiAggPvJOgsNxH/Q7oOCgpSGLVmypCGez+nlCQkJSZ8+
vVKMnj17Gtvz0Gzxs88+UwqTP3/+devWuX5PKAP1VzNnzsyQIYNStZYtW756
9croQgEAAAAAAABAkmPQoEHcipOr3WEHrGDfvn3qjFvFz8+vbt26PXv27Nat
m/gGapXXr18bXRWXJjw8XLs7wt3dvUKFCh07duzbt2+hQoVk2nnt2rVGVyUp
8uDBg4oVK8o8IHOkTZvWQWWbN2+eLQXjoG//0KFDDioqAAAAjocPH1atWlXp
gckqaNSoket4mbaaFy9eTJgwQfGN7/ZBGE1kXsffvXv3ww8/2DjghoaGGl2P
JM3Lly+VB5ExY0ajy5KoiIqK+uabb9T3/Msvvzx8+LBzsqYPMyQkpGDBgkrW
np6ekyZNcgWV/O3bt927d1d3/5YpU2b37t2uUDDroOosX748d+7cSnV8fHym
TZtmdKEAAAAAAAAAIInSuHFjbsXJXk7kgFHQLNvLy4t9ph4eHgMGDIiMjFTD
XLhwIWXKlBaXHyHcCzhx4kTmzJm5FqtRowa1rRqGGlBxLykmJCTEwIokTUJD
Q5UbKm0hRYoUDiresGHDbCybSrJkybZt2+agcgIAADBJXFzc9OnT2bPbFStW
pOE+Ojra6KLphgyedu3asbe61K1b9/79+0aXy55ERERUr17d9jEXwr2xQLh3
KNwcMygoaO7cuU+fPnVQdteuXSN7+OOPP1ZzzJQpk6vtRN21a1eWLFnUEubN
m3fixImPHj0yulw6uHr1anBwMH0yai1KlCjx119/GV0uAAAAAAAAAEi6sHNh
hYQ10wQscXFxffr04R6ot7e3Sdlu1KhRFpcfIdybY8eOHVpPqj169Hj//j0X
MiwszGI7jx071pBaJFmOHz8us3HFIj4+Pg4qob2E+4wZM546dcpBhQQAACDm
+vXrDRo0YLvlVKlSff/994cOHXL9a5Fv3LgxderUIkWKsOXPnj37r7/+anTR
7MyTJ0+KFStml2GXDAyja5OkgXDvaE6fPl2yZEn2nff19W3UqNH8+fNv3rxp
e/o0kzpz5syECRMqVqzIXWXVrFkz19wv9OzZs169erFbGmj23aRJk40bN9IL
aXTpzPL48eOQkJDq1auzN77R/Gjy5Mm44AMAAAAAAAAADOThw4faFafnz58b
XS5gJV27dtU+0NmzZ5sM/OjRI09PT/HyY2xsrJOrkCDYvHmzj48P11ZfffWV
VrVXqFChgridx40b5+QqJGXCwsJUT7824u3t7aBC2sVVfqFChW7cuOGgEgIA
AJDkt99+q1y5MtdFp06dumnTpsuWLXv8+LHRBfw/3r17d+jQoX79+hUuXJgr
cKZMmSZOnBgTE2N0Ge3Ms2fPSpcubfuYq3DgwAGjK5SkgXDvBGh6SLNLk7Z0
vnz5WrZsOXny5H379t2/f1/Gb/zbt2+vX7++cePGYcOGNWjQQL3FnoW6I9f/
ss6fP9+sWTNucu3r61urVi1qrlu3bhldwP/PuXPnaOJJk1OuqMmSJevZs+e9
e/eMLiAAAAAAAAAAJHXWrFmjnRq/efPG6HIBaxg5cqT2aQYFBQnWTMRe3N3d
3SHcazl27Jj2rD39RbAgM3bsWEE7E5s2bXJmFZIyZ8+eTZs2rfhxyJMuXToH
lfPChQs2lq1Vq1aOc14KAABALydPnmzQoAF7tlHB09Pzk08+6dy58+LFi8+f
P29uE6DjePjw4datW4cMGfLFF1+kSpVKO6DkzZt33rx5idIL04sXL2SuNJKH
zAyj65SkgXDvNCIiIkaNGmVSZ1fx8fH5+OOPK1as+OWXXzZu3Lhly5YdO3Zs
1qwZ/bt69eqlS5fOnDkzd6yeo0SJEsuXL3d9/yQqV65c6dChg3aDN5E7d+7m
zZtPnz6dxgJnrrdERUUdOHBg/PjxNABpb3lz+7CLbPDgwS61hQwAAAAAAAAA
kjLfffcdN3Fz3JXNwKGsXbvW5LrH7t27BbGGDx8uWCpxnCiZcLl79y41i7at
unXrJoh15swZQTsTJ06ccFoVkjKPHz/Onj27+FnoonDhwo4rbY0aNawrFdVx
x44djisYAAAAq/nnn386dOiQOnVqc314ypQpK1eu3KlTp0mTJm3evPnChQv2
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
/34I9wDYhcuXL7PfXfr06Y0uUQJg8uTJbKO1bNnS6BIBAMC/gHAPAAAAAKAF
wr3TgHAPXBwI94kSCPcgaQLhHgB5INzrZerUqWyLjRgxwlzIx48fj//AkSNH
nFlCABIfEO6tgOZ3c+bMKVWqVMGCBYODg1+9emV0iQAA4F9AuAcAAAAA0ALh
3mlAuAcuDoT7RAmEe5A0gXAPgDwQ7vXSrl07tsVCQkKMLhEAiR8I9wAAkPiA
cA8AAAAAoAXCvdOAcA9cHAj3iRII9yBpAuEeAHkg3OulQYMGbItRAxpdIgAS
PxDuAQAg8QHhHgAAAABAC4R7pwHhHrg4EO4TJRDuQdIEwj0A8kC410u1atXY
FtuxY4fRJQIg8QPhHgAAEh8Q7gEAAAAAtEC4dxoQ7oGLA+E+UQLhHiRNINwD
IA+Ee71QE0G4B8DJQLgHAIDEB4R7AAAAAAAtEO6dBoR74OJAuE+UQLgHSRMI
9wDIA+FeLxDuAXA+EO4BACDxAeEeAAAAAI4jLi7uzz//XL169c8//zx06NDR
o0cvWLBg8+bNDx48cPFcxML9u3fvtmzZ0r179+rVq5cqVapSpUqNGjWifMmy
srk2VnLnzp1Nmzb98ssvo0aNGjZs2MyZM9euXfv333+7fi5i4Z4eBD3TOnXq
lClTpnz58vSPnj17bt++/dWrV7ZVJSHx/PnznTt3Ll68eOLEicHBwePHj587
dy69gTdu3LA98Vu3blFS8+fPV54pfUSrVq0KCwujz8r2xBMHdhTu6Qui1qYO
SmntGTNmrFy58syZM+/fv7dvmRXEwv3169enT5/eunXrypUrUz9WtWrVli1b
jhkz5sqVK44ozNOnTzds2DB8+PBu3bp9//33Q4YModx3794t01FT3KNHjy5a
tIg+gUGDBo0cOZKabtmyZefPn7f6RXWccB8VFbV///6lS5dOnjx54MCB9N+Q
kJA9e/a8fPnSXlmAJAX1D3/99df69etpzKV+g3oPGgLoa6JP2IrUXF+4t299
nczZs2fXrFmjmKMjRoyYNm3akiVLTp8+HR0dbWPK1Nexiau27v379+1ScpNc
vnx51qxZvXr16tixY//+/RcuXGhxgKDxkSwWqnvXrl179OhB3fW6devIjLFL
ecj2o7Fg+fLlU6dOpd71p59+ItOIbMLIyEi7pK/FccJ9TEzMvn37aHRQRoop
U6bQqHHgwAH72rfOyYXFXsI99QNXr17duHEjvfD0tivW77x58+jtctzjVqCp
B/U5ffv2pdeeXn6yi6jR/vjjjzdv3jg0XwCsxnHC/bt378hsoF6XhjOywCdM
mEC9Ln2Gz549s1cW5qBRj7KmcaRChQo5cuTw9/dPkyZN/vz5GzZsSIUJDw9X
Q0ZERFQ3T58+fRxdVEfj5Pmj60CTtfnz57dv355mqTRXpRnrt99+S41w4cIF
o4sGgDMQC/dv376liUC3bt2qVaumLkqPHTuWOge75E6dcFhY2KpVq6jPoakH
mUM0EaC+iD5Mu6SfQLl79+7WrVupKcg6pWZROmR6Uk7okMmqDw0NVVaZhn6A
DHsalE+dOkUvg+PypVnD7t27x40b17NnT7KNlQnFpk2b5JejyYQ+efIkNZRq
SyxatIia8fHjx44rNgAAAAHULbdr1y5z5sxupnB3d//000/J6n706JFr5iIQ
7sk6ypkzp8kcCbKX/vjjD1sqpYt79+4NGTKkRIkS5sqTPXv2zp07k8XlsrmY
E+4vX75co0YNczkGBgaSxWJLpVyf6OjoWbNm0UTV29vbXDukSpWqQYMGNKWl
Z6Qr8efPn5O9VLBgQXMpZ8iQgabGBw8edFDtEhC2C/dRUVFkXdNUy1xrp0+f
vnnz5vv27bNvyc0J99euXaPXhnpIc+WpWLGixX6M+tVS5qEOQQ159epVqp2P
j4+57NjAKjT3oQbp3bt3oUKFzEUk0qRJ06pVK8n56cyZM9USFi9enE2HWkNQ
HZqxWkyc3hOaydauXdvLy8tkUX19fWlaPWfOHJpzyZQWOAiabwoWeFUEvd+y
ZcvUYDR9NheM+nBxFjR7FReVpsM//PBDxowZzb3/+fLloxk0DZfy1RcL9998
841M45gs+c2bN8WxfvzxR+fX1znQa9ChQ4ds2bKZK7mnp2fRokX79+9/+PDh
2NhYXYmfPn26ffv2WbNmNZmy0neNGDFCchktKCjIXEdXr149NdiFCxe+/PJL
k8PE559/Tua3NuW3b99OnDiRhjNtFDJjOnXqZMtC36FDhxo3bvzRRx+Za97y
5ctT7k+fPrU6CxV6lGqb5M6dm80oZcqUgpHin3/+sZg4tVJISAiNFH5+fibr
kixZsrp169J4/e7dO6ur4JxcFMi8YRuBmojNKE+ePCbbauPGjSZTe/Dgwdy5
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
AAALd6cY8eWXX+pKQXuxjvYmZefkwuKCwj2ZQFziFk+0cZQtW5ZLQXvbmnNy
YYFwH29qvWL//v2OS1zXKQagS7jnvKu5mXef6AQ44T4kJEQ+rrY3K1eunCC8
vYT72bNnc/lOmTJFJqIzhXtuK76b8NZvkCDgrj9InTo1Kyw2atTI3EfE3YTI
XqinvidZs2a1aAx88sknbDoeHh52tB9sR7ssz906p1pN7u7uMleKu3h9zaF1
CGnHu2NsTzwyMpJLQews1wWFe20j1KpVS6ZUDsIW4Z5ahqvLokWLdOXO3VJB
zJo1y5Bc5LFCFn/37l3evHnZWNRnalUwLRDuAVCwRbjnJBI3PW6cFbgriYku
XbroSmHo0KFcCuvXr5ePzl2q6AThnoawjBkzsnHHjBnDBqBuLUuWLMpPv/zy
i8UE+/fvz7WA1ju0c7BauOdOf1gn3E+bNk1Xab28vNjoVvsZAICFu7qiVatW
6k/R0dGKFzLtgW7OcRZNbcLDw9Vf1W9cl4swRwv3169f5753bo+6Re7evcul
UL16dV0paHn79m1AQACbJs3T1V9VD2/aHWLUtmws1iUCzURU17L0pMQF0O6J
3b59u42V0svx48e5Ha3seyjAKOFeu3s8KCjIinQAAADYl5iYGK5/1nsj87Vr
17gUtBfrOCcXFhcU7skE4hLXe4aILD02Oplw2uI5JxcWCPfE8OHDuWbnHDXb
N3HcFqQLXcL9+PHjucAbN250ZmlZOOF+5syZ8nFv3brFVaR27dqC8PYS7kuV
KsWmky9fPnaLtQBnCvfcCqGbfrdywNVgp/MK6mkvdokmMjKSi8jdgscuVqgu
rHv06GGxAFpnNa7mhIHb19e+fXv2106dOil/l9xX6fr1Ncnbt2+5VZSyZcu6
TuK3b9/mWpVz48nhgsK9thFsvCvTRmwR7pcsWcLVevr06bpyHzduHJfCqlWr
DMlFHitk8d9++40rwNy5c2XygnAPgIItwr32xKXFC9k5tm7dyqWg97oN7a5d
XSevOfdHThDuieDgYDZujhw52FO069evV/7u7+8vI3xPmDCBawHWBbQz0Qr3
z549k4nIea23TrgfPXq0fFG1K4RlypSRjw6AOQ4fPsy+V2nSpFGPMqlmYc2a
NbURue3c1LOpP6kuKXQdz3G0cP/8+XPuI6pcubJ88YiLFy9yKTRp0kRXCiZp
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
wqEX1dyeRkqcu+l+9OjRMqXq16+fGkXv7a6JAyuE+6ioqHz58rFRJN1bDR06
VI1i+9yHm+wo+prFG7cnT57M1VfmxIddhPt4zTqMm/m9KCp///035+LATUK4
J7hndPnyZS7A3bt31V+bNGmiTYG7Ufr/sXff8VJUd+P44VJVQseIVEHQYGyB
KBbEBBDEgkawoMaCFVFsYDRGNDZMLDzRRPlGk5g8UWyxoNFgSWyJ+qgEY0OF
WKJoQlEEpPs7YZ9nfpPde/fu3bu7s3t5v//wJXOnfM7slHPmM3NOaGLk8l5E
aINHjxlbtmw5f/78WhehZOJDGERqfVV+1qxZmUs1qvuz05deeil+862qqsrl
XanVq1fvtdde0VLhMlKnjdZJOMLTOsFL6d69e+5v1EfKv7w1+dGPfhQvfp8+
fWodRGbVqlXx5+pZUpNpKw8Vg1qHGw5HYLyuGy6Jr7zySq2lKNvE/Zf/2Vli
ow2Py3IZ6uXdd9+Njs+wQ5599tlcSpRF2qAq1Y4cHX7KaIbMalso6Te/+c34
Smq9C3+ZMWxHqA9kf9myNFvJRR5p8XCrTXtZpV+/frXeTDNTRRL3bMzSev4J
DfO0GeIX/BNPPDFzDWn1n7333rvWC0Jak6Fbt271fI8ubXDecBnPkkwPVYhU
ljytvVPKxH2w//77N6pOHqPMh/Zj2osQOXafEh+mra4DD2XKHEIly8fsqQGy
t9pqq1APjC+Sd+I+OPvss7Mv9fDDD6flGc8999y6FRJqEx9+Iq7WTiFOPfXU
zKVat26dR49GpUncf5kxVEffvn1rbdfcf//98UVatWo1d+7cnEqVs9/+9reZ
e7LWYUS++OKLsLczF6xr1+uhIpr2hvnkyZNzWTD+Mu2AAQPyywiEwywt/lqH
Zgu7Je1hcqOSJ+6DW265Jb62cJt+//33a10qtPLiwy7U8/UzADKtW7du6NCh
8Uv0kCFDsoyjHZpaaRWhXHJDpdnKl2WcuA+mTZsW30THjh2zvIoQQkob5mbU
qFG5RFWarXwpcf+f/vKXv8SfXoZqdvZXc8P8Ud90oQH7zDPPZJn5+eefj3+V
0Lhx4+w9PoVfcOrUqdH8oQqXSxcKDU8eifsvNwwGnTZKbzinsi9y7bXXRpmX
8LNm5pHrKu1B1kUXXZQ6AM4444zQosmcP5T0+uuvT3sSsvfee+dyLhcqcZ/5
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
2EpYqlFu4k+34p9kZpf392jVCje4tJzgpptuGu6PJ5544umnnx7qDPGuZlKO
O+64aj+zLfFW0j6vyyLeHVDae4BZfPOb38xzn5aNP/7xj2kdHoY6W6jDfPe7
3z377LOPP/740F5OG8sgl0/eUp566qm0tzcbbWiGhzZ1+E1Dc/jQQw9N6wah
Y8eOTz75ZMGLGY6uk4omtPpz6Si4JmkdFeZ9vIV6dbdu3dIW6dWrV6hyh10d
dvhhhx2WlnFu165daCLlF/YFF1yQJdTUI7Wzzjorx6KFev6CBQuybC6t97Ds
au32MG7ixInVrmTzzTcPLcqBAwfGH5Htt99+q1atSuv3Pq7aXu6/3NCsTnsN
LNxHwhUs7KIDDzwwfopl/9olNJfSPo9ttCHXHyaGszUU/Nhjjw0bikZYa7Sh
BR2ubwXvkuW999479dRTi3dalZvcr3t1Mnr06PhPueuuu+ay1IMPPph2DNx7
7715xxAa4GnVmHDM9O/f/8gjjwzH5ymnnDJy5Mi0h0Khqf7BBx/kvcU6SUun
HnTQQfVcYZmU9/XXXw/bih9j5557bpb87/LlyzM/xklVR1P303Cpjz/cToWd
+SZe7isPawt7O9R1TzjhhH322SftUVLYh7U+zkr7KjOL+H0/7XuTmoTSRYuk
9ZSYRShOTdGuWLEiXD/T5k+9YHDMMcecc8454Robjsa0gyf8qVBZ+y83dOQe
f6CUKub48eND2PEnXc2aNcve69GcOXMyv2EMB3n4lc8888xwqO+8885pf912
221zGd6r9FuJy71SkTJkyJBq1/P2229nJr8abUgIhirZbrvttv3220evJTRv
3nzmzJlpb9+leeGFF1Jrzrw4Z5fjGZqHK6+8MqnbJeWjnk/yaxJa32nV8p49
e4Y7RTjxQz05XgXNPjpwOP7TbvGNNryWFhosYVWhKRr+mjmqe94tl2otXbo0
3EOrqqqyn6q77LJLKreee+L++uuvz/1SkOM348EPf/jD+IKhulLXRy5pnnvu
uVrbj+Gf8b/Wp/1Yrcz3Uas1ePDgVJIl8+WrSMeOHWvaSmbiPrTp4hmfcG8N
NZ9wn0p7qzalTZs20aW+gMJJmvR1giL63ve+l+NY5+HYbtWqVfyQu+qqq3JZ
MNRO40uFozf3TiEyvwWrSfytqtwvbqEqUtOmw7V3zJgxafOHulm48oRKbyjU
0IyvrkIDoRjf2kd++ctfxjcX7j65jJy1bNmytJZLfT7iDvs57eloow0dfYTm
XnRB7t27d/yv4dJUkI+ebr755vjtO77+0BgJdeNQ54/uyKEOEHZO1BFKpjBz
tOZqBwesSR7jpYaGWNgz8Rf8Gm145zasKlQkQgtu3Lhx4faR9jOFI03WHqAE
fve736V9gVit0BwLV+Z58+aVyVYqK3EfvPHGG/vvv3/a3bBa22+/fd5dQRZ8
KxL3uVi0aNFpp52W2TdUph133DG07uu08iVLlkycODFzWPBMobEcarnZO6fN
Wy7nb3386Ec/yju2QiXuv9zwzWComlb7tCFNqJYfc8wxuTRGapJL4v7LDVet
tI/yMiM577zzan3oVLzEfTBjxoy011cyhWP4kksuSb0+nUfiPvj73/9e7Xc9
kVSGvdZo169f/+tf/7raTvszDRgwIO9vG7PL/C6gYdt8882LsRtvv/32+FZy
6czkyw3jJsQH1GvVqlU9G55vvfXWqFGjcrn5hsb71KlTC5iprNVvfvObeAAF
eTRRDuWdPn162rZy6W/h/vvvz+Vi2LJlywsvvLCuA1zmuPIQ50EHHZT5bXWm
ykrcpzz00EOZnSdXK9wIHnzwwTrt4Vw88cQTabn7NOF8v+OOO2pdz/Lly3/w
gx9UO/JmmnCQX3zxxfmlfkqzlUihEvdfbuhU7Ygjjqg1WxfqvalvnSoucZ/9
KGIjES7CRTrA3nzzzSzJ00YbUh5XXHFFretZt27dT3/608zXvDOFhuopp5yy
cOHCYhTnpZdeGj9+fFrvYY02NE6//e1v33bbbdHnk++++258hhB5TessUuL+
ww8/jOdWwlWx/sVfunTpueeem3v78eOPP67/RuPCYTBp0qRqc0YpoeIxbty4
6A5SqMT9lxtGFwoVg1orhMOGDSvSKH6hQlXrbqdyhSth7k+30hLZOXbEkTaG
YFhJ7odfgon7lLvuuivLc5VIqK2FchV7JM1FixbFOyMNOyfHBdO6lqpnW/Xz
zz+fPHly2lsc1QpH11FHHZX945c6+ctf/vK1r32t1t/i+OOPT33PXiaJ+5Q/
/vGPaZ/J1KRHjx65tKQAKJRQ1Q9X6VDb32677dI60mndunWoZl933XU5VntK
tpW33nrrxdzEe+n85z//meNSRXoQFBrpP/7xj8PNNK0iEZrSO+644/e+972n
n366/t91FnArn3zySY57LN5T7urVq3NcKq0/7YoW9tXNN998yCGHpHXlF1qy
2267baieheM/7x83NFh++ctfHnrooZnp0c0333zkyJHXXHNNfZLItVq4cGGO
v2keZs+enWVYxlq9+uqrhT3eQqPj17/+9eGHH57ZSUWnTp1GjBjxox/9qP6X
iHDKZAk13vtr2Pmh1bbrrrumdd3Qr1+/KVOm5Dg8Yu57Kcjj29iVK1fecsst
Bx54YNqXti1btgyttmnTpsVHy8oSTPYXt5YvX37jjTfuscceaa+ybLnllkcf
fXSdvuNYs2bNrFmzzjzzzHB6xtuYqZgHDhwY/pTZ42hh1elHqXQFf0qZkvrc
IPLuu+/muODUqVOjpS6//PKCBPP2229fe+21Q4cOzXzZpnfv3qFt/pvf/Kb0
r6Z/8cUXRxxxRKqkxx57bI7freQi2fKG++mcOXPix1iOXfGHPfCnP/1p8uTJ
22+/fVp1tE2bNvvss0+4n+bd/3aWlYe9FPZVWHkuKfuUMGeO51e8i/KXX345
l0XiH26HOkaOG8plKIrw0zzzzDPnn3/+TjvtlPZOY7jY7rzzzqecckp9akS1
WrBgwQ9+8IMddtgh/qlpqIxts8025557bu5XiS83dOx/2223HXXUUZmDV3bt
2vW73/3ujBkzMjuTrKvSbOXLDcPW5PhDp8R7dq1WmOGcc87p379/2le9Xbp0
OfHEEx966KHogrNkyZIsG4oaa2FX1CnC4r0EFe5ZdYqEBin3QevyEFYeqseh
wpl2nezWrdu4ceP++te/5r6qUAmfOXNmuLT26tUr7WQMzdLvfOc7P//5zwuY
m6hJaM2FavzTTz999913//73v3/ppZcyP1z929/+Fg8vyzDQoVCLc1anhmRo
PUU1wPqPMh/J0n4Mv0Kh2o9ZhAvy6aefnvayfWiXHXnkkWkfDoRfoaZjPsuB
V23iPiVUPI455pjMLsdDkyocfvfee2/x7vjh9lHKawIlVqc622OPPRad2hMm
TMhxqVWrVoXTNlowrCT3LYaTLseCxC+GuT9izeW6HSpajz/+eKjf9uvXL/Mx
+/Dhw8ONpmSjlV1wwQXRnsx9xIFZs2ZFS4VGa0GqduG+8N///d9jx47NfLEt
XKnCbpk6dWr2wdzzE36OBx54IGw3rSeWVAvokksuef3116OZwx2zpp8+/jZa
+PlyPGBezKHqnt3zzz9/0UUXDRgwIK27hqZNm4a2baicPPLIIwV8mABAHkKj
44033njvvfeK+ni5NFspZ6Hy9ve///3NN9/89NNPK30rpAn1/3/84x+vvfZa
+G/ufW3lKFRlQyUzrDycPn7WYov2dmg2LlmyJNlg1qxZE370EEwIqT6vOhRb
2FHvvPNOuMIX7/gMv8tHH30UGj5vv/12QYa4XbhwYVhbCPtf//pXfqOqQVyo
20Rna+Yw3w1P5ZZ38eLF4WIVriThIlDwBxGplYfbx0Zb1/1yQyo21ELfeuut
Tz75JD6OcwmE3f7++++/+uqr8+fPr/9hGW4NqfvOggULincLLs1WCi78sqmw
P/jggxL/ylDpwimTamuEWmj92xrr168PF9twMoZGaBmejE899VQ8FzB48OCk
IyqKZNuPqXtfqkpWwNVmSdynhEpUOIYfe+yxu+66a9asWSGAgj8GAbJbtGhR
uP5vzI/ZM6Wq1qW/IH/++edhi+HnKOoHVsWzdOnSuRt8/PHHde2GDgAAAAAA
KHM33nhjPPl72mmnJR0Ruao1cQ8AAAAAAABAKb3//vvz5s2LD5aXi1NOOSWe
/L3zzjuLFB4FJ3EPAAAAAAAAUFZSY6l36NAh9+HL165dGx9uuFmzZhXagfDG
SeIeAAAAAAAAoKykEvfBs88+m+MiDzzwQDzze+yxxxY1QgpL4h4AAAAAAACg
rESJ+wMOOCCX+VesWNG7d+8o7du0adM333yz2EFSQBL3AAAAAAAAAGUlStwH
11xzTfaZly1bNnTo0Hja98c//nFp4qRQJO4BAAAAAAAAyko8cR+MHTv29ddf
z5xt5cqVt912W/xb+9TM69evL33M1IfEPQAAAAAAAEBZSUvcp/Tp02fMmDHj
x48/55xzjjnmmKFDh2666abxGRo3bnzRRRetW7cu6fCp3Z133jk0pkuXLvGf
cpttton/9Z133kk6XgAAAAAAAICNywsvvHDqqae2b98+M31fk7333vuPf/xj
0oGTqx//+Me5/7izZ89OOl4AAAAAAACAjdGaNWueffbZyy+//MADD9xmm22a
N2+els9t0aLFnnvueeGFFz733HNJB0vdSNwDAAAAAAAAVJw1a9YsWrRo3rx5
f/vb3959992lS5cmHRH5+/jjj1/M2fLly5OOFwAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAA2CisXbt25syZd26wbt26RFZ1991335mzN998
sz5BAgAAAAAAAED5mDNnzq677tro/6xatSqRVTVv3rxRzq666qq8gwQAAAAA
AACAMrFixYopU6akZczzS9zXf1UVmrhfu3btZ599lnQUAAAAAAAAAFSeWbNm
9erVKzMnnkfiviCrSiXud9hhh/45uPXWW+saZDG88847W2+9dQj7q1/96pQp
Uz799NOkIyqW9evX33vvvUlHAQAAAAAAANBALF68+KSTTmrcuHGjRo222GKL
W2+9dcstt8wv217AVaUS9x9++GHdC5SMtWvXbrfddvEXFbp27frEE08kHVdR
3HDDDeFX/uijj5IOBAAAAAAAAKAhGDx4cKNGjRo3bnzyyScvWbIkTMk7217A
VVVc4v6RRx7J7GSgqqpq8uTJ+Q03ULbWr1/fvXv3ULo777wz6VgAAAAAAAAA
GoLdd9+9T58+jz/+eDQl72x7AVdVcYn7n/70p5mJ+5TBgwcvXbo06QAL5o03
3kiV64c//GHSsQAAAAAAAAA0BHfddVdaSj3vbHsBV1VxiftQ9poS98GAAQMW
LlyYdIyFcfPNN6cKdcIJJyQdCwAAAAAAAEDDlHe2vYCrqrjE/Z///Ocsiftg
p512Sg0fUOnGjRuXKtHBBx+cdCwAAAAAAAAADZPEfR7ee++97In7YP/991+3
bl3SkdbX3nvvnSrOPvvsk3QsAAAAAAAAAA1TGSbuFy5cOHv27Oeff/7VV19d
sGBBfUIqktWrV1dVVdWau7/sssuSjrS+evXqlSrL0KFDk44FAAAAAAAAoGEq
n8T9Cy+8cM4552y11VZp6e8uXbocffTRzzzzTH1iK7gtttii1sR9kyZNnnji
iaQjzd+6detSP00wfPjwpMMBAAAAAAAAaJjKJ3HfrFmz1LJ9+vQZNmzYgQce
+M1vfrNp06bROocPH14+H+D379+/1sR90K9fvzVr1iQdbJ4++uijqCAjR45M
OhwAAAAAAACAhql8EvfB2LFj33zzzfifFi9e/IMf/CCaoXPnznPnzq1PkIVy
8MEH55K4D66//vqkg83TnDlzolIceOCBSYcDAAAAAAAA0DCVSeK+cePGN954
Y00zPPjgg9Gn93369FmyZEl94iyIM888M8fEfbt27RYuXJh0vPl45plnolIc
fPDBSYcDAAAAAAAA0DCVQ+L+pZdeeu2117LPc+6550Yr/973vlefOAviuuuu
yzFxH1x++eVJx5uPhx9+OCrC6NGjkw4HAAAAAAAAoGEqh8R9LhYsWNCsWbPU
yjfbbLOlS5cWdv119bvf/S73xH337t3Xrl2bbMB5uOOOO6IiHHbYYUmHAwAA
AAAAANAwVUriPthrr72i9c+cObPg66+Tl156KffEffDwww8nG3Aebrnllij+
I488MulwAAAAAAAAABqmCkrcT5w4MVr/+eefX/D118miRYvqlLg/6KCDkg24
VkuWLFm2bFl8yrRp06L4TzjhhKQCAwAAAAAAAGjYKihxf+WVV0brP/744wu+
/rr6yle+knvivmXLlitWrEg65Gy+8Y1vHHroofEpl1xySRT/xIkTkwoMAAAA
AAAAoGGroMT9T37yk2j9hxxySMHXX1fbbbdd7on74PHHH0865BrNnj07RLjJ
JpusX78+mnjOOedEwSfexQEAAAAAAABAQ1VBifvLLrssWn859Ny+33771Slx
X86576hX/H/+85/RxBNPPDEKPuz8BMMDAAAAAAAAaMCSTdx/+OGH06dPv/nm
m3OZecKECdH6L7zwwvqEWhDjx4+vU+J+wIABSYdco+OOOy4V5DvvvBNNPOyw
w6Lgr7vuugTDAwAAAAAAAGjAkk3cP/7446n5lyxZUuvMAwcOjNb/8MMP1yfU
grjqqqvqlLhv3rz5mjVrko66envvvXcqyDfeeCOaOGLEiCj4X/ziFwmGBwAA
AAAAANCAlUni/v77788+57vvvltVVZWauXXr1suXL69PqAVxxx13xPPyrVq1
2nfffdu2bZsld//WW28lHXX1evfunZm432233aLI77vvvgTDAwAAAAAAAGjA
yiRxP2zYsOxzxsdbv/jii+sTZ6E899xz8aT8pEmTwsSFCxcedNBBNSXuH3zw
waSjrsb69es32WSTzMT9dtttF0X+pz/9KcEIAQAAAAAAABqwMkncB1dffXVN
s916662NGzdOzbb99tt//vnn9YmzUBYsWBBPyk+bNi01fc2aNQceeGC1ifvy
HCn+n//8ZxRhPHHftWvXaPorr7ySYIQAAAAAAAAADcndd999Z0y7du2i5Oxt
t90W/9OKFSuKvap44j448sgjX3311fgMf//730855ZSok/zevXu/9957BdsX
9bN+/fqWLVtGwf/85z+P/rRo0aLOnTtnJu4nTJiQYMA1eeWVV6pN3Ldp0yaa
/v777ycYIQAAAAAAAEBD0rx582o/Bs/04YcfFntVCxcuPP/88+Of6gedO3fe
dddd99hjj6222iqaWFVVdfTRR3/22WdF2CX569u3bxThz372s/iffvnLX2bu
h1CEpELN4plnnokifP3111MT161bF70vESxbtizZIAEAAAAAAAAajCOOOGJM
bhYvXlyaVa1du/bJJ588//zzBw0aFP9sP2jWrNnAgQMnT5789ttvF3Q3FMaw
YcOiUKOu8lPWrFkTf/Eg5eCDD04q1CweeeSRKMKox4NPP/00mviVr3wl2QgB
AAAAAAAAKKUlS5bMnz//nXfe+de//rVu3bqkw8nmpJNOirLbV111Vdpfzzjj
jLTE/T777JNInNndfffdUYRz5sxJTXzvvfeiiTvuuGOyEQIAAAAAAABAta68
8soou33RRRel/XXKlClpifvdd989kTiz+9WvfhVFOHv27NTE559/PrOjgM8+
+2zmzJlXX331a6+9lly8AABA6axbt+7OO++cPn36Bx98kHQsAAAAAFCNGTNm
RNntCRMmpP317LPPTkvc77zzzonEmd0NN9yQmbi/7777oonf//73//73v590
0kmbbrppasopp5ySbMwAAEBpPPvss6lWwLHHHpt0LAAAAABQjeeeey7Kbo8d
Ozbtr0cffXRFfHE/derUKMLoU/qf/exn0cSddtqpWbNm8YKMHj062ZgBAIDS
eOSRR1KtgEMOOSTpWAAAAACgGp988kmUyx4+fHjaX7/1rW+lJe6HDBmSSJzZ
XXjhhVGE7733XmriD37wg0Y1O/TQQ5ONGQAAKA2JewAAAADKX6tWrVJPsXbY
YYe0P3Xs2DEt3/2d73wnkSCzO/PMM6MIly1btnbt2hkzZnTo0CFL4n7cuHFJ
Rw0AAJSCxD0AAAAA5W+77bZLPcXq0KFDfPoHH3yQme+eMGFCUnFmccIJJ6TC
q6qqGjt2bPv27bOk7FPOOuuspKMGAABKQeIeAAAAgPJ3wAEHpJ5iNW7ceOXK
ldH0mTNnZua7L7/88gRDrcnhhx9ea6Y+zZQpU/Lb1hdffLFw4cKChg8AABSR
xD0AAAAA5e+MM86I0tnz58+Ppk+ePDkz3/3b3/42wVCr9cYbb3Tq1Kmuifv/
9//+X36bO+SQQ0499dTCFgEAACgeiXsAAAAAyt+1114bpbOfeeaZaPouu+yS
me+ePXt2gqGmWb58+ZQpUzbZZJO6Zu2Dp556Ko8tPvfcc2HZvn37FrwsAABA
kUjcAwAAAFD+7r333iidfccdd6Qmfv75582aNUtLdldVVS1fvjzZaCN33nln
9+7d80jZp3zyySd5bPSCCy5otGFMgfLZDwAAQHYS9wAAAACUvzlz5kTp7Kuv
vjo18eGHH85MdpfJl+aLFi0aPXp03in7oEuXLvlteq+99kqtYe7cuYUtFAAA
UCQS9wAAAACUv6VLl0YZ7dNOOy01MT7wfeToo49ONtRg1apV22yzTX2y9sFl
l12Wx6ZXr14ddcv/5JNPFrxoAABAMUjcAwAAAFAR2rdvn3qQNWLEiNSUrbfe
OjPfff311ycbZ3D77bfXM2u/7777rl27No9Nz507N1rJ73//+4IXDQAAKAaJ
ewAAAAAqwoABA1IPsvr06RP++dZbb1Wb8n7xxReTjvTL0047rT5Z+6OPPnrF
ihX5bfqxxx6L1nPfffcVtlwAAECRSNxXujlz5kwHyt5jjz2W9NUCAACg4kVD
xjdv3nzt2rXTpk3LTHl36tRp3bp1SUf6/48yX1e9evW655576rPpX/ziF9Ha
Zs6cWagSAQAARSVxX+m+8Y1v5NcMBEqpSZMmK1euTPqCAQAAUNkmT54ctbPm
z58/dOjQzPZXOQxwH/Tu3buuLcevf/3r119/ff0bj5dcckm0Tl3lAwBApZC4
r3T9+vWrewoRSMCyZcuSvmAAAABUthtvvDFqZF1//fVNmzbNbHzddtttSYf5
by1btqxrs7FQmz711FOjdf7hD38o1GoBAICikrivdBL3UCkk7gEAAOopepAV
fOUrX8lseTVp0mThwoVJh/nlihUrcmwqbrrppo0bN079f6G2fuSRR0brf/zx
xwu1WgAAoKgk7iudxD1UCol7AACAepo7d272ltfAgQOTjvHfPvnkk1obiU2b
Nj3rrLP+9a9/tW3bNjWlUFs/4IADoq386U9/KtRqAQCAopK4r3QS91ApJO4B
AADqaeXKlVVVVVlaXpdccknSMf7b22+/nb2FOHDgwL/+9a+pmZs1a5aaWKit
77333tGGnn766UKtFgAAKCqJ+0rXoUOHeqUSgVL5/PPPk75gAAAAVLwuXbpk
aXlF2fBk/e1vf8sS5Nlnn71u3brUnKtWrUpNrKqqKtTWBwwYEG3rz3/+c6FW
CwAAFJXEfaVr0aJFvdOJQCl88sknSV8wAAAAKt5WW21VU7Nr++23Tzq6/5U9
cR9/u2DRokWpiS1btizU1vv27Rtta/bs2YVaLQAAUFQS95VO4h4qhcQ9AFSc
ZcuWLViwYN68eQsXLly1alXS4QCUhYsuumhocnbbbbcsza4+ffokGFvcwIED
44E1adJkyy23bN26deqfgwYNiubcc889o3lSU0IZe/To0aFDh/A/tW5ojz32
2HTTTXfffff4xPjDorQ/AQBA3oYMGTJ48OBQgw2VzF122aV///477bTT9ttv
/7WvfW2bbbbZeuute/bs2a1bty5dunz1q1/t2LFj3759kw65wuy8886pavzm
m2+edCzkI/vIbkD52GuvvZK+YAAANdp1111DG7Nr167t2rXbZJNNmjVr1rhx
47S7eYsWLTp06NC7d29JkI3WaaedtmbNmqSzppCk5cuXexABAAAAAAAAJOiJ
J55IOnEKCbvzzjvPS8ikSZM222yzmk7Pnj17JhVYphDqbrvtdsghh4T/iSZG
n89Mnjw5mnjMMcekJlZVVTVt2jReoh49etS6oa9+9athzq9//evxTcdXMnHi
xMIWDaBaJ510Uvzic/zxxycdUe1S/ZOEa2/SgQDkJFTzQtXu1FNPPeGEE0Id
8vDDDx89evSoUaOGDx+e+hB+4MCB/fv333HHHbfddtvevXt37959iy22aN++
fevWrVu2bJnI+7dt2rRJeredF+8Lq3PnzkmHU4tDDz00Feo222yTdCzkI+pm
LbT+Blagdu3apeLv169f0rE0BH369Entz06dOiUdC/+rWbNmqR/l7LPPTvZy
sf/++0e3pxBVssEAUKGi5EJKaC0mHVGeTj755F122aVVq1b1bIGGFnE8I0OD
NH78+PiP/vzzzyedNYWN13333ZflmnzrrbcmHWAtTjnllBBnuPvEJz7xxBM1
lahXr17ZV7hq1armzZuHOffbb79o4sKFC+MrWblyZVEKA/Cf3nrrrfjF529/
+1vSEdVuk002abRhpJKkAwE2FitWrPjwww/nzZv36quvPv30048++ugDDzwQ
KrHTp0+fNm3alClTQgv0jDPOOProo8eMGbP//vvvscce/fv379evX+fOnVu2
bFn3hxbJ69mzZ9J7/cuwV6N4dtlll6TDqYUx7itdOGFTv+B7772XdCz5OOCA
A1Lx+26lIO66667U/jz22GOTjoX/lfr8IVi2bFmykfz617+Obk+bbbZZssEA
UKFefPHFePurEqugL7300mGHHdakSZNCNUIPPvjg9evXJ10siugf//hH/BeX
uIcEjRo1qqar8aabbrp06dKkA6zFCSecEELdYostoimffvrpEUccUVOh2rdv
n32Fc+fOTc25zz77RBPnz58fraFly5bFKgzAf5K4Bxq8PNLu/fr169WrV+Wm
3etP4r6uJO4rncQ9cRL3ZUjiHoCGpKIT9y+//PK+++5bbUOyRYsWAwYMGLph
pPu2bdvWtR364x//OOnCUUQS91AmPv7446hDs0xjx45NOsDapXL03bp1C/+/
Zs2aG2+8MWowVqtp06bZVxh9rT9kyJBo4l//+tdoDfGXBACKSuIeKHPS7ono
3r170r+8xD0lJXFPnMR9GZK4B6AhqdDE/UcffTR27NjGjRtnNiG7det2yy23
hPZ7NPOaNWtmzZrVv3//3Nuhbdq0Wb58eYIFpKgk7qFMTJ06Ncul+KGHHko6
wNodeOCBIdRNNtnk0ksv3XrrrXO5xaxbty7LCn/1q1+lZhs6dGg08cknn4wW
79evX/GLBfBvEvdAUeWedt9///1D1Siedm/RokVObXuKoBw6gJK4p5Qk7omT
uC9DEvcANCQVl7hfv379TTfd1KZNm2rbj8OHD6+pX+XVq1d/5zvfyb0pGu6z
JS4aJSNxD+UgXM+zZLo7deoUrttJx1i7nXbaKfc7S0r2cl1xxRWp2YYNGxZN
nDlzZrT47rvvXvxiAfybxD2QhbT7RqvWLqRKQOKeUpK4J07ivgxJ3APQkFRW
4n7x4sUHHXRQTY3H0aNHr1q1Ksviy5cv79GjR45N0bPPPrtk5aLEJO6hHDz8
8MNZLsITJkxIOsBarFu37uc//3lVVVWOt5XIypUrs6x2/Pjxqdniifv//u//
jhbfb7/9il84gH+TuIcGrNa0+xlnnHHSSSdJu5NJ4r6uJO4rncQ9cRL3ZUji
HoCGpIIS9/PmzcvybebXvva1XDq3v+mmm3Jsio4ePboEhSIREvdQDrK8iBU8
9dRTSQeYzUMPPbTDDjvkeENJk/0dsyOPPDI1W7yr/J/97GfR4kcddVTxywfw
bxL3UJ5WrFixaNGi0EAOZ+ULL7zw6KOP3nfffbfffvv06dOvueaayy677Lzz
zhs/fvxxxx03ZsyY4cOH77XXXv379w+t6S5durRr167aIedykfeCNDAS93Ul
cV/pJO6Jk7gvQxL3ADQklZK4f+ONNzp37lxTs7FJkyazZ8/OZT2LFi3K8evI
Qw89tNiFIikS95C4Dz74oGnTplkuwnPmzEk6xuqF+9GIESNyuY/UJPsY96NG
jUrN9u1vfzuaOHXq1GhxHcIAJSNxD8VQbdr9tttumz59+tVXX33ppZeed955
p5566rHHHjtmzJh99tln0KBB/fv3792795Zbbtm2bdu8ayDS7mSX+xHSvHnz
pE8jiXtKSuKeOIn7MiRxD0BDUhGJ+wULFvTs2TNLs/GYY47JfW19+/bNpSka
moFFKxAJk7iHxF100UXZL8LPPvts0jGmW7NmzaRJk5o0aZLLTaQmLVu2zL6V
IUOGpOYcPHhwNPH888+P1nD99dcXt5wA/0fiHjItX7584cKF8+bNe+WVV0I7
4tFHH7333ntzTLu3a9cu7yqEtDtFEg6ttm3bdunSZeuttw7H6l577TV8+PBw
9B533HHjx48Px/Nll112zTXXTN8gtUiPHj2SPhEl7ikpiXviJO7LkMQ9UFkW
L168ZMmSpKPgP6xcuTL8LitWrEg6kH8r/8T9+vXrhw0blr2l+Ze//CX3Fe67
7765tF4ffvjh4hWKZEncQ7LWrFnTpUuX7BfhP/zhD0mHme673/1uLreP7EaO
HJl9K7vuumtqzkGDBkUTx40bF63hoYceiqaHu/Yrr7xSrAJXjuXLl4f6zMKF
C5MOBBoaiXsapLSx3R944IE777zz1ltvnTZt2tSpU7OP7d68efP6VwYgU31e
zGjRokW7du3C8RkO1P79+4cjNhy6Y8aMCcdwOJjDIR0O7HB4h4M8HOrhgA+H
fag4heM/nAiLFy/O3hlU3D//+c/UFrfaaquinqS5kLinlCTuiZO4L0MS90CZ
W7t27cyZM0888cRQqYh3Qtu2bduBAweefPLJoZaefXBViuGjjz76r//6r333
3XfzzTePfpQmTZr06NEjNKl++MMfvvnmm4kEVv6J+1/96lfZW6lhl65fvz73
FR5xxBG1tny32GKLNWvWFK9QJEviHpJ1zz331Hodvvvuu5MOM12oR9UadnaH
HHJIra/tbbfddqmZ99xzz2jiyJEjo5W8/fbboVIxefLk1AgyjRs3LsN7d4nt
vPPOYVd06dIl9yfPQC4k7ilD0u6UoYKn3cMBHA7jwqbd60/iPm8S95VO4p44
ifsyJHEPlK2VK1ded9113bp1q7Vd0KlTp5tuusmzzdKYO3fu2LFjmzVrVuvv
MmTIkND4KnF4ZZ64X7t27dZbb519v4VWbZ3WGdVXs7jwwguLVCLKgcQ9JKvW
flSCm2++Oekw02277ba1hl2TFi1aTJs2LZfXzHr06JFa5Fvf+lY0caeddkpN
bNKkyVlnndWyZcv4yp988slilrsCdOjQIbUrQmU46VigQZG4p8TmzZt3+umn
f/e73x0zZkwq5/6Nb3yjV69eW2yxRZs2bfK+C+tkniKpqqpq27Zt165d+/Tp
079//8GDB48YMSIcvccff/xpp5123nnnXX755ddee+306dNnzJhx//33P/ro
o//zP//z6quvhkN98eLFX3zxRdLnXN1I3OdN4r7SSdwTJ3FfhiTugfL0+9//
Pvsg4JnCXdvjzaIKd4ozzzwz3u9BrZo3b37PPfeUMsgyT9yHKmWtO+3EE0+s
0zq//vWvZ19hly5dPv/88yKViHIgcQ8Jeuedd6qqqmq9tl9zzTVJR5qua9eu
tYZdrR133PHll1/OcStRDjreqX7UCK2WxL3EPRSJxD0lduGFF2be5qTdKZJw
oWjXrl23bt369u3bv3//vffee9999x0zZsy4ceMmTJhw3nnnXXHFFdddd930
6dPvuOOOBx544NFHH33xxRdfe+21+fPnL168eCOsdUjc503ivtJJ3BMncV+G
JO6BcrNq1aqTTz45v3bKMccck3T4DdacOXN69eqVx4/StGnTOo3YXk9lnrif
PHlyrXvsuOOOy32FH3zwQfYnP+Gv9913X/FKRDmQuIcEnXvuubncDS+66KKk
I0235ZZb5hJ5XMuWLadMmVKnIYpatGiRWvaoo44K/1y/fv1tt92W/VWHcCsv
WqErg8Q9FInEPSV2/vnn1/VWy0YrnOZt27bNknZPzRZqVtLuhSJxnzeJ+0on
cU+cxH0ZkrgHysrHH3+8xx575N3Sady48bPPPpt0IRqgcAcPV+a8f5fQ6ixZ
qGWeuD/44INr3V2hhZ77Ci+66KLsayvDVBEFJ3EPSVm5cmWnTp1yuRWeccYZ
SQebrq6J+zZt2rz11lt12sSqVauixffbb7/vf//70ZD3WdR1Kw2PxD0UicQ9
JSZxX3HqObZ7586de/Xq1a9fvz322GPo0KF1Gtu91hGIUltp1apVaY7ejYHE
fd4k7iudxD1xEvdlSOIeKB+hzZJ3r62R0CZKuhwNSmg8XnjhhfXvza9kj8XK
PHE/YMCAWvdV8+bNQ/sxl7XNnTs39SivWuFXu/jii3MZgJhKJ3EPSfnNb36T
432wDDsFikafz1G/fv3quolFixbVaRMpH3/8cTHKW0Ek7qFIJO4pMYn7Eksw
7V6CwykVp8R9AUnc503ivtJJ3BMncV+GJO6BMvHCCy+0adMm70ZWpHfv3kkX
pUGZMGFC/X+UILRwSxNwmSfuQ/srl92VS34nFC20LmtaQzibbr/99uIXiLIg
cQ9JGTRoUJaLeatWraL/HzVqVNLBpttmm22y34yOOOKI6dOnR//cfffd67qJ
hx56qJYbXoamTZuuXr26GOWtIBL3UCQS95SYxH2dNOy0e/2lSipxX0AS93mT
uK90EvfESdyXIYl7oBzMmTMnekRZTy1btky6NA3H9773vYL8KMGkSZNKE3OZ
J+5Hjx6d4x47+eSTP//882pXsnbt2nDTbN++fU3Ljhw58oMPPihx0UiQxD0k
4rXXXstyGe/atWu490X/rNMwKKWRfXCiX/ziF6nZotcP9ttvv9xXvmLFiosv
vjga4D53ffr0KU5xK4nEPRSJxD0lNmLEiLreBzdOLVu2zDvt/sUXXyT9O5dI
al9J3BeQxH3eJO4rncQ9cRL3ZUjiHkjca6+9luP4sDnyoVZB1Dp4ep2ccsop
pQm7zBP3v/rVr3LfaR07djzttNNmzJjxP//zP2+//XYo2n333Tdp0qRevXrV
tMhOO+304IMPJl1KSk3iHhIxceLELNfwKVOm/OQnP4lfn5OON92RRx6ZFnPz
5s2j/w8XltRsUYdIYf4c1/zAAw9k6RMmuwMOOKBoJa4YEvdQJBL3lNhuu+2W
392wski7l0Zqb0vcF5DEfd4k7iudxD1xEvdlSOIeSNann3669dZbF7DN2KZN
m6TL1BDMmDGjgD9K8P3vf780kZd54j7cbbt3717YfZsyaNCgu+++24j2GyeJ
eyi9L774IkvPJ1VVVfPnz4/av0HPnj2TDjndz3/+81Rsm2+++Yknnjhr1qzb
b789Cvizzz5LzdauXbvUlBNOOKHWdS5YsGDkyJH1uZ2dd955RS53BZC4hyKR
uKfEKiJxX6e0e1SiUIuQdi+x1J6XuC8gifu8SdxXOol74iTuy5DEPZCssWPH
FrbVWYZd0Vacd999Nz4sb0Hcc889pQm+zBP3wdNPP516/lYQnTp1Gj9+/OzZ
s5MuFkmSuIe49evXjx49uleRbb755lkuzptuummYZ8stt4ymVFVVFTukutpq
q606dOjQpUuXaEq8UNHEEHlqSuvWrbOvsGvXrk2aNKnnfS0ez0Yr2o3hN0o6
FpLRs2fPFi1ahBpj27Ztt9hiix49eiQdUQPRrVu3+AUnXLWSjqh20ajfSQdC
Plq2bFnP22J24fAIt+mmTZs2b948ddEINZDNNtss3LLbtGkTLiDt27fv2LFj
aDN+9atfDReTzp07h/tsOBG6d+8erjN5lCisPLXpVK6fUkrt+TKsUlaucHtN
7dVwEiUdS69wwkandjidkw6nFuEKkAo1XBOSjoV8RD2thdtB0rHkI9zs3IwK
KMoRf+UrX0k6Fv5X+TwTiD8mCjXPZIMBSiOq6RVQhw4dki5WxYvqP4USrur5
PRbIQ5cuXeKbLs8qaAgyNAzrs0ubNWvWunVrFVRS0rpxePLJJ5NOnEKSVqxY
Uezn5AAAAAAAAABZ3HvvvUknTiFhL7300vRiuuSSS6JPIDN17tz5pptuCrNd
f/318enXXnttUaOqv0MPPTQVauvWraOJ0Rf3++67b5ZlQ5Hr8+Jf2J8jR45M
7Tei7xl/+tOfJh0LyTj//POznC9NmjTZaqutvv3tb48bN+6yyy5LOthKcuml
l8b35JQpU5KOqHbNmjVrtOEb26QDIR/Dhg1LHWyDBw8+55xzLrjggnAQTp06
9brrrqvQW97OO++cKtGZZ56ZdCwbndSeb9GiRdKBNBxXX311aq927Ngx6Vim
Dx8+PLo99ezZM+lwanHGGWekQv3GN76RdCzkI/qS7sorr0w6lnzssMMOqfjP
PvvspGNpCE4++eTU/tx9992TjoX/1bp169SP8pOf/CTZSI477rjo9qQSAhuD
SZMm5fowN2cHHXRQ0sWqeAMGDCjsjxIu6VdddVXJ4r/gggviWy//KmiIMFSQ
Ro0aNWjQoLDzQ+Wzf//+u+yyS/jnkCFD9ttvv3B/DIVK/DZNOQunWPyw11U+
FNvEiROz3Ph+9rOfRXNGra3gzTffTDDmXIRbUirUXr16paasX78+iv/SSy/N
smzayNF10rNnzwceeKAkRawMxrjnhRdeyP0MatOmzdChQ6dMmRLOo4ULFyYd
e1kzxj0lFr2EE1pzScdSGAcffHCqRLNmzUo6lo1Oas8b476AjHGfN2PcVzpj
3BNnjPsyZIx7ICmnn3567s+jchFqtqtWrUq6WJVtxYoVBe8n/5ZbbillEcp/
jHsoOGPcQyl98cUX7du3r+mu17Zt288//zyauW/fvtGfnnnmmQTDzsWFF16Y
CnW77bZLTQk1qyj+6667Lsuyjz32WB6VhC233PLKK68Mu7Qk5asYEvfUKXGf
plevXkcfffS0adOefvppjaM0EveUmMQ9BZTa8xL3BSRxnzeJ+0oncU+cxH0Z
krhv8JYuXbp48eKPPvpo3gYvv/zyiy+++Nxzzz26wfPPPx/+OXv27NRfFyxY
EGZevnx50lGzUYj6WCuIzp07v/vuu0mXqeI988wzBfxRgpNOOqnERZC4ZyMk
cQ+lFG+2ZDr77LPjMw8ePDj603333ZdUzDmKOr385je/mZoSGolR/DfffHOW
ZW+99da6VhIOP/zwNWvWlKRkFUbinvok7uMDeWy66aZ77LFHOLXDGTp//vyk
i5U8iXtKTOKeAkrteYn7ApK4z5vEfaWTuCdO4r4MSdxXui+++OLVV1+9//77
b7jhhosvvnjChAmHH374kCFDdthhhy5durRo0SK/xn5o4Hfv3r1///4jRow4
6qijJk6ceOmll06fPv3hhx8OTd3Vq1cnXW4agubNm+d3fGZq3779nDlzki5Q
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
+d27dym2SHnkI8nUTD6YtGuBv4WHhzPbZf78+bRr4Snpfz9EZ+hoFxRAJS9f
vhTf7RHcAwhi3bp18npc5E8qLYq9PI3w9/fv0KGDYJ2//7lx44aa1oMyjhw5
wqNm0rEPCQkpKiqiWLl2QnAPCO7VBME9aBiCexAQs+YR3EvLz88fPHgwj74o
q3bt2rQbQSG4j4yMrFixosSqMDc3b926NfmkN2rUSJlV16dPHw2UCjKVlpZ+
9913yl9oL5OOnjVFcC/T06dPxS8Z4AHBvbBKSkrmzJlTli3yRTkI7iWiHAmr
V6/mmPf06dMy56pVq1ZaWprgpYI8N2/eLON+LiEkJIRui3bv3i1gc8iRev/+
/XRbpDwE99oJwT2ALkJwD6AO7du3l9njMjU1zc7OVmlRw4YNE7DLJ9PkyZPV
tB6UwSO4b9euHUZS8iC4BwT3aoLgHjQMwT0IiFnzCO4lPH/+3N3dXeWu8z/Z
2dnRbodGg/vi4uLp06dLrARyuFm5cuWbN2+YaUQiERlfKFx1rVu3VmupIE9h
YeHIkSPLuOd/obNnTRHcS7ty5Qr5Kivj/uDr60u7Hfrj/fv3/fr1K/NnVP+D
+0WLFnE0f86cOfJmzMjIkPlICFdX12fPngleJ3AIDQ0t+67OCgoKot2gf5fl
1iUSDA0NFd44QqsguNdOCO4BdBGCewDBkY+VvPvkDxs2TNWlkW6nUF0+eapX
ry4SidSxKpRx7NgxVQvetGkTrWq1H4J7QHCvJgjuQcMQ3IOAmDWP4F5cSkpK
WW4SztKGtaqx4P7jx49fffWVxBpwcHC4f/++xJSkI1qjRg3uVVe/fn31lQry
5OXltWvXrux7/hc6e9YUwb2EqKgoY2Pjsu8PHTp0oN0UPZGTk9OkSZOyb5Ev
ykFw37dvX47myxsOZ2Zmfvnll9LT9+7dm/0FGmjMxIkTBdnbDQ0Nue+xoDFC
3SiVjOUPHz5MuzWqQXCvnRDcA+giBPcAgtu4caO8fteFCxdUXdrixYsF6fJx
u337tjpWhTLOnDnDXRvpfnfv3l38GZpk9EerWu2H4B4Q3KsJgnvQMAT3ICBm
zWtDxKwlnjx54ujoWJbOM4t809JujYaC+4KCAvFneDHMzc1Jx0Pm9N999x33
qnN1dVVTqSAP2YjdunUTZM//QmfPmiK4F3f69GkzMzNB9ocWLVrQbo0+yM3N
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
oDLnqw0NDTVQKsizfft2U1NThZuJA4J7YGRnZ5fxZzwWFha0GwFqoYXB/dOn
T+fOnfvy5UvahQAXspnmzJmjzK/NtU1JSQnZ7Xn/iomB4B5A3RDcg0II7vUJ
gnvthOAeQBchuAcQRPfu3SXOA/Tq1UvhXJmZmcbGxjJPIxgaGl64cEF84ufP
n7N/bdKkifK1JScnW1hYcJyyGDNmjMoNVif2VvmNGzcWfz0tLS0vL49WVboC
wT0guFcTDQf3paWly5YtI8cC8Tclhwzyovg34b1797i/4QkDAwO1lgryFBcX
T5s2jXvrKGP9+vW0myIMBPdlcffuXWdn5zLuS6amprTboXuOHz/u6Oi4a9cu
2oVwoRLcf/jwYdy4ca6uru/evZP+K3Pn28qVK2v5qiu3RCJRWFgY04U4ePAg
7XJUk5ubq+rt8WVCcA+gbgjuQSEE9/oEwb12QnAPoIsQ3AMIomPHjhLnAZTp
c4aGhso7jTB79myJiUn/x8TEhPmrvb29koV9/PixSZMm3KcsVq9erXKD1Wnb
tm1MYV26dKFdi+4pe3B/+/btpUuXkrFGgJjg4OCdO3e+efNG2GpBHRDcq4km
g3uRSEQ+dxLf1ebm5pcuXZKe+Ntvv+X+kifUVyrIQ47avr6+CjeNMr755hva
rREGgnveyBe7lZVV2fclPDiDhytXrpiZmZG1N2rUKJkJtTbQfHB/586dxo0b
k7erX7/+hw8fpCcoLi4mnUnmguhOnTolJCRooCpQ0unTp7/88ssvPv8gcOXK
lVr10DSFcnNzW7VqVfbvwy8+P+OedmsA9ByCe1AIwb0+QXCvnRDcA+giBPcA
gpA+e7B8+XKFc7m5uck8h9C8eXOZqWudOnWYCcQf/s5t0qRJCk9ZnDx5UuUG
q9P+/fuZwgYOHEi7Ft1TxuD+7Nmz7O9DpDVt2lTwgkFwCO7VRGPBvUgkGjVq
lPQHcO/evTKnf/78OfetYnHFveaRjThy5EiFx18lTZ48mXaDhIHgnp979+7Z
2toKsi8huOfn0qVLlStX/uLzU5wOHjyohSmnJoP7/Pz8mTNnkn2JvFe7du2y
s7M5Jj527Bj7wBdvb+9r166ptTbgRnZd0tXv2rUrs0Xs7e0vX75MuyjVFBQU
dO7cWZDvQ+LQoUO0GwSg5xDcg0II7vUJgnvthOAeQBchuAcQRIsWLSTOA2zd
upV7lrS0NJknEAwMDORdk8KeZiGUufaZuUelQq9eveLTZrU5d+4cU1hgYCDt
WnRPWYL7nJycatWqce8tMi+qAq2C4F5NNBbcz5o1S/qj5+npyTFL8+bNOT62
5ubmaioVZCotLR0/frwSh19l4Rn35VlycrKdnZ1Q+5KVlRXtBukqsiEaNmzI
rMa2bdvKvP8JRZoJ7j99+kS+jtgd0t/fv6CgQOFcWVlZI0aMYMtzd3f/8ccf
CwsL1VQkyJSXl0cGp40aNWK2gqGh4dSpU7X2DhLykP1NfDhcdrgRBIC6IbgH
hRDc6xME99oJwT2ALkJwDyCI9u3bS5wHUPhE2g0bNsg8gTB8+HB5s/j7+7OT
paamci//8OHDEg9HlsnFxYVPg9UpOzubqU1vogpNKktwP2HCBO69BSf8dQKC
ezXRTHC/c+dOmZ++69evc8w1Z84cjk9u7dq11VEqyLNq1SpFx17V6M0lgQju
VUW+D9m7LQlCC3t9OuTDhw+jR49mV2bnzp1jY2NFIhHtuv5D3cF9bm7u6tWr
HR0dmbewsLBQ9cn1Fy5cYO7NziBdyvHjx1++fFlLVqC+KikpOXXq1IgRIypU
qMCu/A4dOpC+Iu3S+BDwVjaMhw8f0m4TgJ5DcA8KIbjXJwjutROCewBdhOAe
QBA9evSQOA8wb9487lnY09fiyFjmxYsX8mYhR1h2Su4LBK5cuWJubq7M+QqO
3wlQ5O7ubmpqmpKSQrsQrUO6wffu3Ttw4AAZogYHB0+fPn3BggUbN2785Zdf
mBu38g7uydo2Njbm3lv69OmjnmaBkBDcq4kGgvvHjx+To4D0R8/V1ZX7zszs
6Q6ZevXqJXipIM/NmzcVfpeq6tGjR7SbJQwE96oaPHiwsPsSHkJUdqdOnXJ2
dmZXKfl+DgkJefLkCd2q1BTci0SiCxcujBkzxtLSkl1+3759nz17xmNp5EAW
ExPTrFkz8X3Syclp8uTJZK3iGnwBffjwgazqsWPHVq1aVXxtt2/f/uzZs7Sr
4ykyMlLY70PS4yoqKqLdLAA9h+AeFEJwr08Q3GsnBPcAugjBPYAgfHx8JE4F
9O/fn2P60tJSmfcknz17Nsdc27ZtY6eMiYmRN1lycrKNjY2Spyw2bdrEv9lq
k5+fr8yzAMqPvLy8Xbt29evXT2aox3B1dY2KiuId3CtzDcvu3bvV1EBQ3v37
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
g2Q7fvw4OSiUsXUI7rmRI7ggexHD1tb2/v37tNtU7rx582b37t0DBgywsLBQ
dZMZGhra2dk1bNiwY8eOnp6ePXv29P3M398/QMzw4cPJi4MGDSLTlPGXHjVq
1JgyZQr5YGpbzE36vTdv3lyzZs2QIUNUehyYOHKUJAMoLy+v0aNHz5kzZ+nS
pevXr9+5c2d0dHR8fPytW7dSUlJevnz5/v17ocomvThydH748CEpnqxV8kY7
duwICwtbsmTJrFmzyHYkm8zNza1q1ar8WkQGmH5+fhs2bLhz545+3AyfG/kI
8FtR0gwMDMjAh3aDAMoRBPegEIJ7fYLgXjshuAfQRQjuAYRSs2ZNmecH2rVr
9+bNG4mJW7VqJTFZQkKCMu/Sq1cvZnonJyfSI4qMjJT5VE1lbNu2TQ2rAfi7
fft2tWrVJDbTkCFDpE8k+vj4KNy+ygf38fHxHJd1m5ubnzp1Sui2ApeMjIwy
Xs3KcHV1pd0UPspncP/1119zbMoNGzbInIscXGQ+YbxDhw7p6ekClgfKCAgI
KPvH9ovPscKiRYuEvY22UDZt2qTwil1lnDx5knZTtNrr16/LvpIZderU0ePr
cHVCcXFxUlIS+RofNmyYvMGC5hkbG5PDR2Bg4P79+3Xo3izk0BYTE7N06VJy
0GzatCmPu40pZGlpaW1tbWNjY2dn5/I/5L3cP2vdunWbNm2Yfzdv3pydgHTg
ySxkxrL/rkka6YqTjTVixIgVK1YcP348Ozub9nbQtPbt2wuyJs3MzPbt20e7
NQDlC4J7UAjBvT5BcK+dENwD6CIE9wBCGThwoLyzBHXr1r127Zr4xNLXxXz4
8EGZdxk1ahQ7i8LnknNwcHAoLCxUz5oAPsgeQnq2Epupd+/excXF0hMnJiYq
3MQqPd3y7t27ERERCxcuDP6fBQsWhIaGRkZGpqWlCddKUCw7O9vNzY33R1uc
vb097dbwUT6D+wEDBnBsys6dO0vPcv/+/Xr16klMaWBgMGPGDD17uK2uIKPg
sn9sTU1N9+zZQ7spsu3cubMsD+8Qt2vXLtqt0WoikcjExKTs67lNmzZZWVm0
WwP/8OLFi+jo6EWLFn399dctWrRQ/hFIZWRnZ9elS5eJEyeuXbv2woUL+fn5
tNeEAEgn+dGjR0eOHFm2bBlZn82aNRM8yuf+0jP4TNh3JLtEy5YtR44cuXLl
ymPHjj158qSkpIT2mqaM383lJNjY2Mh7hh0AqA+Ce1AIwb0+QXCvnRDcA+gi
BPcAQlmzZg3HuQIDA4O+ffuyl9VLRLRVqlRR8l3EH2FZFmFhYWpbE6Cyu3fv
VqpUSWIb2djY5OTkyJtF4f1CcZZPF71586Z58+aCfMaJJk2a0G4QH+UzuB83
bhz31hQPOu/fvz9t2jTpByi7urpeunRJwKpAJeJnJvmpXr36xYsXabdDtt27
dwtyrT3jxIkTtBuk7cp+35Vhw4ZRfEw5KEkkEj179uzMmTMbNmyYN2/e2LFj
vb29W7duTbp5ZmZm/DY96VIOGjSIHCaWLFmyc+fOxMRE6Xt/6SuyPjMyMm7d
unX06NHw8PBZs2aRD0LHjh1Jj0L6oClTGYN4JWc3NTWtXbt2p06d/Pz85s6d
u3HjxmPHjt2+fTszM5P2KtRGc+bMKctG+eLzE+JSU1NptwOgPEJwDwohuNcn
CO61E4J7AF2E4B5AKA8fPlTmvEGTJk3WrVsncfa7efPmHEsuLS1NS0s7cuTI
vHnz6tatq+QJCg6urq7K30cd1O3FixeOjo7Sm2n16tUcc02cOJFjE6tjUAzq
Rj6V7dq1K/sHnOXj40O7TXyUz+B+27ZtCjdo48aNO3Xq5OTkJP0nc3PzBQsW
IKSjKz8/X/onWMrz9fXl+LEWXcePHzcyMuLdNGk3btyg3SZtt3z5ct6rt3r1
6lp73wZQyfv379PT08ko4PHjx0mfxf/P5cuXmVfSPps+fTq7A7Rp04Z24dpI
JBKRlfnLL79cuHCBjKp27Nixdu3a+fPnT5s2zc/P76uvvmrfvn2jRo1cXFxq
1apl85n0vbBksrKyYqYnM5LZ3dzcyMHa29vb39+fbJeFCxeGhYXt2rXrp59+
unTp0q+//pqRkaGdD0PRWvfv3+f9fWhsbBwcHIwbzQHQguAeFEJwr08Q3Gsn
BPcAugjBPYCA6tSpw++UQr169WJjY5nzbz///POZM2cOHDiwevXqMWPGtG7d
2tLSkt9i5Tl8+DDtVQX/Rbq1Xbt2ld5GJiYm3AnODz/8wL1HaawJIJSpU6cK
+0kPDAyk3SY+ymdw//79exsbGx5b2dDQcMiQIXikhZaIiIjgsRGdnZ1PnTpF
u3a5fv/9d347JwdcVapQfn5+kyZNVF2xBgYGo0ePLj+XVwNL/JZcCO7V4d27
d2//iXZF5Qvp0/I41ri7u9+9e5d27QDlGoJ7UAjBvT5BcK+dENwD6CIE9wAS
yLEggi8PDw8epxQ0zM3NjXcDQXBDhgzht5nIoIZjK3fu3Fkz9YNQZs2aJfhj
UidNmkS7WXysX7+eqd/GxoZ2Lf+wbNky8dUbEhIi7PIV3i1fgqGhYbt27RYv
XqzqG61Zs0bYysutsLCw77//XuJFX19fJW/ITFSrVs3f33/Lli1U6ldS2e/Z
LqF69eq026QbVq5c6erqquRaJV8Ibdu2Ffx7CXRF79692Z2hdu3atMsBEBg5
2pKBtvJd5Tp16kydOnXbtm20Cwco78aOHct+MM3MzARf/sCBA5mF9+/fX/CF
g2aMGjWK2Yg9evSgXYsw2F7Z8OHDadeiaVu3bmXaXqFCBdq1lGsbN25cu3bt
8uXLFyxYMGfOHPZ6sV69etEujad58+aJ9/TISJl2RQBqt2rVKvHdHsE9lHMf
P340NzdX8oQAAAAAAAAAAAAAAAAAAIDg4uPjaQenADSVlpb6+vq6lIGZmRnt
zzGXKlWqlKV1ICxra2t5W6p69erc89rZ2cmb19zcXDP1g1DI5hb8w25ra0u7
WTzVrl2baYKxsTHtWiioWrWqoaGhzG1qZGRkaWlpb29fluU7OzubmpoyS1P4
PQMy1axZ08LC4ovPtyXnWIdkTyZ/JZ9EKysry8/IP8hR2MHBoU6dOposuCwE
79WQ3ZusGdrN0j01atQgx/3KlStXqlSpYsWK5L+kC0FeYZ6pDQBQfpCeTLVq
1WxsbJjDK/k+JN+NpPvk5OREuzQA0DTS02Z6mOQ7gXYtwBN7aot8mdOuRRjs
iT5ybKJdCwXsoI92IfSRYS/ptNSsWZN0URwdHe3t7atXr052+CpVqpDvLrKf
kJ4MM7irUKECGXebmpqamJiQVSf43ThZOF0MoKN69OhRUFBAOzgF0G379u1T
0+G17L766qvS0lLaawj+q6ioiHTb5G2sixcvcs8+aNAgmTOSzt7t27c10wQQ
io+Pj7Af9gYNGhQWFtJuFk9a+4x7jXnz5s2uXbumT58+fPjwwMDAJUuW7Nmz
58mTJ0ItPzc3l719n5eXV0pKilBL1nv5+fmLFi1isuxq1aolJibSrki97t27
J+xXExEREUG7WQAAAACgD/CMez2AZ9zrE/17xv3Hjx/T09PT0tKSk5MTEhLi
4uKio6P37NkTHh4eEhISHBw8Y8YMf39/X19fb2/vjh07Nm7c2MXFxcHBQfnH
54lTX2TP6NSpE+01CgAAQEdxcbHyDyTVpJo1a75+/Zr26oG/Xb9+nWN73bhx
g2PeP/74Q95VkJs3b9ZYE0AQRUVFwj6ho0KFCr/++ivtZvGH4F4DyKFq0aJF
RkZGX3z+Mbyfnx/ie255eXkrVqyoUqUKs3N27979+fPntItSO/ZcqFB8fX1p
twkAAAAA9ASCez2A4F6faGFw//Hjx7dv36anpzPJe3x8fFxcHJO8h4aGhoSE
zJgxIyAgwN/fn0ne3d3dGzdu7ODgoJcP0kVwDwAA5VlUVBTtQ7GkChUq3Lp1
i/aKgX8gXUSOTXby5EmOeQcOHChzLgxXddGvv/4q4Ifd2Ng4NjaWdpvKBMG9
xty8ebNBgwbM2jY0NPzqq6/IN49IJKJdl3Z5/PhxUFCQlZUVs6LI+H3dunXl
ZC0NHTpUwG+nDh064NZeAAAAACAUBPd6AMG9PlFTcM9c9p6cnJyUlMRx2bu3
t7enpydz2buDg4O1tTVzqYKq1H3ZO0V9+/YVcLsAAADoltLS0q5du9I+Gv/N
0NDw2LFjtNcKSJo6dSrHVtu5c6e8GVevXi09vbGxMemyarJ+EEp8fLxQH3Zz
c/OoqCjaDSorBPea9OnTJ/KVUqlSJXYvqlOnzsKFC1NTU2mXRllubu6uXbs8
PDzEh+1Dhw79448/aJemOd26dRPq26lz587ko027QQAAAACgPxDc6wEE9/pE
XnAvccN5mZe9i99wnr3sXd69RrnpcfJeRgsWLKC1bwAAAGiDJ0+eVKxYkfYB
+T8MDQ1JN5j2+gAZ/Pz8ODbc0KFDZc61YsUK6S5o1apVL1y4oOH6QShXr14V
5MNua2t75coV2q0RAIJ7zcvKygoKCpK4FxwZLC9btuzevXu0q9Oo7OzsXbt2
DRgwQOIUgYeHR0JCAu3qNK13796CfDv5+vp+/PiRdmsAAAAAQK8guNcDCO51
hfRl73v27ImIiGAue2duOD9y5Eim7UZGRuxl74aGhoIMKqHsENwDAABs376d
9gH5P6l9ZGQk7TUBso0fP55j21lYWDx79kx8+tTUVC8vL+kp+/fvn5GRQakR
IIDff/+97B/2evXq/fbbb7SbIgwE97RkZmbOnDlT/Op7hrOz85gxY8jR5OnT
p7RrVIvc3NwTJ07MnTu3bdu2EmcVDAwMevfuXQ4jewb3cUpJCxYsKC0tpd0U
AAAAANA3CO71AIJ7jZG47F38hvMyL3tv3Lixi4uLg4ODiYkJj2EgLnvXQgju
AQAAiEmTJlE8HNvY2HA/Jx3o4n7GPVGrVq0NGzbs37+fTOnh4SH9I1XSfyZ/
pd0OEECjRo14f9LJaGj8+PHv3r2j3QjBILinKy8vb8uWLW5ubjL3N0dHx+HD
h3///fcPHjwoLi6mXSx/6enpR44cmTFjRosWLWQ++a5y5crffPPN48ePaVdK
09GjR3l/NRFOTk7Hjx+n3QgAAAAA0E8I7vUAgnvlvX//PiMj48mTJ0lJSZcv
Xz558mR0dHRERMT69eu/++674ODgyZMnjxo1avDgwZ6enm3btm3atKmLi4uN
jY2pqSmP0RySd/2D4B4AAIAoLi4eNGgQlWPxl19+SfpytFcAcElNTeV9wygT
E5PZs2eTTjvtRoAwIiMj+e0JderUiY+Pp12+wBDca4mbN29Onz7dzs5O3u5H
hv8tWrQYOXJkaGjoyZMntfnh7+/evUtISNi2bdvUqVO7du1qa2srr1HGxsY+
Pj6HDh3Crd2JoqIifj8rMjAwmDhxYm5uLu0WAAAAAIDeQnCvB8pVcP/XX3+9
efMmLS3t3r17N27ciI+PP3z48O7du7///nsypp43bx5ZCWQY5evr26dPny5d
uri7u7u6utrb21taWvIYlH2B8L0ck7npQ0JCaHwmAAAAtM6nT5+GDh2qyUOz
kZHR//3f/5H3pd10UGzChAmqbl8zM7NJkyaRfj7t2kFg06dPV2lPqFq16rJl
yz58+EC7cOEhuNcqxcXF586dCwwMrFWrlsLd0srKqlWrVgMHDgwKCgoLCzty
5MitW7c0+SyP/Pz85OTkU6dObdu2bf78+f7+/l26dCE7ksLKq1Sp4ufnt3fv
3tevX2usWp2Qmprq4OCg0reTp6dnuX24AAAAAABoDIJ7PaBzwf3bt29fvHjx
+PHjpKSkCxcuxMXFHTp0KCIiYu3atUuWLAkODm7evDnTooYNG7Zu3bpx48bO
zs42NjbGxsYqjaoYSN5BVaampra2ti4uLs2aNWvXrh0Zng8ZMmT06NEzZsyQ
eCQrAABAeVZaWjpv3jzN9LXs7e0vX75Mu8VaQSQSjR8/ftOmTbQL+a9Xr16N
HDnyp59+En8xPz+/RYsWSm5cKyurmTNnpqen02oCqBsZ7tWoUUPhnlC7du2w
sDC9jOwZCO611t27d9esWePl5WVhYaHSscnMzMzZ2Zl83Xl4eAwePHjChAlz
5sxZsWLFtm3boqKioqOjyXdj/GeXLl1K+uzOnTvMP27evMn86fTp09Gf7dy5
c+3atfPnz58yZcqwYcN69+7dpk2bunXrVq5cWaWqjIyM2rZtu3jx4lu3bpFD
Bu21q71ycnJGjBih8BYxJiYmAwYMICuTdr0AAAAAUC4guNcDVIJ75mnvycnJ
ZLzJPO19z549ERER4eHhISEhwcHBzNPevb29PT09mae9Ozg4WFtby3zImkII
38st3pvezMzMxsaG7HVk3yN7INkPyd5I9kmyZ5L9k+ylZF8leyzZb8neS/Zh
sieT/Zns1YWFhRr7HAEAAOiBs2fPOjk5CdsBkNCpUydNXtio5UhfpUqVKmS1
jBo1inq/5c6dO8wln7Nnz5b4U3Z2duvWrTk2KxkX9O7de//+/bhvc3nw119/
HTx40M/Pr0GDBiYmJuxuUK1aNQ8Pj5UrV967d492jWqH4F77ffr0KTExcePG
jaNHj3Zzc+N3+oIKMvL18fFZvHjxiRMncHG9SlJTU8l669KlS9WqVdn1aWpq
2rBhwzFjxhw+fBg3xgcAAAAATUJwrwf4BfdM8p6WlpacnJyQkBAfH8+E7+Hh
4aGhoSEhIUzy7uvr6+3tzSTvLi4uZDCIp72DxpibmzPJu7u7O9kJmeQ9ICCA
7JxkFyU7KtldmeSd7MBkN2aS97dv35aUlKjvEwcAAAAS8vLy5s6dSw7c6ugP
fP3110VFRbSbqF1u3bplZWVFVk7r1q0fPHhApQaRSLRp06YKFSqQMvr27Svz
EQbFxcVbtmxp27YtE9QaGhpWr16d9OtIX+7IkSPZ2dmaLxu0xIcPH0innewh
tAvRKAT3Oic/P58MM9evXz9ixAjy3WVtba2OwxwPpqamDRo0IAPkhQsXxsbG
vnz5kvaq0hMlJSXkc0p6NbQLAQAAAIDyC8G9Hti+fTuzEb/66ivy7/Dw8BUr
VgQHB0+dOnX06NG+vr6enp7t27dv1qyZi4tLlSpV+J1TRfIOqjI0NLS2tq5V
q1ajRo3c3d3Jfti/f38/P7+AgIC5c+cuXrx4zZo1ERERBw8ejI2NPX/+fFJS
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
Hjx48Pvvv799+7aoqIh2cwEAAABAz12+fFm871q5cmXaFQF9IpHozJkzw4YN
MzMzkxjdmJqaduzYce7cubGxsTk5ObQrLS/S09Ojo6ODgoJatWplbGwssVEs
LS3HjRuXkJCgE7dN4zGmFhxZhykpKbTXBAAAAAAAANCE4F4P/PHHHz4+Pr6+
vqNHj546dWpwcPCKFSvCw8O3b98eHR19+vTpK1euJCUlpaWlZWVlae3NCQEA
AAAAGHFxceJ5lqGhoU5kf6AZb9++3bp1q6enp3RY/MXnK/Hr1as3dOjQ0NDQ
s2fPIscXUHp6+vHjx5cuXTpgwACJGyCwzMzMvL29d+/e/eHDB9r1qoB8w6xc
ubJp06Yu6lS7dm02o5f4U5s2bcjgnfZqAAAAAAAAAMoQ3AMAAAAAgFbZuHGj
RBpYUFBAuyjQOm/fvv3xxx8HDx5saWnJcSGzo6Ojp6dnUFBQREREQkLC69ev
aReuG7Kysi5evLhly5YpU6Z4eHhUrVqVYyXb2tr6+fkdPnxYyx+7QBfZY5nV
VbNmTdq1AAAAAAAAgDZCcA8AAAAAAFolKChIIhZ89eoV7aJAexUXF1+7dm3x
4sWdOnUyMTHhyJcZVlZWzZs379+/P9nTwsPDjx079uuvv+bm5tJuBx2vX79O
Sko6cuTI2rVrAwMDvb293dzcKlasqHA1mpmZ9ejRY+XKlbdv3xaJRLTboQMQ
3AMAAAAAAAA3BPcAAAAAAKBVPD09JSLCly9f0i4KdEN+fv758+eXLl3ap08f
a2trhemzOBsbm5YtWw4aNCgwMHDJkiXff/99TExMQkLCo0eP3rx5Q7tl/GVn
Zz98+PDKlSuHDx/evHlzSEjI1KlTfXx8mjZtWqlSJZVWUbVq1fr3779q1aqr
V69+/PiRdst0DIJ7AAAAAAAA4IbgHgAAAAAAtIdIJKpcubJEXIjbmwMPpaWl
Dx8+/PHHH2fOnOnh4WFjY6NSSC3BxMTE0dGxWbNmvXr1GjFiRGBgYHBwMBlQ
b9y4cefOndHR0WfOnElISLhz505aWtqrV6/U9JD3/Pz8rKws8ha//PLL1atX
T58+Td56x44dGzZsWLFiBSlp2rRpfn5+PXr0aNq0qb29vZGRUVlaXa1aNdJe
sthDhw49efJEHS0qPxDcAwAAAAAAADcE9wAAAAAAoD2Sk5Ol00M1ZaBQ3jx7
9iw2NnbVqlVjx45t27atqpfk82BpaUnexeYzJycnl/9p3Lix+/+0b9+eFMP+
b8OGDdnJHBwcmHnJQipUqKDuaqtWrdq5c+eJEyeuXbv29OnTuNOFsBDcAwAA
AAAAALf9+/czI8fIyEjatQAAAAAAQHm3YcMGiTDRwMCgpKSEdl2gnzIyMq5e
vbp79+5FixaNHDmyQ4cODg4OZJdTXziu5MLVWoOhoaGTk1Pnzp1Hjx69ZMmS
vXv3Xr9+PScnh/bW0HMI7gEAAAAAAEChBw8epKSk0K4CAAAAAADg33369JEI
GatUqUK7KChfioqKXr58eevWrbi4uG3btoWEhAQEBPj4+LRu3drJycnExET5
iFzA/F2lRZmamtasWbN9+/b9+/efOnXqkiVLduzYcfz48V9++SUjIwO/hKEC
wT0AAAAAAAAAAAAAAADohNzcXOn7gTds2JB2XQB/Ky0tzcrK+n/27jtOiiJt
4PgSFwROVEByUjAQJWf0JCqCyCpIMhBEgoCiooCgIFFyTgICguCRDGQ8MhIk
SJQoSJAkmSXtvs/t3PVbVs/01ITd2fD7/uFHoKu7uqe7Qj/VVXv27Nm4ceOy
ZcvmzJkzceLEwYMH9+zZs3Pnzi1atHj55ZerV69etmzZJ554wjXjfebMmV3T
3WfIkME8+G5Nsy/JXfspVKhQ+fLla9asKYdo3bp1ly5dPv3006FDh06ePHnu
3LnLly/fvHnz/v37z549G+qLBDcI3AMAAAAAAAAAACBBmDBhgj18Wbly5VDn
Cwi+GzduXIxxIYbr/69duxbqfMEfu3bt6tu3b7169R5//PHs2bPnz5+/SJEi
VatWbdeu3aRJk86cORNN4B4AAAAAAAAAAAAJRMWKFe2B+6ZNm4Y6XwDgxr17
92bNmlW6dGnnyRNSpEhRp06dTZs2EbgHAAAAAAAAAABAPHfw4EG3q3j36NEj
1FkDAN2GDRueeuop87UPUqVKReAeAAAAAAAAAAAA8Vz37t3dRru+/PLLUGcN
AP7fnTt33n///eTJk5tH7VUE7gEAAAAAAAAAABA/Xbt2LXPmzG6DXOvWrQt1
7gDgvy5cuFC9enX/QvYuOXLkCPVJAAAAAAAAAAAAAG4MHDjQbYQrWbJkly9f
DnXuAOA/9u/f//jjjwcStRcPPvhgqM8DAAAAAAAAAAAA0N28eTNbtmxuI1x5
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
pUuXyvNimPzcuXNr1qyRO+Grr76Su1TSbt269caNG7GZZe8kAz///LM86bNm
zZoxY4b8j/zx2rVrwdq/3MmbNm367rvv5HLJfzdu3HjixIlg7VwTZ4F7uQ3k
BmjTpk3Dhg3lv926dZMC+fLly8E4if84c+bM5s2bXRdt0aJFUiAfO3YsWDvX
eA3c79q1a8yYMR06dGjevPlrr70mJzt27Njff/898ENHRkb+8ssvixcvnj17
tuv2WLt27enTpwPfszO5vHKfjx8/fuDAgZMnT5ZHUrJx69at2D4uEGdCUt1I
s0faYBMnTvziiy/kyVqwYIGU/0HZ82+//TZq1KiuXbu6SqGOHTuOGzdOmr7a
ZnEcuL9w4YKrBJPiS6qAdevWHTp0SNoJsXrQOONq8EhzWq68q8GzZMkS8waP
IWkPSKtAqjm5UaUykqa7/Kx37twJ7lHi0qVLl7799lupKFu2bPnqq6926tRp
8ODBUrUFfmPI/SbPl/pQyw+UoK8VECyxF7iXfsSePXvk0ZPOuHQApYySVnEQ
e0mauAncHzx4cPTo0W3btm3UqFGrVq0++uijOXPmSAkTjDP4j7Nnz0qTQ1ra
UnFIkbV+/frDhw8Ha+fOjhw5Ir+RFMLTpk2TOmXVqlX+dVhiI3AvHQ25eaTo
lqst2ZMrI/fV8ePHA9+zs/Pnzy9btszV65k0aZI0V7Zs2XLz5k2TtMG6ngAA
AEDitn379g4dOuTKlSvMnbRp05YtW7Zbt25r1671L4i/cuXKt99+O0+ePPad
J0uW7KmnnpKd7927N7gnFXjgXk5Wuj916tRJly6dPeepUqWqWrVqv379TN4e
v/HGGy//T6FChdT9FChQ4GXP3L438y9wv3HjRulBZ8uWze2vnD59+ooVK/bq
1evnn38miB+4CxcuOPysn376qbXllStX5LLnzp3b7e+SMWNGdWOVdG/HjRtX
v379hx9+2G1auUXlyf3888/PnTsX3Dw7k0dv8ODBJUqUSJkypT1XyZMnL1iw
YIsWLebOnXvp0iXDfaqkrOjUqZOnK/bII4+0bdtWuv9+7Fnzr3/9yzp9uc7a
gRo0aODpWs2fP9/TPh0C95s3b5Zn0O1JpU6d+p133jH8Hd06ePBgly5d8ufP
73b/Uji3bt166dKlwQ0MOQTuZ8+erZWEFqkUKleuLLWGr4eTgnHRokXy6z/x
xBMpUqRwu3O5Am+++ebWrVsN9ym3vcNDcfHiRWvLBQsWVKpUSW5v+0HlSSxe
vLivpwPEHybVTbly5cyrm/Pnzzs8WZ999pm1pTSx2rRpkyFDBvtBixYtOnPm
TL9bLFJQly5d2u3pCGmaqo2ruAncHzlypHfv3nIstyWJtN+k6vz+++9NTnnU
qFGeLm+jRo08pZKy0eF38RR8kZLQIZW0cKwtpcEjhapDg0fd2D8bNmyQFoI0
rd0eIjw8XBonHTt2XL58uachVW+99Zanc5E73NNxp0yZ4imV5MdTKulEtPbM
GrP3xx9/yE8vLQG3JyXXs2/fvn4MJtyzZ897773nqWEg16pUqVIffPCBNKj8
G6kIJERnzpxRn9/s2bOrz0WZMmU8PenSzDbZf2Rk5LRp0yIiIu6//363z12N
GjWGDx8eeLBbSjk1e1rDuE6dOp5ORLLnaZ8Ogfvdu3dLzqUNbz8pObSUYFKO
+X0ux48f7969+2OPPea2sJLf6I033pAqO+hvMKRbtGTJEqk0H3zwQbeHfuCB
B6pXrz5o0KBff/3V006k4lMvr/ZCTBobnn4I6dE45E1uJMlb586dixQpIm0w
t9nLmTNn06ZN16xZY3i+Q4cO9ZQZoY6vW7FihZy4296WdP+ffPJJt338oFxP
AAAAIIk4f/78a6+95raT5VbWrFk/+OAD+7dInmzdurVs2bIme06ePHnjxo2D
+EVkgIF76e166h5qpIv9/vvvX79+3WFvnronXrl9r+hr4P7kyZMNGjQwP2iu
XLl69OgRZyPYE6U//vjD4Qo/++yzrs3Wrl0rfWrnn0OeUHXPd+7c+eqrr555
5hnzxzZt2rTdunXz+vGUYZ4d3Lt3b+TIkfKsGWZMnp1XXnll8eLFhiOCzp49
26xZM7cRDbsKFSrs2LHDZLee9OnTx/BENH379vW0T0+B+xEjRrgd56DKly+f
H0/lxYsXW7Zs6SmQrSlVqtTmzZv9v2R/5zZwf+PGDZPiSG5vybbhl0dbtmyR
jc1vPPHPf/7TZKoB2cxhJ67vleQK161b1/lwctMGeDGBuOeqbp5++umgVzcn
Tpxw2Em1atVcmy1atMhtaENVq1YtXz9RdA0bMDkdqX9dIcvYDtxLMfLWW295
rQVcihQpIlWJ8w4l556Sp0qVylMqueAOx/UUdjl16pRDKmmuuDZbt26dpxHC
Fqni/b6Ge/fudS6xNXJrtWvXbvfu3dp+cuTI4SlJ7dq1PR29Y8eOnlI98cQT
nlI5d5HOnDkj2yxZssSkE1G0aFHzNs/ly5fbtm1r2JoSmTJlkhPcuXOn4f6B
hOvQoUOGz4WmWLFiXncuVao2EsCTDBkySDckkCmbxo8f79+JvPvuu5726Slw
L+eVJk0a591mzZrVjzLk6tWrnTp18jRsSfPkk08GsXaWOqVSpUrm102O/sUX
X7jKbdW5c+fMd6LKmzev24xJtdWhQwefXi6VKVPG5BuZRo0aOexk+/bt0TFz
0ElN7fWI9mGcwbqeAAAAQFJw/PjxggULqi3kokWLSudo1KhRM2fOnDp16qBB
g1566aW0adNqDenHHnvMZP9Dhw7VXkLmzp1b9j98+PDp06dLU7x58+ZaqCVz
5sxB+VQ2OrDA/YABA9TX1PL/ZcuW7dmz55dffimXpV+/frVq1QoPD1f3X6RI
EYd5PkMYuD9w4IAaGpZzKVWqVJcuXcaMGTNr1qwpU6bI6bzwwgv2HnGFChXM
rxg0JkHwlStX2h8uOy1w73bPJUuW/PDDDydMmPDNN9+MHz/+448/rlq1qvZK
tmLFiufPnw8wzw7u3r37+uuvq0myZMkimZcnXZ4aKVJGjx7dunVrtwMVdu3a
5fWS7tmzR0ubNWvWt99+e8SIETNmzJBSpU2bNtrbMHlI5Zn1/mt5EGeBe3kY
Dff8yCOP+DQl9cGDB7WP6aSMbdWqlVwuuWhy6dq1a6dFUlKlSiW/lN8XTWUP
3N++fVtuJNcfU6RIUaVKlbZt28rtKr+d/Y4Ni7nrTM7XHqyRe69FixYjR46U
G09KOanLGjZs+MADD6jbyB+XLl3q655VJ0+evHTpkjx9Xn84AvdIiNyG16UJ
4bW6qVSpknN1YxK4X7BggWEgu2bNmuazhfz1118lSpTQ9iAHkoNKeSin89Zb
b5UvX95qBNavX//evXuxGrjfsmWL9hH6fffd9+qrr0pbVFrLUo5Jm+3RRx9V
N5Ds9ejRw+Gs41vgXq6YSYPH78C9NDO0sJG0EKR+GTZsmLR15Ubt3r275MRt
qHrSpEnqruJV4H7ZsmVWdyNPnjxyfeTp69y588svv6zVaGExUxZs27bN67U6
e/Zs8eLFtRx26NBB7jRpGEybNm3w4MFSY6ZPn17bv7QffPpRgIQolgL3165d
e+WVV7QkUgJISS71qZRgvXv3rlWrljbOVjbw+0P1OAvcS2PAcBTQww8/7NNM
AtLMLlKkiLoHKfeaN28uBbsUVlJkSWEoPSN1A8mJXEn/rphqzZo16lQ/8rtI
DfLRRx+NGzdOzldqjV69ekkfwX7i0hfWdhX0wL09vG5dFmkzyL00ZMiQpk2b
SldI3SZdunRz5sxxPmuvgXvplBkOkNMC90G8ngAAAECid+vWrcKFC1ut4pw5
c3qKmJ8/f75Vq1ZqE9okcN+9e3c1yT/+8Q/pR9hnMLt+/XqXLl3UVnp4ePj3
338f+An6F7iPioqS7qqasECBAqtXr7ZveezYseeff17dMk+ePJ6W2P73v/+9
/H+0t6kvvvjics/czvkmv506l6bDJzZXr15VJ2STc9m0aZPbLU+fPt2wYUM1
YwTuAxEZGan+jloI+Nlnn/3999+t4RylSpXq3bv3jBkzFi1aNHz48Jdeekkd
N+IcuJffdO3atW7zcPDgwTp16qgbP/300w7znXrNs/Mpf/zxx9bG0h8fMGCA
22End+7cmThxojZix2vgfsOGDerol5QpU3722Wf2/cvOhwwZokYH5EpOmDDB
eeeeHDlyxLoa3333XdjfLV682NNj6zCGxx6437Ztm2vYTK5cueSk5AmVYuT4
8eNyyvLHhx56SDtut27dDPP/yy+/qPNaSzErv5E9Dn737t3Ro0drr+iHDh3q
30VT2QP3Utq7fpTXX3/dPr+KnHVERIR2vpLK69SX6kskuZiDBg1ye59fu3ZN
bkt1zJWctfPnP/LrqL+sNl/3yZMnrTUUsmbN2qZNmy+//FKeYvmv1CPqHUvg
HgmRFl4vWLCgQ3WjtYieeeYZ8+pGakA1bbVq1Q4dOuQqlNKkSdOgQYMxY8Ys
XLhw3rx5UjTVrFnTPgOAtDBNzkiOW758eS2tNHHtn3RJG0/qYtcG/fv3j73A
/fr167WCRfJjzZGuktPPnDmztqWn2P3u3buty/vtt9+qqRwC9+fOnVN/F62m
9hQ/0n7Nvn37aneClO1WXaY2eEaMGCE/rvpr+he4l7tC3Ym0AWTPbmfykfuq
du3a2g3wxRdfqNusWbPGOhe1YRPmGLjfv3+/lWrs2LFqKofA/YoVK+YotEWo
pRLPlClTWMyjJ1tqv/XNmzdHjRqlJZHr7DwrmtSn6qI8ckdJ88btlpcuXerc
ubN6YQncIymQdrJaoGmF/4cffuip8b9x40ZP+7x+/XqVKlW0YmHLli32LaV7
aA1wdcmXL59/a39Lia1mT/viYPbs2Z5O5MCBA572aQ/cW5V1lixZXOsqSoEv
h968ebM0ue3TC7Ru3dow/5KNvHnzqmnbt29/5coVbTMpGKdNm6Z1l6To9uOK
WeSCq92iChUqeLom8vdVq1ZVD20PNEtbSL282u8rJ+Xph/DU4lLD69K/6N69
u9tBzlI1S9tJPRHpIrl9qWWR/riaAW1o9/bt2+Xnc/2/XPA333xTevTSNvvq
q6+6du2qrcaoBu6Dez0BAACARO+LL76wmsTSlfM6fVavXr2s7b0G7mfNmqU2
uTNkyOAcmJsyZYq6vbTt9+/f7/Mp/Z1/gftRo0apqQoWLOgwe//du3ebNGmi
bl+mTBmvC0F++umnapJ33nnHtxPzxUcffaReAU/jCiwdOnRQe1Wxl7Gk5vvv
v1d/dOmzu2IcOXPm/OGHH+zbSxfY2tghcF+gQIGzZ886HDcqKqpdu3bqoXv0
6OF3nh02/u2339RJGwYOHOi8859//jldunTW9s7lw8mTJ9VoRfLkyWfOnOmw
/ZIlS9TXU6lSpVq/fr1zfry6du1a2N/5t+SrFriXEsMVRWrYsKHbSI38vk8+
+aSa5KGHHjKZOfPcuXPqZ4PJkiWbOHGiw/arV69W3/+nSJFi+fLlfpygSgvc
58+f3/X97IgRIxxSdevWTbvUI0eOdD6QFbiX0/S6dMhPP/2k3h7yEHmd1tui
zZ0yePDgMM8vzY4fP27NEUHgHgmRGriX5pDz+vVS3bRt21Z9QD755BPDA2kj
o6pVq1a9evWwmIliDh06ZN9+xYoV2lgjKSdNDqSNKfVavLi2T5s2rfb6OliB
+1OnTqnDq8SAAQMctj969Kj2DZ3JICupR9QkDoF7jRYKMfzw88cff1RTPfPM
My+88IL8j1RJbsflzpgxw9rYj8C91Pjq6N80adI41/hyo2qzA2mBe9XXX3+t
bukQuFf98ssvaiqHwL1GWxhCHgT5b7ly5RwWg5Bjac+CbO8w2u3LL7+0tpSK
XhpjzlmS+transA9kiBX8WWRDpofO9EG7ZcoUcLhoZbn99VXX1W3L1WqVCBz
5rtog3xciz35yh64d12fWrVquW0hSNdGG/kgRbTb1c81cn0ef/xxNaHDbGZi
+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
vvhCTZImTZqhQ4faO1zSOG/durW65X333ef1VZInnTt3bv0/zZo1U3ebOnXq
1ooRI0Z42okW1pGE8jfXrl2zb/nHH3+0bNnSerOdIkWKmTNnmuRTi0xp39Sr
35CajKP2RA3ch8XMMzZx4sTIyEi3G//666/aUPymTZv6fWiInj17WvebNrFt
jhw5Wv+d/OiGu9Wel7CYgS6jRo3SvkS4c+fO119/7fpyuXTp0nJENUlERIR1
aCvKeeHChZcV2hfxWbJkUf9VyhD1cFp8R24eT++Z5VH67LPP1NfsDz30kNfV
56XPbq1W71KlShW3H+nfvn172rRp6sbVq1cP/H1XtK3YlN2qcfBLly5ZE+RK
UaCuHdm3b1/ramsfscpVVW8DdWXMJUuWWH+vjRnQSjNPE0ju27dPXfkiLCb8
9Msvv9i3vHv37qxZs7Jly2ZtKb++p7LCgeRfzZhcIvXoUnFs3LjRtWqhZGz0
6NFnzpyx0sr/Sx0hF0RNIveV16iK1BepUqUK+7vXX3/dHmHcuXNnnTp1wmJq
mRo1aqjbFytWTM25dcNI4az+vfWRpovc5+q/vvfee75eMSA+a9WqlfZkeapu
pPHjes9cpkwZrdhRqxtphFippGVlWEVevHjRSrVgwQLr77WpM9KlS6em8vRh
l33ojlSUY8eOVY9y4sSJwYMHu2Ixslupa6TwVJNISaIey3zNKbvt27drs1Q1
aNDAvkqRlNJTp07Vgu/vvvuu+YHs32WLBx98UGolaco2b95cGoFWWSp/GW1b
E7lJkybWKXfv3l3dea9evax/ql27tppK7ofWf2e+pI6hyZMnq8FrqWX69+9v
r8Kk57Jo0SJ1pIS0sb12Z2SDp59+2n7p8ufP/8orr8jpNGrUSJ0eX/pTUs+q
W8pTo56+Q09BC9xv2bLF9RPI3w8fPlyL9O3fv19bK1k89thjDmERNXAfFtM1
+/zzzz0NDz5+/Li29lmFChXMF94CEgdt1JM0II8dO6Zu8OGHH1r/Kg1+tzuR
4sjV/rRIQbR8+XL7lnv37i1btqy65RNPPKH2DvymxYtLlSqlvpaRar1y5crW
v/7888/WP40YMcIqvrTV5+XKqIWbOpPAunXrrL/XlhsQUnZZ/7pw4UK3GZYi
6NFHH1VTSUnr9nsK6Y5J2a6uGCJb+v3hgxpodv1S8+fP91T0yVUtVKiQur2n
pd8s0mTKmjWrtb1Uu9JfUzeQYtn6V/tYPqlftJWMwmLqMnunWH6OV1991XUI
7fYrWLCg21aWXF7176XyUlNJ40SrzePD9QQAAPDPsmXL+gOxQ+1P+UEazGE2
0vmqV69ejx49hg8fPn78+MGDB7/zzjvlypXTQnLPPfecyWRlYtq0aer8imEx
ETrpu/Xp02fMmDE9e/asX79+mjRp1A1y5swZyKnZpwT3RM7CYT+SPVd0ySIn
UrduXbk4I0eOlA5st27dnn32WTVaJCdiHntdsGCBunNJ26pVq1GjRg0bNkz6
RNbrR8MZUD2ZNGmS/cTlEknnrlevXnIW8it/8cUXbdu2LVmypLaZdPQCXKrA
8tdff8m9FOonJi58/fXX6onbPwR2YB7yk99FG0hj3S2VK1du3Lhx8+bNa9So
Yb1lKl68uPTHtY+vVQ0bNnTt+Y8//jDPsNaPtiadsMhtXKlSpU6dOsk9Jnea
PDjy1MhDpK2yly1bNsOb/MCBA9pk9WEx8daOHTsOGjRIDtG3b98mTZqo0eew
mJcMfgSg3bp165aWgTJlyvTr12/cuHEffPCBlF3W37/99ttqQreTHrilTosh
d5RhKodhSEeOHHnqqae07QsVKiRl+4ABA+SiSf7lhlEzL+QG8y8OpX2Jo3GV
utOnT1fvlsyZMxcsWFCLW7lI1SNFh8lxp0yZYr8DhfxeUty1aNHixRdftN7+
SXkrzbNPP/3UIavWy0z17ZlXWbJk8eOiGdqyZUuoSzgkZlr95SLVjTy29lvd
U3UjpY1UN9qbdpX6BZz2JZeDEydOWKm6d+9umEqKBU9PkxpnUckjLMWR2pKU
pqBrrl0tcK/x9M2+oX379mlXI2XKlLVr15aTHT16tJTSb731lla1yQZS8fl0
FCnWDCsjaTa4JkXRAvcqaVSoO9fetDtzXibeP/PmzdNGNWTMmFHuT2mrSE0n
16p169banSm1g9evPl2k+WFfA8ItVyBDC9xrtBaCSgvcnzlzZtWqVVZPSjod
JUqUkApaHjptGm2XRx55xHlWBPs0y2ExQ1Nkn9JCkz6IXKshQ4a8++678oBr
tar8jd+BMLfWr18f6mIPCV4g3WRz6oLjYTEN1y5dukjjXzKgBrvz5Mnj8IxI
adOmTRvt6ZMHWRrk8tANHz5cuhIVKlTQ3ro888wz586dC8pZREVFueaQsRQt
WrR3797y1MsJSulh/X1ERISa0G0zwC0pYaxUkydPNkz1ySefeMrz6dOn1Svs
IiV5u3btpGaUnA8cOPDNN99UQ/ZhMWOP1ZF4vpIfwp5J6ShJm6dPnz5SKbt6
T61atbKXw25XUrCTbKuppH6RanHs2LFSVVWrVs36+4cffti+8kJ0zCwQ2kBi
68pIf0d6PfXr17feQkhJPnv2bNm5w09gtbImTpzosJldPLmeJq5evTp06NBQ
l1h+cjvqHgAABEg61z61fABzzz//fID355o1a5o1a6YF1p09+OCDY8aM8elr
iwMHDrimjvQqVapU0p8NpJ8VHbzAfXTMF+jWfPVeSSdLztSnrH700UfO+7zv
vvvMRwK4de/evWXLlr3yyivaIARnWbNmnTZtmuEy5Sa0KUMTMbnO6miHWArc
R8d8ederVy/7V8Z2TZo0cb1+j+3A/e+///7JJ59o8V9nyZMnb9mypds3Ep7c
uHFDuvBa6N+TLFmyBPdOFrt27dI+JrWTskUbKhDCwH10zGc+8mNlyJDBZFdS
hE6YMMHvFWxNAvfRMaswaPMn2OXNm1eKL/NDr169Wptx2q2CBQtu2rRJtk9w
gXvtKycguLT6y2JY3SRLlsyqbuJ/4D46ZgYV9ZM3t3LkyGHNZxKrgfvomI86
u3btatgmL1++/NatW/04ivxA2opIdrVr17ZOJwEF7qNj1pSpX7++FvZySyrE
0aNH+9Q8kNo/V65cDvuUJk23bt1c+wxi4D465sNVk8ZVRESEOomNJz///LM0
vdKnT+91hxa5XIMGDQrWaF6LeTQQ8OSNN94I7m3plrQJ3Q6ZVkl9YTKh93ff
fefQI1NlypRJmvfBnePiyJEjaoDerUqVKmnDD0IYuI+O+T59yJAhhm94pLAa
PHhwgNOsyc8tLYSaNWtqq5A4k/7F4sWLDQ8hP6s2n4mddJQcVoTftm2bSSNK
qi3XxA4hDNzHwfU0IdfBp1OLV6QPGMRLAQAAXPbv3z8HiB3S8wrKXXrt2rXv
v/++ffv2JUqU8PTCUPpKtWvXnjZt2tWrV/07ytatWz/88EN1JklLypQpq1at
2r9/f23eOf8sWLDA8AJ6XbneZdOmTe+//77bF5LJkiWTPkW7du38e30aHTMV
dvXq1e3vw6XX+frrr0sB4t9u7aQDPm/evLfeeqtYsWJuR2iHxYSc6tatO2vW
LMPpFMxJf23hwoWx+jjEE+vXr1dPXH5f87R+LN92/PjxDz74wG23PUeOHG+/
/bYrQOny448/ejq0tYB4ZGTkcmNui6B79+5t2bKlT58+//znP91+Qx0Ws6xq
qVKlPvvsM78LsbNnz44cOVIKJbdF1gMPPPDcc8/NmDEj6Heyy5kzZ6RMePjh
h+0FQsmSJadMmWKPBaxYscLwNlDfle3bt88wlTotvycXL14cM2ZMnTp17PMr
hsVMw1ujRo2pU6e6XRPEnOTfIZ9qqfvXX3/JfWIvWuUyli9ffvjw4X5UN3ID
f/nll1WqVNEmcgmL+cpezl1O0Ao97NmzxyGr1tCFvXv3Gv4KwtNsn0Hxxx9/
mOcE8JVWf2mkupFyz+1Hvv5VN2Lx4sWGeVML819//dUw1dGjR52fqQsXLgwa
NMg+J0lYzCfn8k9qKbRy5UqHYwUrpvnnn38OGzZMSmN7IRYW8x67U6dOamTE
D1JDSYPwmWee0VqDUvZWrFhRGy/q0KjW1niK7QaPOblDunfvLtWxPYIv7e3S
pUsPGTLEv0HCch/KXSENaW3PciVffvll9YM4qeAcTn/btm2eDuE2cO/aYa9e
vdyG712TMyxatMinc7l58+bSpUs7d+4sF8TTYMiMGTNWq1ZtwoQJgY9LcUv6
feb3DOBWUOaQNyHNwkmTJkl9YQ8+Zs2a9cMPPzT/Lv7u3btStLZo0UKbR8VF
CoGIiAhpzQbYIPdEHudPPvnE7TCkwoULjx492h71lta74c+hDsaWXp5hKrcL
n2mkOpbr36BBA21mFZf06dNLpTZu3DjX6MFgkdOR7mSzZs2kr60u8aaSK9m4
ceMffvjB19ECUhfLzsuUKWOfMUx60FLXe7235YjffPONlNL2Mlwqu+rVq48d
O9ZqPh06dMjhJ7A2M//VXOLP9fRKdvj999/7dHbxhzTCg3s1AAAAkOBIn/Tg
wYMbNmxYunSpNBGXLFmyceNGr2tP++TChQvSO1u1atW8efOkG7h///5AFgaN
S+fPn//1118l53Pnzl2+fPnWrVuD1Te8efPmtm3bXNdc9rxnz55YXUFSui0H
DhxYv3696y3rsmXLNm3a5Dy1JuK5P//8U35E6eQuXLhQnlnp3AX3M3O/SQ9d
nhS5q+V5/+6771avXi2PfxA/2oqMjJQiS27mBQsWyOmvW7fu0KFDwdq5V0eP
Hv3pp5/k0HJqUprF0pvtoLt169bhw4elnJe75fvvv5ecyzUM4Q0jRavkYdGi
RXIZt2/fLn8MfJ9yY+zYsWPlypXffvut3HX79u2LpVEcQFITb6ubQMhJSTPM
VQpJhRLg1E9BIYXYb7/9JpXa/PnzpQ7dtWuXw8Ll/pHm9y+//CKNz3/9619S
l2nrpycCUilLi/rf//63q90u9UuwKgJp28jNLxWo3DPyOEgzPii7jfYcuHeR
Z016IrNmzRoyZEj//v0nT568ePHiwKfRlt0eOXJEzkh6BNIvkH1KC0HaCQHu
FkiUpPsvD4hUglJySjszkC8p5NGTDriUwz/++KMUJvIMHjt2LOjxSk9OnDgh
LWSpyuXQa9asCdaE/LFNepFyleRauapsyfn+/fv9nijMnPSepA8rh5Of3lWn
bNmyJSh9litXrkg9IveA9FlWrFhhMhhbI/eMNBJWrVole5DaXCo+v7+1iTOx
dz0BAAAAAAAAAAAC5xy4BwAAAAAAAAAAAAAAsYrAPQAAAAAAAAAAAAAAIUTg
HgAAAAAAAAAAAACAECJwDwAAAAAAAAAAAABACBG4BwAAAAAAAAAAAAAghAjc
AwAAAAAAAAAAAAAQQgTuAQAAAAAAAAAAAACIS/369WutSJ06tRq4b9asmfVP
3bt3D3VmAQAAAAAAAAAAAABIbMqWLRtmpkCBAqHOLAAAAAAAAAAAAAAAiQ2B
ewAAAAAAAAAAAAAAQmjFihVzzPz444+hziwAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAADwf+zdd3wUZdv/fTY9AUIAAwQIGLr0Lp2LgJFu
ALmlSJEiQYogKKFX6YIUpXkJitIFNYCgdAS5aVKlC1KkE0AIIWV9Tp3nNb+9
UzZbZnPOTj7vP3zJZHb2OGZ2p+x3CgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA
v+Lj4//888+zZ89evnz50aNHzk8wMTHx2rVrYmrPnz93fmoAAAAAAAAAAAAA
AOjWqVOnunTp0v5fiYmJtr9QjLx169a+fftWrlzZy8srm4XQ0NA33ngjJiYm
OTnZrmJiY2Nnz54tJujh4aFMymQyvfTSS5MmTbp586adnQEAAAAAAAAAAAAA
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
S5cu7dJqAQAA4Dp169bV5NiqYMGCR48eld0NDIjgHsg033//vZX1/JAhQ1KM
P3z4cPWvEyZMkFKz7Vq1aqWU2qJFC2XI7du31fq3bNli5bUjR47McDtYtWrV
ffv2LV++XPmnAYJ7MX9y5sxp2WOfPn1sfO3hw4eLFy+eYhZ98MEHLi0YAAAA
Ujx79izDveUMmUwmB+4NDthIz8F9QkJCyZIlLb8ODRo0sPG1ly9frl27dopv
kzj4dWnBAAAAcB3LGx07rHz58n/88YfsVmBMBPdApmnZsmV663kPD49Lly6l
GH/OnDnqCO+++66Umm3XsGFDpdTXX39dGXLjxg21/v3791t57cCBA61sBHPm
zPnxxx8nJSX9bXFTfQME96mfm7B8+fIMXxUfHz9y5EgvL6/UM+rAgQOZUDYA
AAAymfPBfWho6A8//CC7DxiZnoP7lStXpvhGjBgxIsNXmc3mTz/9NEeOHKm/
UNafBAcAAAA96927tzPHViaTqVevXo8fP5bdBwyL4B7IHNeuXVOfRZ5a69at
U79kzZo16gidO3fO/JrtUqVKFaVU9Xl/V69eVeu/fPmyldf26dMnvTmTJ0+e
33//XR1z5syZynD9n8lgXXx8fP78+VM0e/jwYeuv2rt3b/ny5dOcUTVq1Mic
ygEAAJDJnAnuTSZTVFTUo0ePZDcBg9NzcF+rVq0U34sMT5n+7bffwsPD0/xO
BQcHx8XFZU7lAAAA0NwHH3zg8OFVsWLFtm3bJrsDGBzBPZA5Jk6caGWF/+OP
P6Z+yZ49e9QRIiIiMr9mu4htllKqer93dfViMpni4+OtvNZKcN+wYUPLMceP
H68Mf//9913XSyb4+uuvUzdreYpCCidPnlQfRmD7RwgAAAAG4HBwX7du3d27
d8suH1mCboP7o0ePpv5qbNq0Kb3xr1271rNnTytn3c+ZMycz6wcAAIC2HAvu
c+XKNXLkyCdPnsguH8ZHcA9kjtKlS6e3zi9btqzZbE79kgsXLqjjVKhQIfNr
tot6/fjgwYOVIbdu3VKG5M2b1/prLYN7k8nUqFGjWbNmKf9s06aN5Zjvv/++
MlxsJcU/nz59Onv2bDF+27Zt05yHuhUZGZn6k7By5crUY4rVcufOna38cJTN
Hc7rcHfHjx9fsmTJ8OHD+/btO3To0HHjxn3yySe7d+9++PCh7NKM7Pz5819+
+aX4svfr1++9994bPXr0nDlzfvrppzt37sguLQu5dOnS119/PWrUqP79+4vV
u/gfsdb98ccfxRpedmlZyJUrV8QGQnwFBgwYMGjQILEUxFZyy5Ytf/75p+zS
spBr166tXr16zJgxAwcOfPfdd8Wq6aOPPtq0aZMYLrs0yWJjY7///vsPP/xQ
rCLEimLYsGHTp09fu3atWIe7176ZzqnBfWBgYEhIiJXdQsv9w127dskuHFmI
boN7sQ+f+gsi1uepxzx37pzY1Pr7+1v5ZhUvXvz58+eZ30XWceHCheXLl6s7
n2L/5+OPPxaHALdv35ZdmpFdv359zZo17OfIJY6wxB7UuHHjxCIQC2LEiBEz
Z84Ue1niWEB2aVnInTt31q9fP2HCBHHYJbYIYgsyY8aMb7/9NvXjTeE69+/f
F/N84sSJylKIjo4WxxfffPPNxYsXDX98IRr89ddfFy9eLLqOiop6//33xTph
wYIFe/fu5fZZ2lKD++rVq5tMpgyPrYKDg8UxL78DI9MQ3AOZYN++fVbW/GL7
m+arnjx5oo7zwgsvZHLN9goKClJKVR8XGBsbqwwpX7689dcOHTpUjObj49Ot
W7cTJ078bfHjZNeuXS3HfOedd5Th4kB+4cKFBQsWVGeRG+1FP3782M/PL819
ANHU8ePHT58+vXnzZnGwXLZs2Qz3HDw8PI4dOya7J2MSm0jxSQsNDU1v5nt5
eTVt2nTNmjWGP3bITA8ePBCHxmXKlElvtos96rp164oDmcTERNnFGpY4JPz4
44/TezaHolatWvPnz+e3a9f566+/Pvnkk8qVK1tZCtWqVZs9e7bYaMou1rDi
4uLE2sb6sXylSpWmT5+e1c66T05O3rBhw6uvvio2henNmSJFinzwwQecYaIJ
dd9YHBSI/1+0aFFERETqR2+LIS1atBAHF3/88YfskpHl6Da4L1GiROoVlK+v
79SpUw8fPnz27NkdO3ZMnjxZ7NjY8rPt6tWrZTdkTLGxsR999NFLL72U3pwX
S6dOnTpi/ZaQkCC7WOMQ+zlLliypUaOGlQ9/xYoVp02bltX2czJTfHz8smXL
ateu7eHhkd5SEF+NSZMmERi5jlixrFixokGDBlaumilZsuSYMWPu378vu1jD
SkpKWrt2bePGja0shbCwsBEjRhjyVC6x9x4dHV2oUKH0evf29hb7+evXr5dd
qUGowf0nn3zy66+/9uvXT+wxptgain+WKVPmvffe2759O7sfyGQE90AmsHIr
+KCgoL/++iu9F6o/x4kthc7DETWJnjhxojLEbDb7+PiIIc2aNbP+WrF9XLp0
6c2bN9UhYmuoTE1sNy3H7Nq1q7q7kmJOir07zZtykY0bN6b3eXBAjx49ZDdk
QOKIeMiQIWmeX5EmcXx39epV2VW7vfj4+MmTJ6tnAWWofPnynLWiObH6nTlz
Zt68eW1cCqVLlz548KDsqo0mKSlp3rx5+fLls3EpFCtWbO/evbKrNprk5OTF
ixdbniJoXWhoaNZ5zt0PP/xQsWJFG+dMYGDgwoULZZfs9iyDe8vh4nBe7Egf
Pnz46NGjN27ckFUe8Ldeg/tLly7ZuLKyRd26dTlfV3PPnz+fOnVq7ty5bVwK
ZcuWFWs82VW7PbGfs2TJEisJUQqFCxfm8XyaE+uT5cuXv/jiizYuhQIFCnz3
3XeyqzagNWvWlCxZ0salIPbEVq1aJbtkAxKfbSvnbqUQFBS0bNky2SVr5v79
+wMHDlR+QrdFeHg4p0Y7zzK4Vwc+ffr0zJkzh/8l/odLJCARwT3gamIlb+Ug
dMiQIVZeW7x4cXVMPceC4nBDPSdt9uzZ6vCwsLBsFtfg204N7ocPH245vG3b
tunNyY8++kiDTjJFmndrdEyePHm4bbjmYmJibE9qVMWKFeNGgs745ZdfbD9M
s/wKkN1r6OjRo7aHcarAwMADBw7Irt04Tp06Vb16dXuXQkBAAPfE1tC5c+fq
1Klj71Lw9fX94YcfZNfuWvfv3+/YsaO9c0aYMWOG7NrdW3rBPaAf+gzuv/ji
CwdWWWny8vL69ddfZTdkNAcPHixXrpy9yyIoKOjIkSOya3djFy5cqFevnr2z
XeznbNq0SXbtxnHlypXGjRvbuxTEimjNmjWyazeOGzdutGjRwt6l4OHhsXTp
Utm1G8edO3fatWtn71IwmUyWeav7+uabb9SHz9quVKlSPL7QSWkG94B+ENwD
rrZ69WorO3vWb/Beu3Ztt/h6xsXFqXV++eWX6vAePXqIIQ5ECeoEP/zwQ3Wg
2JmxchHo6NGjtWnG9Zo0aWLvLll6Fi9eLLsbQzGbzVOnTrVyhzrrIiMjZXfg
rsQn2fazi1OoUKEC98zXxMqVKwMCAhxbCiVLloyPj5fdgRHExMQEBgY6thRC
Q0O5i6kmfvjhB9tv/ZFC/vz5Y2NjZXfgKmfPnrXyHBPrPD09Oc/KGQT30D99
BvcDBgxwbK2V2uDBg2V3YzRfffWVv7+/Y4ujXLly3LTWMVu2bLH9/gYp5MuX
78GDB7I7MIK9e/c6ENUpxMECF9tq4siRI0WKFHFsKYh11+XLl2V3YATiAMH2
m06k4OPjc+bMGdkdOM5sNo8dO9aWx/SkqWPHjrI7cG8E99A5gnvA1aycvdm6
dWvrr42MjFRH/vbbbzOnYAc8ffpUrdPyHOyTJ0+muGTeRnfv3lWmNm3atL//
vQg0w7D73Xff1awfFytdurS9+2NpqlGjRnJysuxujOPx48eW3zjHcNtGeyUk
JLzzzjtOzvZ169bJ7sO9JSUlDR061MmlYKRb1UkhDtvHjBnj8GG7Yv78+bL7
cG9Onr6lEFOQ3YdLbNiwIWfOnM7Mmfbt28tuwo0R3EP/9BncO797ryhQoABP
l9ZQYmLiwIEDnVwoK1eulN2H+5k+fbqVh0fbwvLaCjjmk08+Sf3wR7tER0fL
bsLtLV261NfX15mlkOLJnnDAqlWrHL52QNGtWzfZTTgoNja2WbNmzvQuuPV5
C9IR3EPnCO4Bl7p165aXl1d6W9itW7daf3mfPn3UkRcsWJA5NTvAbDarR3+a
rEYuX76sTK1OnTrNmze3Jchwo31m2x8ebYWY4dyqUUO3b9+uUKGC88tl3Lhx
sltxJ0+fPnXg9oCpdenSRXYrbiw+Pr5ly5bOL4U2bdrIbsWNJSYmtm/f3vml
8Morr8huxY0lJyd369bN+aVQu3Zt2a1ob9asWU6eVSLkzJmTW3M4jOAe+qfP
4N6B+4GnafXq1bJbMY64uDjxCXF+oXTo0EF2K+5E7Ocod0R0Us2aNWW34sbM
ZrPzp6wIL730kuxW3NuIESOcXwqhoaGy+3BvH374ofPHF3nz5k1KSpLdit1u
3Ljh8H3MLCkXu8ExBPfQOYJ7wKVmzZqV3ua1WLFiGV4uPXr0aHV8nd8KXr21
78WLF52f2o4dO+zdXenTp4/z75s5HL4lmiU3usOA/sXGxlatWtX5hSK8/vrr
srtxG8+fP2/evLkms71KlSqyu3FXCQkJrVu31mQplCxZUnY37iopKalTp06a
LIWQkBDZ3bgrs9lsebakM3LmzCm7G40tWbLE+V/VFOfPn5fdjbsiuIf+6TO4
/89//uP8uovz4jQkDgE0OWVUKF++vOxu3IbYz4mKitJktvv7+8vuxo2pOZGT
xI4Zj4pw2JgxYzRZCgJ3YnHY7NmztVoK169fl92Nfe7cuVO2bFlNeucaFmcQ
3EPnCO4Bl6pUqVJ6m1db7jA2f/58dfyuXbva+KZXrlxZu3bt+PHj+/XrJzbi
AwYMEPulGzZscOljsAoXLqzU+ejRIycndebMmVq1atm7u/L2229r0kgmqFat
mr3dpRASEuL8fIYiNjbW+SWiatCggeyG3IOGP9kJhQoVkt2QW0pKStLkKm9F
rly5ZDfklpKTk7t3767VUvDy8jKbzbJ7cj9ipjn/zA5LcXFxsnvSzGeffaZV
ai/s3btXdkPuiuAe+qfP4L5z585Orrh8fX056UgrCQkJWj28INu/z1uX3ZDb
GDBggFazXfjrr79kN+SWNLnKW8Vj7h0zZcoUDZfCuXPnZDfklubOnavhUjhy
5Ijshuxw7949Te72qdDP7pY7IriHzhHcA65z7Nix9LatXl5etuxmr1mzRn1J
/fr1rY985syZ6Oho689PFxNZtWqVKx6MrjyD3slj52vXrvXq1cvKwwWscKMr
7p1PB5YvXy67CYNISEgQXwonF4cl8UWQ3ZN7cP5HVEthYWGyG3JLlj+wOy84
OFh2Q27pvffe03ApcA2UYzS87ibbv9dAJSYmyu5JGxs2bPDw8NBw5hw8eFB2
T+6K4B76p8/gft68eU6uuEaMGCG7CePQ5JE0qsKFC8tuyD2MHz9ew9ku9nOe
P38uuyf3Y+VunI65d++e7J7cz5IlS7RdCpcvX5bdk/tZsWKFhmcFC6dOnZLd
k63i4+Nr1qypYe+tWrWS3ZMbI7iHzhHcA65j5df4yMhIW6awe/du9SVWDkv3
7NkTERFh+5a9fv36mtzQ3tLIkSPFlJs2berYy+Pi4qZOnZojRw779lEsvPPO
O9p25Dr79u1zuE1l8XFBpVYGDx7szLJIrVevXrJ7cgOW9xLRRKNGjWT35H6W
LVum7VKoUaOG7J7cz9q1a7VdCjzv0gGbN2/WNps2zPMuxb5irly5NJwzJpPp
9u3bsttyVwT30D99Bve3bt3y8fFxeMVVpEiRp0+fym7CIBYtWuTshuT/qlev
nuye3MDWrVu13c8pWLCg7J7cz969ex27PiU9Yg/NFdfjGNuRI0f8/Pw0XAq+
vr7x8fGy23Izp0+fzp49u4ZLwdPT043uR6rVI0tUAwYMkN2TGyO4h84R3AMp
HDx4cJEWFixYoD72Pc1tqy0TsTw12mQyiU1JihFmzJjh2Nl6AQEBI0aM0KRT
tZLmzZuPHTvWgdcOGzYsb968DnRh6dVXX9WwHVerXLmyY22Kg+7Ro0fLLt8g
xE6atif6Cj169JDdlt5NnjzZmZ9P09SqVSvZbbmZ6dOn+/v7a7sUIiIiZLfl
ZmbNmpUzZ05tl0KDBg1kt+Vm5syZkzt3bm2Xwssvvyy7LQ0sXLiwTJky2s6Z
kJAQ2W25MfWctxw5csiuBUib5W2sypUrJ7uc/6dp06YOr7iioqJkl28QU6dO
9fX1dXZD8n81b95cdlt6N3fuXM33c2rUqCG7LTcjtuD58+fXdilUrFhRdltu
ZsGCBerzPbVSqlQp2W25GXF8UaxYMW2XQtGiRWW3ZavBgwdr/gtknz59ZLfl
xl599VVlNnbs2FF2LUAapk2bZvl9J7hHFhcXF6f54SQAAAAAAAAAAAAA2G79
+vWyg1NAJrPZ3KFDh2JasHK5fe7cuW2fjuX5eCEhIcrAsLAwZ+4qr/L19RWT
0qRfhxUqVMjJLjw9PdU540bEnM+TJ4/lpcceHh5iieTMmTNv3ryioyJFiojR
ChQoYNnpiy++KLtwg7CcsVqx66udNYWGhmo+28XKUHZbbkasWzQ/0zsgIEB2
W26maNGimi8Ff39/2W25GbFJ1fbmsdn+3bOS3ZY2NL81CvswThL7jeqclF0L
kDbL418dbpKCg4MtT9EX63+xohO7keKILH/+/GIfVXzLLPdUxWZa/FN21Qbh
ikOA7Nmzy25L79jP0QOxYhEbbm2Xglh3Sf8dz72I2aXtowoEMUGWgr28vb21
XQpudHyh+W03BLEDI7st9xYUFKTMyRdeeEF2LUAaihQpYvmV37Nnj+zgFDCC
5OTkggULprdfcfXqVdsnZXk3p0WLFokh165dq1q1qlYb+o8//thls8EmW7du
dab+hg0bXr9+XW4LTnr+/Pm9e/cSExPT/Gt4eLja7BdffJHJtRnY66+/7vS3
5/8Qm9QnT57Ibkvvhg0bpu1sF3vaYpUouy03M3HiRG2XQo4cOS5evCi7LTcz
e/ZsbZeCn5/fqVOnZLflZpYsWaLtUvD29j506JDstjRw9OhRbeeM8N///ld2
W+6NZ9xD//T5jPsUxDGXOPJK76nE/fr1U1uIjo7O5NoMbNSoUdpuUwIDA69c
uSK7Lb37/PPPtZ3tXl5eBw4ckN2Wm1m7dq22S8HDw2PHjh2y23IzW7Zs0XYp
mEym77//XnZbbubnn3/WdikIK1eulN2WrVq2bKlt72XKlBFHB7Lbcm884x46
xzPuAVewskPSokULuyZVrVo19bVjxow5dOhQSEiIhtv6woULP3/+3EXzwRbr
1693rHI/P78pU6YkJSVJLN7VTp48qV6SWbduXbPZLLsig0hOTtb20dK+vr6H
Dx+W3ZYbqFixooazXXw7NmzYILsn91OnTh0Nl4Lw1Vdfye7J/URERGi7FBYu
XCi7J/fTtm1bbZfCzJkzZfekjQ8//FDbOdOxY0fZPbk9gnvon1sE91bExsaq
N7UTx8h//fWX7IqMw/I3DeeJQ4A1a9bI7skNtG/fXsPZLkybNk12T+6nR48e
2i6FUaNGye7J/bz77rvaLgUxQdk9uZ+RI0dquxR69uwpuydbPX/+3M/PT8Pe
AwICTpw4Ibstt0dwD50juAdcYfDgweltXr/99lu7JtWsWTP1tTVq1NA2bVR8
+eWXLpoPtli3bp0DNdevX//MmTMSy84cYkdU6ddkMhnjIj6dOHfunIbfIE9P
T/Exlt2TG4iPj9f2bo2Gycgyk9lstrxPrPPGjRsnuye3lDt3bg2XwtChQ2U3
5JYsb2rkvKioKNkNaaZFixYazpkGDRrExcXJ7sntEdxD/9w9uJ8xY4Za//Ll
y2WXYxyJiYna3qR6ypQpsntyDynusOqk3r17cx2BA8qWLavhUujUqVNycrLs
ntxPzZo1NVwKr732Wno3zIQVlncTdd4rr7wi9xo0u/z6668a9u7t7R0TEyO7
JyMguIfOEdwDmhOHM+kdIhUoUCAhIcGuqXXv3l3D7XuaWrVq5aJZYYtvvvnG
3oKjoqKywjHjnTt31HMy27VrJ7scQ/nvf/+r1dfH19f366+/lt2Qezh9+rRW
s91kMvGTnWNu376t1VLIxhUfjnr+/LmGS2Hw4MFZYZvoCuo9bZzXp08fI/2O
quGJJY0aNXr48KHshoyA4B7659bBfWJiYtGiRZXiy5cvb6RVunS///67VtsU
seGeOHGi7Ibchob7Ob169TL2rQ5dR8OzVjp16mTvz4lQaHixc2RkJPcnd4x6
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
7ty5+/fvW10Xf4Pg3qvo0L148eKuXbvWrFmzefPmM2fOPH78mFvmwYMH183d
uXPH7MNlgvt79+79nYLW4vJWILi3BUZwTwcbHa6XL19+9OiRe7UGAABwDMG9
mqixSk3Qs2fP3r171+q6+BsE91715MkT6vXs37+fel4bNmw4fvy4sQekHd5m
EhMTzT5cJrinrt+VK1cuXLjgzm8HwX3qu3bt2qFDh+gatH79+oMHD9rtgN+4
ccPssLl582bq11mD4B4AAAAgQCQkJAg6MjpBBnTv3j19MWNEpaNelXgVMp0d
+vxNmzYNHTq0ZcuW1apVe/7558uUKVOrVq2333574sSJR48edXbzZYJ76gye
NkedNXbhbdu29enT55VXXsmTJ0+2bNkKFChQvnz5Jk2ajBo1asWKFbQTUnkD
zZw5c8Zsiy5fvmxWirqlZqUuXrxoVkp8jHG1Gjhw4IsvvpguXTrtG0mTJk2O
HDkaNmy4cOHCgLqVRP3iRYsWDRky5M0336xcufILL7xQrFixl19+uW7dunSA
/fjjj1evXnXtkxUP7gXHGGGPAfqxrF69un379iVKlMiVgvqt9erVmzx58oUL
Fzy7LhkbN2587733IiMjbf+WKVMmqhV9Zfrp8eeff7aZ69mzp9kqBMH9tWvX
6CRTsmTJtGnT6gtER0e3adNm7dq1DitPpyZ225s1a8auqG/fvmZ76ezZs07t
JaM7d+6wH1ioUCF21fPmzTNbNZ2Z2c85f/684Nt0eO5Nti64v3//PltVumSw
H/jFF1+YbZTgrJssDO7PnTs3YMCAwoULBwUF6Qvkz5///fff3717t7P159Bx
ThfWwYMHt2jRomrVquxVjH6bx48fd/PzUx8d5DNmzKCdQxfl0qVLFylShLbo
9ddfp7989dVXtMcELZ9kw/fLEdz3o6/JrJTg/E9XcMHqqMGmL0nVXrlyZbt2
7ej6QucK7RTaoEGDKVOmiA8tAHBHYmKiTM9L0AihrodMBy1ZGDqQpKQkmQrv
379/3LhxrVu3pjM5tbjojEEnQDrDjxgxYteuXeIToJFMcE+nOMF5jKv2kSNH
qN9Uo0aNfPnyRUVFUf+rbNmydCqjy9DixYsFD0N6aQPNUNPUbIsErVb6Bs1K
/fHHH2alxMcY+6gedTfGjBlToUKFsLAw/UvJmjUrXb5nzpxJa/fItvsE2mnU
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
004IGTJkoCYou/wzzzwjuXOMwf2OHTv0RhTthNq1a1NrnFqJdt9TKFu2rGDM
fCqr7wqu40ZtRbPGP/HqWNkLFixg18WdVIsXL25WK/Hpkbrk7OfQVaxDhw7b
tm3TO2i0Uf/5z39oj3H7YevWre5vFP1a9dtNOjqQZs2apQ8T8eTJkz179vTq
1Uu/z0CHKxfc271VaESHIvf0VGxs7LRp09gUm04sgwYN4l6loVJmt1J79+5t
dgWhi7vgaHH57W8dXRfYn2r27NnHjBlz9OhR9qJAndkJEyZwNxWJw0k06ACg
nypbJGPGjH369KGrkv7bof1Ge497njl37tyC+dcuXrzI7gTuolajRg36utnv
iNpFdFqj+ts9relDG1HzQ1+AjpO4uLjChQvbfUCdGnjyD9jQlnbp0oUtTjt8
3Lhxf/75p74MdSfHjh3LtRvLlCkTUDPaAAAABLKZM2eyzQBqlsuUosYt10qR
Gbzo0qVLWpuHelLi6cw2bNjA3namBhL1y8wW/uKLL9jOBX24w5bq3bt3nZ0y
jPp67Pbu3LlTS5bDw8OHDx9OH6IvSV3LHj16sAsb+/je3kAZXCYrCO5Z69ev
Z0uJ3/3UUSOZO2A+//xzW8rz8NR1sluE2urUuuZKmS3s09jgvk6dOomJiWZL
njt37qWXXmJ3iPy9RMWDew6XwK5evVq71xodHf3111+zQzJSB23YsGFcSpU2
bVr2J+nUuhwG9/fu3eOetaCepuCFLKqwdt7j3oBzObhftGiR9szPyy+/vG/f
Pm7hVatWGafeMC5mV/v27dlS1D2XrKH7XnjhBXbVv/76qwsf8vDhQ27DVQ7u
OdzD/z/88INrn8MF9ytXrtSyHm3eTHZJuvDNmzePu31KFyPJmQTpV8m+OUK/
ArNmAJ3/x48fz17FaGHJYzI1sXNHUm2//fZbwcLLly9nnzYxBvccOnmy+1kQ
3LNGjx7NlhIE9xzu/va6deu0u2oxMTF0GWXv9pw/f37w4MHcOx30zbJ3jQDA
g6iZwf7cMmXKJB4mSDNjxgzbv8mcRug8rz9nKB7thC4QbCuFzoH0+WYjO/38
889su4sWpquJw5o4O/0uNZPY7V26dKnWVKCLGp0M2YvI7du36SrD5tTG4N7b
GyiD60MJgnvWX3/9xZYSBPccLlKkLoN2IR4yZIjd9Jm+FOP4PB9++KETW+gj
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
nrkeTXBwsGen2DAG9126dBEX0d9HYy986myg5cH9zz//LFOQu/SQbdu2Sa7U
J+iZlPwXWrFiRX1vUAdfpovh68F99+7dxUXOnj3LFXHY4LS7LnFw//3333Nr
oQabzFrOnDnDTdTuTnDvMCWk8wz3jv+uXbscrshfg/thw4axxekal5CQIFOQ
G12Bzrr0PbpQf+qYcN9+7969ZQpSx4R7cskmEdxXqVKFXb5Vq1Yy63r06BE3
COf06dMFy6dmcM+O5F+sWDGZIrQ5eidUENy/++677FbQdUryDhj3pFBERITD
g8oY3BcpUkS8On2cItbkyZPFK6pXrx67vMMXrLhZacqXLy9eXsdeiUjfvn0l
CwIAAIDv+vvvv9mOBrVyxd1YfTjZfPnysS0H8e0U/TnkmjVrChZ766232M8s
Xbq05FbcuXOHe3BR5ulNeVxwnzlzZofPUd+8efN6CvaP6mygtcG9/I0I7g6G
LXXzxFSwcuXK+Pj4NWvWyBfRxgvVf7Ay0wf4dHCfMWNGh3NDJCYmcjdMJMf2
lA/ujcPb0slQcosePnzIPm5hcyO4d3iHPznl/RRuZACH4xMmI7hP4WfBPe1Y
h0VOnjzJ7Tfx6Bbc3YnKlStL1i0hIYF7adTlzfS4iRMnshWTDNZXrVqVJ4XD
2SisDe5lJtG+ceMGd5PT/dlFAcCuR48ecdGAeHpofX5nrudFFw5BKWrPaIs9
++yzgnFXjAmL/EM7+phRGvF7/c7igns6QTmczY2aglrPi70zr84GWhvcZ8uW
TfJhOepWcJcDdfJEj9i6dSv1vBYtWiRfpE+fPuwOEb+toPH14N5symlWXFwc
W0QyUncquOci0QwZMpjNG25Urlw5tqzLwT39HM6dO+ewVMGCBdlSDkc+T/bT
4J4anNzr9vIvzt+7d4+b7s3h81p29erVizueZTrCms6dO3NlxcG98a2c3377
TXJd3IlFnMWnZnCfNWtWfUXUtZS8dtSpU0frFpm9nkN7Mn369OxWDB8+XLJK
58+f5y5M48ePFxcxBvdjx44VF3nw4AF38ItfOtNMmDCBLVK/fn3BwpcuXdJf
79I4fLhap888q6HLumoTzwEAAIA3VKpUiW0DTJw40WxJfTjZfPnyzZw5ky0V
HR0tGH+vZs2a2mKC3hk1iriWkmBmXqOXX36ZLfvGG2/Il3WIC+5btmzpwoco
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
Z0uZnLR79+6//PLLqVOn/vnnH+rIzJs3r0GDBlpbvWnTpuzj2Rz9TRzxN8XR
XyVwrZT7zIZ7NWrfvr1ein4IkqXy5Mmjl2KnKxVLly6dWYWp48b1nQV69OhB
PwH54D419waHiwA6d+6s36H6/fff2ZvY1I2V/HJlUG80Z86c+ocHBQVNnTpV
u3dH16OVK1fq97XoZMjeiOASZ4GKFStqRbi3mcT0mXBdK+UULmwdPXq01tOn
g2fDhg3sC1/sC9T6rXiH6AP1UnRWkSxFJ2qzCi9btixjxozswiVKlKBtZ1/z
p1/KmjVr6KzFvnfTpk0b1abkY4N7TdmyZb/99ts///yTXez69etLly7l3kyP
ioqSvLtodzRsu8qVK0ffPhfccxYvXqx/MlVV8pPpR62Xom9HshRdpj21qwHA
LuOMzMePH3dYintzjTRs2NC1Chw6dEgf2UaTK1eusWPHnjx5Ul+Grss7duzo
2rUre/KvUKGCWSzlFK6Z5JDMa4BKbaCGe89OgOpAl3vqGAqWEUymzAX3dJ3S
4w9qcfXu3Zs6GgdS/PTTT126dOGyKlvK9UKdGW08ha6txt8aNfipZUJXVfrR
Uc+L/peu9dRf0B5QfOmll7jJpDh///03fTL9r+Q3S2j/a/VxrZT79u7dK7nS
SpUqsQWNr2mY0eMqbvJrMer82q0wdQcE/V9OvXr17t69Kx/cp+be4PTp04dd
jDpi2uGUnPK40RtvvKH/k3iKJc+6cOEC+3hqpkyZli9frgWd1N+cNWuW/gYK
tYEFj4pxreuQkJBOnTrROVbPTKns999/T+dYdrHIyEgPji0wadIk44sqdhUr
Vkzb+S4E99q2sMOYk/Tp03/wwQe0LeyDzdSNnTBhgv48hi3lbWvJobGo981+
PvWCDx8+rP3TjRs32EFTqavi/K76L+MQdmFhYd26dduyZQt7Q5g2itZO50bu
/aa2bds6vHDQKrQxCXV0vevXr9/Bgwf1ZeiyO3PmTG4MsdjYWPGb6cYba2b0
H9r58+cli7CjERqfATMzZcoUu1WlHahNp6ijznLr1q1XrVrF3uyl6k2fPp29
4xEaGkp9cPEeBgAAAP/GPdnYpEkTmVLc04aE+kEu1+HIkSPcGNEaatflzp07
R44cXCOc/nPQoEGemtre28G95RuooV4k99y7XTlz5jxw4ECyo2BXPrin9d68
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
rbaKjgUjR468/vrr1/org7D++c9/XnfddUcddVS0B4uPYrvuuut+++137rnn
3n///d98803oAqvgnXfeibbDqPLBgwdH++Htt9++Y8eO0adg3333jTbO6GBd
zQcLfvTRR9FCDjnkkGjh22yzTbS6oje65pprMnnAJVBb/elPf0rOoTLfG8yd
OzeZK/VGHNUUDc7/8Ic/RHu8/fffP9r7xSOB/v37/+pXv4p2j2sN1wpf8A6u
WLHigQceGDt2bHTCFR1lomNBdNw//fTTX3jhhRpZ/hqD+9i33357yy23RKcY
0aEt/tXkhhtuGA05jjnmmCeeeKLQnmWTO9Fw969//Wt0nhWNVaIRS7QNRGPO
IUOGnHnmmU8//XTdWQ+11axZs1I/AtGZReiK0nn22WfPP//8aAjdvXv3jr98
FT/aLC+99NI333wzYFXRqccNN9xwxBFH7L777p07d952222jgWt0DhudqlQ1
QIw+bi+++GL0cTv00EN79eoVLSo6xxw0aNDRRx8dneXl+gQzcytXrkzdbJo1
a5bdcqI9/KOPPhrt0g888MBopUUndFF/o45HJ0pTpkyJDtzVKfLtt9++/PLL
oyVHh61OnTpF5xHRceSss86Kdlw1fsnou+++i44LEydOHD16dN++faN3jPoS
naTvscce0d7ywgsvjA5k1fzG4I8//vjUU09Fp13Dhg2LPqfRKWT0LtGhOTpA
R4fpzO94UNR++umnZ5555oILLjj44IOjwUB0BI8GBtH/DB8+/Oqrr37++edz
9J0WAADquPTBPdQFEyZMSP0IpP5YHgAAakqa4B7qgnIP4UpzrzNIfPzxx6mb
Tfv27UNXBAAAkCuCexg5cmTqRyDDuwsCAECVCO6p48aPH5/6Ebj66qtDV0QR
eOSRR1I3mxEjRoSuCAAAIFcE99QaP/3009W/yPBRa4mOHTsm239paenixYtz
VCEAAHWZ4J5aY9q0adGZ1x//+McqzbX//vunfgRmzZqVo/IoTA899FC02Uyc
OLFKd4+/+OKLUzebqVOn5q5CAACAsAT31BorVqyIt+Fu3bplPtecOXNSt/99
9tknZwUCAFCnCe6pNdq3bx9tw+uuu+5PP/2U4Sxff/11w4YNk+2/bdu2mc9L
7TBs2LD4X//tt9/OcJaysrJOnTolm02DBg0+/vjjnBYJAAAQkOCeWiMJ7ktK
St55550M5xo+fHjq9v/kk0/mtEgAAOoswT21RhzcRx588MEMZ7n00ktTt/8p
U6bktEIKUBLcX3TRRRnO8vDDD6duNqNGjcpphQAAAGEJ7qk1kuA+MmTIkExm
efDBB1M3/p49e+a6SAAA6izBPbVGEtx37dr1hx9+WOv0r7/+euPGjZONf/PN
N49O3/JQJwUlCe7XX3/9Tz/9dK3TL1q0KNpUks2madOm7733Xh7qBAAACEVw
T62RGtxHTj/99FWrVqWZ/s4772zUqFEyfZs2bT777LO8VQsAQF0juKfWSIL7
yNChQ5cvX55m4meffXbDDTdMpm/SpMkrr7ySt1IpHElwH9l+++0XLFiQZuJ/
/etf2267beo+84477shbqQAAAHmzbNmyJf/P4sWLywX3CxcuTF799ttvQxcL
mSoX3Ee22267m2++ef78+amTffnll3fddVfPnj1Tp2zVqtWsWbMCFQ4AQO30
3XffLUmR+qTmyPPPP5+8tHTp0tDFQhWkBvf1fnlg/TXXXPPuu++uXr06meab
b775y1/+cvDBB5eUlKSm9vfdd1/AygkoNbiPrLvuuuedd97LL7/8448/JtOs
XLny6aefPuWUU1K/Zh9tQpdddlm4wgEAAHKo3A890thll11CFwuZ+uGHH9Zf
f/01bsnNmjXbfPPN27dvv84661R8deedd/7kk09Clw8AQG1z4IEHZnjmtd56
64UuFqqgW7dua9ySmzRp0rZt244dOzZv3rziq1tsscXcuXND104wxx133Bo3
mwYNGmy88cbRZtOqVauKr0bb0gMPPBC6dgAAgFwR3FNbff/993/605+GDBmy
3nrrZbKF77DDDvfcc0/qr0IAAKCmCO6praJzqMcee+yII45o3bp1Jlt4+/bt
p06dGp2vhS6cwObMmXPKKad06NAhk82mRYsWF1988VdffRW6agAAgBzq169f
x8wcdNBBoYuFbKxatWrOnDnTpk0744wzBg8evMcee+ywww7RJr3zzjsPHDjw
mGOOmT59+rvvvhu6TAAAarMxY8ZkeOa1/fbbhy4WslFWVjZv3rxbb731vPPO
GzZs2F577dW9e/dok+7WrVvfvn2POOKIKVOmvPrqq74sTTnz58+/++67L7nk
kpEjR+6zzz49evTYcsstoz1h9P+HHHLIFVdc8dxzz61cuTJ0mQAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
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
Ij/66KOk8cgjj0yK/93vfhewPAAAAAAAAIBarJrBfR28Q35i/PjxVQru119/
/dAlV2q//faLi3zvvfeSxuSfIzJ9+vSA5QEAAAAAAADUYtUJ7n/44YdBgwbF
815wwQWVTTZjxowNNtige/fu+VlU3tx+++3lovnS0tL02f0XX3wRuuo12377
7eMK//GPfySNvXr1Siq/7777ApYHAAAAAAAAUItlHdyvXLly8ODB8Yznnntu
mimvv/76aJqOHTvmYVH59Mwzz6SG8ocffvgPP/zwwAMPpK7Scp599tnQVa9Z
ixYt4grffffdpHHHHXdMKp85c2bA8gAAAAAAAABqseyC+++//75///6ZRO3/
s7a0vQYXlWcffvhhaig/ceLEuH3BggUdOnRYY3B/6623hq15jZYvX55UmBrc
p/Zi7ty5ASsEAAAAAAAAqMWyCO5XrFjRr1+/eJbttttuxtqMHDmysrS9BheV
fz/99FP9+vWTtXfLLbckL82dO7dBgwYVg/u1fjMhiPfee2+NwX3Lli2T9g8/
/DBghQAAAAAAAAC1ydNPP/1UitRw9oknnkh9aeXKlWtcwsCBA9f4c/L01pi2
1+Cigthss82SqqZPn5760rnnnlux8mOPPTZUqWnMmTMnqTD1GfcNGzZM2pcs
WRKwQgAAAAAAAIDapFGjRhnm459//vkal9C8efOaSttrcFFB7LXXXklVN9xw
Q+pLixYtWmeddcpVPnz48FClpjFz5sykwrfffjtuXLFiRdLYsGHDn3/+OWyR
AAAAAAAAALXGoEGD+mXm66+/XuMShg4dmuESUo0aNSqniwriyCOPTNLt3/3u
d+VePfroo8sF9/vtt1+QOtN7+OGHkwrfeuutuHHhwoVJY6dOncJWCAAAABSL
119//SkAAIrTnDlzysrKQo8oAars4osvTtLtK6+8styrl156abngvmfPnkHq
TO+uu+5KKnzjjTfixjfffDNpHDBgQDLx6tWrP/jgg8oeowAAAADUZW+88Ua6
uygCAFDwHnnkkdCDSoAq+/3vf5/sx84666xyr/76178ut6/baaedgtSZ3vTp
05MKX3vttbjxySefTBrHjRsXtTzxxBNDhgxp0qRJ1HLhhRcGLRkAAAAoRM88
80yOLyQDAJBbf/zjH0MPKgGqLPVsdPTo0eVePeGEE8rt63bbbbcgdaY3adKk
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
eiWxEv379895zwEAoJAceuihpaWl1RxIl7PrrruG7hZFJtpmku2nRYsWocuh
9hg8eHC8XbVv3z50LXXIEUccEa/2+AoV+RQf06P/hi6kzkl+fBRt/6FrqVu2
2GKLeM0fcMABoWvJtxEjRsR9b926deha6pYTTjghXvONGzcOXUstl3wnqnfv
3qFrKSZHHnlk6um54J46bsWKFSUlJTV71QsAAAAAAAAgc/fdd1/o4BQCmzBh
wvBcOuigg9I8wL1hw4bDhg2LJjvwwANT2+PGQta9e/e41EaNGiWNybcgOnfu
nH72Zs2aVWfftcEGGwwdOjTHXcytPfbYo1OnTr179w5dCAAARaNfv37VGUWv
UTQoDd0tis/222+fbELrrbde6HLW7JBDDunRo8eWW2653377ha6FTO2zzz7x
drXpppuGrqUOSW4C2bx589C11DnJL+5DF1LnRFt7vNlH23/oWuqWtm3bxmu+
V69eoWvJt4EDB8Z933DDDUPXUrdEY8J4zacGGeRCdGoZr+pddtkldC3FJLnl
VGz27NmhU1Oo5aZMmZLmKtm5554bT1ZWVtakSZOk/aOPPgpb9lpNnDgxLrV9
+/ZJYxLcjx8/Ps28CxcurMqlxP+f6C2OP/74H374Iec9zJmVK1eOGjUq7s6J
J54YuhwAAIrGGWeckfVAeo3atWu3ZMmS0N2i+BT+M+6/+uqrnj17xhXecMMN
ocshU55xH4Rn3AfkGfeheMZ9KJ5xX88z7vPOM+7zxjPus+MZ95BnyTiwotLS
0tSAPvWZ7y+//HLAmjMxfvz4uNTOnTvHLatWrUrqnzRpUpp5X3rppcyuI5a3
++67z5o1Ky/9y5WysrKDDz446dFvf/vb0BUBAFA0unbtmt1Aeo0aN25c7KNr
Qinw4H7FihWp9wR47LHHQldEpgT3QQjuAxLchyK4D0VwX09wn3eC+7wR3GdH
cA/59Pzzz6e5UBYNVFIn3m233ZKXnnjiiVA1Z+jss8+OS91pp53ilu+//z6p
f/r06Wnmve+++9Z6FbGcXXfd9aWXXspLz3Jr8uTJqf16+umnqzR7tJLHjx/f
r1+/o446Ktqf56hIAAAK0KpVq+Ib6taI+vXr//nPfw7dJ4pVgQf3o0ePTsor
KSlZtGhRlWb/7//+79NOO61Pnz6nnnrqihUrclQkayS4D0JwH5DgPhTBfSiC
+3qC+7wT3OeN4D47gnvIp6OOOirNtbJyoW0ybonceeedoWrO0IknnhiXuvfe
e8cty5YtS+q/66670sx7/fXXr+06YnmnnnpqXrqVWx988EF8RhZr3Ljx999/
n/ns77333rbbbpvMfsIJJ+SuVAAACk00mKzqKLoyTZs2ldpTHYUc3D/66KOp
W3vXrl2rNPszzzzTunXrZHa32c8zwX0QgvuABPehCO5DEdzXE9znneA+bwT3
2RHcQ94sXbq0WbNmlV0r69KlS1lZWer0J598cvLqlClTQpWdoREjRsSl9u/f
P275+uuvk/offvjhNPNeeeWVlV9E/F8dO3ZM7ipfO4L7Qw89NLWDvXr1ynze
xx57bP3110+dfeTIkbkrFQCAQvPJJ59kMopeq5YtW77wwguhe0NxK9jgftWq
VdG5duoGP27cuMxnv+GGGxo0aJA6+4QJE3JXLRUJ7oMQ3AckuA9FcB+K4L6e
4D7vBPd5I7jPjuAe8mbKlClpLpdVvJn85Zdfnrx68cUXB6k5c4MGDYpLHTp0
aNzy5ZdfJvXPnDkzzbznnXdemjVT75dfAF122WUrV678wx/+ELfUguA+2t+W
lJSkdjPDf+VoPVxwwQUVb4s6adKkXNcMAEDh+OKLL9KPojPRuXPnDz/8MHRX
KHoFG9zfdttt5bb5+++/P5MZv/7668MPP7ziR+avf/1rrmsmleA+CMF9QIL7
UAT3oQju6wnu805wnzeC++wI7iFvkhFgRS1atFi+fHm56W+55ZZkgrFjxwap
OXN77rlnXGryu+8FCxYk9b/22mtp5j3llFMqWzORfv36JdcSp06dGjfWguD+
sMMOK9fT//qv/1rrXNFeutwPRmLROd3ChQvzUDYAAAWimsF9aWnpmDFjvvvu
u9D9oDYozOC+rKys4mn4J598stYZH3rooTZt2lT81LRv33716tV5qJyE4D4I
wX1AgvtQBPehCO7rCe7zTnCfN4L77AjuIT9eeOGFNBfNzj777IqzPPLII8kE
w4cPz3/NVdK1a9e41GOPPTZu+fTTT5P6v/zyyzTznnTSSZWtmS233DL1CQJX
X3113H7mmWfmtj85tmDBgoYNG5br7HvvvZdmlmgdRke6cvdpTIwePTpvxQMA
UAiqE9xvt912c+bMCd0Dao/CDO7/9re/ldvymzZt+vPPP6eZJTopSx7QVtHk
yZPzVjwxwX0QgvuABPehCO5DEdzXE9znneA+bwT32RHcQ34cd9xxlZ37l5aW
rvHulK+88koyTZWefh7E5ptvHpd6yimnxC2ff/553NKgQYP010bGjBlTbp0k
8fSgQYNSp7zkkkvi9vPPPz9p/PLLL6P3ykWncif1ulbi7bffXuPEy5cvv/rq
q5s3b17ZJtSkSZNMfjYCAEBtkgT39evXr2ygWFGnTp1uvfXWH3/8MXT51CqF
GdxXvMtZo0aNVq1atcaJP/vss+jMtLJvSke22GKLlStX5rkLCO6DENwHJLgP
RXAfiuC+nuA+7wT3eSO4z47gHvLg+++/X3/99Ss7/T/wwAPXOFfqx3OrrbbK
c81V1bp167jUc845J25ZtGhR3LLZZpulnzf1Vvldu3adMWPGRx99FP85YsSI
1CnPPPPMuP2SSy6J/nziiSd233336M9WrVoV17XHHj16VNwSLrjggnKTvfXW
W2eddVaLFi0q23hi5513XpBe1GKvvPLK+PHjBw0aFH30WrZsuemmm2699dZ7
7bXXmDFjbr755uizGbrA2undd9+95pprol3iNttsE+1SNt544y233DL6jI8e
Pfraa6/95z//GbrAWuvTTz+dOnVqtL/t0qVLmzZtopXfsWPHnXfe+bDDDvvt
b3+b/lknVMdXX331hz/8YdSoUTvuuGO0n4n2NtGaj/7/kEMOiXZBzz33XPqv
vZG1b7/99v777z/xxBOj7TwapUSn6h06dNh+++0HDx7861//+vHHH4/O4kPX
WHt8+OGHU6ZMibbqzp07b/SLaDvfddddjzrqqIkTJ86bNy90gcUtCe6jtRod
LtMEjvV++WbsPvvs86c//cmNvsmFAgzuf/jhh/XWW6/iZyH6FKROFh1tn3/+
+aOPPrpx48bpT7vuuuuuUH2pywT3QQjuAxLchyK4D6VWBvdlZWUvvfTShRde
2L9//y233DI65Wzbtm00QOrVq9fJJ5982223LVq06H8E9+EI7vNGcJ8dwT3k
wd13353m9L+yYUl0BCktLY2nWXfddfNcc1Ull0TiSD2yYsWKDMce48ePb9Cg
wYABAx5//PH4xvg//vhjPO/xxx+fOmXy2/wRI0b06dMndTXOnTs3R12rcfPn
z69sY4g69etf//rSSy895phjOnXqlGazSbRs2XLp0qWh+1RLrF69OhpF7Ljj
junXefTBHDhw4FtvvRW63trjkUce6dmz51q39t133/3ZZ58NXWytEp1IDh48
ODnWVKZz585//vOfQxdbq7zzzjtHHXXUWgOCdu3aTZs2TcRWgxYsWDBu3Lg1
5jipomNrNDj5/vvvQ9db3J5++ulodFdSUpJ+bUeH3cceeyx0scUqCe7jb/lG
f86YMePYY4/dc889o113x44dt9122969e0dD6HvvvdeIkZwqwOD+P//zP9e4
24nOPYcNGxadc1100UXDhw/feOON0++mYjvttJMv1AUhuA9CcB+Q4D4UwX0o
tSy4//HHH2+66aatt946/bgiGo0cfPDBTz75ZPyn4D7PBPd5I7jPjuAe8mDA
gAGVHaa7dOmS+gz3clq1apVM+d133+Wz5qpKnth+1VVXJY3x3d1HjhyZft4V
K1Z8++23qS3J0fOMM85IbT/iiCMqW5O///3va7A7OXX77benH7xVyc033xy6
Q7XEc889l5ymZSIaY0+dOjV01UVv3rx5e++9d+arvaSk5Nxzzw1ddW3w6aef
Dhs2rEp7mxEjRvgZcvUtWbJkzJgxVbqpdfQZ+eabb0IXXvR++OGHiy++uGnT
ppmv+a233tqTaLLzwQcfDBw4sEp7mOOPP953VLJQLriHgAowuE9u11Z90RDU
10dDEdwHIbgPSHAfiuA+lNoU3D/66KMdO3bMfICRfJlfcJ9ngvu8EdxnR3AP
ufb555+nuT4/ffr0NPOmxoiFfJvo1atXJ3VOmzYtad9pp52ilkmTJlV1gcnR
M/n9fmzQoEGVrcmrr766BnqSFyeeeGLmQ7j0dt55Z1e5qy/a3k499dS1/iSw
omiWO++8M3T5xaqsrCz62MYXJarq8ssvD11+cYu22/iLVVV11FFHha69uM2c
OXOTTTbJYs3vtdde9vbV8dZbb3Xu3DmLNd+hQ4dly5aFLr/I3Hzzzc2aNcti
bY8bNy507cVHcE/hKMDgfrfddstiX7RGxx13XOje1F2C+yAE9wEJ7kMR3IdS
O4L7FStWjBo1KuuRhuA+zwT3eSO4z47gHnLtmmuuqeyg3KJFi+XLl6eZN/Vu
8M8991zeaq6qqBdJnffdd1/Sfumll0bnGln8Wu3bb7+NlxatvbhlwYIFI0aM
SDPCqfiA+IK1++67V3H4tmb169cvogcEFKxFixb16tUr63+FVq1aLVmyJHQn
ik90RpP+E51etGN5//33Q3eiKK1evfrss8/Oes3XK/JT6bCuu+669I+fTs/9
VbL24IMPrrvuulmv+bPOOit0D4rGjz/+mDzVKAulpaXORqtKcE/hKMDgPrsv
EVXUsmXLr776KnRv6i7BfRCC+4AE96EI7kOpBcH9J5980r179+oMNnr06BG6
E3WL4D5vBPfZEdxDrm2//faVHZTPPvvs9PMedthhycT33HNPfgrOQvJI+nKj
rBUrVrz88stZLHDhwoXx0n7zm98sXrz4ggsuWOu9bU899dSa61BubbHFFlUY
utWKLhesN998s/r/HLfcckvofhSZBQsW7LzzztVc7UX0XZ3CsWzZsiFDhlRz
zR9yyCGh+1F8Vq5cedxxx1Vzze+4446h+1F84jt7lJaWVmfNr7/++tE4J3RX
isBXX32V+o3T7Bx//PGh+1FkBPcUjkIL7qNhTzX3SAmj/bAE90EI7gMS3Ici
uA+l2IP7F198sU2bNtUcbBjM55ngPm8E99kR3ENOzZ07t7IjcklJyQcffJB+
9tNOOy2Z/tprr81PzdlJ7nf9xhtvVH9p77//fry0Fi1aZHgn7ZNPPrn675sf
UacyHrhVauONN/bI42qaPXv2euutV/1/CzlmlUT7vbZt21Z/tXfr1i10V4rM
4sWLd9xxx+qv+ehTU1ZWFro3xWTlypVpnvNSJV988UXo3hSTaEM96aSTamTN
P//886F7U+iijXPrrbeu/qqODhChu1JkBPcUjkIL7j/55JPq75Qiu++++88/
/xy6N3Wa4D4IwX1AgvtQBPehFHVw/+STTybPqa+OjTbaKHRX6hbBfd4I7rMj
uIecSk3ey+nbt+9aZ58wYUIy/Vp/nh/WhhtuGNe5YMGC6i/tjjvuqOoIZ8yY
MdV/3/xo165dVXtX0V133RW6H8Xt9ddfTzbaatp5551D96ZofPrppx06dKiR
1W5oXSXLli3bZZddamTNR77++uvQHSoa0cng0KFDa2rNz5kzJ3SHism5555b
U2v+zjvvDN2bgrZo0aLkOmc1lZSURJ+a0B0qJoJ7CkehBfdLliyp/k6pfv36
0VlD6K7UdYL7IAT3AQnuQxHch1K8wf0LL7ywzjrrVH+8Edlwww1D96ZuEdzn
jeA+O4J7yJ3oENC6devKjsj33nvvWpdw2223JdNn+Kve119/feLEicOHD48G
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
GtvsJUqUePLkiehqWcDs2bONbflcuXL98ccfoqtlATt37jS25TNmzHj06FHR
1bKAq1evGh4lf//996KrZVLjx483tqkjIiL++ecf0dWyHrzjHszDhO+450c/
JfmGeerw3L17V3SJvNaWLVv40xwG3nGv25EjR9544w19zY533Lvi999/r127
tr6WxzvuXXH79u3WrVs72+byUALvuNctISGhT58+zk5mK7e8Jd5xX716dWd3
LW2tWrUSXSfLO3/+vO7vBe+4dze8414fvOMewB1Wrlxp73TQt29fpz5K+Zr7
IUOGjBkzxtiL0sHBwTdu3HBTO/BYs2aNvpK/9dZb8fHxAkvuAcrG6d+/v+ji
WFt6enrOnDkN+t38n/z584v97ViF/FZKQ2TJkuX06dOi62QN7dq1M7DlAwMD
t27dKrpO1jBixAgDW5588803outkDYsXLza25QcMGCC6TubVuHFjA5uauqP7
9+8XXSdLQnAP5mHp4H7kyJFy4efPny+6ON6JhmMTJkxw5dWECO71mTt3rnIi
R2chuNdt27Zt2bNn193yCO51O3nypDxThz4I7vW5fv26i9d/zB/cP336NDAw
0JU6MkqVKvXw4UPR1bK2uLg4eboMHRDcuxuCe30Q3AO4Q1RUlL3TwZkzZ5z6
qBYtWsjrunIa0jB27Fg3tQMPHcF91qxZp02blpaWJrDYniHfthEWFnb79m3R
xbG2v//+28BfTa5cuc6dOye6TtbgymUiRkhIyK5du0RXyDLk+S1d5+/vv3Dh
QtEVsoxatWoZ1fJkxIgRoitkGV27djWw5du3b+8LPQ3d6DxoVFNnyJBh7dq1
oitkVQjuwTysG9wnJibmzZtXKnmZMmUwoZY7PH78uHnz5i6eLxo2bCi6HhaT
nJzMzLOqQ5EiRUTXw3qk21RcfG1ZYGCg6HpY0vLly/lfCWEPgnsd9uzZEx4e
7mLLmz+4P336tIt1VCpQoABmNXQFHWxHjRrl4hOOYWFhouvh5RDc64PgHsBw
T58+tfdy2+rVqzv7aT179nTl7MOjUqVK7mgHTuvWrXO2wJMnTxZYYI85duyY
XOXRo0eLLo7lbdu2zaifTOHChc+fPy+6QtZAx0Ojmj1Xrlz79u0TXSErMeo+
8JCQkJUrV4qujZUYFWgGBARMmjRJdG2sRPl6Yhf17t0bwY02oyaACgsL27x5
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
wYMH8fHxv/32G/2H7g9xU3B/9+7d48eP79y5k7rf165dS0xM1PEhhlTQiq5e
vbpu3bpZs2ZNmjRp8eLFP/74I7Wn6EJ5VGpq6u3bt3///fczZ878+eefrr8o
2TuC+xs3bhw+fHjPnj2nT5++deuW2MKcOHEiJiZmxIgR/3pp5MiRS5cuVV/0
mGPfqlWr7H24w+D+zp07mzZtmjlz5ldffbVgwYItW7Y8fPhQRy2sHtw/ffqU
DrC//vor7Q+eCUnpaEynCToo0a54+fLlZ8+eGfXJVAs66NF3Le1RtGvR0Y82
wSxGX7e9PYr2QGc3mpSURON02vRff/2l7zwlfCtPnjyhY0JsbOzkyZNnzJix
fPlyOj6odwYE985KTk6mExC1LZ0ILl68SLUTXSIAECY9PZ36pWfPnr1y5Qod
dXV/jpuC++vXrx85coROzSdPnqT/1vGaEqMqaDlUcar1ihUr6AT69ddfU0di
37591LkSXS6Pop4JDTEuXLhw7tw56q64Xn3vCO6pC3rw4EHaH2gPuX//vsCS
0IFi9+7d06ZNGzJkCPWQe/XqNW7cuLVr19JoSLnY3bt3NYZddHyw9/kOg3sa
jNOobfr06VOmTKHO+a5du54/f66jIj4V3FNP+/z585cuXfLwETU+Pn727Nk0
MO/RowftLcOHD1+4cCH1Y5nF6Fhnb1ehoZazG6X9gXYSGunQkYT6z7oLj+Ae
eNA5i8bUNOClozQdnPWNNw0P7g8dOqRxBJZ9//33Nlenv2uvaOBVFwAAAAvZ
vHkzzxmWRrL2PuH333+XF9Pu88+bN09jE3Sud1jaU6dODRo0qHz58sHBwcqe
RlBQUMWKFYcNG/bTTz+lp6fzV58nuN+6desE+6jXJC958+bNL774olixYszV
+8DAwNKlS7dv395hBG94Be2hBrdXo+XLl9tba+/evfbWoiGSvbU2bdqk8b3L
qTQNc7799tsyZcr4qVD1qYdPn+N6xU3r9u3bsbGxXbp0oS86JCSEaYHw8PD3
33//q6++osV0fLgJg3saVmv8rPbt2ycvSb+aUaNGFSlShGmTkiVLfv755zwJ
Pv+2HEpJSZk6dWqJEiXUe6mkevXqdFCVFqafqr3FyOuvv25vKxrB/cmTJ2lP
yJAhA/NpdJCpV6/ewYMHHVZh2bJlct07deqk/JCiRYtqNBQd3/gbas+ePcp1
ixcvrtwQ7ec2N3HixAmHn3zt2rUZM2Y0btyYiWL9/f2p/L17946Li+MMGZlC
MujUJi957969MWPG0GGcafaAgADaGVq3bq08ETiFxtp08FR/siwyMlI5wmVq
rfTqq6/ybPHhw4d0kO/YsWO+fPmYT8idO3ebNm0WLVpE9dVXHU9u5cCBA23b
ts2UKZO6KfLmzTt48GDl0dJNwf13330n7zDR0dFMMcaPH29z13r06NGLl7dq
aOx+f/75p80t0olSYy36TJ6iqin7FTt37qSDDNMJyZw587vvvou5MgBctHjx
Yp5hl8YJ9/Dhw/JiCQkJ9hajvpP2JmgEpF1UOizs3r27e/fudAanPobygEDd
1Nq1a9NB7/Tp005Vnye4p7ODxsFKmYmcP3++Z8+edMBnjr10+KJT56effur5
CtqkfdzWyBOpueyttXbtWntrUQPa+9IXLlwoL0ZnotGjRxcoUEB9Dg0LC6PT
95EjR1yvu2ldvnz5m2++of5bqVKlmG+fULO0a9du7ty5Gj8xDSYM7mmwo7ET
0kBJXpK62X369MmTJ4+yMNTdpd8ULcnTIPzbcujJkydDhw5V9yTlUlF35dix
Y9LCp06dsrmYhHqM9raiEdxv3769Ro0a6k+jzid9oMOjKJk2bZpc9wYNGig/
pGbNmhoNZfjNn3Q0U34+080bNmyYvZJQt5Dn86nAu3btGjRoEA1qmN8UNVed
OnUmTpxIB21jKyWj4zkd38qXL29vByhXrtzSpUvl7i4NmuwtSUMGni3ev39/
1qxZNCBlAlASERHx4YcfxsbG8jx9s2nTJrmp6aen/Jzw8HCNPUR9N4JVcAb3
GzZssFf3KVOm2Ptw7cs+1g1/adRMHUg67NA4Wn04evPNNz/++GP6CfBfKuQM
7rXHjzI6GA4cONDeb4r5JdrcEP1de0V9V0EBAACs7p133uE5w1K/1N4n9O7d
W15s+PDhGtvKmDGjxiboXK+x7rlz5xo1asRT1DfeeGPbtm2c1ecJ7qkXpLE5
OSmj4X/mzJm1y6ZxY4ObKmiP+u4C2dtvv21vLRrT2Vvrtddes7cWfaBGda5e
vfri5fWTyMhIh3WPiooS/qi1sRISEqiPXbt2bX9/f4fV93t5LbF79+7OTsJg
wuCeuXjLkKPqLVu20KBVY8mwsDCNW02c2pZDZ86cqVSpEse35NehQwcaGBoe
3NOwSB3ZM7QPwqROnTo8VVA7fvw4Z0ORIUOG6NiExonmxctH6qhhHbYAyZ8/
/9y5cx3e46RdSDmjXLp0afbs2bW3qG+2lgsXLlSvXp2nZZo3by7d4+RKcE/7
5MiRI5lHbGyic9nnn3+ub64PD2yFVqGOR0BAgPbn58qVa8OGDdIqbgruNe64
0CD1BBYvXqyxzE8//WRzi0+fPtVYiz5TX1Gl68PUsG3atNEufL169XxtFiAA
A9FxSfsnJjlw4IC9T6hZs6a8mMbUPefPn9fexKJFizTK+eOPP1Kvj6eoNJA8
deoUZ/V5gnvt4YCUGyYnJ9PpQ7s/kCNHDs9X0CYqs8bnazx1++6779pb64MP
PrC3FlXc3lrZsmWTlqEdzGZkr0TNS2NzL3v6/vbt21OmTKGhtMPvXUKNOWrU
KGcfoTVhcE9DCY1qylF1TEyMzfshZfny5XP4qAXnthzavn17wYIFHX5H1Buk
bif1+Y0N7hMTE7t166a96aCgoNjYWO1aaPwetbny4LZN8+fP11eSfv36Ofzw
NWvWlCxZ0uFH+fv7N2nSxPD4/urVq3Xr1uWpS8OGDaXpI1wJ7mmkQzu5xohM
+VEjRozQDos7duzIU3I1eYxjOZzBPf1mdXxH2pd9rDiNJ43OBg8e7PA6s4SO
h9WqVeO564wzuOcc6q5duxbBPQAAgDu4GNynpaUp74IuVaqUxrZ0B/eLFi1i
1g0PD4+KiqJxRJ8+fVq0aKG+DtarVy+e8Y5RwT1nR8VecO++CtpjquD+0qVL
8ugpQ4YMZcqUadCgAe2ZNp9rLly4sL1HEa2IeeRZ8sYbb3Tu3Jl2qs8++4z+
g/4vE1FRa8vPF/CwaHC/fPlyh9mc38sRivYk4YYE93RwUF97CQ0NbdKkSc+e
Pembat++PX0v8j81bNgwMTGRWf7zzz8f+v98/fXX9rZlM7ingb/DppCMGzdO
oyIWDe5XrVrFXCEJDg6mA8Unn3wyYMCAdu3aqQ8XdAzRzmd5gvv//ve/PCXX
EdyfO3dO/ZxgSEhIo0aN/vWvf1GlOnbsqDxQ16xZ89mzZ0wj9O3bV96joqOj
NTb366+/qpuocuXKdAgaNGgQHWeqV6/O/NwKFSp09OhRpyrlga08evSIPlD9
FRQsWLBWrVr0e1ROWkInFOnggODeYXD/+PFjmw2rRi1s3SdWAMRyMbj/+++/
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
9rGvX7+ufuG47uBeGnfQ6M/e8tRKTEBWtWpVng15WXDPvE2M9iJ7twPJaOik
TMyDg4OdehEbY8WKFcyXPn78eO1VUlNTa9Wq5afiMLinL525S+HTTz91WEJm
aOnwR43g3h5fC+5pRKy8zcyP7xEV+gHmzp1bXsWo4J4aTb60kitXLo2nV5Sr
MJMTLliwwOFaEun2Qj/u0zQAAIDvYOYgcnhjOZPrydRT4zLk27Y1XjdGmPCl
T58+PLUYOnSocq233nqLZy1+THDv93KcohE30D/JT0kzYyKTVFBscO/3ct5O
h2ulpaUxU+0VLFiQM6g1Mzm41/4tyGh3UnbIqU141rJccO/38m5e7aujzNiW
nDp1Sse2tIP7xMREZYP7vZy3X3tiBElcXJyfir7g3u/ljKYaD4W9ePkAOLOK
9gsoJeYP7hs3bqxcsUaNGjxrHTx4kGkNjWke7RWS0FevcQ2KdoPs2bNLS/IH
93TUYiZ1pF8xz6FM/WIaP44AmrnthH5WPJn1kydPmN1eIyXx2FZq166tXDhH
jhw889Yy09pwtpsOlg7u/V7OMau9FvO25RYtWvBsCwDsYe4/dDhlmfqmL+lI
qD35Ep1f5COtxr0B1MdgnoXUfrZLxpymebIMp6jvVaCTtcbyx44dk1tG+Xfz
VFBgcC9ZuHChwxXv3LlDp3LlWrS78mzR5OQoxOF9MpJLly4pb/Zo164dz1qW
C+79Xs5wrjH7/QtVbyooKIhzUONUcH/58mXmUeiPP/6YZytMiOznQnDv93K4
oT3W27Bhg3J5KjPP86TeFNzHx8cz0yFyXspo3769cq3SpUvrfikA8/btQoUK
8eyTJ0+eZO5E9eMI7ul8oVyezqo8c5NevHhRuT/Tds+dO6exPIJ7e3wtuGcu
y+fNm1d7llrZtGnT5LUMCe6p5eVrsPnz59fegZWY94Fy3t1048YN+cCyf/9+
zm0BAAD4iOPHjytPr6GhodpjkM8//9zPFu1OgvzAiPZs/Lt371Z+JnV0OV/k
RCM+pjfu8Glup6iD+1WrVmmv0rVr1/ovKR9wME8FhT9xb/P1gmqLFi1iWl5j
MjSrkPq09IXyjyOYbjDPQNuKwb12hPfiZWzK7EucoZVTwb38zkcZ51QPVDz6
UTDr6g7uNZ77kClnbvfjuyJt8uCejmxMO8TFxXFukZnVs169es4W0o/jQfj+
/ftLx3b+9wxu2rSJ2crcuXM512XuvfdzFEDT/hYREaFcnv/tKsxMudmyZbN3
vvbMVs6fP8/U3eFcGZKUlBRmmneH7aaPpYP7zJkzP3jwQHutb775RrlK0aJF
ebYFAPbMnz9f+ZtyOGUZ835k2fbt2zXW2rVrl7SY9mz8U6dOVX5mrly5nj9/
zlMLJsDKkiULT5zBjwnuqcNMAxCN5emURA1F5+XmzZsr/26eCooN7qnnzHnb
MzMrDo3Xrl69yrOimUn9qIIFCzq7irzb8JzZrRjcr1ixQnsV2pf0XX9wKrhn
Hk8gnDnRnTt3goKClCu6Etw7nAiaDgJMbM1zv7Q3BffynPMS6hNydnrPnj3L
tPb69et1lH/v3r3M50yePJlz3Zo1azLragf3VDVmxokhQ4ZwbotORsoVtW/9
QnBvj08F93R4kd5dItN+/ZwSVVCezcn14J66W/LjBnREvXbtGn8t1E8c8Jwy
5CsDZcqU4d8WAACAj1AnTWvXrtVYXpqukERFRSnX0r6hTn5ghEZJGosxPbpq
1arxVyQyMlK57r/+9S/+dR1ignvq82jfoG6PeSooNrjnnzHg/v37zBi5WbNm
nOt6E+aZAp6kxorB/a+//upwLdoBlKsMHz5cx7a04z/mOnlQUBDPQ76SQYMG
MZXSF9z7+/vzDJRat26tXGvo0KEOVzF5cM+8rT5r1qz8B9uYmBim8R0+FM8U
MiQkxGGUqUOrVq2YL/fGjRuc6zKvW/VzFEAvWLCAWf7AgQOc21IH5ZMmTRK4
FfXb7fnvWOvVq5dT7aaPpYN7Ono4XIt+QcpVaNfV1/kBAMndu3eZbq3GlGX3
7t2TYqmwsDDmGfDu3btrbKV3797SYiNGjLC3TEpKCjMA5B9ZJCcnZ8qUSbnu
zJkzOdflwQT3NWvW1PEhpqqg2OCe9gfOcu7fv59ZV2MX8mJt27ZVNgLP7F6W
C+7pqMLzwDjzI+K8k5k/uFffkl2sWDH+SjHdeN3BfXh4OM/b65h3ovE8b+41
wf3NmzeVr27045vHW1aqVCnlupzTqTE++ugjv//122+/ca7L3Mfl5yi4Z66V
Ef5Xh8yePVu5YpYsWZ48eWJvYQT39vhUcK9+SyP/AwIvFDPUuRjc094oz1MU
GRmpY+xcpkwZ5SYcvuEuNTW1UKFC0sLTp093dnMAAAC+YODAgcrTa4cOHewt
KV/CpWEL9V2Va/n7+1Pnyt6KchC2aNEie8s8evSIuVAzbNgw/lowV+mduq/e
ISa455w0j2GqCooN7h0+WK301ltvKdelrrgXzJbvLObCjvYbSyWWC+7z5cvH
s1a/fv2Ua3FejeQP7mnvYmYKrV69Om+VVFdZ/fQG95w/LmYKFDpKOFzFzMF9
SkoK0/gtW7bk3+Lly5eZxnd4qGEKWb9+ff7N8cubN69yK07dT75161amUtqD
aObCCI3QnTpgSu88ldm7Jc8zW2FmG6BDBM8bKyTLly93qt30sXRwP2fOHIdr
3bt3j1nrzp07PJsDAHvq1aun/E1pXGWVb5GiX31sbKxyrTx58tg76tJRiI6W
0mIaNzsdOnSI+XU7fPxWqUaNGsp1tW/MdhYzXHL4CmObTFVBscE9Z9j64mUf
WH4fkIRzqlsvI9/6ItmwYYPDVSwX3Ddq1Ihnrbffflu5FhVYx7Y0gvuLFy8y
u2uPHj14q/TixfDhw5Xr6g7uOZ8LYEYNs2fPdriK1wT3zLzxZPfu3fyrM9cb
/TTfr21P8eLFlZ9QoEAB/nXVdyVpB/cdOnRQLpw7d27+MciJEyeYbWlMkoPg
3h6fCu6rV6+uLLNT9y+RsWPHFnlJe3CnHdzv3LlTvg7zzjvvaL+x0Z7p06cz
35r258gvmsyUKdP9+/d1bBEAAMDrMa8Gpi69vaRJHhz9+9//pv/LzB81bdo0
m2tRZ0l6YIT+V+N0vG3bNqaLyzNMljETuhLOydh5MMG99q2M9piqgmKDe84X
okmYiyfk9OnT/Kt7B2aw3K9fP4erWC64136BqWz8+PHKtTp16qRjWxrB/alT
p5j9jfNNixL1ZID6gvumTZvyrEXHIuVaHTt2dLiKmYP7w4cPM63n8P2/DOaS
lMPJPZhC8s+CyO/KlStMpaKiovhX/+OPP5jVNQLo1NRUZp692rVrO1Xa5s2b
K1ens7b6IRHPbIX+wmQ3DRo04N8Ec2+hdrvpZung/tChQzwryrMvSi5fvsyz
FgDYw/Tnq1SpYm9J+UL3qlWrHj58yPwY9+zZY3MteapS7XdbTJgwgTkmODUp
eo8ePZTrhoeH84caDjEHf+33AthjqgqKDe453+0uYSaUDg4O5uzHepO+ffsq
G2H+/PkOV7FccM/5uDTzdnJ7UyRpb0sjuGduSfKzf0HJJuYuTd3BPecEbsy0
YDxXhLwmuKcRN/NN3bt3j3916qwyqzt1J9WLl1cUmRc3cF46kDx48IApgHZw
nz9/fuXCnANzCXW5maKOGjXK3sII7u3xneD+6dOnTAevVatW7tiQRnC/fv36
kJAQ6e/NmjV79uyZvk3QDy00NFS5Fe17CeiXJS3WtWtXfVsEAADwemlpaa++
+qry9GrvNeJyUn/ixAn6v1988YVyLXuX7uX3OWrf2s18mh/fvNmytWvXMqt/
//33/KtrY4J7fZ9sqgqKDe4PHjzIX1QavzMV53mRt7XcuXNnx44dsbGx33zz
zQRbmKm2O3fu7PAzLRfca8/7KmP2B57ZntXb0gju1VeQ+F8x9sLW9VJ9wT3n
8yYzZsxwtjXMHNyrp4njf0xM8uabbypXDw4O1h546nh2xllUcaZSnJcHJVR+
ZnWNAFr9iAfnz0qmftMoHZqEbEX9Ikvtd0QyHj16xN9uulk6uOd8XwPz9CXn
m2cBwJ6bN28GBATIvyl/f3+b6cnDhw+leYkzZcok3drUpEkT5Y+xb9++Nj9f
nphI+1Y05tMyZszo1MQpI0eOZA4pTk3rqo0J7vV9sqkqKDa415ilWU09GfXR
o0f5V7cE+sXFxcUtWrQoJibG5rCLmW+B5z3algvuqe48a3388cfKtcaNG6dj
WxrB/eDBg5n9bcuWLbxVevmIqHJd3cH9rFmzeNZiXvLOc3ex1wT3zEsTwsPD
ndq0+t5s/ld4SPbs2cN8Qp8+fZz6BOlJIplGcK++6drZL45JSDWugiK4t8d3
gvsff/yR2d+cmp6Un73gfvbs2XK/K1++fC6+Fq1r167KrVSsWNHekvQVy9vl
vJ8cAADAN1G/V3l6pTG7ehn5+bUiRYpIfzl+/LhyLTrt3rp1S72ifOVk7ty5
GmVgrkWTqVOnzuGmnoBL38yKNjHB/Q8//KDjQ0xVQbHBvVOPzKvvWNC4adla
fvnlFxoGFixY0M9JH374ocMPt1xwT3s4z1rMNS7Dg3v1jSLaBy6GOmbVF9wP
GjSIZy06MjjbGmYO7tXTazg7iGNucfHTfH2wupBOTQbCSf06eJ4rwErMhSaN
AHrNmjXMtv7zn/84tS311C7qaVE9sxX1XPdOnfLS0tKYp10Q3DNF5ZwCkTl9
I7gHcF2tWrWUPyubT5jKtxG2aNFC+ot8I7Qkf/786mfA6S/yc4JHjhzRKAPz
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
nTDfz/wmc3fvzt7d5d7F5/mD1zJ3zsx75s6dOWfeM+fMT92m6Nq166xZs6ot
KHEfq+/EfW69varRkCtVV2PcS9znlztCfbV9aabkNpBrepMhd4z7IUOG1GgJ
2ce4HzNmTGpdI0eOrNG6spO4r0rBifvWrVsnC5Z+4j53lPlw9a+PFeUm7tu3
bx/f2c4dcLCm7xoknXDCCclFbbzxxslPP/roo/hJnvATqNVWAcB3w5IlS1KX
8r/85S/xp/E4NblJkDPPPDNZKrSD4o/im/OVjt6YkvvE9b/+9a+62rpaqpPE
fUltYCpxv/POO2cp9cYbbyRLFZy4f+edd7KHmvtuZsbhv0tQbrf/GW+ASNzH
6jtxf/fdd6e+oxEjRmTdpIqKzz77LFVc4j6SJSee6vgleP3112u00sMPPzy1
hOnTp9dtkDWVewa74IILshdfuHBhqnieBHTq7byaHr0VlY1fn5uUXzlryU3u
Dx8+PPsqcvvkLP3E/QsvvJCl1D777JMsJXEPDdFHH32U/GU1bdr0iy++iD5a
sGBB9NxRbj9mQWhSJQsmq8QDBgyIJmZ5wLVbt27J5XTq1KkOt66W6iRxX1Ib
mErenXXWWVlK3X777clShSXuw6FVo1Bzx/d56KGHarSE0pH7BGDGap7Efay+
E/fnnXde6jvKP8RVSurxfon7/ApO3OfWIbfbbrsarTpUwlNLqGnq/7nnnkst
oaavcqQehM6TuA8HYWpdNX1IIDuJ+6qkEvdt27bNsqLcBmAtE/effvrpGmus
UZbN8ccfX8Aqci9Vt912W21irkrqbn+XLl2mTJkSfxrqWhtttFFyhpYtWyZn
qJHUgV32v7fQBw4cGE3cbLPNartVAPCdkXrKLm5ZzJw5M764597pff7551PX
92+++Sb6KH59ctSoUdWuPXds4tK5P1wnifuS2sBU4r53795ZSqW+64IT9y+/
/HL2UHNHGbvhhhuyFy8p8dijkdCs+Oyzz7IUlLiP1XfifvLkyanjrUZNsPCj
ThWXuI9kuVk6ePDg1N577LHHarTSVGf74SeWf4C2lZC4jy+gsUMPPTR78dmz
Z6eK50lAT5w4MTVzqpOcauV2g597a2XlrCV1uSmr4Q26r7/+Ovt+K1jdJu6f
fvrpLKVSaTuJe2ig4oeiI/GYI/FlOlyhckul+gX64Q9/GH/Uo0ePaOJzzz1X
7dp32GGH5HKaN29eo9NXvaqTxH1JbWAqeXfyySdnKZX6rgtL3AcLFizIHuop
p5ySKj5p0qTsxUvKHnvskdyQtddeOzneXx4S97H6TtyHOkzqeAuHfdZNyumV
QuI+v4IT9xU5Kb8NNtigRqvO7Wy/pkMfhmp8KiG71157ZS+e2y7Ik7jPvRvQ
v3//GkWbncR9VVKJ+4wPoeV+0bVM3P/lL38pyyz1XnlGqZszwWWXXVabmKuS
+hXnJuXffPPNFi1aJOfZdNNNFy5cWNjqUrfQjz766Gh6aJOutdZa0cTavNQP
AN81jz76aPLa2rVr16h5G3fnWOlt82XLlq255prJglHfPt9++230wkioY2dp
F+T2SRXqMHW+jYWpk8R9SW3g448/nowk47OOd955Z7JUwYn7Gm147qhPNcr7
l5TUHaTstxck7mP1nbhfunRpqoftPn36ZN2kiooHH3wwdbhK3Eey5MSffPLJ
1N67+uqra7TSLl26JIsnMxp1FWQBUpfIXr16ZS+bGsWmLG8COlx2U6+TpMZH
rlZoU6dWlzvMzcpZy9dff50aDbPSHFZVcu8QlmDifquttirg8Ft33XWTpSTu
oYFKPcIUn0iPPPLIaEqlXZTPnj07lbyIOpaJEw2dOnUKNZlq1/7rX/86dU6Y
OXNm3W5gweokcV9SG3j55ZcnIznmmGOylDrnnHOSpQpO3Ndow3fbbbdk2fBd
zJ8/P3vxkpJ6TfKwww7LWFDiPlbfifv3338/dbieeuqpWTepoiI0l5JlJe7z
q03ifr/99kuWDVX0GqXzHn744dQXXcCLGN27d08uIdSHs5f961//mgogT+I+
XENXW2215Mw//elPaxptRhL3Vfn0009TX1mWus3UqVNTpWqZuJ8zZ06PHj3a
ZxMqHgWsIndLjz322NrEXJVU4r7SoWxHjRqVCuaMM84obHU333xzcjktW7aM
epF64IEHoilt27YN7f1abRIAfJeE6neqjvrKK6+E6b17947+W9UbHKn+jaPX
CR966KHovxnf5k49VFmWuW2YNG3atDf+T43eL8ivThL3JbWBqVcmO3funKXU
ueeemyxVcOJ+6NCh2UNNZdaaN29e8GOfRderV6/ktuyyyy4ZC6bysxL3sTpP
3Ffk3LQMh9xXX32VaZMSHX/FJO4jWZKS33zzTdOmTZOlTjzxxOxrnDdvXiqd
ccopp9R5kAU48MADk2tp3LjxJ598krFs6m5/WXUJ6D59+iRn7tatW41C3Xrr
rZPFe/ToUcS1bLLJJsnZunTpkvFduYrEPYGM+60wtUzc77rrrsmyWcYRDuei
1EEucQ8N1PTp05M/rhYtWoQfeKgzfO973ytbkTCtqlOmuF0WiSrVgwYNiv4b
GmVZ1j5+/PjUOaGmV8BwDnkjoUZl86uTxH1JbeD111+fjCTji6Kpx30LTtw/
+uijGeMMF9lUk23TTTfNWLbULFmyJPX4X8YRCoIzzjgjWVDiPlbniftwyKWe
bq1R4jI1eJDEfX61SdyHX0HZ/3r77bezFx82bFiq+NSpU2sa/zHHHJNayAcf
fJCx7A033JAqmydxH+y9997JmWv0kEDk008/jS8fs2bNqmo2ifuqhEt/6ivL
Msxo7lBrpT/GfRDOXcmYM94/r6ksiftwTk59WcEjjzxSwOrmz5+fSi5Eb2TE
t9oy9j4EAMR+8YtfJK+t559/fqjSR3eJ11hjjWXLllVaKvVKYJs2bRYsWBCP
NZyltRvZeOONk8sJ1/QaBT937txmzZpFZdu2bVtqifuKUtrAVA9g4SvOkg3f
bLPNkqUKTtyHxnLGgmEbW7VqlSy70047ZSxbglIHwM4775yx4PDhw5MFJe5j
9ZG4z+228f7778+0SRUVobmdKitxH8l4wzz8KJKlsp9kKhJPi8Wq7dxj5STu
U0OTlGVL0UZSV5+y6hLQuaPT5r8xlfTFF1+k0iVVPWO/ctZy9tlnp9aS/SZh
btkSTNyn7htfcMEF1RYZO3Zsao0S99BwpaqFf/jDHx577LHo7zxX57gntMgW
W2wRJv7whz+M/hsaZVlW/dVXX7Vu3Tq5nJoOejJp0qS4bLhU1ahsfnWSuC+p
DbzrrruSkWy00UbVFglbnYq/4MT9oEGDMsYZLrKpsjUdRbp0LFmyJPWcW/bE
/RFHHJEsKHEfq/PEfUVlw9xHvYhUa968ealenSXu86tN4n7KlCmpr2nkyJHZ
i6ceVe3atWsBY5dMmDAhFcNVV11VWABl1bVcct87zt7SiSRPI/FQOLkk7qtS
Xl6eqgxkuQd73HHHpb64BpG4T7VbmzZtmn+wv5Ttt98+Lht+JlXNliVxX7Fi
WIpU669jx46zZ8+u8VZVVJx66qnJ5YTKz4wZM+JL85tvvlnAMgHguyyV+Oje
vXtca83zBkdoGrdv3z5Z8N57742fr8veQV8qCRWqajW603777bfHZbP3hpdF
XSXuS2cDc9/ae/HFF/MXye15uODEfcuWLTN2izRu3LjUSu+6666MKy1BqTZj
+H1lLNi3b99kQYn7WH0k7hcuXBiaJ8n5t9122yyv+j777LNlOUotcZ8aJqPS
gQCWLl068/98+umnWSLJVVhOPHeUt9zx16qSehGjW7duVT1sVssgayrsz65d
uyZXtPHGG1cbW0XOzZxI/qvGZ599Fk6wyfmzDzeQemSlcePG77//fhHXktvb
4ZAhQ7KsYvny5akbDtXut8LUMnHfr1+/ZNksYwEccsghqTVK3EPDFb8mHzn4
4IOPPfbY6O883Qj/7W9/S/2c48HOOnToEBplGdd+5plnJhey7rrrZu/VpOJ/
7zPX7XisdZK4ryilDUwNkhs2sNqunHJfGyw4cZ/lOYHIpZdemio7efLkjGVL
UOruRPh9ZSwYmj/JghL3sfpI3H/44YepmxInnHBClrXkplZLMHGfeva+0oEA
vv3227jZVaNsXU116tQpGUylr6t/8skncTCpiuLuu++eLJ79BYSwUake1WqU
9I+FE3g4myWXs/7664f6bbUFp0+fnup/o6y6RHw4RUe938RGjBiRPdT58+fH
j0mEbc+TO049EVHVq/3xl5LlrfMSVEDiPujRo0ey1LXXXpt//gULFqRO+2UN
JHEfToOpms+9996bsWzykfjVV189TyUwY+K+YsVDMqmfzC677JLl3kXKW2+9
lfo64mcMttlmm5ouDQDIfbx/7bXXjv7I/wZHKrEYl4peA8lo4cKFqQzv4MGD
M5YNLYvkeyvPPPNM9vVWq64S9yW1geutt14ykgsvvDD//KnenstqkbgPQls7
S8GddtopWSrURUPbNuNKS1Cq68Xg73//e7WlFi1alNqBEvex+kjcV+TcZgnu
u+++/EVCK+lHP/pRWY5SS9yn7h5vsskmufNMmzYtnuG4447LEkmuwnLi4UQX
vzYYOf7447MU/PTTT1O9c9x44431FGQBQjCpA+Pmm2/OXyTsilSP9JFqE9An
n3xycv7u3btnyeOUl5enhlw/6KCDir6W1B7o2LHjN998U+1a7r333gL2WwFq
mbhPPoxXtqK3ovxb98Ybb+TeeJS4h4Yr1f9VaIJF95zDLz3PDdWKnMRi3Oyq
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
JgumHrOsSosWLeIiocqafbvy1GPHjRuXO75ervBlRae77In7lbk3UsJ5Jjln
aNaNHj06NGRCSOEIjB+PDHXjgns5y2jp0qWpwQVClTJU10NrN7Sqkr0QbLnl
lnn6wA/zd+3aNbmcNddcs1+/fuGU9eKLL4atCOe6Qw89NDXU12677ZZnWMaa
+uCDD7bbbrtqv5ewV8OJLuq3obDEfcWKhzdS29KlS5fTTjstnCuef/750NgJ
bc/QlN5+++1T2xu9W1Gt6dOnJ1/SCX//5je/CVelcJCEPZl8jui8884rfJet
XKkEdH55OpoIp4vU0GxVCd9v9C5GKj2dtOmmm67EfVCgSy+9NPX4Yji0whU/
VFdee+218Pu66aabQuM3eRc3bFelT3SERmjGryDZpru5sp5nKtWhQ4csWzR1
6tRkqfDLrbOdBQDfSakbCxnvzf7nP/9Jtf2rehcgi9BYCI2a3HcTqrLxxhtX
9dJ6Aeo7cV/0DYyFhkbuHZuUPffcM+rLsQ4T92HimDFjWrVqVe2G/+AHP3j5
5ZfrfMOL69577819lTtXaLhFD11L3GcsWOeJ+4oVnRIMHTo01dhP2mOPPeIe
wpcuXZr8qFGjRlV1x1HExH1Ftpvkhx9+eLUDFybVbeI+cuedd+Y+yVOVvfba
a+bMmfkXWPTEfcWKgyT8rlOPHKT2TPJsnzpFhyMn+7rCkVlpyrtSPXv2LOye
4UpYS9jq3GFnc3Xo0CHuIKihJO5D3SnVv0SuNm3axCk5iXtYxfTv3z/5y6r2
pBGZPHly6ixRQGMktnDhwt/85jepkWHz+PGPf1zL14GT6jtxX/QNjI0aNSr5
5GSlTjvttKjqWIeJ+1CdGzRoUCoXUKlQA1llsvaR3K6ZqhJa5dEDchL3WUrV
R+K+YkV974wzzkj19hML3+MvfvGLuLb/5ptvJj/N09ljERP3y5cvT/UTXqnQ
2Mz/hdaJUGOv9hZEly5dqm1PhS/xl7/8ZbVns0i4PIXrWp2PeBh27PXXX9+9
e/eq1tu7d+/Q7ovnT92PqqrDvUpNnTo1lZfPo1WrVpdeemlVb+VX6tprr612
Z4arUk1HwymiukrcV6x4sCH1oEiujTbaKO5VvqEn7oMJEyakBlCoSjhsjj/+
+Ko6siiRxH2Q7Hwj7rgGACjMnDlzko/wZX+DIx6iq2xFvrX2kXz11VdXXXXV
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
8cUXzZs3j4/z7t27rzKjwVJ78UMdzz//fMYi8+fPb9u2bXxEdenSpW7HowcA
ViUS9zRE7du3D4dry5YtQ9U3Y5FJkyYlD/VQza7XCCkR8SPNf/rTnzIWWbRo
UZw6DMLB9vXXX9drkEBkzJgx0e+uQ4cOCxYsKHY4AACkSdzT4MSJ+5NPPjlj
kVNPPTV5nN988831GiENS5y4P+KIIzIWOf/885NH1MiRI+s1QgCgQZO4pyGK
EvfB9ddfn2X+8vLyHXfcMXmov/zyy/UdJKUgTtzvs88+GYsMGzYseahcdNFF
9RohfKcMGDCg/Qpffvll6qNwot50002j390555xTlPAAAMhP4p4GJ07cN2nS
JMsr0vfff3/jxo3jg3zbbbddvHhx/YdJgxEn7hs1ajR+/Phq5w/zNGvWLD6i
evXq9e23366EOAGABkrinoYoTtyHP7LcKBg0aFDyOD/mmGPqP0ZKQnIQsXvv
vbfa+SdMmNCyZcu4SI8ePWrUxz6Q39lnnx39uJ544onURw8++GD0UdOmTd0B
BgAoTRL3NDhx4j5o27btmDFjysvLK51z/vz5gwcPbtKkSTz/mmuuOWvWrJUc
MCUuTtyXregL9JZbblm+fHmlcy5YsGD48OHJrP3qq6/+wQcfrOSAAYCGReKe
hihO3AfrrLNOnkemP/300759+yYP8s0331wPzN8dycR9aCtde+21VY1Mt3jx
4lGjRiWz9m3atJkyZcpKDhhWbXHifocddli0aFE8/YMPPujQoUP00XHHHVfE
CAEASHr00UdvTmjXrl2yfX355ZfHH91zzz3FDhYqkUzcR37wgx8MGDDggQce
eOGFF954442nnnrqzjvvPPbYY9dYY43kbD169Jg6dWqxw6fkJBP3kW7dup13
3nn33nvv888/H46op59++ve///2JJ57YpUuX5Gzrrrvu66+/XuzwAYBSdNdd
d8UNq5EjRyarEK1atUq2yJ588sliBwuVSCbuI71797700ksfeeSRSZMmvfrq
q48//vjo0aMPPfTQNm3aJGfbaaedPv3002KHz8qTTNzHDaX+/fvfc889zz33
XGhPPfPMM2PGjDn11FPXWWed5GydO3cOx1Kxw4dVTZy4DzbccMMBAwZcddVV
J554Yqh+RBM7duz4ySefFDtMAAD+n1133bUsm65duxY7WKjEtddeGw7OjIdx
pEmTJr/85S/nzZtX7NgpRbfccsv6669foyOqcePGhxxyyOeff17s2AGAEpWb
9KzKvvvuW+xgoRJnn3129sM40qpVqwEDBixZsqTYsbNS3XPPPT179qzRodKo
UaP99tvv448/LnbssApKJu5ztWjR4umnny52jAAA/P8k7lkFLF++/Nlnnz3v
vPO22mqrZE/4udZdd91TTjlFZ+bkV15ePnHixAEDBvTu3btp06Z5jqjvf//7
xx9//DvvvFPskAGAkiZxzypg4cKFDz/88KmnnrrRRhvlP4w33njjCy644LPP
Pit2yBTNSy+9dOGFF+6www7JkcVyde7c+eijj548eXKx44VV1nXXXdexY8dK
f4Cbb755+KkWO0AAAP7HzTffPCCbyy+/vNjBQvUWLlw4derUsWPHjh49esSI
ERdeeOFll132u9/97uGHH/7oo4+KHR0Nz6JFi955550//vGPN910UziiBg0a
NGzYsPB3OMY+/PDDYkcHADQMF198ccZm15133lnsYKF6X3/99euvv37vvfde
f/31oZI8cODAK6+88rbbbnv00Ufl60lavHjxe++9N27cuNAqD4fKRRddFNpT
obX+4IMPhunFjg6+E8rLy999990HHnggnLGHDBkSfoO33nqrsSMBAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AACA2li2bNncuXMXLFhQ7EAAAAAAAAAAoCGZPXt2//79T15h6dKlNSo7efLk
IUOG7LXXXmuuuWbZ/2nevPlWW2111llnvfrqq7WMrby8fNCgQSf/n7///e+1
XCAAAAAAAAAAlI7ly5dfd911q622WpxzX7x4cZaCCxYsuOmmmzbccMO4YKNG
jdZdd92NN964a9euZQm77rrr3/72t4IjvOWWW5JLq/2TAHVryZIl//73v4sd
BQAAAAAAAAAN0pQpU3r37l32vzIm7vfff/+4yBprrDF69Og5c+bEn3788ceD
Bg1q3rx5NMNqq6320ksvFRDhP/7xj+RDBaWWuJ8xY8Z6660Xomrfvv3AgQOT
e2AVs3z58vvvv7/YUQAAAAAAAACsOhYsWDBw4MBmzZqVlZW1bdu2RYsWNU3c
77nnntH866233qxZsyqdZ8KECXHufvXVV69qtqqUl5fvvvvuqecKSidxv3Tp
0o022igZW+fOnZ966qlix1UvrrnmmrCBH3/8cbEDAQAAAAAAAFgVTJgwoUeP
HlGued999/3nP//5/e9/v+DE/Z///Oc8s1188cXxkn/xi1/UKM4bb7wxKtih
Q4cSTNw/8cQTZTkaNWrUr1+/hQsXFju6ulReXh4Nf+ClewAAAAAAAIA60adP
n+j18AceeCCaUnDifqONNso/25w5c5o2bRotuXnz5l9//XXGIGfOnNm2bdtQ
6vDDDz/ggANKMHEfP1eQa4cddvjqq6+KHWCdeffdd6PtuuSSS4odCwAAAAAA
AMCqYIcddjjppJPmzp0bTyk4cX/qqadWO+fmm28eL/yJJ57IsvDly5fvvPPO
Yf611lrriy++KM3E/dixY6tK3AdbbrlliLzYMdaNW265JdqoE044odixAAAA
AAAAAKwKZs6cmZpSQOJ+4sSJDz744LvvvlvtnPvuu2+88FtvvTXLwqMR1YM/
/vGP4b+lmbh/+eWX8yTug169en355ZfFDrMOHH/88dEWHXTQQcWOBQAAAAAA
AGDVVEDiPruf/exn8cJvuummaud///33W7duHWY+8sgjoymlmbifNWtW/sR9
sMceeyxbtqzYkdbWLrvsEm3OnnvuWexYAAAAAAAAAFZN9Zq433777eOFP/PM
M/lnXrZsWZ8+fcKcnTt3jl9XL83E/dKlS5s0aVJt7n7w4MHFjrS2Nthgg/g5
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
+/bt26JFi2jKKaecUtyYAQAAAAAAACB49dVX4+z2kUcemfr06KOPTiXu+/Tp
U5Q48xsxYkQc4bvvvhtNHD16dDyxV69eTZo0SW7IoYceWtyYAQAAAAAAACD4
/PPP41z2nnvumfp01113TSXud99996LEmd+gQYPiCGfNmpU7Mddhhx1W3JgB
AAAAAAAAINK2bdsol73pppumPurQoUMq3x0PFl9S+vfvH0f4n//8Z/HixXff
fXf79u3zJO5POOGEYkcNAAAAAAAAAP/Vq1evKJfdsWPH5PRZs2bl5rvPOuus
YsWZxwknnBCF16hRo0MPPbRdu3Z5UvaRc845p9hRAwAAAAAAAMB/HXDAAXHW
e+HChfH0Rx99NDfffdlllxUx1Kocfvjh1WbqU4YMGVLYur799tvPPvusTsMH
AAAAAAAA4DutX79+cTp75syZ8fTzzjsvN9997733FjHUSk2bNq1jx441Tdzf
dtttha3ugAMOOOWUU+p2EwAAAAAAAAD4Lhs1alSczp40aVI8fZtttsnNd7/9
9ttFDDVl/vz5AwcObNGiRU2z9qktze6ll14KZXv27Fnn2wIAAAAAAADAd9a4
cePidPYDDzwQTZw/f37Tpk1Tye7GjRt/++23xY02NmbMmO9///sFpOwjn3/+
eQErHThwYFS8dPYDAAAAAAAAAA3dlClT4nT2yJEjo4mPP/54brJ7ww03LG6o
kc8///yAAw4oOGUfrLPOOoWtescdd4yWMGPGjLrdKAAAAAAAAAC+s7755ps4
o3366adHE88888zcfHffvn2LGul/LVq0qHv37rXJ2gcjRowoYNWLFy9u2bJl
tISJEyfW+aYBAAAAAAAA8J3VsWPHKB+91157RVMqTY7fcMMNxY0z+MMf/lDL
rP0BBxywfPnyAlY9Y8aMeCGPP/54nW8aAAAAAAAAAN9Z22yzTZSP7tmzZ8X/
ZqiT3nrrrWJHWnH66afXJmt/8sknL1mypLBVP/vss/Fyxo0bV7fbBQAAAAAA
AMB32c9//vMoH92sWbNly5ZdffXVuSnvzp07l5eXFzvSip133rmwlP2GG244
fvz42qz69ttvj5dWy0UBAAAAAAAAQNKAAQPilPTf/va33XbbLTfxXQoD3Afd
unWracp+6623vuWWWwp+0T528cUXx8t88skn62RzAAAAAAAAACD43e9+F6ek
R40a1aRJk9z09/3331/sMP+rZcuWNU3c19WqTz311HiZTz/9dF0tFgAAAAAA
AACefvrpOCXdpk2b3Nx3kyZN5syZU+wwK7799tuMyfrVVlutUaNGdZu4P/LI
I+PlT5gwoa4WCwAAAAAAAADvv/9+/jx4nz59ih3jf/373/+uNmXfrFmzgQMH
zps3b/XVV6/bxP3+++8fr+WFF16oq8UCAAAAAAAAwKJFixo3bpwnGz506NBi
x/hfH374Yf6s/c477/zuu+9GMzdr1qxuE/e77rprvKJJkybV1WIBAAAAAAAA
IOjatWuehPjUqVOLHeB/TZs2LU+QAwYMKC8vj+ZctGhRNLFx48Z1tfatttoq
Xtdf//rXulosAAAAAAAAAATrr79+VQnxzTffvNjR/T/5E/dTpkyJ55wzZ040
sWXLlnW19p49e8brmjx5cl0tFgAAAAAAAIBSMGDAgD2KZ7vttsuTEO/Zs2cR
Y0tKxdm0adN11lmnXbt20X932mmneM4dd9wxniea0rt37zBz+/btw0KqXdEO
O+zQqlWrPn36JCc2b948XnXqIwAAAAAAaKC23377Xr169ejRY/311w//brjh
hj/60Y/69Omz++67Fzs0YKU66aSTlixZUuysKRTTt99+26RJkzypcwAAAAAA
AIB6NWHChGInTqHIxo0bN6BIfv3rX7du3bqqn+cGG2xQrMBynX/++TvttNNh
hx0W/ognbrHFFlGoyYnHHHNMNLFx48aphyLWW2+9ale05pprhjk32WSTeErY
S8mF9OvXr243DQAAgCx+9KMfxU2z7t27FzscAIAG6ayzztpiiy0aN26cJYvX
qFGjMPN5551X7KiBenH66acnf/KvvvpqsbOm8N318MMP57ki33PPPcUOsBqn
nnpqiLNt27bJic8991xVW9StW7f8C1y0aFGzZs3CnPvuu2888csvv0wuZPHi
xfWyMQAAAOR1wgknxE2zffbZp9jhAAA0PGPGjOnYsWOWlH3ST3/6UzfGYZX0
r3/9S+IeSsR+++1X1YW4TZs28+fPL3aA1TjxxBNDqF26dImnzJkz55BDDqlq
ozp06JB/gTNmzIjm3HPPPeOJM2fOjJfQsmXL+toYAAAA8pK4BwAo2NKlSwcM
GFDTlH1s+PDhxd4CoO5J3EOJ+OSTT5r+f+zdeZxO9f//8cYMxtiXxqDs2UtE
aOzKkuwthEi2ypIkhOxbZC1LKWOPQtZkKUsiRKgUkZItu8Zgts/v/el8b+d3
fa7lzLWca97vc53H/Y/Prc/lnHO93ud1Xee8z/W85lwREZ7Owh07dpRdYNra
tWsnSi1cuLD477t3706bNs34u4Lh4eHGG9y6dau2ZIMGDfQHDx06pG/B8UsC
AAAAAID0RHAPAADgn4sXL9auXdu/yF6TLVu2hIQE2eMAYDKCe0AR48aNMzgL
b9q0SXaBaWvWrNk9//4V/NChQ4sUKeLN7CIlJcVgg3Fxcdpijz/+uP7g9u3b
9dXLlSsX/GEBAAAAANwguAcAAPDD8ePHCxcu7G1C79natWtlDwWAyQjuARWk
pKQUK1bM0/k3Ojo6KSlJdo1pq1ixoq9Ti8TERIMNjh07VlvsiSee0B8UsxF9
9djY2OAPCwAAAADgBsE9AACAr/7444+iRYv6+kG6W6NHj5Y9GgAmI7gHVLB+
/XqD82/fvn1lF5iG5OTkmTNnZsiQwdepxZ07dww2+8orr2iLOQb3ixcv1ld/
6qmngj84AAAAAIAbBPcAAAA+OXPmjMFf8Pmqd+/esgcEwGQE94AKtJvMe/LN
N9/ILtCj1NTUVatWlS1b1r+pxd27dw02/vzzz2uLOd4qf9asWfrqHTt2DP4Q
AQAAAABuENwDAAB479q1a6VLl/bvg3S3+vXrJ3tMAExGcA9I9+eff4aHhxuc
fw8fPiy7Rve+//77WrVqBTK1MP6N++bNm2uL1a9fX39w/Pjx+uqvv/568EcJ
AAAAAHCD4B4AAMBLqampLVu2DOSzdFdTp06VPSwAJiO4B6QbMmSI8flXwb+4
v3v3bp8+ffy4N76jLFmyGD9L/fr1tSXr1KmjPzh48GB9C++9915wxwkAAABY
xJ07dy5evPj3338nJCTIrgV2QXAPAADgpUWLFgXyWbpbBw4ckD2s0Hft2rVz
585dvXo1NTVVdi2wBYJ7QK6kpKSCBQsan383bdoku0xn7du3D3xe0bx5c+Nn
efTRR7Ula9WqpT/YpUsXfQsbNmzQHkxOTj5x4sT+/fuDOGYAAABAMWIavHbt
2pdeeqlUqVKO36rNlClTxYoVO3TosGTJkvj4eNllImQR3AMAAHhDzMnz588f
+CfqjsqVKyd7WCHr9OnTEydOrFevXq5cuRz3eUxMzBNPPDF06NAjR47IrhEh
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
TPa6dOmyefNmb348Gl7Sg/u9e/e2atUqMjLS7TwwIiKibt2677zzjq2+QAJ1
KBvcz5o1y/X9EhYWNn/+fP1IJS48Fy9e3Lx5c4OrdU25cuX4tDZ4rl+//t57
79WvXz9z5sxOez5jxozly5fv27evOBLKLjPU3L59e8GCBc2aNcuaNavbM7t4
d2/dupUze7CJRsTFxT311FNuG/HAAw907dqVRqQDGqGIEG4Ewb0i9EYMGjRo
0qRJJUqU8DT9K1SoULdu3davX2/F1xusjuAeSAdjx471dAoIDw8/deqU27VS
U1MzZcqkX64qfo7Qf4VzxIgR2iNJSUnabQZr165tvO7SpUubN28+b948MT3T
HklMTNS21qNHD8clu3Tpoj1erlw5p08vt2zZEoxxBcOePXs8vR4iIiKKFStW
qlQp1wmqJ1WrVhUvFdljCk3iWqBatWredCF37tzvvfee4m9Sq/j+++8bN27s
zW7PkiXL8OHDud1EkNAIRdAIRRw4cKBRo0ZeNkLMhUKpEWIsU6ZMiY6O9mb4
lStXJlsxix7caxOM+Pj4bdu2zZo1a9SoUQMHDhw2bNj06dM3btzItwchl7LB
fZMmTTwdqcTUvWzZsvfdd583hzXNunXrZA8oNIkj2KBBg1y/EuaWOBGfOHFC
dsmhICEhYdKkSfny5fNmt1etWnX//v2ySw5NohHvvPMOjZCORigi5BtBcK8I
10b88ssvy5cvFy+/wYMHi+uscePGLV68+IcffuDzdkhEcA+kA7d/Iqdp2bKl
wYqOHyb8/fff6VawH/SfAhSnOf1B7TPel19+2det6cH9G2+84fj4s88+62lP
zpw504RhpAtxjezNLNQbYrfz8XgwnD9/vmPHjr62o0uXLmT3gbhx40afPn08
/a6oJw0bNhTXd7JrDyk0QhE0QhE2b8TOnTsN5rFuZcqUadWqVbILDwVOwT2g
JjWDe/GuyZkzp0/HLgONGzeWPaDQtGLFinvvvdenXuTKlYvPLQO0Y8eOUqVK
+bTbxZn9888/l114qPGvEWvWrJFdeKihEYqwQyMI7hVBI2AJBPdAsBn8ebWw
bds2g3UrV66sL3n48OF0q9lXd+/e1eucN2+e/viTTz4pHlm0aJGvG7xz5462
tZEjR+oPXrx4sUKFCp725OjRo80ZTPC1adPGp7moAT++FIE0ffXVV15+xdfV
5MmTZZdvVUePHi1evDhvBOlohCJohCKOHDnidyNeeeUV2eUHJCUlZdiwYV7+
urqTzJkzHz9+XPYILI/gHpagZnAvTqP+HbpdRUVFebpFHvx2+/btDh06+NeR
AgUK3LhxQ/YILEmcTQYNGuTfmT1Lliy8EcwiGjFw4ED/GiGOSL///rvsEYQI
GqEI+zSCvFgRNAKWQHAPBNvLL7/saYJRrlw545uuON7fb9OmTelWs6/i4+P1
OlevXq0/vmLFirJly+o3wPfe1atXta1pf7+fmJj4/vvvG2ep/fv3N3NIwVSx
YkUfp6LuRUdHix0lezShZubMmREREX43JXv27DTFD6tWrfLyDpluhYeH//zz
z7IHEQpohCJohCJWrlwZYCOOHTsmexB+unnzZosWLfweu9C6dWvZg7A8gntY
gprB/eeffx7IEczRmDFjZI8m1Jw5c6Zq1aqBNGXIkCGyB2E9169fb9q0aSC7
vW3btrIHEQpEI7S/cPFbu3btZA8iFNAIRdiqEeTFiqARsASCeyCo7ty5kydP
Hk+zi9mzZxuv3qlTJ33h+fPnp0vJ/khJSdG/G7lr167ANyiu5bWtdevW7cMP
P3zggQfSnKr16tUr8OdNHzExMb5MQj1auHCh7KGElOTk5K5duwbelyVLlsge
isWMGjXKvy9XOxIbkT0Oy6MRiqARihg5cmTgjbDQ7YAc/f777+XLlw9w7JGR
kf/884/soVgbwT0sQc3gfu7cuQEexDTiOlRc0cseTUj57rvvAr8cLlmypOxx
WMxvv/3m6w/fuIqKigqNnwGSSDSidOnSATYia9asNCJANEIRdmsEebEiaAQs
geAeCKpPP/3U09Qie/bsaX6e+eabb+rLjxs3Ln1q9o+4iNPqNOWv/A4ePOjr
VK1nz56BP2/6MPguh/dq1aplfLsG+CQlJcWPH7V3i5tU++Ttt982Zbc3bNhQ
9lCsjUYogkYoQlzCm9KIRo0ayR6Kz86cOVOsWDFThv/111/LHo21EdzDEtQM
7mfOnGnKcWzr1q2yhxJSDhw4kCtXLlNac+HCBdmjsYzTp08XLlzYlN2+e/du
2aOxsN9//92sRnz77beyR2NhNEIRNmwEebEiaAQsgeAeCKpmzZp5mld069Yt
zdXfffddfXmfguk7d+4cPXp08+bNq1at+uqrr3744Ydg/6VAdHS0VmfgV9Ap
KSl9+vTxdZ7WvXt3UwaSDkqVKuXr6JxkzJjxxx9/lD2O0JGamireXwE2Rdeq
VSvZA7IMx0NcgB566CHZo7EwGqEIGqGIyZMnm9WIihUryh6Nby5evFi2bFmz
hr9s2TLZA7I2gntYgprBvTj+BH4Qs9Dddy3hyJEjefPmDbwvmh9++EH2gKzh
r7/+KlGihFm7feXKlbIHZFXmNmLVqlWyB2RVNEIR9mwEebEiaAQsgeAeCJ6L
Fy9mzJjR07xi3759aW5h0aJF+vKNGzdOc/m9e/cOGjSocuXKrs+bOXPmGjVq
vPvuu9euXTNjcM6qVKlyz793KArwz8DXr1//0EMP+TFPs1Bw/9xzz/kxQEf9
+/eXPYiQ0rdv3wA74qhp06ayB2QNM2bMMHG3lylTRvaArIpGKIJGKGL69Okm
NqJs2bKyB+SDq1evBn6HfEcLFiyQPSZrI7iHJagZ3B87dizAI1j27NnPnj0r
exyh4/jx4/pX/U3Bp5feuHTpUuC3oXa0dOlS2WOyJNMbwXcj/UMjFGHbRpAX
K4JGwBII7oHgmTp1qqdJxcMPP+zNFjZv3qyvImY1nha7c+fOrFmzvPwLqaxZ
s06aNCk5Odm8gf5X9+7dxcarVKni9xYOHjxYp04dX6dnOgvdn3zJkiV+D1OI
iYm5fv267EGEjri4uEDa4eqll16SPSYL2L59e0REhIm7vW7durLHZEk0QhE0
QhFff/21uY2oV6+e7DF5KzU19amnnjJx7MKXX34pe1jWRnAPS1AzuBcCvH/I
5MmTZY8gdNy6datChQoBnVFc/Pnnn7KHpTpx7mjUqJG5u50fwfGDaETDhg3N
bYS4dpA9LOuhEYqwcyPIixVBI2AJBPeAk+Tk5KsmMfjL8UmTJnmzhZ07d+qr
ZM6c+fLly67LzJ8/v0CBAr7OamrWrCkudc0aqfDll1+WLl161qxZfqx75syZ
Tp06ZciQwddROOrZs6eJwwmq8+fPB3JLqA8++ED2CELH4cOHo6KiAnnhuZo2
bZrsYalOHHwKFixo7m7v27ev7GFZD41QBI1QRDAa8dprr8kelrdM/IEAjZjX
nTp1SvawrC179uzaznR7CQAookOHDvob/4knnpBdzv8XyM/ciwvbixcvyh5B
6NC+5G+imJgY2WOygHHjxpm72yMiIsz9EMkmxo4da3ojzpw5I3tY1kMjFGHn
RuhjHzBggOxabI1GwBJ++uknx2MdwT1sLikpydzb9QAAAAAAAAAAAACATzZv
3iw7OAVkunv3bkxMjOw3IgAAAAAAAAAAAAD72rBhg+zgFJDs2rVrB8xg8Jt6
H3/8sffbyZ07t77iqFGjxCP79u3r3LmzKW/5sLCw2bNnmzJev82ZMyeQIWTN
mnXs2LFyhxCIVatWTZgw4a233po0adKHH364ceNGpwVatWqlD/b555+XUmSo
atGiRcDvof8RFRXl2kE4efXVV83d7RkyZFi4cKHsYVkPjVAEjVDEK6+8Ynoj
Fi1aJHtYXtm7d2/OnDnNHX6NGjVkDysUiFmutj/F5F92LYBHjjPq2NhY2eW4
sXv37lmzZg0fPlxcTc+YMWPp0qXffvut4wLr168PDw/XhsB83lwbNmwI8Bfx
XHFRnCbxCs+WLZu5u7127dqyh2U9ohH6qZxGSEQjFEEjXn/9da3srl27yq7F
1mgELEFckjge7rhVPmCKU6dOeZpUlC9f3qdNVahQQV933Lhx//zzj7lpY2xs
bJB2gpc+//xzv4uvXr36yZMn5dYfVFeuXNF/gT1//vzXr1+XXVHoSE1NzZs3
r0lvo/+zaNEi2cOygCpVqpi720eMGCF7TJZEIxRBIxTxyCOPmNuIkSNHyh6T
t7Zs2WLu2O+9996//vpL9rBCQY4cObRdmpKSIrsWwKOXXnpJf/s/+eSTssvx
x4ABA/QhvPPOO7LLCSkzZsww9xTz4IMP3rp1S/awVLdhwwZzd3tMTMz58+dl
D8t61q9fb3ojLly4IHtY1kMjFEEjpkyZolU+bNgw2bXYGo2AJfz111+ORzyC
e8AUkyZN8jSvmDZtmk+bql+/vr7u888/X7VqVXPnOcI333wTpP3gjc8++8yP
mqOioiZMmJCcnCyx8nQwduxYfcgLFiyQXU5I+fXXX817D/1X//79ZY/JAm7f
vp0xY0YTd3vr1q2JM/xAIxRBIxSRkJAQERFhYiPatGljoUaMHj3axLFHRkZu
375d9phCBME9LMHqwX18fLx+j7tSpUrdvXtXdkUh5fnnnzfxFJM/f/4TJ07I
HpMFDBs2zMTdHhUVtXv3btljsqShQ4fSCBXQCEXQCPJiRdAIWALBPRAM1apV
czuvyJw586VLl3zaVLt27Uyc2LjVvXv3IO0Hb/gR3NesWfOPP/6QWHP6SExM
vO+++7Qhly9fPuS/pZDO5s+fb+KbqFu3bqmpqbLHZAFHjhwxcbc3btz4zp07
ssdkSTRCETRCEYcPHzaxEU2aNLFWI2rUqGHW2CMjI9euXSt7QKGD4B6WYPXg
/v3339frX7ZsmexyQk2BAgXMOsXky5fv4MGDsgdkDSbe0ClLliwbN26UPSCr
MvGGTlFRUV988YXsAVkVjVAEjSAvVgSNgCUQ3AOmO3PmTFhYmNupRfv27X3d
Wt++fc2a2HiSP39+iZ8H+nGr/JkzZ8qqNj0tXrxYH/KqVatklxNqzPozBPFm
HzVqFKm9l9atW2fKbr/n39+iSkxMlD0gq6IRiqARili7dq1ZjejWrVtSUpLs
AfmmePHipow9X758cm/iFHoI7mEJlg7uxZurdOnSWvEVK1bkvWY6s37OuFSp
UvytvfcKFy5sym6Pjo7eu3ev7NFYmFmNyJ8/P40IBI1QxP3332/zRpAXK4JG
wBII7gHTTZs2zdPswo97h44YMcKUiY0xie/9TZs2GdcWHh7+5JNPOt7EwCa/
JF6pUiVtvFWqVCEXNt3UqVMDf+NkypTJJq9Gs4jLq8B3e1hY2PDhw2UPxdpo
hCJohCL27Nlj50aUL18+8OGXKFHil19+kT2UUENwD0uwdHC/Zs0avXhuGBIM
uXLlCvwUU6NGjb///lv2UKykVKlSge/2kiVLHj9+XPZQrM2URjzwwAM0IkA0
QhFiH9q8EeTFiqARsASCe8B0tWrVcju7EHNFP+LXJk2aBD6xSdO0adOCsSu8
Yfxpeb58+bRvO8ybN09/cP369bKqTTebN2/Wx7tixQrZ5YSg5cuXB/iuKVGi
BH9a6KvA70cdHR3NDSgCRyMUQSMUYUojVq9eLXscfqpdu3aAw2/ZsuXly5dl
jyMEEdzDEiwd3NesWVOrvEyZMrzRgqFgwYKBnF8yZMjQq1cva/0AjQqqV68e
yG4Xnn766atXr8oeh+V5+g1N7z3zzDM0InA0QhE0grxYETQClkBwD5jr3Llz
4urS7QTjnXfe8XVrcXFxAc5qvNSxY8dg7A1viD1mUFiLFi20xRYsWKA/aIe0
tFGjRtpgixUrZrmb7lrCqlWr/H6/hIeH9+vX79atW7IHYT0BpmPt27e/dOmS
7EGEAhqhCBqhiAAb0aFDB0vH1m3btvV77NHR0cuXL5c9gpBFcA9LsG5wv2/f
Pr3yjz76SHY5oalChQp+n2JKlSq1c+dO2SOwpFatWvm922NiYlauXCl7BCEi
kEYUKFCAb+eahUYoomXLljZvBHmxImgELIHgHjDX3Llz3c4xwsPDz50759Om
xNvTlDvLeaN69epB2iFpSk1N1X/nKDIyskWLFosXL3700Ue1R9q3b68t5viD
74cOHZJVbfo4cuRIWFiYNtiJEyfKLic0+R3cizfLnj17ZJdvVX6nY+XKlVu3
bp3s8kMHjVAEjVBEII0IgbsAtWvXzo+xZ8yYsWvXrpb+xoL6CO5hCdYN7p95
5hmtbHHRffv2bdnlhCb91998kj179iFDhiQkJMgu36ratGnjx27PlClTz549
Lf3XrKqhEYqgEYpo3bq1zRtBXqwIGgFLILgHzOVpHvLEE0/4uqmmTZv6MaVx
lCVLlmLFihUuXDg8PNx4yQIFCgRjb3jpgw8+6NGjx+eff/7PP/9oj9SoUUMr
TEzPtEcc/+L+559/lldseujUqZM+2JMnT8ouJzTpwX3RokW9fEM1aNBg27Zt
sgu3Nj0dE8ccTzcncfLII4+sXLmSzMJcNEIRNEIRNm+EHtwXKlTIm7GL6WWv
Xr3++OMP2YWHPoJ7WIJFg3txkaVfI0u8+1zI04P7vHnzenOKyZMnz4gRI65c
uSK7cGvTY0ovf6ogKiqqb9++Z86ckV14qPGjEa+99hqNMB2NUIT+gbltG0Fe
rAgaAUsguAdMlJSUlDNnTrfzjQULFvi0qfnz53szjXFLXB1PnTr16NGjqamp
2tZu3rwpNvjII48YTIeCsD/8V7FiRa2wAQMGaI84/sb9qVOn5JYXVGfPns2U
KZM20owZMyYnJ8uuKDTpwX3Hjh2//fbbtm3bun3zhoeHx8bGjhs3TryhZJcc
CvR07LHHHvvpp5+6desWHR3tutvDwsLEcWzIkCHc3CBIaIQiaIQinBrRtWtX
g0YMHTp07969sks2kx7cr169Wky3ateu7fYLn+Is+fTTT4v5JD/QkG4I7mEJ
Fg3ue/XqpZc9cuRI2eWELD24P3To0DvvvOPpD/Dz58/fuXPnTz/9VP8mPwKh
x5Tr16+fO3duzZo13Z7Zc+XK9eyzzy5YsID75wSJUyNiY2ONG8FXVoKERihC
D+43bNhgz0aQFyuCRsASCO4BE+3atcvtdWhUVNTNmze9345/N8nPmTPnK6+8
cvDgQU+bTU1NnTZtWubMmV3XDQsLUyogfuCBB7TCRowYoT0ye/ZsvVpff3TA
WgYOHOjYmm+//VZ2RaHJMbjXHklKSjp+/Li4glixYkVcXNxnn30mzok3btyQ
W2eIcUzHtEdSUlJ+//33L7/8Utvt4n93797NZ0fBRiMUQSMU4bYRp06dskkj
9OB+7dq12iP//PPPgQMHxIlyyb/E4z///LM4S8qt04YI7mEJVgzur1y5kjVr
Vr1sP26OBy/pSb24ztIeuXr1qrjC/fTTTxcuXPjJJ5988cUXv/32G0c5c+kx
5aZNm7RHbt68uX//fnFmX7x48dKlS9etW3fs2DHO7MFGIxRBIxShB/fiIkt7
xG6NIC9WBI2AJRDcAyYSB3zXTFxo166dT9t58skn3W7Hk6xZs7711lvXrl3z
ZuPiGln//XRHXq6ePu677z6tqsmTJ2uPzJgxQy819L51qUtISMidO7djX2rW
rKnfOQEmcg3ukQ5c0zFIQSMUQSMUYfNGuAb3UATBPSzBisH9hAkTnK6F9RAB
5nIN7pEOXGNKSEEjFEEjFOEa3NsNebEiaAQsgeAeMFGdOnVcA/F7/r0dk/cb
+fjjj91uxK3w8PBXX331/PnzPtVZu3Zt102Jo4GPww2iPHnyaFXNmjVLe0Q/
qwp3796VW17wxMXFubZm+fLlsusKQQT3Utg8HVMHjVAEjVCEzRtBcK8sgntY
guWC+9TU1BIlSjhdcJUpU0Z2XaGJ4F4KYkpF0AhF0AhFENyTFyuCRsASCO4B
s9y9ezcqKso1dc2dO3diYqKXGzlz5ozbH9p2q0iRIjt37vSj1Lp167puTak/
Y9d/5D0uLk57RP+ziMyZM8utLagee+wx19YMHDhQdl0hiOBeCpunY+qgEYqg
EYqweSMI7pVFcA9LsFxwv3nzZrcX17du3ZJdWggiuJeCmFIRNEIRNEIRBPfk
xYqgEbAEgnvALHv27HH7CYBPsWCrVq3cbsRV06ZN/b65/YMPPui0NaV+4z4h
IUEvTP9j8zFjxmiP5M2bV255wXP06FG3veaD9GAguJfC5umYOmiEImiEImze
CIJ7ZRHcwxIsF9w//fTTrhdclStXll1XaCK4l4KYUhE0QhE0QhEE9+TFiqAR
sASCe8Asjvdyd7R69Wovt+Dpy/+uxPWv37eLT0xMzJIli9MGc+XK5d/WguH8
+fN6YfpnyMOHD9ceKVKkiNTqgqh3796uvY6NjeU37oOB4F4Km6dj6qARiqAR
irB5IwjulUVwD0uwVnB/4cKFjBkzul5zbdy4UXZpoYngXgpiSkXQCEXQCEUQ
3JMXK4JGwBII7gGzdOrUyfUTgKxZsyYkJHizemJiYrly5Vy34JY4xfhdp3ib
u25QPLXfGzTdr7/+qhe2ZcsW7cEhQ4Zoj5QvX15ueUGSmpoaHR3t1JfIyMgj
R47ILi00EdxLYfN0TB00QhE0QhE2bwTBvbII7mEJ1gruZ82a5Xot/Pzzz8uu
K2QR3EtBTKkIGqEIGqEIgnvyYkXQCFgCwT1glocfftj1Q4BnnnnGy9Xfffdd
19U9Wbhwod91vvHGG64bbNiwod8bNN3+/fv1wnbv3q09+Oabb2qP1K5dW255
QXL69GnXvnz88cey6wpZBPdS2DwdUweNUASNUITNG0FwryyCe1iCtYL7F198
0emCq1y5cv/884/sukIWwb0UxJSKoBGKoBGKILgnL1YEjYAlENwDpkhKSoqM
jHQNXr1M2G/evJk3b17X1T2Ji4vzr867d+8WLFjQdYNdunTxb4PBsG3bNr2w
gwcPag/qwf1zzz0nt7wg0VMD3csvvyy7qFBGcC+FzdMxddAIRdAIRdi8EQT3
yiK4hyVYK7jX4xtNrly5jh07JruoUEZwLwUxpSJohCJohCII7smLFUEjYAkE
94CTc+fObfHdwoULXdPwsLCw5cuXe7N6165dXVd3FBUVpX92J/Tq1cuPIoUB
Awa43X7nzp3922AwjBw5Ui/s448/1h7UP1UWU2655QXJggULHDvSoEEDMZWV
XVQoGzFihLarH3/8cdm12MjcuXO13V6+fHnZtdgajVAEjVCEzRtRr149bfij
R4+WXQv+h5j/a63ZvHmz7FoAj5o0aaJfwjz66KOyy0mDmPnr1WbLlm3GjBmy
KwpxJUuW1PZ2XFyc7FpspFatWtpuHz9+vOxabI1GKIJGKKJmzZpaIyZMmCC7
Fjl69uyp7YEOHTrIrsXWaAQsYdmyZY5REcE9bO7OnTt58uRxG20DAAAAAAAA
AAAAQDpYv3697OAUkCk5Obly5cqy34gAAAAAAAAAAAAA7Gvr1q2yg1PAkoYN
G+b6hlq3bl2aKyYmJrr90XndkCFDtCXHjBmjP9izZ09fKzxx4kRkZKSnZzl/
/rzPYw6a2bNn64XFx8drD+o/RrB371655SE08Bv3Utj8h6TVQSMUQSMUYfNG
8Bv3yuI37mEJ1vqNe6QzfuNeCn7RWxE0QhE0QhH8xj0/ra4IGgFL4DfuAVPo
P4/i6MKFC2muqKeHbjVp0kT/pG7x4sX6408//bSvFTr++KCT7Nmzp6am+jzm
oJk6dapWWMaMGfXC9u3bJx7JnDnznTt35JaH0EBwL4XN0zF10AhF0AhF2LwR
BPfKIriHJRDcwwDBvRTElIqgEYqgEYoguCcvVgSNgCUQ3AOm0OeBupiYGG9W
fOqppzzl6UWLFr169aq+5K5du/R/qlu3rk/lvf/++56eRahWrZpvow2y8ePH
u+7DlJSU+++//8UXX5RYGEIJwb0UNk/H1EEjFEEjFGHzRhDcK4vgHpZAcA8D
BPdSEFMqgkYogkYoguCevFgRNAKWQHAPmKJ+/fpOaXjjxo3TXOvs2bMRERFu
w/Tw8PCdO3c6LnzmzBn9X8uXL+99bYcPHza4Sb6gWhqun0CdhvnHH3/cunVL
VlUIMQT3Utg8HVMHjVAEjVCEzRtBcK8sgntYAsE9DBDcS0FMqQgaoQgaoQiC
e/JiRdAIWALBPWCK2NhYpzT8tddeS3OtcePGeQrT33rrLaeFk5OTM2bMqP2r
l3/OL8THx5ctW9bTs2gmTZrk84CDae7cuVphtWvXll0LQhbBvRQ2T8fUQSMU
QSMUYfNGENwri+AelkBwDwME91IQUyqCRiiCRiiC4J68WBE0ApZAcA+YokqV
Kk5p+Lhx49Jcy1OkXrly5cTERNflixUrpi0QERHh5a/Sd+nSxe1TONq4caPP
Aw6mJUuWaIW1atVKdi0IWQT3Utg8HVMHjVAEjVCEzRtBcK8sgntYAsE9DBDc
S0FMqQgaoQgaoQiCe/JiRdAIWALBPWCKhx9+2CkNnz17tvEqJ06ccBujh4WF
7dmzx+0qderU0Re7cuVKmlVNnjzZ7VM4Pd2lS5f8GXPQbNmyRautd+/esmtB
yCK4l8Lm6Zg6aIQiaIQibN4IgntlEdzDEgjuYYDgXgpiSkXQCEXQCEUQ3JMX
K4JGwBII7gFT1KhRwykQF2cB41WmTp3qNkl/4YUXPK3SsWNHfbFffvnFePtL
ly4NCwtz+xSOSpQo4c+Ag+nSpUtabTNnzpRdC0IWwb0UNk/H1EEjFEEjFGHz
RhDcK4vgHpZAcA8DBPdSEFMqgkYogkYoguCevFgRNAKWQHAPmKJBgwZOgfjg
wYONV2nRooVrjJ49e/azZ896WmXIkCH6kjt37jTY+LZt2zJlyuS6fVft27f3
c8zBVK1atSxZsqT55QTAbwT3Utg8HVMHjVAEjVCEzRtBcK8sgntYAsE9DBDc
S0FMqQgaoQgaoQiCe/JiRdAIWALBPWCKZs2aOQXizZs3N1g+NTX13nvvdY3R
Bw0aZLDWnDlz9CVXrlzpabEffvhB/6AvTe+//77/ww6a27dv37hxQ3YVCGUE
91LYPB1TB41QBI1QhM0bQXCvLIJ7WALBPQwQ3EtBTKkIGqEIGqEIgnvyYkXQ
CFgCwT1gihdeeMEpEM+bN29ycrKn5d3+wH3GjBnPnDlj8CwbN27UF54zZ46n
LRcsWNBtRu+WWD7QwQMWRHAvhc3TMXXQCEXQCEXYvBEE98oiuIclENzDAMG9
FMSUiqARiqARiiC4Jy9WBI2AJRDcA6YQh3rXTHzLli2ell+9erXr8u3atTN+
lh9//FFfePTo0a4LHDlypECBAq5b9kTBH7gH0gfBvRQ2T8fUQSMUQSMUYfNG
ENwri+AelkBwDwME91IQUyqCRiiCRiiC4J68WBE0ApZAcA+YYt68ea6x+FNP
PeVp+bFjx7oun+Yb8ObNm/rCffr0cfrXr7/+Ok+ePK6bNdC7d28TBg9YEMG9
FDZPx9RBIxRBIxRh80YQ3CuL4B6WQHAPAwT3UhBTKoJGKIJGKILgnrxYETQC
lkBwD5hiy5YtbpPxrVu3ul3e8fMNTZkyZbx5oty5c2vLt23bVn8wNTVVnHQi
IiLc1mBg37595owfsBqCeylsno6pg0YogkYowuaNILhXFsE9LIHgHgYI7qUg
plQEjVAEjVAEwT15sSJoBCyB4B4wxcWLF90m40WKFBH/5Lp806ZNnZYcOHCg
N0/00EMPacvXrVtXe+TMmTONGjVy++zGKlSoYOYuACyF4F4Km6dj6qARiqAR
irB5IwjulUVwD0sguIcBgnspiCkVQSMUQSMUQXBPXqwIGgFLILgHzFK4cGG3
+XiVKlX+/vtvp4UfeeQRp8V2797tzbPoGX3BggUTExPnzJmTM2dOt8+bpg8/
/DAIuwGwBoJ7KWyejqmDRiiCRijC5o0guFcWwT0sgeAeBgjupSCmVASNUASN
UATBPXmxImgELIHgHjCLPhV0VbRo0a+++spx4SJFijgtc+vWLW+epVOnTvoq
2bNn9/SMaSpUqNCdO3eCsycACyC4l8Lm6Zg6aIQiaIQibN4IgntlEdzDEgju
YYDgXgpiSkXQCEXQCEUQ3JMXK4JGwBII7gGzvPvuu8ZZ+eOPP75169bU1FSx
sNOfyefLl8/LZxk4cKDxs3hpxowZwdwZgOoI7qWweTqmDhqhCBqhCJs3guBe
WQT3sASCexgguJeCmFIRNEIRNEIRBPfkxYqgEbAEgnvALMeOHfMmMS9VqtS4
cePCwsIcH6xYsaLBlpOSkn766aclS5a8/vrrRYsW9eZZ0qwhMTEx3fYMoCCC
eylsno6pg0YogkYowuaNILhXFsE9LIHgHgYI7qUgplQEjVAEjVAEwT15sSJo
BCyB4B4wUYkSJfxL0osXL758+fJ9+/YdOHBg586dn3/++fz580ePHv3cc889
9NBDmTJl8m+znqxevVr2rgIkI7iXwubpmDpohCJohCJs3giCe2UR3MMSCO5h
gOBeCmJKRdAIRdAIRRDckxcrgkbAEgjuASd79uyZ668GDRr4HaanmwcffNDv
AQIho2fPnto7onr16rJrsRExK9Z2e4kSJWTXYms0QhE0QhE2b0TVqlW14b/6
6quya8H/iIyM1FozZ84c2bUAHsXGxupXmhUqVJBdDtRy//33a6+N0aNHy67F
RipXrqzt9j59+siuxdZohCJohCL0r3L17dtXdi1yPPPMM9oeaNq0qexabI1G
wBImTpzomOgR3MPmbt26lTlzZr8zcQAAAAAAAAAAAAAI0ObNm2UHp4BMqamp
HTp0KB4AxXP/fPnyBTI6IGTkz59fe1Nky5ZNdi02ct9992m7PTIyUnYttkYj
FEEjFGHzRojzoDb8mJgY2bXgf2TIkEFrjexCAMBP+scj999/v+xabCRr1qza
bi9QoIDsWmyNRiiCRiiCRuTNm1fbA7lz55Zdi63RCFhOkyZNEhISZAengLUt
W7bMvJjdZK1bt5a9ewBV8Bv3Utj8h6TVQSMUQSMUYfNG8Bv3yuI37gFYHb9x
LwW/6K0IGqEIGqEIfuOen1ZXBI0AABtKTk4uVaqUeWG7aYoWLXrt2jXZuwdQ
BcG9FDZPx9RBIxRBIxRh80YQ3CuL4B6A1RHcS0FMqQgaoQgaoQiCe/JiRdAI
ALCnlStXmpe3myN79uw//PCD7B0DKITgXgqbp2PqoBGKoBGKsHkjCO6VRXAP
wOoI7qUgplQEjVAEjVAEwT15sSJoBADYVv369c1L3QMVHh6+YcMG2bsEUAvB
vRQ2T8fUQSMUQSMUYfNGENwri+AegNUR3EtBTKkIGqEIGqEIgnvyYkXQCACw
rVOnTmXLls287N1/4eHhCxculL0/AOUQ3Eth83RMHTRCETRCETZvBMG9sgju
AVgdwb0UxJSKoBGKoBGKILgnL1YEjQAAO4uLizMtffdXeHj4kiVLZO8JQEUE
91LYPB1TB41QBI1QhM0bQXCvLIJ7AFZHcC8FMaUiaIQiaIQiCO7JixVBIwDA
5nr37m1eCO+zvHnzbtmyRfY+ABRFcC+FzdMxddAIRdAIRdi8EQT3yiK4B2B1
BPdSEFMqgkYogkYoguCevFgRNAIAbC45Oblt27bmRfE+qFat2u+//y57BwDq
IriXwubpmDpohCJohCJs3giCe2UR3AOwOoJ7KYgpFUEjFEEjFEFwT16sCBoB
AEhMTOzYsaN5gXzaIiIihg8fnpSUJHvogNII7qWweTqmDhqhCBqhCJs3guBe
WQT3AKyO4F4KYkpF0AhF0AhFENyTFyuCRgAAhNTU1JEjR4aHh5sXznt03333
7d69W/aIAQuYPn26iW+9HDlynDhxQvaYLMDm6Zg6aIQiaETgOnfubOLBvECB
ArIHJAHBvbIqV64s+lK8eHFxNSG7FgDwR968eU08Tb/88suyB2QNxJSKoBGK
oBEB+vHHH7Nly2biwTwuLk72mOQgL1aEuOy1+UsRAKD7+uuvixQpYuI8x1X9
+vUvXrwoe6CANQwcONDcN+AXX3whe0wWQEypCBqhCBoRuIceesjEI3n27Nll
D0gCgntl3bp16+TJkwkJCbILAQA/ZcmSxcTTdLVq1WQPyBqIKRVBIxRBIwK0
cuVKE4/kwtixY2WPSQ6Ce3X89ddfZ8+elV0FAEAJt27dEqfmrFmzmjvh0bRv
3z45OVn2EAHLILiXgphSETRCETQicAT3gSO4BwAECcG9FMSUiqARiqARASK4
NwvBPQAAyrp06ZI4QRcoUMDcac8777wje2SAlRDcS0FMqQgaoQgaETiC+8AR
3AMAgoTgXgpiSkXQCEXQiAAR3JuF4B4AAMUlJSWtX7++W7duBQsWNGXa8+yz
z8oeE2AlBPdSEFMqgkYogkYEjuA+cAT3AIAgIbiXgphSETRCETQiQAT3ZiG4
BwDAQk6ePLls2bLBgwc/88wzjz76aMmSJfPnzx8VFaVPaXLlylWsWLGGDRu+
8cYbH3/88c6dO0+fPr1ly5awsDB9GbGA7HEAVkJwLwUxpSJohCJoROAI7gNH
cA8ACBKCeymIKRVBIxRBIwJEcG8WgnsAAEJAcnLytWvXDBYQ1636tCcsLOzm
zZvpVhtgdQT3UhBTKoJGKIJGBI7gPnAE9wCAICG4l4KYUhE0QhE0IkAE92Yh
uAcAwA5ee+01x5nP/v37ZVcEWAbBvRTElIqgEYqgEYEjuA8cwT0AIEgI7qUg
plQEjVAEjQgQwb1ZCO4BALCD999/33Hms2jRItkVAZZBcC8FMaUiaIQiaETg
CO4DR3APAAgSgnspiCkVQSMUQSMCRHBvFoJ7AADs4IsvvnCc+QwdOlR2RYBl
ENxLQUypCBqhCBoROIL7wBHcAwCChOBeCmJKRdAIRdCIABHcm4XgHgAAO9i1
a5fjzKdTp06yKwIsY+bMmdobJ1OmTLkCVrBgwZMnT8oekwUQUyqCRiiCRgSu
R48egR/Ds2fPrjVCHMxlD0gCgnsAQJDky5dPO8XkyJEj8PP1a6+9JntA1kBM
qQgaoQgaEaCff/45JiYm8GN4xowZtUYsWLBA9pjkILgHAMAODhw44BjcN2jQ
QHZFgGWsWrVKe+N07NhRdi02QkypCBqhCBqhCJs3guAeABAklSpV0k4xx48f
l12LjRBTKoJGKIJGKKJ169ZaI7788kvZtchBcA8AgB18//33jsF96dKlZVcE
WAbBvRQ2T8fUQSMUQSMUYfNGENwDAIKE4F4KYkpF0AhF0AhFENwT3AMAYAfb
t293DO5z5MghuyLAMgjupbB5OqYOGqEIGqEImzeC4B4AECQE91IQUyqCRiiC
RiiC4J7gHgAAO1izZo1jcJ8hQ4bU1FTZRQHWQHAvhc3TMXXQCEXQCEXYvBEE
9wCAICG4l4KYUhE0QhE0QhEE9wT3AADYwfTp0+/5X7du3ZJdFGANBPdS2Dwd
UweNUASNUITNG0FwDwAIEoJ7KYgpFUEjFEEjFEFwT3APAIAd9OnTxym4v3jx
ouyiAGsguJfC5umYOmiEImiEImzeCIJ7AECQENxLQUypCBqhCBqhCIJ7gnsA
AOygQYMGTsH9X3/9JbsowBoI7qWweTqmDhqhCBqhCJs3guAeABAkBPdSEFMq
gkYogkYoguCe4B4AgJCXkpKSI0cOp+D+8uXLsusCrGH58uXau6Z8+fIDkV66
dOmi7fZChQrJrsXWaIQiaIQibN6IcuXKacNfuXKl7JMzACCklCpVSjvFdO/e
XfbpzkZKly6t7fZnn31Wdi22RiMUQSMUoZ8RbNuI+vXra3ugX79+ss/PAAAg
KI4ePXqPi/j4eNl1AdYwZMgQ13cQAAC2NXz4cNknZwBASImKipJ9cgMAQC11
69aVfX4GAABBMXXqVKfzfoYMGZKTk2XXBVjDwIEDpczPAQBQ09ChQ2WfnAEA
ISVLliyyT24AAKildu3ass/PAAAgKBo1auR03s+XL5/sogDLILgHAMARwT0A
wFwE9wAAOCG4BwAgJF29ejUyMtLpvF+mTBnZdQGWQXAPAIAjgnsAgLkI7gEA
cEJwDwBASJozZw7nfSAQbt9EAADY1gcffCD75AwACCnR0dGyT24AAKilXbt2
ss/PAADAfNWrV3c973fs2FF2XYBlrF69Ov0n5wAAKGvNmjWyT84AgJBSqVIl
2Sc3AADU8vbbb8s+PwMAAJP9+uuvYWFhnPeBQBDcAwDgiOAeAGAugnsAAJzw
AT4AAKFn8ODBbs/78+fPl10aYBkE9wAAOCK4BwCYi+AeAAAnBPcAAISYmzdv
5s2b1+15f/fu3bKrAyyD4B4AAEcE9wAAcxHcAwDghOAeAIAQM378eLcn/bCw
sBs3bsiuDrCMjRs3pvPMHAAAlW3atEn2yRkAEFKqVasm++QGAIBaxowZI/v8
DAAATBMfHx8dHe32pF+sWDHZ1QFWkpiYOGvWrAkAAGDCBHFOFGdG2SdnAEBI
+f7772Wf3wAAUMi77757+fJl2ednAABgmkmTJnn6tl7r1q1lVwcAAAAAAAAA
AAAAQCi7fPlyvnz5PAX306dPl10gAAAAAAAAAAAAAACh7OWXXzb4fZwffvhB
doEAAAAAAAAAAAAAAISyxo0be0rt8+TJk5KSIrtAAAAAAAAAAAAAAABC2TPP
POMpuG/RooXs6gAAAAAAAAAAAAAACHEGt8qfMmWK7OoAAAAAAAAAAAAAAAhx
I0aM8BTcHz9+XHZ1AAAAAAAAAAAAAACEuNmzZ7tN7StXriy7NAAAAAAAAAAA
AAAAQt+aNWvcBveTJ0+WXRoAAAAAAAAAAAAAAKHv9OnTrql9lixZLl++LLs0
AAAAAAAAAAAAAABsIV++fE7B/WuvvSa7KAAAAAAAAAAAAAAA7KJp06aOqX2h
QoVu3rwpuygAQCjbtm3b45599NFHJq4F0/Xr18+gEdevX5ddIAAAAGB3nTt3
Npi0JyYmmrgWzHXo0CGDLkyfPl12gQAAAAiiTz/9VE/tc+TIsW/fPtkVAQBC
3JIlS1x/qEX31ltvmbiW1d24ceOrr7768ccfZRfy/9WqVcugEX///bfsAgEA
AAC7K126tMGk/c6dOyauZXU//fSTuOZS5xvI27ZtM+jCK6+8IrtAAAAABFFq
amrnzp3Dw8NjY2P3798vuxzA7nbu3PmIg1u3bsmuCDAfwb2XNm3alDdvXm2A
LVu2VOSDMoJ7AABgaS+88IJ+wTVlyhTZ5QBBQXDvDTGi1q1ba6PLkyfPxo0b
ZVf0XwT3AAAASEpKkl0CgP9at26d4xXZP//8I7siwHxXrlw54KBr167eRPD+
rWVdYrx58uRxHOPw4cNlF/Vfv/zyi2MjoqKiHIskuAcAAIp79NFH9anL66+/
LrscICh+/PFHfca+f/9+LyN4/9ayrhEjRjgOMHfu3JcvX5Zd1H9u3rzpeMHV
r18/gnsAAAAAkILgHjb09ttv+xHB+7eWhWzcuNHpg7KqVavKLsqN7NmzE9wD
AAALIbiH3aSmpvoRwfu3lrVUq1bNaYzr1q2TXZSzd999l+AeAAAAAKQguIcN
Edy7tXv3bqcPkR5//HHZRbmRbsF9jx49HH9J5KuvvgrSE/lq8+bNjoX16tVL
dkX4rzFjxjj2ZcGCBbIrAgCoguAedkNw70mjRo2cxrhr1y7ZRTlLt+D+4MGD
jvPntm3bBumJ/PD000871nb48GHZFeH/rF692rE1b775puyKAAAAADMR3MOG
CO7dSklJqV27tuMYV61aJbsoN9ItuK9Xr56ae+OTTz5xLKxRo0ayK8J/de/e
3bEvEydOlF0RAEAVBPewG4J7TzZv3hwWFqYPsHLlyomJibKLcpZuwf2OHTsc
n+ihhx4K0hP5oVy5co617d69W3ZF+D8ffvihY2uefvpp2RUBAAAAZiK4hw0R
3Hty9erVnj17lixZskaNGurk1E4I7gnu1URwDwDwhOAedkNwb2Dt2rWxsbHi
mqtr166XLl2SXY4bBPf/IbhXGME9AAAAQhvBPWyI4N7SCO4J7tVEcA8A8ITg
HnZDcG9pBPf/IbhXGME9AAAAQhvBPWyI4N7SCO4J7tVEcA8A8ITgHnZDcG9p
BPf/IbhXGME9AAAAQhvBPWyI4N7SCO4J7tVEcA8A8ITgHnZDcG9pBPf/IbhX
GME9AAAAQhvBPWyI4N7SCO4J7tVEcA8A8ITgHnZDcG9pBPf/IbhXGME9AAAA
QhvBPWyI4N7SCO4J7tVEcA8A8ITgHnZDcG9pBPf/IbhXGME9AAAAVJOcnHzo
0KEVK1bMnDnz7bffHjNmjJi1rl69+s8///Rja6YH96I8cfElLvT69evXvXv3
AQMGTJo0afny5b/++mtKSoqXWzBxgNaSmpq6Z88eMepWrVo99thjVatWbdas
Wc+ePZcuXRofHy+7Oglu3bq1f//+hQsXileU2C3Dhw+fOnXq/PnzxYNJSUl+
bzbEgvsbN26sXLly2LBhL7/8cp8+fUaOHLls2bLgxdnGxAtVPPuzzz5bqVKl
mJiYHDly3HvvvVWqVHnppZfEm9rxk7dVq1Y97tnatWs9PYVxcP/dd9+J1jz5
5JPi7RMbG9u8efM33nhj8+bNiYmJvo7FhsG9eMdt2bJlwYIFkydPFrtxypQp
ixYt2r59ezp8ZHr37t3169d36tTp0UcfLVSokHjl5MmT5+GHH27fvv3HH398
8+ZNfUnRYoNXzuzZs71/0p9//lmcXGbNmjVixIhRo0aJ//jss89++eUX/4Yg
Pbi/fv36V199NWfOnAkTJgwaNGjs2LHvv/++2KtnzpwxZftXrlzZsGGDaMf4
8eOHDh06ffp0cW7at2+fOGubsn1XCQkJn3/+uTi4ifNg3759x40bt3XrVvFS
MV5LzDdEK19//XXREfEyFnOJn376yaySfvvtN1HS3LlzxQtGvGzee+89McM5
evSoWdsHoI7Lly9v2rQpLi5OHM/FQW/atGmLFy/euXNnmkcht0wP7s+ePSsO
wqIwMf3r1auXOCKJQ584ZV+7ds3LLZg7QGsRYxcD79Gjh5g5PPLII7Vr1xbz
DXGhceTIEdmlyfHHH39s3LhRTBvEqXbgwIHiRC8mVGvWrDl//rzf2wy94P7Q
oUMzZszQPuUYPHiwuCwVk9LgzYKM/fjjj2KCJF66pUqVEtPm3LlzFytWrHHj
xmPGjHGayrZq1crTtNkg7jQO7sWcc968eWLeLgoQ7yCxqQ4dOojXzOnTp30d
iD2DezFZFdfv4h2nXYOIXScuSU6dOmXW9o2Jd9m3334rptbiYlm8bLTXj3gh
tWzZUryq//rrL31J0WiDy67XXnvN+ycVm123bt1HH30kXqJvv/22eCuJU9j+
/fu9/JDQSToH96LIY8eOLVu2TOwf0TJxxhRvEHESOXDgwO3btwPfvujIwYMH
xfbFbhHva3ERJ3bU2rVrL168GPjGPREXwuLpRBPFqVAc0MRw0nwFisGKS0tx
rhQHBPH6GT16tLgsMuuPv27duiVmIGIeMmXKFHEFN3nyZFHSF198cePGDVO2
DwAALKdt27YGc1Hd999/72kLs2bN0hcTM3BPi124cMH4KcQ81rhUcQn28ssv
58mT5x4Pypcv/+abb/p0ueRNcP/SSy894pn+6VBCQoK40s+fP7+n8kTl6T9A
t8TE22BE4lLC04pvvPGGp7VeffVVT2s999xznpouLq71xbZs2VKxYkVPY8+a
NauYVNvklgjiCk5czT366KMZMmTwtEOioqKeeuqpzZs3i8scX7evfnDftWtX
g5fo1atXtcWuXLnSp08fsStc909YWFiLFi28iau8fK40JScnT5s2TVz4e2qZ
EBMTIy5CtZaJhQ2WFMdVT0/kKbg/cuRIzZo1PW2wZMmSaSbvx48fdxy70xOV
KFHC017q0qWLl3vJb507d9afrnjx4o6FiX1u0METJ06kufG7d+/Onz9fHI4i
IyPd7j1x/BEvp08++SRIH06KLRcoUMDg9SDGKM4v2rcvNmzYYLCkN2nIuXPn
Bg0adN9993naSNGiRcXJKM1P72/fvu24q/Ply+e4kUKFCnlqyhNPPGHOjvuX
2C0ff/xxrVq1xLve04iio6Off/75RYsWef+O1t24cWPy5MmxsbHh4eFuNy4G
3r59+61bt3qztZkzZxq8XL/66it9UBMmTMidO7fr0917771jx451myuJqVrd
unXdFlmhQoUvvvjC17HrLl++PGrUKHEQ8LSHCxYsKI4De/fu9fspgNAm3oDe
XHCJWY2nLYg5cMOGDbXFjOdg4pBl8BRpfrwvjj9xcXHioOfpoJotW7bmzZv7
ek5MM7jft2+fweFx/Pjx+pJinixO2QaT5KlTp6b/AN2aO3euwaA8RRK//fab
wVqHDh1yu9bGjRsN+r548WJtsZs3b4pLKk8Tnnv+zQ31k1Fou379+sKFC8X0
QJxYPe2Ne/6dQo8cOdKP/Ej94N77N504gnm6ThdXN2Juk+Y3hL1/rjSJC5b6
9esbtEy8tVu1aqV/ZmLw6YqYH3p6Fk/BvTgsiGrFUcLtBsVc8aWXXkrzC+SO
H6qULl3acQtZsmQx2FF79uzxfkf5QWzf8emcDhSiVE+FiRF5s/1jx4717dvX
YD5ZtmzZN9988/fffw/qGMVRzuD1kzFjxu7du2uXDJcuXTJYUlx6p/l08fHx
4pT04IMPetqIuI5o27btl19+meamnn32WX2HFylSxHEj4pLB4GVz9uxZv3fX
zz//3Lt377x583qqPyIiolq1asOHD//uu+/82P4333zz4osvevoQVZzoxeRB
XAVfuXIlzU2JiyODnSB2sr7k4cOH3R5DxKFDnC7dnmTFcXj06NFuDyaZM2cW
kzdvKvRky5YtLVu2FNvxtIdr164tXkWO3+QHAAB2YPDRvSMxl/C0BcdrDYPM
V0y/jZ/C4O8E//nnn1dffdXg8xlHYqY9cOBAL69wvQnuDbIwQUzm//Pv9WOF
ChWMCxMXPuk/QLdSUlIMti+uUzyt2Lp1a09rNWzY0NNaBQsW9LRWpkyZtGXe
fvttg8xFV7Ro0W+//dbvgatv+vTp5cuXT3M/OKpevbqv305XP7ivVauWwZC1
D0MOHjxYuHBh450j3nRr1qwJ/LnSJBYTV6xp9er/dOjQITEx0dzg/rPPPsuS
JYvx84q3mPEfQf/www9eDsFJbGysN3spEDVq1PCvtjTT540bNxYrVszLrYm3
565du0wcV0JCgrhO9/LZ69Wrd/369UCC+6SkpNGjRxt8XO9IvGA6d+5skHTf
unXLy8qdGHxM6qv9+/cbf/jmRIy9bdu2O3bs8GbjqampH3zwgcHnvU5Egwy+
vqgZPHiwwRa0b9dcvnzZ+LgkVKlS5cKFC45bfv/99yMiIozXGjlypK97WOyE
GTNmOB12DLRq1ercuXO+PgsQ8j766CNv3kGPPfaYpy0sX75cXyxr1qzi9OFp
yS5duhg8hfER+Ouvvy5ZsqSX73dx7eN9ipRmcL9t2zaD59JTM3Gx6elrVLqx
Y8em/wDdGj58uMH2Pd0Q5ujRowZreZqHOP0BphNx9v/Pv18J8Gb4YgLQs2dP
P27WZBXHjh0Ts3G3X/31RMwfpkyZ4tP3pdUP7r1506WkpPTt2zfN/fP4448b
f8Heyzd4msTr3Mt5bN68ebU3i4nBvRhjgwYN0nzqUqVK/fHHHwajMPhQxZg3
8W4gxPb9K0yMyHjL165d6969u/efd/Xv319caJg+wCFDhnhZQ4kSJcSsPsDg
ftmyZeI15tUevOeeOnXqGF9HpPl5oyf+fRFCnALEZYvohfdPVKZMmYkTJ4rL
VW+2f/r06aZNm3q5ZXElMnXqVOO7E4hDpcEWKlasqC22aNEiTxG5RlxPzZ07
13HLZ8+eFVdexhUWK1bMjz+wEidl468hObr33ntF8b4+BQAAsK4Ag3unDxYq
Vark6Yn8Du4vXrzoNE0qVKjQG2+8sWbNmr179+7YsUP7qrzTpXe1atW8SdxM
Ce5PnTolSkpzH3oK7oM6QLdUC+5HjRql76IWLVqMHz9+wYIF77///ptvviku
e51WEZP2YH/VXCKnDxbCw8PF5cx77723bdu2AwcO7Nq167PPPnv99dfvv/9+
x8Vy5cq1fft2758lBIL7Y8eOGXzx25G48hK7LpDnSrNacRBwjQ7FtdvQoUO1
d/HXX3/98ccfP/300/pFYpcuXZyCe/HmOuDA4Hldg/utW7c6XlOL/86ZM6en
Ea1fv97Tlu0W3Kempg4aNMjxK0Piv8UBf8aMGRs2bNi/f7/YV5MnT37kkUcc
NyjeleJBUwZ1+/btRo0aORWcP3/+vn37rly5cvfu3Tt37lyyZEnnzp31OznU
q1dPvKgcl69atarjK8fgtvAJCQnNmjVzXFccOnr06CGOKuK5xOFl+fLl4vjv
dBQqUaKEp5vnSw/uxYExa9as+mbFf3fs2PHDDz/86quvxK4Qg9IOmDExMU4F
1KlTJ82Ni931zDPPOK4lDiZPPfXUvHnzxIxIvK9FI8RR0SkBEW/P1atXG2w2
zeA+Pj7eMd4yULlyZf3ulLNmzfJmFUHsH+/3cFJSUqdOnRxXFztZvCCXLVv2
zTffiD0sXqh9+vRx2sMFChQQbx/vnwWwg8CDe6cjksGhxu/gXhzfHL//I86J
jRs3njNnjjiofvfdd+KcOHr0aKc/GxRTjg8++MCbPWBKcD9kyBBvdqOn4D6o
A3RLqeD+/Pnz+oW/OHn1799/5syZ4jJz4sSJjnNU3bPPPivrLujBJmZ6ToMV
V98DBgwQJzVxmSlOYV9++aWYqIuTvtO3RNq0aeP9r5WFRnD/6quvGizjqGXL
lgE+V5rmzp3r9FV/8Q5t3ry5uM4S72IxN1u7du2wYcP0vysR82dxIeA0s/3i
iy/0abO49vH0XK7BvXg7NGzY0PFBMevLlCmT2xGJI57B28duwf1PP/3kNGEW
F/Jil4pLDzGfFNc7S5cuffHFF53uXFexYsXAbzXpSLzHncoW09oOHTqIqy1R
g5jWinl4v3799E/2ihQp4nQ0joqKcrzsMvh9MfFGfuuttxzXFa9VcR5fsGCB
eC5xnBHXEQMHDnT69rjYAwY3yErP4F4cdlq0aOHUjpEjR4q5hyhejF1cDU2f
Pt3t3W+8uWfL5s2bnd6YhQsXFldJ2vbFFubPn9+qVSunE9OTTz5pcN94b4L7
Tz75xMtvbogXp7bZK1eulC1b1ptVHnjgAYMvVboSI3X6RKtSpUrijLxx40ax
h8Wb8b333nv88cedDnri4t2/n1cAAACWI65ltGlnt27dHOcDtWvXdpyUepog
jRgxwmm6cvLkSbdL3r17V9+amIlp8yVxLbxjxw6DoOrPP/8U8x/H7YuLR7c/
dy6mo05fVhRzszTvJvTbb79NcOD23rNnz5496cApQHf8+mWNGjXE9FVcffz6
669i5j979mzH3NltcB/sAXriOCJxyeC4WYPg/sKFC/paH3zwgeNaBsH94cOH
9dY7/YibuNT9+uuvtRfDc8895/YmhGLOnCtXLse1xP89duyYfwNXnOP1i3jx
ePqJiqSkJPFKc/xzA7Hi8ePHvXwW9YN7pzedYzZ3z7+fc2ofq0ZERLRv3/7T
Tz89dOiQGL54002aNMnpDXXPv/GWwR/IGD9XmsF9cnKyU6YsDmtiX7n9WE9c
3esLP/bYY45riUswL3eOU3Av3gvaXdbz588/ZcoU/fYLiYmJ27dvd/qc/55/
P4Lw9CdU4gDouCuqV6/uuKI4oJ30IJD773nJsU1OH7fWqlXLU2GCwS/VOn0U
KXajp0/DxFHI6ablo0aNCnxQ4tXr1J2uXbu6/f7Y+fPn9Q9PnF454rzgzXOJ
k0VsbKzjii1btnR7yL18+bJTYQULFnT7d0PibeW4q9u2beu4ljizeGqKKZ/C
nTt3zvELKmI/ePohWvEaEMcrxw890gzuxSpPPPGE43AqVKjg9ksgKSkp77zz
juPHtuK4tGLFCk9bvnLliuOuEJU4PsuqVau0yZg4LT799NPihScObmJGsWvX
LjHdcvoxAkEcav7z7+1ntSgqJiZmyJAh4qwqDguiWlGG6/0cxCvZy2/9iZ3g
9Icw9erVc/tKEK8up3eTeBZ++B5wdOnSJW0m/O233zp9EL1w4cI0U4CE/8fe
ncftVO2P/7+MGU4kQwkHGUpSEjKcog8KhcqsCOXEEYoSH76HSiE+laRSSmRo
UDkcokh15JwmlHnKmCFDHcN9m+/f+3Pv32c/1nnv69p77euervv2ev5xHh33
Xnu69l57rfVeQ1KSKp/cd999sY4leay7Q9nM2b5r167+gaqxY8ea+WS5cuWi
dgqVnH/KlCnmJD+S6q233gq8A9OmTXMrXEuXLo16jWb2qGL0f/nLXz7++GPn
DIsUKdK7d++5c+fKtaxfv37evHnyf82m+KiB+4y+wKiOHDliXpSqRcYK3Kvy
mOpLECtw7z5j6qd3PP30002bNo2k9txw4xEm+TR4PxnySYrvwhOcWZKU33fo
0KGxguNbtmxR5a6HH37Y8iiJH7gPfOlmzZrl/LdUS5999tmvvvpKyiRStZfi
yv333++d+8KnQ1HgsQLPdsGCBSriVr169agZmrN+mVM2k/KbCgdbVlu8gXu5
A85/t23b9tNPP3UjdPIiv/zyy95uomrQrslsVJk9e7aZ6uqrr/ap14QKC8ZB
/Uwq2i6V7lgnpqaBMkkurUady8MTtRVLMjGVC0m91X/uAnsTJkxQP1Djxo2j
7lxuwuDBg51t1Ov/hz/8weZY8harxtWaNWuuXbvWu6Xk9lKpNB9sKSHECnzL
k+be8NGjR5v7b9Gihc9jY9/dyGV2cihQoIAUVGI1p/zwww/y0JonExi4X7Ro
kVkQklrMiBEjop6kZDh16tQxd16/fv2ojaUpnpqpZFNmwuuvv1725hSlKlSo
ILfdzdDkHWzZsqV6PC655BJn9vvWrVs7/yLVohkzZsj1bt68efny5aNGjfK+
9ZKzWd5hyUPMcp3cZCl7RL3JUlZR80w++OCDlkcBAAA5wzfffGMWBqRQalMv
8Hb7HDduXGCqmTNnOhv7Rxyk8KaKyv6LZyUnJ6vQdseOHQNPJiy1otmQIUMi
qZ11pWLr3fjf//632z/TG7hPkAscO3asuU+fwL1Jjfr0Cdyb5IaYqfLly+c8
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
4ro8S5ZpczA1+tKmO3p2D9x369YtMMnBgwfVk7Zz5844juUTuFd9A4TcIvuL
Ugs1xh2479OnT2AS73u3ffv2wFQ5NXCvps3MmzdvYOcr19atW9WdHDZsWNjz
37Nnj9pJ586d7ZOrBtLAoK2aJcByjJJDTSzZvHlzn40zM3CvIsu1atWy6bOU
nJz8fapNmzbF2uZPf/qTuefy5cvbn5X6LEYsFj1Rgftq1aoFHmXu3LnqKDbh
A/XYzJgxw2fjW265xdy4Xr16gft3de3a1Ux7ww032KcFLhyvvfaa+abUqVPH
Z+Pu3bs7mz377LNq9KjPuDZ3RTP/eZyefvppc4d58uQJXEvFNX36dJV2//79
lmkDeaNmq1atimM/CXWBWRi4z58//7FjxyzPU8qW6uavXbvWMm1OtXz5cvOG
2EzvnAMC91LuDUyllgqyHF8cKnCvqiQFChSIukR1VFOmTFEXFXfgft++fYGp
Bg4caCa5//77A5Pk1MC91HfU9JJyc+yTS33fTFuoUCGbCdujKlOmjLmrSpUq
2acdPHiwmTYwcK+KwaVLl7Y/lpowsESJEj6d8zM0cK8iy5b9ZLZt2+bUs2J1
Ef/ss8/UOzV16lT7szK7E0QsphD0Bu7fe++9sEe57LLLAodIfPHFF2aSKlWq
+GwsxTZ1Vp988kngWTncFviwPw0AAMgZVD3dZ4bY5557ztlG6llq0to8efLE
WnAnKSnJabLIlSuXTxxt8eLFqkwSuCSfqX379mbamjVr2qcNpJpcApf9jSqh
LjBrA/ehooHVqlUz00otzD5tTuUscOzyH0fpyO6Be8uJvtWcimvWrInjWD6B
+9GjR6uHOdQUEOYcdJE0BO7ffPNNm1Rq5kabQcQ5NXCvlm6/6aab0pLcP9oS
1Zw5c9STM2HCBPvkalEb/8D99u3b1bGef/55+2OpxSDk2fOZIzQzA/dqEolI
aue3tC+eIl8otYK85Tz5jmPHjqneZYHN1ypwb9PA6523U+5GYCrVkOgzSuXo
0aOqofWJJ54I3L/LnX/YkTt37rgbWoEcbP/+/WZuI1nHjh07om55+vRpZx0l
eZt++eUXNZyzb9++sQ4xatQom4xI9Va68cYb7a9iw4YNKjtKx6KCipoVLVo0
viXmE+oCszBwX6NGDfvz9C7VPXnyZPvkOZKUnM0b0qRJk8Ak2T1wX6pUKZtU
48ePN1O1bds2jmP5BO69Y2BDlb29Jcb4Avdly5a1SaXm5rIZ4pFTA/eq45NY
sGCBfXI1nXgkZHOZSy0sGLHrdeOaMWOGmdY/cC8v72WXXWZuH6pvtrcDsE+P
qQwN3KuSRpkyZQInBLOhprsX8uukJbn/uAxv4N5/nnzHnXfeaSZp2bJlYBIV
T5dnwGdjqVWZG0udy75PnTxgxYsXN5MHzkQEAABykiVLlpglgRIlSsSag/Gm
m25ytlm6dKl3Sr1Ya+G5q+b5x0pUsCBi3bLhUKvA58mTx744FEjVHH2GuvhI
qAvM2sC9z8hHLxWkFpbz9+Zg99xzj3lD5HcJTJLdA/dffvmlTapy5cqZqVas
WBHHsXwC996pFy3XaHOoxTLiDtz/85//tEmlsmibhpccGbiXnFb9at27dw91
dBVplep22FW8vc0OixYtsk8+adIkM61/4N7b6iWfbPtjvfXWWyq5z8osmRm4
NxdSdNWvX/+zzz5LS/heLdEeCbP6rUO9aIGDetTjZDMn7fr169VJ2hQA3KWf
Hc8991ysLeVpVPu3X0tCLFiwQCVfvHixfXLgwqGmtojVq8rt6+ssMaayZZ/l
ctxRYz7BjqSkJDWE33K0rOPUqVOqt5L/1L6hqKjZzTffHMdOEu0CszBwHzhF
sGnNmjUqJ+/Zs6d98hxJBe5tus1n98C9VARsUr355ptmKv9pomMdyydwLyVP
dUPuu+8+20tKSfn9999V8vgC95ZtHVOnTjVTNW3aNDBJTg3cqwWkInYTvrm8
PS5C9SN1edfACrUooeou6x+49/b18l8HR1HL3Is33ngj1sYZGrhX/U9E4cKF
//rXv8YanGXJbUB2XHzxxaH646msRrzzzjs+26vAfaFChWwqie70sA6baVH3
79+vDuSzsVRXzY2vuuqqwP2b1HoKDRo0CJUcAABka97G8KiN/Lt27XLaMdzV
FdUYwFiRlHvvvdfZwKfROMVYIMlRoECBUE3xL7zwgirUWUb6bKgmF/sVskwJ
dYFZG7i3n68yxdNDNRJv1+ts4ejRowsWLHjmmWe6dOkit1cK+TdGo0ZSz5w5
M3DP2T1wb9nlu2rVqmaqwOXJoh7LJ3CvJpHLnTu3z2BkrxEjRpjJ4w7cW3Z9
UfOl29yNHBm497bePPvss6GOrnpcRMJ331Kdbex/RIca+uEfuFfh2kjIRjPJ
YFVynxakzAzcC/nhItGUL19++PDhGzdujGOfKpcT8+bNC7WHpk2bqj34t3Gp
wP2UKVMCD6HWayhYsKDNiann1uexV1lTJMzqnCnRJgQYNWqUfXLgwjFhwgTz
TWnYsGHUzXr16uVs4MzxdejQoXz58pkJo0ZS3IyiaNGiPlE/Nfu3ePrpp0Nd
RbFixczkjRo1CpXch4qatW/fPo6dJNoFZmHgPtTCaklJSVKsNZPXqlXLPnm2
s3bt2jfffLNfv35t2rSRYlXUCpeKYPpPhuzI7oH7jh072qSaNWuWmSpwCaeo
x/IJ3LvjPlyh1iaT+6ke5vgC95ZdX2bPnh32buTUwH316tXNtGHbu7ytRvF1
3xozZozaj/9yUcrmzZvNtP6Be2+HZ5u52V2//vqrSi4FgFgbZ2jgXm5+yZIl
Ix5S/GjVqpXUpuUbEXafp06dUqWXsJ8V7wfdf4kNFbgvV66czVHUHGU2fapV
76CLLroo1pbemyA1QZuzcqkJAeS1CtUABQAAsruePXsGFofcTpgPPvig8y9f
ffWVmSp//vzeVYOl1lmkSBFnA/8V01QdQQo/TcNQySMhx4v5U00u8Y34TqgL
zNrAfawpHaIaN26cSh5qYazs4vvvv+/SpUuhQoUi4V0IgXvLds5rr73WTJXu
gXs1oj9wzTtFNQfFHbi3bH2qUaNG2LuRIwP3KlASsV5rwOWNF4fNflXHLbF3
71775Crv9W8S9M4LIT+r/bdGBQvEyJEjYx0rkwP38u3wRslN1atXl2zq22+/
tR/NoS4hEjJmnWL0TnT5L0uhAvfybAceQgXuS5YsaXNijz76qJnKJ3AveZG6
hIYNG9o/Mw0aNFDJ/VvVgAuWFGbM0dy5c+f2fgvOnj1bqlSpyH8uMdasWTPz
FYu6arBbtvefE9i7dEu1atVCVUkKFChgJreJZlpSxaT4Rnwn2gVmYeB+2LBh
oU7VrbM7/vjHP4ZKni0kJyfLY6bCi5YuhMC95WpBH374oZkq3QP33mDouHHj
bC8plXqY4wvcu61e/uK4Gzk1cK/m9LZca8Ck5kuJL/sdMmSIen5s5id07du3
z0zrX9/3VhJvvPFG+8+Nt4Z4xx13xDpWhgbuU1Jn+1H331S4cOG2bdtOnz7d
2+Qbi5Rw1E7CxqxVJwpxzz33+GyvAvfy9bc5igrcv/zyy4FJ7AP33ptQunTp
UGWSyy+/XO0hjdMgAACA7EVNcyplA2/nWHe5QHcGVNlGSh1mwmnTpqlU8+bN
c/4U2LtSLQ6Vdi+99FJ63R/V5HLw4ME4dpJQF5iFgft8+fKFOtVXX31VXbgz
/ijHSE5O7tu3r1pkOZQLIXDvE0w3xRGqDnUslRX4L2fmpeagiztwn3F3I0cG
7r2jiW1CpSZv6H/ixImh9lCzZk21h1CT7atvtH+T4M033xxJVw8//HCsY2Vy
4D4ltTdgr1691DzGXuXKlXvsscf8A+iOdu3aqbRr1qwJdUre0P+yZct8tleB
e5u3TAXuy5QpY3Ni9oH79u3b2zwJ9uIbJwtcCOrVq2e+LJMmTVIbLF261PmT
ucTYa6+9ZqaqUKGCt3uSG+r9+OOPfU5A7SrtLrnkkvS6OfZxvWx0gVkYuA87
1cAVV1xhJpfCZ6jkie/LL7+sUqVK3E/ChRC4t3zpMjpwr7YUr7zyiu0lpbr0
0kvN5PEF7jPubuTIwP25c+dUg0bYKcFTPD+c/N+we0iJVjJfsmSJffKDBw+a
af0D94MGDYqkq7p168Y6VkYH7lNSn0y1BJhX3rx5mzdvPm3atMAx+N6FAMKe
s7y5ag/+c+CowP31119vcxQVuI+1AqzJPnDvvQlpt27dOpvrAgAAOcOpU6eK
Fi1qFgaWL19ubrB3715nwrFixYqdPn3a/fc+ffqYqdq0aaP2fP/99zt/Cpw3
NX/+/Olbngk1o5q/dAncJ9QFZmHgXu5DqFOdPn26uvARI0aE2kMiO378uLej
dYkSJfr16/fee+99//33W7du3eZx++23m9sTuHdldOBe9UK3DJ+5CNzHLS2B
e7WqSyT8XOhTpkxRe3jyySdD7UHNBSFOnDhhnzxU4N57rDTymSk08wP3DnmY
mzRpEnjmuXLlat68+Q8//OCzK+9+fv7551Ano+Lj4sMPP/TZPgED9zY3MxTL
RXKBC5CaSMqbn/ft29f5k5mj7t+/XwVEpIhoptqxY4fTo0nqLP5t6d45hNNI
jmvWDdMiXQL3iXaB2ShwX7lyZXXhOWk+XqnGqmK8XGCjRo1eeOGFL774Yu3a
td4K18KFC83tCdy7MjpwP3r0aHVDJk+ebHtJqQjcxy3uwP1vv/2mfrU4lttQ
UePcuXOHmmzf0aNHD3Um/l1qlVCBezVzadpdeeWVsY6VCYH7lNSlG0eOHKkm
T4iqVKlS8qr6ZFby5VJJ7r///lAno+LjokaNGj7bJ2Dg3nsT0k6+WTbXBQAA
coz77rvPLAw8+uij5l8nTZrk/Lsqay1ZssRMVbBgwWPHjrl/PX36tLtKYOAS
1Soyddlll32fNpYNIzbSJXCfUBeYjQL33pCZVBBC7SGRdevWTV1d7969AyN6
ar1sAveujA7cq3kzwg7CeuGFF8zkBO7tpSVwP3jw4Mh/8h+N6OUdvmez+J3J
nbIm7I/oUOvO+zcJ3njjjepYX3/9dVq+NVu2bIl1rKwK3DvWr18/dOjQihUr
RnzlzZtXsrJYk+erMLrwud6o+vXrp/Ywf/58n+0TMHDvvQlyCWl5ZuSnsTlD
4AK0bds2lUGZ1Ypz5865o57VEmO33HKLmVAVydx4U4cOHfxP4Pnnn1fv+/Dh
w9Pyvov0Cu+mS+A+0S4wGwXuy5cvbyYPW2VLZBs2bFBR+7JlywbGPn766Scz
CYF7V0YH7r0F77AT7rltUA4C9/biDtwnJyerX80ybGpS8374xEN9DBw4UJ3J
ggUL7JOrdef9A/e9e/dWx3r99dfT8rlZvXp1rGNlTuDeIb/m7Nmz77zzzsDB
R9WqVYtV7P/mm2/Uxv5L+XgdOnRI7UE+jj7bJ2Dg3nsTWrVqlcYyiRzd5roA
AECO8fHHH5vFiXLlypmt3G40RzVHnz17tmTJkmbC9957z/2r20392muvDTwB
1VZQvHjxdLy6NEqXwH1CXWB8gfuPPvrITBVf4D5PnjyhTtU7SfWrr74aag8J
66uvvlITPlsuLEjgPpaMDtxfffXV5pZh130YNWqUmZzAvb20BO69w3ZmzJgR
6ujeGTvfeOONUHuQGrraw/bt2+2Ty4fVTOvfJKiWQhaHDh0Kdbb2sjZw75Cy
yjfffDNw4MCyZctGYuvdu3fU5KrXoli1alWoE/COtVmxYoXP9gkYuPfeBOZg
BDLODTfcYL5uU6ZMcf8kX2rnH70DFVV5uGrVquZf69ev7/z7+++/73/0t99+
W73vL774YnpdWhqlS+A+0S4wvsC9WmEnvsD9yJEjQ51qiRIlzOSlSpUKlTyR
NW3a1Lw0+VFsPnME7mPJ6MC9KvZHLCZvVFS0kcC9vbSscV+wYEEzbaVKlcIe
vUiRIuYerrjiirB7EE899ZR6fswmykBSRzPT+gfuhw0bpo61cOHCOM7ZRmYG
7l1Hjhx56623pOrts7DjpZdeGjV2v2XLFrXlXXfdFeroO3fuVHvwbwRIwMC9
9yawoBgAAAgrOTlZxYa+++47508HDx7MmzdvJHWpO9lMJVRN1uZAjwceeMD5
R5u5zVUrVnzdazNIugTuE+oCVeBefkSbVNOmTTNTxRe4j4ScI1rFOiPh16dO
WO5CEo7ChQtbPloE7mPJ6MB948aN1dMYatz0E088YaYlcG8vLYF7qX2rXy1s
558nn3xS7cF/LnSvXr16qT2EagdTE4/4Nwl27NhRHWvHjh2hztZeIgTuXefO
nVu0aFGnTp0KFCgQieaDDz7wpurfv7/azDI+4vIuEL9p0yaf7RMwcO+9Cd98
843NIQDEQZVsJU9w/+Su7fLMM8+oVHv27FG9PdeuXav+pKY+i2r+/PnqfQ8b
Ecs46RK4T7QLVLVIyy+ymrU+vsC9/F/78zx//rwakx7H+tSJafv27erdGTx4
sE1CAvexZHTg/osvvlA3pE+fPraXFG3oN4F7e2kJ3Ks+tJdddlmoQ8uL4LQ6
umyG/3h5q36hZmxQL75/4N7buzuw+1zcsiRw75KXaMyYMWoUg/kMexc1OHLk
iNqsSZMmoQ66bt06tYfOnTv7bJ+AgXvvTTBLfQAAAJY6dOhgliiGDBni/Ltb
ROzSpYs3lVp7111a8cyZM26/fSn9Bh7d2/SdOFMApUvgPqEu8LnnnjPPJOov
66UG+8QduN+/f7/9qbrdP1zffvutffJEplbfa9WqlWVCAvexZHTg/vHHH1dP
Y6gYn9Q0zbQE7u2lJXD/+eefq1/N/bpZ8g6p/vHHH0PtYfLkyWoPb731ln3y
ESNGmGn9mwS9Qz8yLs9MqMC96/Dhw//v//0/NeonEqP15qWXXlKbhZ2QoW7d
umby/Pnz+y8wnYCBe+9N8J/tH0BabNiwQWUaTo3g/Pnz7vK+UZcYq1evnpnw
ySefdP7dfYVtxrKpo4v+/fun7wXGLV0C94l2gaoWuXHjRptUavB7fIF7+3Jm
SmpQRt235s2b2ydPZBMnTlSX5g5P8EfgPpaMDtwfPXpUDe+1PIRj8+bN6n4S
uLeXlsB9o0aNzLS5c+cONV5j9+7d6ocLO0DbsWrVKrWfWPNuReVt3vTZWC0l
KV5++eU4ztlG1gbuXUuXLr3pppsiHt6l6CRnU9+yypUrhzqWO4OrS6p4Ptsn
YODeexNuvPFGm7MCAAAwqciIWzm97bbbnH+J2rxsLmTvmDt3rvz7Z5995vxf
NZdjLN5241DVhAyVLoH7hLpA1YJhWSeS2quZKu7AfagLV2t6Sqk405oyMpT3
tgwfPtwyLYH7WDI6cD9nzhz1q4Wqm6vTI3BvLy2B+6SkJDVhprxBoY7esGFD
M7l88rxjCvz9+OOP6skZMGCAfXL1yvs3CS5evFgda+rUqaHO1l5iBu4da9eu
LV26tLoVe/bsUZutXr1abePfIuR1ySWXmMnlafHfPgED996bMGbMGJtDAIhP
9erVzTfunXfeSTEanGONMRw3bpyZym2RdovKNv2Ozp8/X6pUKXM/TZs2TcdL
S4t0Cdwn2gWqk/nhhx8Ck3hX9Y0vcB/qwpctW6YOKrUA++SJTC14nStXrtOn
T9skJHAfS0YH7sV1111nblyyZEn7srda3S9C4D6MtATupQit7nyors5LlixR
yZ9//vnwV/C/A4gKFy5s7qdBgwb2yaUMbKb1D9wfPnw4d+7c5vahZocIJUEC
9ymp66U+8sgj6sfq1auXd8u77rrL3CZv3rynTp2yP9ALL7ygjvLZZ5/5bJ+A
gfsUz00oVKhQ2JYEAACAY8eOqQlmpbp65MiRfPnyRVLn8Y7VY1atjtqtWzf5
x969ezv/d+jQoTZH98Y1ws5mnJSU9MT/GT58eDoWh9IlcJ9QF6jWf7Ts9ilV
HjNV3IF7m8Kw4/Tp00WLFjXT3nTTTZZpE5wKxIjx48dbpr3zzjvNhATuXRkd
uJc/qRBwy5YtLa/IXXPEReDeXloC9ymeyHvFihXt0545c0blQvaTY7jOnj2r
gsg2zb9u2ssvv9xM698kKJ9y9aQ9+uijYU/4qaeecj83UgyItVlmBu5Pnjx5
JJV3yZ5YvBMmL1u2TG0jX1LV+TDU76vWwYxYlHkSMHDvvQmW8/CYnn/+efeZ
2bVrV9jkwAVFla+cDrSDBw92/m+sJca2bdumMpwtW7bs27fPGZp60UUXWc7l
1a5dO3MnpUqVOn/+fKjzl9zVfd+XLl0aKq2PdAncpyTYBVaqVMk8mb/97W+B
SbzRq/gC91J4sD9P1S1E/P3vf7dPnshUUMY/DGf6/vvvzYQE7l2ZELhX3S0i
YRbxUeWfCIH7MNISuHdH7rjefvtt++Tjx49XyeUdDH8F/0u1lshX0r4F7447
7jDTBuYYqpNJYA9er6lTp7pfHJ+uDhkauP/tt9+cepbl9pJr1a5d2zyfRo0a
eTfzRt5D/aZqZcl8+fIdP37cZ/vEDNx7b4L/qmpeP/30k/uEhJq1DwAA5CRt
2rQxSxQjRoxwI7w+JcOPP/7YTFWsWLHk5GQ30GBZNpOyX7Vq1cz9SJk51Mmb
E1U1a9YsVFp/6RK4T6gLVJN6yU8W2KLlNgy64g7cd+zY0fI8vaM/nn76acu0
CU7up7o0d8rTQHXq1DETErh3ZXTgXnTq1MncuECBApYZwquvvqp+cQL39t57
7z3zxCwzH9eLL76obv66dess03rX2XSGRoblHYSyatUqm4TeBvzAJsHWrVub
29t3EnCY8wxXqFDB5+uQmYH7l19+2TmK/aK9Z8+eVcPhFyxY4N2sV69e5jaF
Cxe27xvgnpVr5cqV/kkSMHCf4rkJxYsXtxyQ6JBs0C0hFC1aNNRoGuACpHrz
OmvTuxFenyXGbrjhBpXrvvLKK85/21cr3n//fZVx2UfEHDfeeKObNtSaQf7S
K3CfUBdo7ipiN4C0X79+6vzjC9yLtWvXWp6nFC3MhFLylGfSMm2C69Onj3lp
8rWy7P2uZmkmcO/KhMC9lEVz5cplbj9o0CCbo8iPK8UkdT8TLXAvlTIziVTZ
bA6UOdISuJfnVnVUbt++vX1ylQvJGxf3QJV58+apZ2Dy5Mk2CQ8dOqR66QcG
7keNGmVunzdv3lCthWfOnHHXT8ydO/e+fftibTllyhTzQG3btrU/SqCSJUs6
u7XP+dX7UrduXe82O3bsUP3Jn3rqKcv9y69/2WWXmWnbtGnjnyQxA/femxB2
Kon+/fu7aZkVDQCAC9b06dPNEsW1117bqlUr579nz54dK1VSUpIKbQ8dOtT5
j4oVK9qPcXjzzTfNnUiZ+fDhw/Ynf/fdd4cqbtlLl8B9SiJdoHfpt8CGnWef
fVYliTtwL/fTcr2zhx56yEwoJV7LenfikzqaKsBbjnCU103NjEHg3pUJgXs1
REIMHjw48BCnTp2qUqWKSpiAgXs1PEG+CN5tli5dOub/7N692/IS0kgNnY46
lkGyU/fE5s2bZ/7p2LFjbpOIw76fjGo/L1euXKiApmvXrl3qlZcs3SZh06ZN
1ZMT2CT4j3/8QyUJjCab3FGfkaAouZomMeq0unJo93cJNWGm4obIQ610cNVV
V5lnGHWO4g0bNqhZLj/88EPL/au+LjbzEidm4H7jxo3qJnzyySc2R3GYbXdd
u3a1TwhcsFSpwK06+S8xpgIEdevWbdKkifPf9oOwzp49q4aBDxw40P7MJSd3
A2pXXHFFOk5xll6B+4S6QBURCPyEHT161A2guOIO3MeavUGR4pwzw57Lvoya
+EaOHKlui3zybBLK3TNTEbh3ZULgPsUTxv3DH/5w4MCBwKNMnTo14pFogXs1
mcOVV17p3UaeAbf87NMQl+7UAIHFixd7t5F6lntuqjlLNRkVKVJE8jSb4+7f
v1/lQmFnpzTJV6B8+fLm3ipWrGhTg3O/xeaD559E7oBqLXzttdfsT9Vcie+W
W27x2XLWrFnmUZo3b+7dZt++fe5Ps2jRIvvTcL879pU1dT6tW7eOulmXLl3M
za677jrL9mFv5/nly5f7J0nMwH2K5yaEmkQ0KSnJ7cAghZMtW7bYpwUAADnJ
b7/9prqYOoGGAgUK+Be5O3To4E0Vse4a7ZDqSbly5cz92CdfvXq12+Z8+eWX
W8aFLaVX4D5xLvDcuXPqovxX9d27d6+aLDqShsC9eOaZZwIT7tmzR8rAZqqw
K1MnODV9d/Hixf3n/nJ4myMI3LsyIXCf8p9daCKpA+W+++47/yTe0daRhAzc
d+7c2UwyceJE7zb33nuvu4Fly2faqf4SUdf/NUeveCeHVw+zvG427Uj79+8v
VKiQmXDChAlxX4UZEI+kVr0Dg7aqN53DpknwT3/6k5nEfvr3AwcOFClSxEkl
5YGdO3f6bKzu6oABA7zbmO3eaZl31w3cX3LJJZYDuuVLZ464lw+KfI+ibikf
F/NCatWqZdOmtGLFCvXTLFmyJDBVYgbuRdu2bc3tb7rpJsuGtWPHjrmj2+Sp
tpxKArjAPfHEE+Yb51ad/JfbMGdEcd44Z7KLfPnyHTp0yP7or732mrmfwoUL
2/eMNSeiHzdunP1BA6VX4D4lkS5QTUEvJTr/btvqwXDEHbgvUaKE1O4DE5qj
+XJeTu6dvnv06NGBqc6cOVO5cmUzFYF7V+YE7leuXKm6vLZv396/ZCKvuVpe
ypFogXs1hkJqJd5ttmzZ4m7QqVMnmzNJF6q/xPvvv+/dxuxUrHKYI0eOqNmu
Ro0aZXPcQYMGmalKly6dlJSUlgsxA+KOwNWsVq9ercZHROwW11ArO1SoUMFy
8q6zZ89KpcNN6L+WilSjzKPUr1/fu82CBQvcDaJ2qI7FDdw/99xzlkmef/55
83yGDBkSdTP5mqh5O22WjBG33Xabmermm28OTJKwgXt5tNRNWLhwoc25pfzn
TPuW3f4BAEBOpZqUHYGzEqkFiF0rVqwIdfRly5aZRZr8+fPbzLQvpfqaNWu6
qV588cVQBw2UXoH7lES6QLX+Y9GiRWOttSTVMWdmzkaNGplJ0hK4v/jiizds
2OCT6ty5cy1btjSTFCxYcOvWrfFcaqKSapG6LYHVK3n2VN+PCIF7Q+YE7vft
26eGb5cpU0aqY1E3Pn/+vLNgX65cuVTEPwED96qDQdSVKdwOJ1JFzbR2xT17
9qgb7t3mnXfecTfwjtGQU1UzDPfr1y/wuGYvhUhqHnj27Nm4ryI5OVkNAC9c
uPCnn34aa/sPPvjA6UqnwsqWTYLqsZkzZ05gKsl4zRVzAlssVb+Cbt26ebfp
3r27u4GcVeA5xGJOSm/5Efz888/N04s1EiQltXNaqVKlzI0DZ9SUJ+qmm24y
k/Tu3dvmrBI2cC85m5qR8pVXXrE50IMPPugmSd95O4Ec7Ntvv41EE1gvqF69
ujdV2CW0JLdXTeLy8toMLTdXrildurRNj1N76Ri4T5wLXLdunfqxfIp/06ZN
k+KiZMVXX321mSTuwL3o2bOnf6rly5erfvuSq4e7yMQm32tVbi9ZsuT+/fv9
U40dO1bdSQL3rswJ3Aupe6o7079//1jjpnft2uVkj40bNy5WrJiZKtEC9/L7
mqPL8+bN682dzKWyQkVg00gtgxU1iOn2aZHMyvtXtVjJJZdcEtiG89NPP5k9
pXPnzh11pH9Y7du3N89EclepQcTq+yF1eacYrKpdNoF7+VKoNTGfeOIJmzOU
urabpE6dOv79UlTPPflMeLdxV88RM2bMsDkHhxu4l1qG5RAh1TboM72bamGQ
M4/VldqlFmOVWq1NLTJhA/cpnilcqlatatOtbuPGjYULF3aS5MmTJ1aLEwAA
uEC88cYbEY+oEyabjh075u2eWrZsWft58l1qOjspQ/os9ZiSGhc2W2akrpSW
wEpU6Ri4T0mYC1TL3EdSZ4OcNWuW2VAghXYp8MvvKH+VClp8y0yrwH3+/Pnv
uOOOSOqM0+vXr4+a5NSpU6rOGMmJyznJW6OiJFJLnTp1aqztf/311/r160c8
CNy7MidwLxYvXqxyPKmvDRkyxOyOkpycPG/evMaNGzsb9O3bV620noCBe1VH
9q5LeODAAbd117KZLr2YI2hy5crlzYc7duzobhC1G5L8o8rMo04p4HryySfN
jUuUKLFnz540XoXk9rIfc7dyLZLdffvtt+42ksMvXbrUbWtq3ry5GmFheefV
BIbyxPo3gp0+ffqBBx5wt69atWrgpARr1641D1GzZk21gWTm8mVx/ip5vs1p
x2IG7gsWLPjFF1/4b3/o0CFzmc48efL4r3G8aNEic654ec59bpfcKzXnobxu
liODEjZwn5I6LNG8CXLT/GdnPXfunDk4tHTp0jbT2AJISQ3VqYl8I6lz+QYm
VGUzR6iJeR3ytqrFiPv06XPmzBmfJFKqcQs/kldIjhH2oP7SMXCfkkgXWLt2
bfV7yRdERbKkTtSjRw9niv7JkyerJPEF7tu0aeNk6YMHD4514VL8UJURKW4d
OXIkHS47kah5DyKpy0z4fLCmTZumxnpHCNwbMi1wL8VI76CSOnXqvP/++2ah
a8uWLU899ZRTXSpatOjmzZtVV41EC9wL1Z14zZo1agNzOaovv/zSZp/pQk1X
IhVYtYEZPu7cuXPUnajlDqVA7tNVZufOnRUqVDC3t4x6Bzp8+PD111+vnh+p
WH3yySdme9rKlSulzOx0pZCvsJoPwSZwL+QXlOqJmXD8+PH+SaQe6i7LIkfx
H9WSklpDdGdFi6TOtOPtWuaOfJE979271+bMHeYSLfLtCJzc7NVXXzUv1n9u
NznzW265xdxe3muf7gH/+te/VJ3dshNCIgfu5Sa47UKOBg0a+MfuN27caI7Z
kVzO5nIAAEAOdvDgQVVRzZ8/v01vQHOYnqN///5xnMC5c+dU0FYKQiNGjPBW
rk+fPj1z5kyznH/VVVft27cvjoMqUltvalDzGjVq1Mj8a9i5yxLhAp3TUHMp
OwoXLiwVySZNmtSoUcPt+Sz1guXLl6tYf/Hixc37MGvWrKgH8gbupXbmhK4K
FCgwdOjQdevWuRsnJyfPnj1b1WRFhw4d0r0/RiL4+OOP1bLCkdRo6TfffGN2
vD906NCkSZOc+JfcHLWq8rXXXuv+Cg888ICTZOnSpeavI5VQM4k8VOZf3XhW
fKnSxfTp031eOqnruX8yp+zbsWOHmUpV8WrXru3+yZy97cEHH7zRoI4lVTz3
T97ItUuq/N7eSpHUDuFXX311mTJlzJEUUomW19k+cJ+Zd8OUlJRkTm8oF2iu
cyd/NfN5mx4j6WjAgAHm5aj1aj/44AP3VfKZSU+ecLfXuuPee+/dtm2b2mzD
hg2tW7c2NytWrJgZW0+L1atXS+bpfXIKFixYpUqVP/7xj+YSIfK+Hz582Jz2
MBKmy4QaLya3qE+fPtu3b1ebnT9/fuHChWbGW6pUKf8eZS7Jf8xDmJPhS6Zt
zr47cuRIy9OOygzcR1K/SoMHD969e7d3y1OnTsl7ceWVV5rb2xz99ddfV2Fr
eVO8n+avv/5ahVQqV668a9euWLtduXKl+WKqX/+6665z/2SOqJo6dar772pd
FXlCzB3+8MMPbqq77rrL/Xd5ltRJmqliBXHeeustleHIOxJ1UYxly5bJu+Zu
VqRIkcClJwGYVO8a8dhjjwWmko+ISiXvbODw4Vi7Usup16pV6/PPP/eO/dyy
ZYuUndwQg/xHYEjCUrNmzdx8qWrVqubJlC1btul/CrveSiJcYErqyFl3zyYp
ZktdTHJ4M7tu0aKFfJTVV8Yswt1+++2xDqQC908//bTbt0r2IF9GM1AiGbts
r8baS9ExR+bkJ0+ebNCggbr/UrGSooW5xoQ8GFLYc3pOyk9mRk6F1IvNp1E+
gk6q7t27m/+ujiJlNvdPZgw0vlTpwvKlu+OOO8xU8ji5f5Kii5nq0ksvNa/F
rdrLzTQrXM5YAJe8m+ZfY81AlZyc3Lx584iH5HvyC0qdy1zOT8rSTq9L+8B9
pt0NZcyYMWYqKWuZ+ZJkU24186qrrsrMZpBff/3VzBbkcn7++Wf3r7///rtZ
9ou1RJQUxVXboNQsZs+ercLB8uNKsVNNj9C1a9d0vN6DBw+qH8gh1ygZr9S8
zIqhnOSaNWskibmlZeA+JbVxQMXuJbs2S+ku+Uezpikn8+GHH9ocomfPnub+
R4wYYf717bffdv/UsmVLy9N2qG+l3LT58+dH/SHkeXjooYfMj1qZMmUCO7fL
XTVnEBXVqlWTirn6HB85cuSZZ55RHyb/xU2kKOW+bnXq1FG/nfkyuqvDy0HN
f1d9/OTE3D+Zy8B99NFH7r+rELzUH80dylMd9VSlUi95nZlQDv3OO+94+37L
lnIfzGko2rVrZzNrEAAAyPHUylYtWrSwSeVdijfuvsHnz58fO3asGfaKpNbO
6tWrd9999w0cOFDKirfddptadb1+/fqWA1EDqYmM/EmdLttdoGPjxo1qcuCo
5MScPq7eQfqmWMvWewP3KamrUZuDiN1Yp4oXOO66665Yc+LlAK+++qp3TEck
dVq566+/Xn50qVG6saQaNWpIrUdN4Ga65pprnN3OnDnT/2c1LViwIC2p0oWa
icKHufKaGvDrw2znNBsc/FWvXt3nnH/66Sd5Z/33ILVad1JH+8B9Zt4NRbUj
XXTRRXffffegQYO6devmDp0WDRs2zOS+NDt37lRZolT/+/bt269fPzOsKSfs
36Vk5cqVKqQrv5FU87t27frII4906dLFOzRDXquogcu47dq1q1WrVoE/k9TQ
f//995T/XK8wEnKug9mzZ6suHJHU3imdOnUaMGDAX/7yl9atW6vRdpUrV461
coqXGmckmVXz5s3lTvbq1ctcHFbuuXMtcZPcydvNST4Z1157rfxq8iQ89thj
Dz74YJMmTdTampIq6qIPUc2fP1+1H0r+3Lhx4/vvv18uqn379mrFW9G0aVP/
T7M52ak/c1kiNaukD7OtW528D5+v6ieffOLtW1KtWjW5fMnN5FbLN8hd1N4h
mYPNuj8ATMuXL1cv2j//+U+bhCojatSoUdznsG3bNm93WfkoyKdBSimS70nF
RMpCZvYr31mb8WiWvBm7j8BFTBLwAh3eThpR1a5d25lA2DtI3yVfpVhH8Qbu
pahmThYtaZ1Yp5rKyVGoUCE3GJ3zHDp0SIWNHPLTV6pUSSpcUjRyo71SMnzl
lVeknO/zY7377rvOntUqSD6ktOmeT3yp0oXlSyfPg5mqQ4cOlif89ddfO0mW
Ll1qmUS89957sU5YSiyjR49WIVEvKWq6Wah94D7T7oZy5MgRVZSSF1MyJSmc
S1HWPSv5j/StcdtQ+ZXUI+R6pTJ47733mvOG+S+meebMGcmRVJ8lKV5KDUhK
kr17977jjjtUzU5K9VIFjmPGTn/Hjh2Tuxq1lckkua4T2I07cJ+S2lkl6lw6
Upt++OGHpdLasWNHyXDMv0q1ZdGiRZb7lwqaGcyNpOYPslvZed26dd1/lG0s
O2C7ouZI8h41a9ZM6nTyU8ohpPLoXaynatWq3j7hUcnXzduK9cc//lH+UX6g
nj17SpXK7L4eSR1S9M477/jv1r5hx53MX76MlkkaNmzoHki15PgYNmxYrLOV
p9GcJNC9zNtvv7179+7ylvXo0UO+R6rrQp8+fXLkICYAABCHSZMmmeWEN998
0ybVb7/9ZhYwLr/88jSWLqS0KQUYm6KR1CAmTpyYjoWZjA7cZ/kFuqTwr+bT
VuR3XLhwobNxOgbuU1LDZ2oBRy+pdDz//PM5vpi6fPnywNYbqbZLpcmZuZrA
vZsqawP3KakdtmfNmnXnnXeq6lUktWlC6l/mcm9q+PMjjzySCHdDkddNnjT/
5A0aNIhvcF8affrppyomqxQpUsRmwMLx48eHDh3qDWd7FStWbNSoURk0Yalk
rZ07d/aehlTe27Ztu3TpUnfLjz76yNxAnrdQB9q1a5ccKLDByjn08OHDLad8
d0nm79/sKflb4PSPNn7++edhw4apgeT+6tWrF3ZuEHm2e/TooXrWRSVnIgWk
wAbGbBe4T0kdbyX5gDdb87rooov69++fxl4ZwIVJihDmOC/7JcbMJSoiQcu+
BJLcYNy4cWq0XVS5cuVq3ry5fc8uGxkduM/yC3Q99dRT/plqp06djh075myc
XoH7lNRynZR5AssADRs2TN8+igkoOTl5wIABgd/3ihUrOnE0AvdmqiwM3Du2
bds2ZMgQNR1c5P/630o2aE4ooebX8pk9MqsC9ympQV411FcpUKBAuncisiFv
Srt27fyvS7LKwGXKxT/+8Y/AXu6Oxo0bZ2gXUKmS9+3bV/VVjqTmqLfeeuuM
GTPcqaj27NljblCqVKlQB5JsfPDgwTbVTMmWu3btGnY6zb/97W9Re165Lr30
Urf5zp58KKUS3aJFC5vCv0OuccSIEWGrjfKmV6lSJXDn8mJ27Nhxx44dgTvM
XoF7h9zqwIZQR/Xq1dN9WSIAAJCt7d27t73BnEHO3/Dhw91UEyZMSJeTWbdu
3dixY6Ukr+pfUkerWrVqly5d3n///XSPqvzyyy/fWwvbnVXJkgs0nTt3Tqoq
rVu3NtfMkqJyjRo1xowZY9bIpM7rcx9iVTpiBe5TUuctnDx5coMGDbxVZqmV
//d//7dl990cQH6FuXPndu7cWc0imC9fvlq1aj311FNmY9rWrVtj/Qpr1651
tjl8+LD9M+zGXOJLlS4k27E8rhkylqqiZarNmze7qY4ePXrEjk2LhOP48eNy
8xcvXvzBBx8sWbJEfiNvhxPJIc0f12cUcGbejaiWLl3arl071bghedStt976
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
LurM5/v37x8yZEjBggXdjfPmzTtnzpzMP2ckAjNw72SGTzzxxC+//OLd8vff
fx8/fvyll15qbj9u3LjMP2cAAJAtELhHDmMG7sWtt9769ddfnz9/Xm129uzZ
xYsX16lTx9y4Xr16ycnJWXLaSBBm4F507Nhx7dq13s1Onjz57rvvVq5c2dy4
Q4cO3icNAAAAALI1qRY1/T+NGzc2K0G5c+duanjsscey+mSBcFTg3g3C1q1b
t3v37gMGDOjXr1/nzp1r1qxpTo8vSpUq9fnnn2f16SPLqMC9myXKo3LvvffK
YyMPz3333degQYO8efOa2xQqVGjmzJlZffoAACCBLFy40KxVlS9f3iw8VKpU
yfyrFF+z+nyBcFTg3lG2bNlWrVo99NBDgwcP7tmz5x133FGsWDG1TdeuXVlb
Cipw76hcuXK7du369OkzaNCg+++/v1mzZuaqZELq78OGDTt79mxWnz4AAAAA
pLMrrrjCW0uK6r/+67+y+mSBcE6dOjV79uyWLVvmyZPH8jkvUKBAnz599uzZ
k9Xnjqx0/vz5BQsWdOzYUZ4HyydHnrFOnTqtX78+q88dAAAkljfeeMOyOCGW
LVuW1ecLhLNp06ahQ4eWLVvW/jmvUaPGu+++m9UnjoTw3Xff9e3bV81g5u+W
W25ZunRpVp84AAAAAGQIAve4EBw5cmTu3LkDBgy49dZby5Qp4328S5Ysec89
90yYMGHfvn1ZfbJIIMePH1+8ePHQoUObNWtWoUKF3Llzqyfn4osvbtGixZgx
YzZv3pzVJwsAABIRgXtcCM6dO/fjjz+++OKL7dq1u+6668w1yBx58uSpVavW
I488smjRIqY3h3LmzJkVK1Y8++yzbdq0ueqqq/Lnz6+eH/mXhg0bDhs2TDbL
6pMFAAAAgAwklevv7WzatCmrTxZIHydOnNi/f/+2bdvWrFmzd+/ekydPZvUZ
IXuQR+XXX391npzdu3cztycAAAh08OBBywqXOHr0aFafL5AOzp8/f+TIke3b
t69bt27r1q2///57Vp8RspMzZ87I8+NUu3bs2EHGCAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAARFJS0o4dO1auXLlp06Zff/01vXb773//e8OGDevXrz9y
5Eh67RMAAAAAAAAAAAAAgISyatWqu+66q2mqM2fO2Cc8efLkvHnzevbsec01
1+TOnTtiKFWqlOxzzpw5oXboSEpKmj17dtu2bf/whz+Y+7zooouuvvrqP//5
zzNnzvzll1/C7hYAAAAAAAAAAAAAgERz4sSJxx9/PG/evG5w/P9j777Do6ja
Po6z6SQkkEQIoffem/QOhhKqQQWlSpViQYIIUlRAioIgAVEsCEjv0kU6jwjS
BRFBpBogtARIQp53Hsdr3HeTbLbM7pmZ/X7+8JLJzOx9z9lydn+7M48fP7Zl
w+vXr48aNSo0NFTZMCQkpG7dus2bN69Tp05QUJCyvEyZMgcOHLC9pDVr1hQs
WFDeVtpPpUqVpH1WrFjRfJ+Spk2bOto0AAAAAAAAAAAAAACasHnz5mLFimX7
/2wM7lu2bKlsUrJkyXXr1j158kT566NHj+bNm5czZ055BV9f37Vr19qy26lT
p5pMJmmT/Pnzf/PNN4mJieb7nDt3rhLfayS437Vr14wZM7Zs2eLAiQUAAAAA
AAAAAAAAAB7rr7/+6tatm5yA58uXLzAw0OHgvmLFigkJCRmuc+zYMeVc9/7+
/qdPn7a+z7i4ODm1r169emZXtN+wYYN2gvvPPvtMLlhSokSJVatWia7IVaQ7
TMeOHc2/mwEAAAAAAAAAAAAAcNiSJUvCw8OzZcvm5eU1YMCAO3fu5MuXz+Hg
/j//+Y+V1WbMmKHsuU2bNlbWPHr0qHzG/rCwsMuXL1tZs379+loI7m/cuKF8
LUHRq1ev+/fviy3MFXr27Cl1J42R6EIAAAAAAAAAAAAAwAjq1q2bLVu2cuXK
7d27V17icHBftWpV66s9ePDA399f3rO3t3d8fHyGq6WlpdWrV09ebeLEidb3
+dlnnzVv3nz48OG21Ok6CxcuzJaREiVK/PTTT2JrU1dSUlJAQIDU2ty5c0XX
AgAAAAAAAAAAAABG0KRJkwkTJpgH9A4H94MHD85yzZo1ayo7X7duXYbrrF27
Vl7B19c3sxPva82nn36aYXAvCQoK2rFjh+gCVbNr1y65r5EjR4quBQAAAAAA
AAAAAACM4NatWxZLHAjujxw5sm3btgsXLmS5ZnR0tLLzefPmZbhO586d5RWa
NGliy61rwcaNGzML7iWBgYGbN28WXaM6Jk6cKDfVrVs30bUAAAAAAAAAAAAA
gDE5ENzbLsvgPiEhQT4Tu2Ts2LHq3rrrHD161EpwL/H399+zZ4/oMlWgfK1C
GkrRtQAAAAAAAAAAAACAMbk0uDc/Vf7u3bvTr6CcJ1+yePFidW/ddeLj460H
95KIiIgrV66IrtRZygg2a9ZMdC0AAAAAAAAAAAAAYEyuC+6lvQUGBsp7lm4l
w52PHz9eufVDhw7JC+/du7dixYoJEyYMHjz41Vdffffdd9evX3///n0Va3NS
WlqacqIAK+rWrZucnCy6WKdERETIvbRo0UJ0LQAAAAAAAAAAAABgTK4L7rds
2aLsefLkyRmu07FjR2Wdc+fOxcfHv/LKK/7+/ulDcGnhoEGDrl69qmKFziha
tGiWwb1kwoQJoit13KNHj0wmk9xIVFSU6HIAAAAAAAAAAAAAwJhcF9zHxMTI
uw0NDU1ISMhwnUqVKim3vmnTpsjISOl/cuTI8fLLLy9YsGD58uVxcXEdO3b0
8vKS14mIiNi3b5+KRTqsYcOGtgT3QUFBly9fFl2sg86fP6800qZNG9HlAAAA
AAAAAAAAAIAxuSi4/89//uPt7S3v9ttvv81stSJFiii3Lp9Xv0qVKpcuXbJY
bf/+/eHh4UoUfvz4cbXqdNiLL75oS3Aveemll0QX66CffvpJ6aJ9+/aiywEA
AAAAAAAAAAAAY3JFcP/o0aPy5cvbElsrcbwsLCzs2rVrGa75ww8/KKdtL126
dEpKiiqlOmz06NE2BvdS2T/99JPYah2zc+dOpYtOnTqJLgcAAAAAAAAAAAAA
jMkVwf3IkSPlHVasWPHu3btW1vTz8zPPuCdPnmxl5Q4dOihrfvXVV6qU6rD5
8+fbGNxLevToIbZax6xbt05pISYmRnQ5AAAAAAAAAAAAAGBMqgf3CxYskH8a
X7Ro0StXrlhfOUeOHOYBd/qT5JtbuXKlsmbjxo2dL9UZW7dutT24z549+61b
t8QW7IBFixYpLTz//POiywEAAAAAAAAAAAAAY1I3uN+4caOPj4+0qzx58vz6
669Zrh8ZGanculSJ9ZWvXbumrBwQEPDw4UMnq3XG2bNnbQ/uJTNmzBBYrWPm
zp2r1N+9e3fR5QAAAAAAAAAAAACAMakY3O/duzcoKEhO7Y8ePWrLJqVKlVJu
vX79+lmunzNnTmX9M2fOOFOtkx4+fCifWMBGlStXFlitLTZs2LBr1y7zJVOm
TFHqHzBggKjCAAAAAAAAAAAAAMDY1Aru9+zZExwcLKf2J0+etHGrli1bKrfe
qlWrLNcvVKiQsv7evXsdrlYVefPmtT24N5lMV69eFVuwFUlJSTlz5qxatar5
wtGjRyv1v/HGG6JqAwAAAAAAAAAAAABjUyW437Vrl3y1+oiICNtTe8nw4cOV
W2/ZsmWW6xcpUkRZf/fu3Y5Vq5ann37a9uBe8s0334gt2IoNGzbI3y4wvw8M
HTpUKX7MmDECywMAAAAAAAAAAAAAA3M+uP/hhx/kM+RHREScOnXKrm2//vpr
5dZr166d5fphYWHK+mJPlS/p0qWLXcF9z549xRZsxTvvvCMXeenSJWWhVLBS
/OTJkwWWBwAAAAAAAAAAAAAG5mRwv3PnTjm1z5s3b2ap/YkTJ+bNm7dkyZL0
f4qPj/f19ZVvPTw83PptJSQkKJeV9/f3T0pKsrdadY0YMcKu4L5QoUJiC7ai
c+fOcpG//vqrsrBjx45K8bNnzxZYHgAAAAAAAAAAAAAYmDPB/ffffx8YGCin
9qdPn85stZkzZ0rrFCtWLMO/RkVFKQWYp8bpbd26VVmzWbNmdpXqCrNnz7Yr
uJfcu3dPdNUZq1Wrllyh+ThKB1mpXMvn+QcAAAAAAAAAAAAAXXM4uN++fbuc
2kdGRv7yyy9W1rQe3H/33XdKAe+++66V/fTp00dTObJ8XXhFtWrVvv32227d
uimnBUjvp59+El11xqRBlCs0H8oaNWoolUvDJLA8AAAAAAAAAAAAADAwx4L7
bdu2Zc+e3ZbU/r9ZBfeSVq1ayQWEhYXFx8dnuM7Zs2f9/Pzk1SpVqvTkyRMb
S3WdEydOmIfyyrcOli1b5uPjk2Fwv3jxYrE1Zyg5OdnLyyt9cF+qVCml8v37
9wusEAAAAAAAAAAAAAAMzIHgfuvWrXJqLwkNDS2WlfDwcOvB/cWLF/Pnzy/v
sH79+nfu3LFY4erVq2XLllVu8ezZs071rJJ79+6Zh/JxcXHKn6T/zzC4Hzdu
nMCCMyMdf6VC8+A+IiJCWa6RYw4AAAAAAAAAAAAABhAVFdXcjL+/vxLONm3a
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
xrFmzZrw8HB1p3Dt2rUT3RZgh82bN4suAfjHkiVLzJ9OCe7h4R4+fKj8SBwA
AAAAAAAAAAAA3G/9+vWig1NApNTU1Jo1a4p+IAIAAAAAAAAAAADwXDt27BAd
nAIGt3r1aiuPwU6dOsmrpaSkeHt7K8svX74stuwsTZ8+XS41f/78ykLligBj
xoyxsu2DBw98fHwcfuIqWLDgoUOHXN+iC61YsSI4OFjqZeDAgaJrAQAAABxR
vnx5h6f0Gapdu/aTJ09EtwVPoa9r3CclJb3wwgtyqcePHxddDlTANe61iWvc
axDXuFfdhx9+qO4UztfX9/Dhw6LbAjK2cOHCiIgI2+/PJpNpwoQJoquGZ+Ea
94CbtWrVysoLwc6dO5U1zV9Bjh07Jq5km0ivX3KppUqVkpekpqYq9U+ePNnK
ttJczvbXSnPSPHDo0KF37txxS4uuEhcXp3zDYdSoUaLLAQAAAOz222+/OTal
z0yuXLl+//130W3Bg+gouE9KSqpTp45S6qVLl0RXBBUQ3GsTwb0GEdyrrkmT
JurO4qZMmSK6JyADd+7cadeunWP36ri4ONHlw4MQ3APuJL2hNv8dvYXy5cun
paUpK1epUkX5k/bPhhEbGyuXWrlyZXnJw4cPlfpnz55tZdt169bZ+1r51FNP
vfnmmxcuXHBHb64kvd3w9fVV+lq2bJm9e/j555+lw7tq1Sp+jgQAAABRvv32
W3un9Fb4+/tr/x0QDEZHwX3v3r3N3xqbf4xgi8ePH0vvH2fOnHnq1CkXVQgH
ENxrE8G9BhHcqy5HjhwqzuJ69epl7wsT4AZnz54tU6aMw3fsXLlyxcfHi24C
noLgHnCn0aNHW3n+//TTT81XjoqKUv60dOlSUTXbaODAgXKpderUkZfcv39f
qf/LL7+0su3cuXPtfa0cMmSIW9pyrQcPHhQqVEhpymQyXb9+3fbNk5OTX331
VeXX+u+++67rSgUAAACs6Natm71T+swEBgauW7dOdEPwOHoJ7pctW2ZeZ+fO
ne3a/NSpU5UqVZK3zZ49+59//umiOmEvgnttIrjXIIJ7dd28eVOtKZxEmhCm
pKSI7gmwtGnTply5cjl597bIbgDXIbgH3Eaat+TPnz+zZ/7Q0NAHDx6Yr9+r
Vy/lr5988omosm2kfFLXtGlTecnt27eV+lesWGFl28mTJ9vy4mgymQoWLCj/
vzGC+/Hjx5s3WK5cOdu3/euvvxo2bGi+eYcOHVxXKgAAAGBFdHS0LVP6LEVE
RBw8eFB0N/BEugjuHz58WKRIEfM6Z82aZfvm69atCwkJMd98y5YtrqsWdiG4
1yaCew0iuFeX9HqnyhROMnr0aH5rDw1as2aN+QlvHRYTEyO6FXgKgnvAbVav
Xm3lmX/EiBEW648aNUr564QJE4TUbLu2bdvKpbZp00ZecuPGDaX+zZs3W9nW
vNPM1K5d+9ChQwsXLpT/aYDg/tq1axanohowYICN20pvUgoXLmxxiGJjY11a
MAAAAJAZVX5xX7ZsWa5rD1F0EdxPmTLF4lFz7NgxWzZMSUkZO3ascro2xcWL
F11dM2xEcK9NBPcaRHCvrr/++sv5KZyvr++CBQtEtwJkYMuWLQEBAc7fybOZ
nWcYcDWCe8BtWrVqldnTvre3d/pPqD7++GNlhWHDhgmp2XaNGjWSS3322Wfl
JVeuXFHqP3DggJVthwwZYuU1MVeuXHFxcfIF3KX/kRcaILhPf92Eb775Jsut
kpKShg8fLt1h0h+oQ4cOuaFsAAAAID1bvotrXc+ePRMSEkT3Ac+l/eD+8ePH
kZGRFm+W5XfK1h0/frx69erpH3QExJpCcK9NBPcaRHCvLueD+9KlS+/bt090
H0AGduzYkT17difv4Qq7TpYLOIPgHnCPS5cuZRi2yjp27Jh+E/NL13Xr1s39
NdulSpUqcqndu3eXl0gtK/Vb/9Cjf//+mR2Z8PBwaT/KmtOmTZOXa/+bDNY9
fPgwd+7cFs0ePnzY+lbS+0RpMpzhgapdu7Z7KgcAAADSmzhxYmZT+iwVLlzY
+hm6ADfQfnCvnIBOUatWLeubPHjwYOzYsX5+fhk+9L766iv3VA5bENxrE8G9
BhHcq8uZ4N7Hx2fkyJEPHz4U3QSQgfPnz4eGhjp8906vQYMGonuCpyC4B9xj
3LhxVp72d+zYkX6TPXv2KCu0bNnS/TXbpVixYnKp/fv3l5coTy8mk+nRo0dW
trUS3Ddu3Nh8TeUwvvnmmy5sxvXSf+QikaYTma1/+PBh6T5g710IAAAAcA/H
gvuQkJBRo0bdv39fdPmADoL7unXrWjyCnnnmmcxWTk5OjouLs/iFvrly5cql
pqa6s35YR3CvTQT3GkRwry6Hg/tWrVpl+RMkQBRpkiO9njp2386MAc4ADL0g
uAfcIC0trXjx4pk955cvX15aIf1Wv/32m7JOxYoV3V+2XSIiIuRSX3vtNXnJ
9evX5SVPPfWU9W3Ng3svL6+oqKhPPvlE/menTp3M13zzzTfl5W+//bb0z3v3
7k2ePLlu3bpt27bN8BhqVnR0dPp7Qoanyt+9e/ezzz5rMpmsTBtat27t/hY8
2bVr15YuXfrOO+8MGDCgX79+0t1y3Lhx33777alTp2w5UyUcc/v27TVr1kyY
MGHQoEHSYX/99delIfjqq6+OHDmSkpIiujoPJT3x/vTTT3FxcdJwSIMiDU1s
bOyHH364detW6b2/6Oo8V3x8/IoVK6TnpYEDB0rj8sYbb4wdO3bRokXHjx/n
83lRpCN/4MCBWbNmSdMkaVAGDx4sPVg+/vjj7du337p1S3R1RnP37t1169a9
9957r7zyinS0pWM+ZsyYBQsWSM9Xjx8/Fl2dkSnB/dNPP+3j42Nl7irLnTu3
NEycGx/aofHg/s8//0z/rjBv3ryJiYkWa96/f3/OnDklS5a0/hhcv369kEaQ
GYJ7bSK41yCCe3UpwX1ERISVr3spvLy8nn322SNHjoguHLDG/BrEatm0aZPo
tuApCO4BN9i9e7eV5/xPP/00w62kN+DKOllm38LlypVLLnXUqFHykoSEBHlJ
lt86kOP4gICAfv36nTlz5r9/n0le3rZHjx7maw4cOFBe/vbbb8+cOTNPnjzK
Ifrtt99c05n67t696+/vn/6eEB4eLk0qpOfhn3/+efXq1cOHDy9RokSWcwZv
b+8TJ06I7skjPH78+Ouvv65bt66V71EULFhQuj9fu3ZNdLHG8eTJk7Vr1z7z
zDNWIgDpGVJ6cvj1119FF+tB/vjjj9jYWCtv6qX38g0bNvzyyy/5NovbpKam
Llu2rEmTJlYuzZM3b96hQ4devHhRdLEeRJqfvPbaa9LTlJXX8RYtWixdulRf
X0HUIOkAbtq0qW3btpmdEVoSGhrap0+fkydPii7WmJTg/r333jt37tzIkSMr
Vark6+trcYcvV66cNMv9/vvvk5OTRZcM/D8aD+5nzJiR4TOb9NK/fv36o0eP
HjhwYN68eTExMUFBQZk9DSosTm0HLSC41yaCew0iuFeXEtwXLVr04cOH8+fP
b9WqVfoTjOfOnfu555776quv+JY+tO/Bgwfpr1HrpJIlS/IBF9yG4B5wg759
+2b2nC9NhNJ/Q14RHBwsr2YymTT+E6GAgAC51HfffVdekpaWJsfTWf4e/OTJ
k4sXL75586ayJDk5Wd7b4MGDzdfs3r27vDx9KrFs2TLVm3KRdevWqTFf+Idy
bQK41JIlS5TrQWQpJCTk888/F12yEWzfvr1q1ao2HnbpCWfChAkkX652+/bt
YcOGZfjtowzVqFFDR1+s0q/169eXK1fOxkEJDAz86KOPRJdsfDdu3OjXr58t
vzuWNWjQQHprJrpqvdq7d2/t2rVtPNTSoMTGxvKpi+rMg3tloTSrv3jx4vHj
x48cOXLhwgWNv6OBh9N4cC+9rbbxWS5L0rtpTm6sQQT32kRwr0EE9+oyD+7N
l1+/fv3MmTPSi6P0X84SBn2Ji4tTa9akWLVqlei24EEI7gFXe/jwofJr9PRG
jBhhZVvzE+xr7XMDc2lpacpvkGfMmKEsl4PO0aNH27tDJbh/6623zJd36tQp
syM5ffp0FTpxi5EjRzozTzAXHh4eHx8vuiGDk14oW7VqZe/QSI+IWbNmia5d
x+7evdujRw8HHhTK1TrgCmvWrLHl1HkW8ufPf/78edG1G5b0KhATE+PAg2X8
+PGiazeyRYsWSa/R9g5KiRIlrl69Krp2nUlMTBw4cKD1iwplqHfv3qJrN5oM
g3tAR7Qc3EvvuMPCwux9osuMxdfjoREE99pEcK9BBPfqyiy4B/SrSZMmas2a
ZM8995zonuBZCO4BV1u8eHFmz/ne3t6///67lW3r1q2rrHzw4EG31WyvpKQk
pc6FCxcqy19++WVpyZ49exze4cSJE5WF0pFMf6YmxZgxY9RpxvWaNWvm8DzB
woIFC0R3Y3DS+0EHYkqZn5+ffOkH2OvcuXO2/3Y4vc2bN4vuwIDS0tImT57s
5eXl2KA0b95cdAfGdPz48aJFizo2KNJoanlqoV+pqamxsbGODYqkS5cuojvQ
kz///LNGjRoOH21+NKEugnvonZaD+7Nnzzr8XGchb968CQkJohtCBgjutYng
XoMI7tVFcA+DSU5Ozp49u1oTp2x/XwX43r17otuCZyG4B1wtKioqs6f9jh07
Wt9WWkFZefXq1e4p2AHmwf3GjRuV5b/88su4ceMc2KEyaZw8ebL0z4MHDzZo
0MD6a+iwYcNU68fFSpcu7cgsIZ369etzVnCX+vzzz20/H3iGevXqJboJ/dm0
aZOVs5TYomHDhqKbMJq7d+9GR0c7MyiS/fv3i+7DaFasWJEjRw5nBqVdu3ai
mzCamzdvNm3a1MkHizR9Et2HPuzatcvJCxdWrlxZdBOGQnAPvdNycP/99987
83Rn7ptvvhHdDTJGcK9NBPcaRHCvLoJ7GMyZM2fUmjVJihUrduXKFdE9weMQ
3AMudfXq1fRXY1dkOe3v37+/svKcOXPcU7MD0tLSlDZ//PFH53d44cIFeW+1
atWy8ffpr7zyivO36x6qnOTQx8fn+PHjolsxslGjRjk/TLlz5+YSunb59NNP
rTxn2kjaw82bN0W3YhzXr18vX7688w+HkSNHim7FUKZOnerAucEtBAYGJiUl
iW7FOP744w/5IkFO+uCDD0S3ogOLFy/29fV1/mhfvHhRdCvGQXAPvdNycL90
6VLnn/EkjRs35rvfmkVwr00E9xpEcK8ugnsYzLJly1SZNcmvyNeuXRPdEDwR
wT3gUlOnTs3smb9EiRJZvmV+5513lPU1fir4kJAQuU5VLmQsvSGy95W0f//+
zt+ue+TNm9fe7tIbPny46D6MzPyh56Tr16+L7kY3vvrqK4fPxG5h3759orsx
iISEhKpVq6oyKNHR0aK7MY6PP/5YlUGRnDp1SnQ3BiE926t1Rp3u3buL7kbr
Vq1a5ePjo8rR/u6770R3YxwE99A7LQf30vOe8894fn5+p0+fFt0KMkVwr00E
9xpEcK8ugnsYzNatW52fNUk6dOiQmJgouht4KIJ7wKUqVqyY2ZO/fBJ462bP
nq2s/9JLL9l4o2fPnl20aNHo0aN79erVpUuXfv36jRo1asmSJS79SVGBAgXk
Op2/5suxY8eqV69u74up1KYqjbiBMxdjleXPn59r67jOpEmTnBwgc5wYwUbS
c5Tzv7VXaPnaIjqSkJBQrVo1tQbl6aefFt2QQcybN8/539ordu7cKbohI7h+
/XqZMmXUGpSoqCjRDWna+vXr/fz81DraX375peiGjIPgHnqn5eD+xx9/dP4Z
LzY2VnQfsIbgXpsI7jWI4F5dBPcwGOdnTV5eXiNGjOAcqhCI4B5wncOHD2f2
/O/r62vL73CXL1+ubFK/fn3rKx87duzVV1+VZllWXndq1ar19ddfp6amqtTi
v6TZsrT/iIgIZ3Zy4cKFF1980bGf3OroF/eDBw92oEFzS5YsEd2EYX322WdO
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
8pJPP/1UqVZfH6HYa8+ePeZvQ+7fvy+6Io+gBPfSy6L0Nv/9999v3rx5wYIF
lUd0aGhozZo1hw0btnXrVmIXtSjB/a5du65cuTJjxow2bdpIbxWlZyR5ufSU
VaVKFen5cPXq1TwW3EMJ7qXRefLkycaNG/v371+jRg3lxxHSg6JQoULPPPPM
tGnTfvnlF9H1egoluD927NjFixenTp0aFRVVuHBh6WVCXp4zZ85q1aoNHDhw
w4YNSUlJouv1CEpw37Vr15SUlDVr1vTp00cahZCQEOVFXHpCk57WZs6c+dtv
v4muV9+UT3rXrVt348aNTz75pF27dsWLF1c+lg8KCqpUqVKvXr2WL19+584d
0fV6KIJ76J2ug/tu3boplZMwuo00K8vyG5X2kqbZotvSvRdffFHdQTGZTEeO
HBHdlr4dP348y59I2Ov5558X3ZZBENzDYAjuYQAE94CKli1bluFkslChQnad
U2vLli32niRfmgA/99xzu3fvTktLs7Lnc+fOKZm4BU1lkcov15TP/ebMmaOU
eu3aNbHluVSHDh3Mx2XBggWiK/II5sG9xZ/MzwUBdZkH9xZ/SklJsf5sBhcx
D+7T/5WHgyjmwb3FnxgUUcyD+/R/ZVzUZR7cW/wpNTWVU9dqBME99E6/wf2l
S5fM4+M8efLwFSb3eOutt+z63CZLPj4+hr8yoKvFx8er/m2KHj16iG5L9wYM
GKDuoGTPnv33338X3ZZBENzDYAjuYQAE94CK+vfvn+F8cuTIkbbvRHqLXbBg
Qbvmq23atDl69KiN+79w4UJoaGj6nUjvbhxq2iUiIyPlqmbMmCEvmTlzplKq
gc8e/8cff1ictCFPnjwJCQmi6zI+K8E9XMdKcA9RrAf3EMVKcA9RrAf3UJeV
4B7aQXAPvdNvcP/2229bvLsfNmyY6KI8QsmSJW3/3MYW0hOp6J5077PPPlN3
UIoUKXL79m3RbelbWlpa7ty51R2XuLg40W0ZB8E9DIbgHgZAcA+oKLMfs584
ccL2nfTp08f2mWqZMmUcuIJny5Yt0+9KU3mlcprZefPmyUumTZsmLzGZTAb+
XdU777yTfmg++OAD0XUZH8G9EAT3GkRwr00E9xpEcO9OBPe6QHAPvdNpcJ+S
kqJ8713h4+Nz69Yt0aUZXHx8vI2f29goJibGwJ91uI1dH6llKSQkhJPkO+/X
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
VVu3br148aIz2Rnvzp8/7+3LTQL3N27cOHLkiJxcZ8+eDbgWBO4jxblz53bt
2rVy5crly5evXbtWjj1nmkuXLrkcb7GxsUlf7HBgnymyDz0mIHAPACkZgftI
JO3wEydOyM1depqhLkuSInAPAAAAABHk2rVrLk/sbR5DSzY72eXLl12SuUcH
vD0b1xw4cGDUqFGdOnVq0qRJlSpVypQpU7t27RYtWjz33HOLFi1yL6dHPgP3
Uqn93p0+fVpNfPTo0eHDhz/44INSsFy5cuXLl69ChQoPPPDAs88+O378+MOH
Dyd9BT36+++/XSoVFxfnMZccLS655FNvuVx+96tXr9op5d+ylxo2bJgjRw77
R0mfPr3sw/79+//2229BqXuE+v333z///POXXnqpadOmd955pxwY5cuXr1Wr
lhwnb7zxhhwbhmeQU2QF7uUUcDkI5YhSE2/duvXFF1+sWbNmgQIF5HwsXbr0
Pffc07t37/Xr1wd9Wz7t2bPnlVdeKVq0aNS/pU6dunr16kOHDrUj8nLKRHl3
++23e9uES+D++vXrcnLdd999GTNmtBNkypSpUaNGo0ePlk99ll8ubnbdtWnq
7733XpcdZfLlJuT6oH5tv3791DI8+uijHrduOPhHfuv58+c/88wzcvW+6667
SpUqJWeZnGtdunT54osvtOu8eSE1p06dUhOfOHFC9mTLli3Lli2bO3fuW265
RU5q+Y26d+8+duzYP//80+999F9y2/r000/lq+To0o6fQoUKdevW7ZdffrET
awFozbZt20y2GBMTs3bt2j59+rRq1UrOsnLlylWuXLl+/frt27f/6KOP9u3b
F3Bdkngr8v09evQoXLhwqlSp7J0QHR0tP5McCVIAO2XSB+61W/DAgQPVArRu
3drjUXfs2DEru/zD25F56NAhbxuV65LLIW1YVI0WLpG7m7S+5HCVg1Mu1MWL
F5eL9gsvvLBy5cp//vknWHsPQNDJ9cGkF+nSDFD7CC7jxORS4L4JtTfhjXz/
N998I1ebtm3bSrtF7iCVKlWqU6eOtB8GDx68fft2fy84JoF7aYS4XAxv3Lih
Jl6zZk2vXr2kbW9dDIsUKVKtWjW530knSJooPosX9AoGxhp67e9dw727rd58
VVeuXDE88KSZJy0u6ZJnzZrV/skyZMggfe1BgwZJ7zvo+yHkZOeo+/DNN99U
D9cOHTp43NWGzeYLFy7MmzdP2kvNmze3m83NmjV7+umnZ8yY8ffffwdWSI3W
bJaySWPvoYcekl6w1WyuUKHC/fffL8UYN25cZP2IcjJu2bJFemqPPPKIVEEq
ctttt8nxKWfr+++///PPP5t/lTThDM84OQsmTpwolxTrOZX0jitWrCgF+Oyz
zwJ+jGCTi/miRYukqysN5rvvvls2IT3Whg0bPv7443LqpfDHOGHC5TjROgJy
O5ODU+4jBQsWlEOlRIkSjRs3liPTZXya3ICWLFnyxBNPyMEs/ab8+fPL0dWu
XbspU6bIaZ7AksstYPXq1b1797Y6gNJxlg5ggwYNpAM4atSo/d7vLE7mO0GK
PXPmTLlUyp1UrjZyzbn11lvlBt2xY8dhw4Zt2rTJ57akjSTf0LNnzxYtWljX
yerVqzdp0uTJJ5+UM5HBfgAAwCdp6rg8sbfVr1/f2zfs3r3bTla3bl2XbUlP
xGUTxYsXdy/q2rVrpRjqs3Sn9OnTS+9j586d5nvAZ+B+8eLFLluU7omVTJp2
L730UoYMGVwSjxgxIukr6NFrr73mshVv3e2NGze65Nq6davHXNqLsRpp91rJ
li9fXrhwYZeUqVOn7tWr16VLlxJY98iybdu2559/Xtr5LnvGkiVLlmeeeSaA
YF9kBe6nT5/ushPsUPWJEydat27tklI6Tf/zP/8TlG35dPXq1TfffDNdunTu
v2C+fPnmz58fnwiB+y1btpQpU8blO+Xy+9NPP7nXQjqq7uX3Ro0RJ8SaNWsC
2HrTpk3dv3bHjh0PP/ywXFpdviRNmjQNGjRYvXp1AgtpTwtw/fr1Pn36ZMqU
ySXxgAEDAttRci0tUaKE+26Ry+mzzz5rjbZKYOD+r7/+evnll3PlyuW+xQoV
KkycODHg9/eTYCsHDhxo1KiR+/eXLl36hx9+sNInfeB+w4YN7sXzqF69elb2
OnXqeEsjtxhvG/3kk0+85ZLzIrCi2pMDyA29W7du8j3eUtasWXP79u1B3YsA
gua2224zuQrNnTvX2zc899xzdrI5c+Z4S3bmzBn3TQwePNilnNIMGzp0aKFC
hdy/RBK8//777qPQVSaB+2bNmrls8Y8//rCSya32rrvuci+etwHSiVfBwHTu
3NlbAaTt4S3X0qVLXUrurcWujeHUTJkyxUo2e/bsvHnzuqSUJnrfvn1d9nAk
+vbbb92PB49atGjh/rVyrEoPy2ezWRpUcoIksJD2tADy07zxxhvuzeZBgwYF
Ya8lvgsXLrz77rsFCxZ0/yGKFSs2bNgwkyFJZcuW9fYlqVKlspN98cUX0tP0
ljJPnjyffvppYDWS67N0anw20aWc48aN8zYIB4ntn3/+cfl1ypcvbyd77733
vJ1rcqmUM9E5GE/a6tWqVfP25UWKFPnqq68CK/bx48dfeOGFnDlzuh9dlSpV
mjx5sreXj/zdCUJuHwUKFHBJ3KBBA5cNHTp0SDo47pcsUaNGDevhDwAAgEcJ
D9y/8847drK0adNqQ6NVAQfupbP29NNPaxFt+V/pfUiuLFmyaF8lxXjrrbcM
H90HJXD/119/3X777T53o7fAfaJW0KNwC9yPHj3afcSCrXTp0gcPHgy44pGl
atWqHneCHBglS5aU3oTzsUnWrFmnTZvm11aSX+B+z549Pp9eRt3sRbqP/w9K
4P78+fMeH8bKAZ8/f34pg/oKvPzx448/dgbuSyqaNWvmbVseA/crV65UN+GN
XGfWrFnjUpHkF7i/ceOGXMCdQcPMmTOXKFEie/bszm/r2LHjhQsXAi6kFbg/
e/ZszZo1fZY8sMC9nIkev02uDHLwaM897r333suXL2sB6Lx586rH26+//uqy
OTlHnE/q5LokB7bHx4PVq1ffu3evv5VKgq2sWLFCfQvPRbp06WbMmBFP4D7B
gfuTJ09WqlTJZ/lz5MhhD5YAEFYSGLiPi4tTW2tyUfW2oYQE7rdv3+4cuyjt
oqJFi0pDWrpU2kfSAFi3bp1J9YMVuP/yyy/dB35bvIWVE6+CgQm3wL02O40L
6ctLjz6x9kuSC3rg/vr16y+++KKz2Sw9CGkuOpvN0qmR2737bIEmgfu///77
zjvv9FnyiAjcS6fM+Z6CnKRyJZSz1TlNVunSpX2erSaBe62H6I39Qoo5aT9L
f1b7HulJFS9eXJrozsc7VatW5e37kDCJWcfExLRt29bncSI9C/Ul+iVLljgf
V2rkumGPpDI3efJkZ8je6gDecsstzq1I/9p9+jWTnSAtk65du/rcCS6B+4kT
Jzo7lXKFlOtknjx5nF/VuHHjlLZ0CwAAMDR16lTr4by0f7QmhLS37Uf3HTt2
9PYNWsBaGireUj7//PP2F+bOndtKny1bNusv9913n8dcFy5ckMahugnpnkyb
Nk2d0WvPnj39+/fXWowtW7bUZiD0yGfgfu3atXcotAHS0sGRhmuVKlXsv0iN
ypUrJ1/rHGPpMXCf2BX06KOPPlIrpZXTW+B+165dai4tGugtcC9NbjUMpPXr
hw0btnjxYqtbJz3Wfv36bdmyRdqu165dO3DgwMyZM6VVrBWvVKlSKWRqKa3/
Xr169RkzZqgztMte+umnn7p3764dbB9++KH5ViIrcL9s2TL1INTCdu+8886p
U6fs6ehlBxYqVKhq1apyTnkc8yy71GUAjM9t+SytnN3OePe99947f/589QGs
HPO9evWyXsmXMs+dO1fLYji7qTNwv3fvXrvnKLvioYcekq5o+/bt77zzTufT
Ibnmu8xo0alTJ3tXyImsZpST+g7vgjVN+rZt29Sv1e5Z0dHRHrcuB6rHb5Of
5v7771e/IW/evIMHD1ZnyZML0SeffKJVtkKFCh5Xijcp5H/+85/r16/Xrl3b
/otc1eXgrFSpkvOJRwCB+6FDh2pfIpWSq4F6wfzrr7/GjBkjv7WVoG3btgEH
oLUBYGnTpu3Zs6cczHaCq1evysGs7Wc5Wr777jvzSiXBVlavXp05c2ZtK088
8cSKFSvkt5af7Pjx42vWrHnuueesZHKqyv8mfeB+586d6tGlrbuRJ08ej6eA
3CCs7N26dbP/WL58eTWvS+B+9uzZdi5tLJlL4N69qE8++aRcANXn8Pnz55fG
pJxcHgfMyLXLXkkEQPho1KiR1bZXl7iK+u9QMdvy5cs9ZpcWrHbd9hablj6R
+oV2MFouDtZfxo4d6zGj3AjUq4p0N+TaLtu1m1WyRWnsNWnSRC1J+vTp582b
57P6JoF7ad2pF0Nt8qU//vhDbjR2daR40s2Ui2GxYsWcjTSPOydRKxgYab3Y
9dWeErgE7n/88Ud1R2njDbwF7qVnrR4YWlNqypQp0gm1/i27dNCgQTt27JBO
rjQbZM/Lp3fffbe2kytXrmw+zXuY27Rpk7pLtXixtA89thlefPFFj98md2Hp
v6jfIN0i6f2p6wBKC/Pjjz+2W5gWaeK6TL/vXshnnnlGDmB1sKv8xNZjFq3Z
FhUJgXvpU6jDHuRslR6ZNEHtrmhMTMzXX3/dqlUr7WydPn26y9e2bt3aWzvN
CtyrvQO5OEsLsEqVKt5e+ffr/d9p06ap1zT5txw/6jz/Fy9enDNnTo0aNdRN
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
TnhUr149td3y+uuvv/DCC9a/X3zxRcOtr1+/Xmv/LFu2zLzwN27cyJ07t5Ux
derUhou2mwhW4D6sKqhFe016lNLP0sofWOA+yp+R58WKFVMzVq5c2TBjZHEu
s2geFtdWuyZw71ESBO4PHjyoLdDpPrehTS6zWhA2KvwC93PmzFGzyDXfZEPB
FVhMfM+ePdps+ZMmTTLcolyptN/F58OEpAnci/r166sbypMnj8s9WqVNrRPl
KwAttx5toFeHDh0MC3n9+vVs2bKpeb2tEZM0W7lw4YI9/bKlZcuWhlvp37+/
X/stMSQkcC97WIv7eHsB1hYTE5M3b141C4F7AN5owxcffvhh+z3Nzp07e8ul
TQYizaG9e/fmyJHD+t/ffvvNcOtykVG/p3jx4n6ttzJ9+nQ7r19vbfsUlMB9
fBhX0KlEiRJqUU2mSqtWrVrUvwUWuBe7d+82ySj3RPsws9StW9ckYwQJLCb+
yy+/aL2SadOmGW7xu+++036ORYsWJUYhw1zt2rXVSsn/muctX768mrdJkybu
6ZMgcC/uvvtuNbG/3cC3337bzvvaa6/5lRfBEp6B+2vXrhUoUEBN79JgcG4o
c+bMat4XXnjBPUuwAvdSbHt2WYu/q6A++uijdt6k71ECAIAIVbNmTbUFYs/C
3bx5c5dco0ePVnOVLl26aNGi1r9NhtnbtICCdMbN86pv0jVo0MA8o0/BCtzH
h1MFtUa4zy/cunWrFvyKSkDg3jCguWzZMi2jSWchEl29elWbhNlwSUHnGHgC
9x4lQeA+3vHab7p06fbt2+dzKw8//HCUQ7gF7rWAWo0aNZxp/vjjjzv+q3//
/iYl8UvAMXFtuntrMhkT2nWyTJkyPmcLSbLA/eLFi7Vj5u233/aZa8mSJc6D
zefjAu2xavbs2Q1fv5oxY4aaMU2aNC4xi6TZivYKuZykJrPlX79+vWTJkv7u
t6BLSOBeVK5cWc3ep08f9/TOyRkI3APwRjoF6vmbJUsWu1Pp3jTVLk1239Ov
wbo7d+7Uoo3ff/+9efa77rrLzjhv3jzzjD4FK3AfthV0sifrszz22GPu6Vet
WhXlEHDgvnfv3iYZp06dqmX0a56fiBBwTFyb7t58SIM2vKR8+fI+m83JMnC/
YMECtVKpU6c2HE+yYcMG7bD87rvv3LMkTeBem8A/bdq0Bw4cMNzQtWvX7Mug
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
Frj/5Zdf7L3kMt+aFrjv16+fdf+SvrbHNt7ly5e1OFSU/6PgwpbWZhg4cKBa
Tam4eZtB2j8NGzZUs9esWdPbaIrTp09rbWxpWsiu9lZOvwoZ3GZzUpo9e7Y6
5lmOTJeZuyZMmKBOOpE2bVqXMTayb+39o7XTpLWv7j21ZasdHnnz5lUzyrXF
/sjbCNj58+er0VX5t3Q3XN4ykEZdtmzZ7PSffvqp2Z5D0Kjdf+kSqr94mTJl
1ONBfZKj/r1Dhw5qLumm2R+pvQD1qZH7MektvD5o0CA1V758+bxNMSpF7du3
r5o4e/bsLiP9zHeCy8HvjdbxlwNeThNvieV6O3LkSPskkuuDdLv82hwAAID2
grkYP368z1yHDh3SIq3SAQ/sOba0lxo0aKB+VYYMGXr27CkNLTtSJn0E6dG/
8847+fPnt5MVKlTI37czPJKtRPlj2rRpkVVBy59//qnFfF2MGTNGsmiBe5U0
mL1tSAvcDxs2bOHChVZPVvqw7dq1mz59+o8//rh9+/YlS5b069evWLFi2pff
fffdLlGzZGPv3r158uTR6h4dHf3666+vWLFCPj148ODmzZs/+eQTe7Y6OVvt
xUCdateubX2ztjKCu59++ikhuYLuxIkThmUoVaqUmtHjNCAe2W/Ey6FoXmWX
d4EHDhyoPtlwIT+fdCelt6v93duTtKTcG5qPP/5YTSYHoT3w5vDhw3Ii2x91
797d/Pd1IR12wzLbXObxuHLlSvPmzdXEOXLkeOutt3bv3m0/dDpw4MCHH36o
TXxXtWpV99fztenE3QX9sdWWLVsKFixosumcOXPKlTbeMd2u+ZvjcmCrN3q5
jHfq1ElOBPux6pkzZ+SGqL11JZc1v64PSbCV06dPV6pUSds/8g09evSQ43z2
7NnyM/Xq1cueul8Sy41b22+abdu2mdfRkHO1U5/c34mTm6zh98jdWY4WqbVL
Gm0SV/XxrDv1+qZN4O+Cp1tAmJNTW7uBZs2a1eQlOOcsWwEvuCOdKfW10Kib
i/uMHDly//799pVHmgrLly9v27atGlbr2LFjUEYHacOW3MllM+IqaGLHjh3a
1PfeSAlnzZolWbTAvapkyZLeNqQF7qdMmTJx4kTr39LJlSrbg2YXL1782muv
aeMoom6Onk02k+R/++23Jvtc5RJel49k56iJc+XKJf30PXv22M1m6TIMGTJE
m1aievXq7k0RjwssejNu3Lgg76YkJAek1kdo2bLl0qVL7auitLIWLFigzZCf
KVOmefPmuXzts88+a7j3Jk+ebOf67rvvDHPJieNt01988YW24JT0Bz/77DN1
coBTp07NnTtXe9jVt2/fBO9O+E0a6oY/urp8p+FDjDvvvNPOMnr0aMMNvfrq
q95K279/f7UDKMXo0qXLDz/8YF+i//77bzmnZLvqF+bNm3fjxo1B2QlC+nr+
7uR3331XewwuV065r6kz1h4+fHjSpEnVqlWz06RNm1Y9PQEAAAzt3r1bbXhI
k8nnXO4WbTGvhEwRHBsbK817j13+3LlzS6fbGSi57777vL0+6a/EDtyHvIK2
RYsWWS8muJCG6ODBg630wQrcyx8nTpxoHtlMxkvba7Zu3apNg+lN6tSpBw4c
KFkI3NvCJ3AvNm/erL2irsmcOXO/fv2sh6jaNUdOujAM3EtR77jjDi1xdHS0
Ntdi6dKlzwTjdfv4YAfu428OiHrnnXecV1e5FMtVV3sSFXXzh5Abmc+gQ2gD
9/E3p8/t0aOH+4PQBg0a2L/so48+qn7k13ODr776Sh1OZpM/Wm+ma+655x5v
R1Rot/LXX39ps994U6VKFTnv4h0DHjQREbiPd7zS4lGWLFkWL14cf/ORsksy
AvcANNpEQIbrIEvrVzvfE3JF3bdvX61atZzXELnXFypUyDlNjdz9BwwYYLhE
kU+JHbgPeQUNTZ06VVuUzUkS2GHZYAXu5Y9Dhw7VwijetGzZ0mRgSaQIbuA+
/ubziv79+5s3m6UhKs1R93UK4lNS4F6sW7dOW4nbkidPHuepKm677TafaxGG
MHAvNm7cWK5cOWcuOR7k+pM9e3bt7zly5JgwYUJw9ib8FFmBezFv3jyP9wJv
HcD777/f57oqiR24j/feb82cObOcFM5XpQoXLrx8+fIANgQAABD/7/hsnTp1
DHMNGTJEbZCsWLEigcXYs2ePdBx8vhVeo0aN6dOnB/FxxLVr10r6Y+HChZFV
QZW00j0+/LFI7ZYsWWInbtiwobedULlyZW+b8Bi4j7+5nHHFihVdKi4dvTFj
xiTxg6aQO3/+/Msvv+zs9qrkJ/vhhx+s9O3bt/f2ozz88MNWmmnTppkfz/bj
gsByBd2pU6cMy/DAAw+oGdu1a2eY8fDhw1aWb7/9tr6xX375xb3kcuiuW7eu
V69ed911l/Ta0qZNmy1bNtlcixYtPvnkE3XNi9OnT2tHfjjsDae///5bCu9y
ZDZu3PjYsWPuu8Xcxo0bDctsM5ma47fffuvUqZP7hTd9+vRSU/cB/LayZcua
lzCAgV6Gjhw5MnLkyAYNGkh5pHYZMmTIly/fPffc89prr23ZskVNqS0E4DKn
n0dnz57t37+/87U1TfXq1WfOnBnwBTwJtiK5xo0b5/FJiyVr1qxvvPGG/Qha
zmWXX/bXX38NrKYuduzY4e8poL7f4c3s2bNLeh8hVrt27Z9//tlKeeXKFZdt
aUtXV6pUybCQ6u8lx6dhLvuuByBsafPQytXGMGOJEiXsXNrIwwDExcVJ18k5
2lCTOXPmJ5544vfff0/g5lQTJ040vKYJuWxGXAXNfffdd84F+GwVKlSQo8VO
fOedd3rbS/fff7+3TXgM3IsVK1bIUeSyZ6Kjo2UHJvYeSGLS6TA/9iwm4xb2
7t0rR5HPZnPLli03b95sUs7SpUubl9BlevlIIc3IESNGuB+QUTfXBxk9erTJ
tBj9+vUz3Hvqm/vr1683zPXSSy+5F+DatWujRo0qU6aMe41y5cr13HPPHT9+
PKF7EIGShrrhj66uNXbrrbeaZJFT3s4il1PDDb3//vvuZZaOjL1YpzepUqWq
UaOGNDBMOoDmO0FIXy+wXS391rffftvnJHiFCxeW7m1KmEoUAAAknk2bNs3+
L5/BKdvJkydnK4I1HZ90dqT3/corr7Rr10567pUrV5Z2WoMGDbp27Tp27Njd
u3cHZSshFA4VlJ6+NDVbtGhRu3ZtKcA999zTvXv3hQsXBmXhcm+B+/ibcZOv
v/66R48e1atXz5MnT5o0aXLnzl2xYsU2bdrMmDHD/S2A5O38+fNz586VvkOT
Jk1q1qx5++23yyEh/Y7hw4cH8PoqwtzBgwfVc6Sk93eLwsHPP//87rvvSm+9
Vq1alSpVkuvVgw8+KJ3QxBu8kRiuXbumXnjlFJPrXuvWrZ9//vn58+dri3cn
Mw888IB6vHlbQ9CdXL23bNkiR4Jclxo1aiQ78K677pIj4emnn/7ss8+OHDkS
lKImwVZiY2NXrlwpv7vcAeVOVLVqVdk/3bp1mzZtmr+rD0eQ69evL1u27KWX
XmratKncYuS+X7du3ZdfftlaTAEAAiNXVLUzaN6SX79+vZ1LffUvgQ4fPjx+
/Hi5ZciNQ24fcq2799575d99+vSRe737LD0RIcwrGBcXt3r16jfffLN58+bS
aJTi3XfffT179ly+fLnL0tjmvAXu428eil999VWXLl3kti69y9SpU0dHR0ur
9bHHHpM94/OtcGhkj0mfXdoJss/lR5T2mBxp0mGXvuqCBQuIQ5nYs2fP0KFD
n3zySWl6VatWTdqczZo169Sp00cffbRv375Qly4Qv//++8iRI6UKUhGpTpUq
VaRL1apVqwEDBixdupSzDAGTG8TmzZvlQJIOYMOGDe0OYNeuXSdMmBDE1wSC
S/qt27ZtGzRoUMeOHRs3bizFljNdeljt2rUbMmSI3A0DW0kWAAAASCQugXsA
8TefV6vniPRMQ10iJGfaFJd79uwJdYkAAAD84xK4BwAAAAAAgDcE7gF348aN
U8+RF154IdQlQrJ15coVde3C3LlzB+WtNwAAgKRE4B4AAAAAACAABO6Rckyd
OnXw4MGjRo3yK1fnzp3Vc8TfNceRMm3fvn3wTX4tn7F27Vr1YGvRokXilRAA
ACCRELgHAAAAAAAIAIF7pBy1atWSgzxVqlR//fWXYZZr167lypXLPkGyZ89+
7ty5RC0kkoexY8dax8yHH35onqtHjx7qBXnSpEmJVkAAAIDEQuAeAAAAAAAg
AATukXJYgXsxcuRIwyyffPKJeoL07t07UUuIZMMO3FetWtUwy9GjR7Nnz24f
bEWLFr1x40aiFhIAACAxELgHAAAAAAAIAIF7pBx24L5AgQKnT5/2mf6PP/7I
kSOHfXZER0ebv6qPFM4O3IsvvvjCZ/rY2NgWLVqoV+PPP/88CcoJAAAQdATu
AQAAAAAAAkDgHimHHbgXNWvWdI/Cb9y4sUCBAnb6NGnSrFq1KsmKikinBu6z
ZMmydOlSl8Rnz55t06aNeil+8sknk6qkAAAAQUbgHgAAAAAAwMS1a9fOKLp0
6aI+VBk4cKD6aUxMTKjLCwSNGrgXOXLkeOONNzZu3Hj16lU7zdmzZxcsWNCu
XbtUqVLZKdOlSzd+/PgQlhwRRw3cWx566CE5tE6ePGmnkQusHH5vv/12njx5
1JSNGze+cuVKCAsPAADgF2m6qL3Ili1bqm2bMWPGqJ/GxcWFurwAAAAAAABh
4aOPPooytnHjxlCXFwgabSpyW5o0aXLlylW0aNHMmTM7Py1QoMDatWtDXXZE
mDlz5shx5fF4y549e+HChXPnzu38KHXq1H379uVpNgAAiCz9+vUz72Pu378/
1OUFAAAAAAAICwTukZKtW7euR48eJUuWNDn+CxUqNGLEiEuXLoW61IhIx44d
+/DDD2vXrp0uXTqfB5ukeeqpp/bu3RvqUgMAAPiNwD0AAAAAAEAAJk+eXNLY
jh07Ql1eIFEcPHhw5syZAwYMaN++ff369WvUqFGpUiX5b5MmTTp06DBixIht
27bFxsaGuphIDi5evLhy5crhw4f36NFDDrB77rmnWrVqlStXrlOnTps2bXr3
7r1s2bILFy6EupgAAAABksazeR/z0KFDoS4vAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPw/9u48voaz//+47JJI
mthiKSqWEltttQRFI6igUvuuiNJGK5ZUSy1VpWiD9m612t6WuosuihZFqaB6
U1p7+ytuaqtaK4lEJPldd+f7mPv0JJnMOWcm18k5r+dfTGbmfK7rnDNzzXnP
AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAS7l9+/b1v9ix
bGZm5k8//bRs2bI5c+YkJibOmDFj4cKF33zzzZ9//mlfMVeuXNmwYcOCBQum
Tp36wgsvzJ07d+3atefOnbNvbQAAAAAAAAAAAAAAOLM7d+68+OKLPj4+xf6S
kZGhc8GsrKwvvvhiwIABwcHBxfIi1tmrV699+/bpLyY5Oblz586enp55rrBl
y5afffaZXa0EAAAAAAAAAAAAAMAZffPNNzVq1LAMx3UG96tXr65evbq6VOnS
pYcPH7548eL3339/4cKFAwYMCAgIUP7k6ek5ceLErKysAtc5efJkNbIvW7Zs
fHz822+//d57740fP75KlSrqa/Xp0yc9Pd3hpgMAAAAAAAAAAAAAINO1a9eG
DRvm4eFhdVW7zuA+OjpaXSQ+Pj4tLc1qhosXL7Zr106dZ/jw4dornDp1qjpz
9+7drW6zn56ePnLkSHWGnj172tRYk4iqxowZ06JFC9GT3333nexyzPX777/L
LgEAAAAAAAAAAAAAXMdHH31UtmzZYsWKeXh4PPnkk6VKlbI7uNdI5O/cudOg
QQN1zR9//HF+cx45csTb21uZrU6dOmLB3PNkZWW1adNGXZsz3DO/T58+luc8
9O7d+9q1a7KLMsW333573333paSkyC4EAAAAAAAAAAAAAFzB8OHDlaC5Zs2a
O3bsEFMqVKhgX3BfvHjxP/74Q2O2r7/+Wl1zjRo18pttzJgx6mzLli3Lb7Yt
W7aos3Xo0EFPneY5dOhQsVwqVqy4fft2uYWZoUWLFqJ1W7dulV0IAAAAAAAA
AAAAALiCli1b+vr6TpkyRb2w3e7g/rHHHtOeLTs72/Jy/qNHj+Y5W/Xq1dV5
Ll26lN/a0tPTReXKbOIf9+7d01OqSd5+++3cwb3g6ek5c+ZMiYUZ7vLly0rT
5s2bJ7sWAAAAAAAAAAAAAHAFEyZMsArQ7QjuBw8eHB4ePnfu3ALntHzS/erV
q/Ocx9/fX5nBz89Pe22VK1dW13b58mU9pZpk5cqVeQb3iqeffjo7O1tieQb6
5JNPlEbFx8fLrgUAAAAAAAAAAAAAXJMdwb1+PXr0UFf+5ptv5p4hKyvL09NT
maFEiRLaa6tWrZqTBPfffPONRnAvjB492jWy+4SEBKVFvXr1kl0LAAAAAAAA
AAAAALgmU4P7jh07qitfsWKFdgEeHh4pKSn5rSo7Ozs4OFiZ87777pN7q/yf
f/5ZO7gXZs2aJbFCo6jvYIFPRgAAAAAAAAAAAAAA2MfU4L5mzZrqyk+ePJnn
PP369VPn2bZtW36rOnLkiDpb//79ja3TVikpKQUG956enps2bZJbp+Pq1Kmj
NOfRRx+VXQsAAAAAAAAAAAAAuCbzgvsrV66ot8GPjIzMb7bvvvvOw8NDmS02
Nja/2Z5++mllHn9//xMnThhYp31CQkIKzO5Lly599uxZ2ZU6JCgoSGlLdHS0
7FoAAAAAAAAAAAAAwDWZF9y/++676prXrVunMeeUKVPUOZcsWZJ7hvXr13t5
eYm/Fi9e/LPPPjOwSLupl6Jr6969u+xK7Xfjxg21IdwqHwAAAAAAAAAAAABM
YlJwn5WVVb9+fWW1zZo1E//Vnn/RokUlSpQo9teT7vv167dt27aLFy9evnw5
OTl51KhR3t7eYnrHjh2PHDliVIUO6tSpk57gXtiyZYvsYu10/PhxtRUxMTGy
ywEAAAAAAAAAAAAA12RScL9o0SJlnSVKlPjll1/0LPL777+/9tprkZGRubPv
Jk2afPLJJ9nZ2UaV57hRo0bpDO4jIiIyMzNl12uPffv2qa14/PHHZZcDAAAA
AAAAAAAAAK7JjOD+zJkzyuXzwnvvvadnkZs3b86fP79Zs2a+vr5iKR8fn/Ll
y1esWNHPz08tr1q1amJtBV68XzheffVVncG9sHLlStn12mPr1q1qE5544gnZ
5QAAAAAAAAAAAACAazI8uL9z54561Xx8fLyeRdavX1+mTBllkXr16n3yyScp
KSnKn9LT0zdt2tS8eXO1yC5duqh/leijjz7SH9y3atVKdr32+PTTT9Um9O7d
W3Y5AAAAAAAAAAAAAOCajA3u792798QTTyhr69evn56r49euXevl5aUsEh0d
nZqamnuezMxMsTa1zl69ejlYp+P27NmjP7gXjhw5Irtkmy1btkytX/S/7HIA
AAAAAAAAAAAAwDUZG9yPGTNGWVXHjh31rO3SpUvqTfVLlix59erV/OZMS0ur
WrWqWuqXX37pYKkOOn/+vE3Bvc6bDziVxYsXq/U/+eSTsssBAAAAAAAAAAAA
ANdkYHA/efJkZT2dO3dOS0vTs8gLL7ygvnpCQoL2zPPnz1dn7tq1qyOlOi4r
K8vX11d/cB8WFpadnS23Zm1jxox55ZVXLKeI/6r1P/PMM7IKAwAAAAAAAAAA
AADXZlRwn5iYqKzkscceS09P17lUw4YN1VffsGGD9sw//PCDOnNwcLDdpRol
PDxcf3Av/PTTT7JLztf58+c9PDzCwsIsJz7//PNq8ZMmTZJVGwAAAAAAAAAA
AAC4NkOCe/XC+U6dOt25c0f/gsHBweqrF/gU+KtXr1rm4Ldv37avWqO0b9/e
puB+/vz5cgvW8OGHHypF3rp1S504evRotfgZM2ZILA8AAAAAAAAAAAAAXJjj
wf2ECROUxWNiYvRfa6/w9/dXX/3EiRPaM9++fdsyB09JSbGjWgMNGzbMpuC+
U6dOcgvWEB8frxR5+vRpdeKAAQOKxFkHAAAAAAAAAAAAAFCkORjcJyQkKMt2
7do1v8U///zzqKioQYMG5f5T5cqV1VffvXu39mudPn1anTkwMNDWUg03Y8YM
m4L7oKAgp33MfadOnZQiT548qU6MiYlRi1+yZInE8gAAAAAAAAAAAADAhdkd
3GdnZz/33HMFpvbCwoULxTzh4eG5/9SlSxf11cVs2q+4du1adeZ27drpL9Uk
//znP62ieR8fH+3s/sKFC7KrzlvdunWVCo8fP65ObNOmjVr5mjVrJJYHAAAA
AAAAAAAAAC7MvuA+Ozt77NixylLdunXTXlAjuH/vvffUV2/atKn2i3bt2lWd
OSkpSWep5tmxY4dlKD9w4MDMzMwNGzZY3kbAilhEdtV5u++++5QKLR9Y0KBB
A7Xybdu2SSwPAAAAAAAAAAAAAFyYHcF9dna2+kj0unXr7t2794CmCRMm5Bfc
p6enV69eXS3g3Xffze9Fv/jiCw8PD2W2SpUqpaWl2d9mg1jeul+YN2+eMv38
+fOisXkG9855w/nbt2+rFVoG91WrVlWni/dRYoUAAAAAAAAAAAAA4Equ/125
cuXUcPby5cuWf8rKyspzDWpqb5M8g3vh+++/DwoKUubx9vaeP3++1fkDooyl
S5f6+/sr8wQEBOzevdv4frHd3bt3vby81Aa+99576p9+/PFHX1/f3J0wYcIE
iQXn5+TJk3kG96VKlVKnnzp1SmKFAAAAAAAAAAAAAOBK8gyU85TfA9mDg4Nt
Te2L5R/c5/yV3desWVOds0KFCkOHDp0+ffrMmTPj4uIsr/sWK3GS1F5RqVIl
tbZ33nnH8k+TJ0/O3QnDhg2TVaqGffv2qRVaPuPe29tbnX79+nWJFQIAAAAA
AAAAAACAKwkLCwvV59KlS3muoXLlyjrXYKlhw4YaVaWlpb355puNGjXKL/ev
V6/ewoULU1JSzOkVO7Vq1UqtUJRn+aerV6+WKFHCqhW9evWSVaqGbdu2qRUe
PXpUmZiamqpO9PX1ze/2CwAAAAAAAAAAAAAAF3Pjxo1t27atWLHizTffXLx4
8fLly7ds2XL16lXZdeVt4MCBarqtPuNeNXToUKvgvnPnzlLq1LZu3Tq1wsOH
DysTL168qE6sUaOG3AoBAAAAAADgPu7cuXPo0KH/9//+n+xCXNalS5f+/e9/
p6WlyS4EAAAAMMbUqVPVdHvmzJlWf33ppZesgvvWrVtLqVPbypUr1Qp//PFH
ZaL4hzqxY8eO6swZGRlHjx5lVA8AAACgEGRmZp46derGjRuyCwEAmOjmzZv7
9u17//33J06cGBMTU61aNU9Pz2LFigUHB2dnZ8uuzjVFRkaKHvby8qpdu3bf
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
wX0Owb35CO6dgfh4jxw5UhQ5bdo02bXgb65duzZ9+vTy5ctrjAQ8PT1bt269
adMm2cVKJsYMr7/+evXq1bUHTo0aNVq5cqX2vXxd0m+//ZaQkKD92GVvb+/O
nTsT9RZpBPeAXMOHD9feDQnLli2TXaa1unXrFli2hqioqMuXLxf4KuIYX5n/
kUceUSc2b95cmejl5bVx48YWLVpYrnnv3r0mNhsAAABFhzi8bdasmf4x6v33
3//DDz/IrrpoILgH9NAf3CuHyS529482bdooTWPTKhfBfQ7BvfkI7qXLzs4e
OnSoUiThr/PIzMx87bXXQkJC9I8H+vfvn5GRIbtwCcRn+P3339c+vcHKo48+
evPmTdmFF5LU1NTExER/f3+dnePp6SkO2dzw3AbXQHAPSCT2LIGBgQVuZhcu
XCi7UmuVK1fWvw+1VLx48QULFujcZZQtW1ZZyvIWT9ovvXPnTtMaDQAAgKIh
MzNzwoQJXl5etg5WQ0NDC7wrFHII7gF9bAruiznlsb8jCO6dBMF9DsG9+Qju
pZs6dar6yTly5IjscvBfJ06caNiwoU0jAUWPHj1k117YLly40L59ezv6qlmz
Zu5wnsOePXvUKxxtkpCQILt22IPgHpBIHJXr2cDOnDlTdqXWKlSoYMeeIjIy
0qYfQgMCApQF+/Tpo0w5c+aMr6+vxkvs27fPnBYDAACgaLh69eqjjz5qx2BV
0apVKy5MKBDBPaCHrcG9OAR2pce2Etw7CYL7HIJ78xHcy7V582YPDw/1kyMG
w7IrQs6mTZtsutDeyscffyy7BYXn4MGDdl8kKMyZM0d2C8y1YsWK4sWL29c5
np6e3KC4KCK4ByTSecP58ePHy67Umq3BvZ+f35IlS2z6CVQcTKljzlGjRu3e
vVv0g3qolR+ukAIAAHBnhw8frlq1qk0j1dwOHDggux3OjuAe0MPW4L7YX6e7
u8y5QwT3ToLgPofg3nwE9xLdunWrXLlylrsSd7gA2cklJSXZce8vS82aNZPd
iEKyatUq/bd/z1NYWJiLPWxIlZmZmZiY6EjnCH379pXdDtiM4B6QZefOnTq3
rsOHD5ddrLVKlSrZtIOoWbOmrS8hhp3q4pZnjWoT2zQz2gsAAADnt3v37hIl
Stg0TM3TjBkzZDfF2RHcA3rYEdwLS5culV24MQjunQTBfQ7BvfkI7iV6/vnn
rfYj165dk12U+8rOzh41apQde38rnp6ev//+u+zWmG727NmO95Wwf/9+2U0x
XkZGRkxMjOOdI/aArnpigwsjuAdk6d+/v86ta8+ePWUXa039ySs/FSpU6NGj
h/rfpk2b2voSx44ds3U35OHhkZKSYkZ7AQAA4OQOHjwYGhpq6wAyT4MHD5bd
GmdHcA/oYV9wX6pUqVu3bsmu3QAE906C4D6H4N58BPey3Lx5MygoyGo/wv1I
JZo4caIdu/48ufwDYZOSkozqK9d7soDYW/Xp08eo/nGHk0BcDME9IMUff/zh
5+eX37Y0ICBgwIAB6n+joqJk12tNHDto7AuGDBmSlpaWnZ2t3ugmOjrapvV/
9913tWrVsnUfVKFCBZPaCwAAAGd26NAho1J7oUuXLrIb5OwI7gE97AvuhaSk
JNm1G4Dg3kkQ3OcQ3JuP4F6WN998M/dOxPVCzKJi0qRJ9u3387Rx40bZDTLR
W2+9pf8WuwUSXwTZDTKS2FX17dvXqM4Rjh07JrtNsA3BPSDFggULNLalw4cP
nzdvnvrfJk2ayK7XmuXV9LmdPXtWmS04OFiZov9ZKhcvXoyLi/P09LRjH9S+
fXvTWgwAAAAndeHCBasnezqoT58+stvk7AjuAT3sDu6rV6/uAjc1Jbh3EgT3
OQT35iO4l6VDhw65dyJO+NBVd7B48WL7dvr5+fbbb2W3ySzr1683MLUXli1b
JrtNRkpISDCwc4Rz587JbhNsQ3APFL7s7Gzty8l37969cuVK9b81atSQXbK1
WbNmqeVVqlRp3LhxU6ZMUaeoj1JSr3t68sknC1yn6JZFixblvr+TfqNHjza5
3QAAAHAuWVlZajZklGnTpslulrMjuAf0sDu4F7Zt2ya7fEcR3DsJgvscgnvz
EdxLIT7P6s1OLYWGhv7555+yq3MvBw4c8PX1tXunn5uHh8fly5dlN8sUZ8+e
NfBWaQpXeqzAunXrjD2rITg4ODMzU3azYBuCe8DK0qVL40wWExOjsS0tWbKk
mKdLly7qlOLFi5tdkq369+9///33N2nSpEePHsqU9u3bqwWPGDFCmaiOWCIi
IrRXOGTIELFCB3dD0dHRprYaAAAAzqZVq1YOjiFz69atm+xmObv69eur3RUW
Fia7HL3U4GbgwIGya4FbUJPrwMBAWzdEtWvXll2+o8qXL6+0JTY2VnYtbq1t
27bKG1GnTh3ZtUij/jw1cuRI2bUUoGHDhup2oHTp0rLL0UuN4fr37y+7FlOU
KlVKaWDfvn1l1/I/Go/Abty4sezq3MiIESPEt9XWHb02JSBwSVWqVDG2r/z8
/NQwoqgbOnRoQECAsf0jOlx2syQT2+2OHTu2a9euffv24h/iYH/w4MGyiyqA
5XO0i7nWqSmAHVJTU409owkAAAAAAAAAAAAAbLJ69WrZwSkg2YIFC3qZqXv3
7l5eXvl9B319fWNjY5XZLKc//vjjplblOPWUYNEEdaJ6FkStWrW0F3fwXLJS
pUqJHjO5iQAAAHAuDz30kCNjyDy1aNFCdrOKgAcffNByKC67HL1KlCih1Ny1
a1fZtRRhkZGR4eHhLVu2lF1IEdCkSRPlI1ejRg2xbbH1MoE2bdrIboFDypQp
ozQkKipKdi1urWnTpsobUb16ddm1SOPj46N0Qs+ePWXXUoDatWurG4HQ0FDZ
5egVHBys1NylSxfZtZgiJCREaWDnzp1l1/I/rVu31tiJ+Pn5dejQQXaNbsGR
B7/mKSAgQAkIXE9YWJixfeXt7e0yA3vxpqt7K6OULFlSdrMkaN++vToKLVCF
ChWccM9ldcvu7777TnZqCri4+fPna2wonn/+eXXO4sWLq9NPnTolsWY95s6d
q5RapUoVdaL6u8T06dM1lr148aIN+5u/8/T0fPrppzMyMkxvIQAAAJyMGooZ
RRyzy25T0cAz7t3TvXv3nnnmGaUPH3vsMdnlFAHqM+6fe+458d9FixbZtEUa
PXq07BY4hGfcOwmecZ/DM+7NxzPupdi5c6f2fkR88j/++GPZZbq477//3qad
e4E8PDw2bNggu1mmECNwjesZ7fPmm2/KbpZhxLfV2M7x8/M7ePCg7GYVqps3
b8bFxdl6rmyVKlWcLX3jGfdAIbM8ddaK2HOdOXNGndPygS///ve/5ZWsy/Tp
05VSRQOVKZmZmWr98+fP11h29+7dNm1LVY888siBAwcKpX0AAABwLjdu3DD2
KVcPPPDA1atXZTeraCC4d09xcXHq+z527FjZ5RQBVsF9TkFn8ufeKMmt30EE
906C4D6H4N58BPdSHDx4UM/eJDY21qnKdjGzZ8/Wv2fXY9KkSbLbZJZVq1YZ
21d9+vSR3SYjWY60DfH222/LblOh+vnnn2vVqmVfX4kdblZWluwW/A/BPVCY
duzYobF9eOKJJyxnbt68ufqnr776SlbNOiUkJKhbOWVKWlqaWv8777yjsezq
1att3Za2aNGCY38AAAB3tn37dlvHkBrKlCkjjvRlt6nIILh3Q8uXL7f8yqxc
udKmxTMyMmbNmtW2bdsuXbocPXrUpCKdTe7gXpg3b57+TVOR3i4R3DsJgvsc
gnvzEdxLcevWLZ1nsfr4+PTt23fPnj2yS3ZBnTt31r9bL1D//v2dKj001ujR
ow3sq3bt2t25c0d2m4wUERFhYP+IvYnsBhWq9evXqw9tsc+//vUv2Y34H4J7
oDD169dPY+Owc+dOy5l79Oih/mn58uWyatZpxIgRSqmtWrVSpojRo1q/9q86
CxcutHVDGh8fXyjNAgAAgJN66aWXbB1D5ueBBx44duyY7AYVJQT37ubKlStq
7KU4f/68/sX/85//NGrUSF22Y8eO5pXqVPIM7oXXXntN59Zp0aJFsop3HMG9
kyC4zyG4Nx/BvSzh4eE6dyiKKlWqiE3BF198YdN+HBr0P0q7QCNGjMjMzJTd
IBPVrVvXqL6KiYm5ffu27AYZzNfX15DO8fDwmDFjRnZ2tuwGFR4xtPb09HSw
33r27Cm7Hf9DcA8UmqtXr1o+tt6K2HNZbU4tT0J74403ZJWtU+/evZVSO3To
oEwR7VXrX7duncayL7/8sp6NZ+3atdVXIbgHAABwc7NmzdJ/GK7h4Ycfvnz5
suzWFDEE9+5mzJgxlt8a0ZP6l925c6fVb9qtW7c2r1Snkl9wn2PxsDltXbp0
kVK5IQjunQTBfQ7BvfkI7mUZOXKknr1JnsLCwiIjI/v27SvGde+88862bdvO
nTsnu0FFj+hGu98ClYeHx7Rp02Q3xXTq98hB4mPvkmc4+Pn5Od45vr6+zn8F
qLHmzp3reL8JlSpVkt2U/yG4BwqN9sPsxBG91fwzZ85U/zplyhQpNevXqVMn
pdTu3bsrUy5duqTWv337do1lJ06cqL3ZDAgIEKOXjIyMDz74QJlCcA8AAODm
lixZYtOReJ5iY2NTU1NlN6XoIbh3K6dOnfL29rb84gwfPlzPgnfv3hVHtT4+
Plbfu/Hjx5tds5PQCO6FcePGFbiNCgwMTE9PL/zKDUFw7yQI7nMI7s1HcC/L
pk2bCtyV2MSprjktEh544AEH+9zf33/16tWy21EYIiMjHewrMSJ9/fXXZbfD
LCVKlHCwf0qVKmV1S2eXt2jRIgc7TeXn5+c8tykguAcKTe3atfPbLISGhub+
wfDdd99VZ3jqqaek1Kxfy5YtlVL79u2rTPntt9/U+g8dOqSxrNXlG1a6dOki
VqXMuXjxYmUiwT0AAICb+/TTT+04HleFhIQsWbLEeY7NixaCe7fy3HPPWX19
xLFqgUv99NNPlrfHV3l4eLjPkym0g/usrKz+/fsXuLHatm1b4VduCIJ7J0Fw
n0Nwbz6Ce1nER1od3hjixRdflN2mIqZZs2aOdHhkZOSJEydkN6KQ6Bn2aKhb
t65rx5cO3r0hJibG3R6B8eGHH4ojC0c6zZKPj4/z/DhAcA8Ujp07d2psFiZN
mpR7kQ0bNqgzOP/pjuoQfdiwYcqUc+fOqfVr33101KhR+fWMGHxabjDnzJmj
TB83bpy57QEAAIBzcyS479GjB9GtIwju3cetW7eCg4OtvkHffPONxiJXr15N
SEjI7zGdnTt3LrTipdMO7nP+uilB27ZttbdXRffeuQT3ToLgPofg3nwE9xKp
tyd1XO3atdPS0mQ3qIh59NFH7evtoKCgf/zjH84TFBaC4cOH29dXYlQ5Y8YM
MWqS3QJzVa1a1b7+CQsLW7t2rezyC5sYXmo8ltoOlStXlt2m/yG4BwrH0KFD
89smeHl5nT59OvciBw4cUOdx/ocAii2bUuqYMWOUKRcuXFCm+Pj4ZGVlaSwb
Fxdn1SfqI12sftWZOnWqMj0xMVGdePbsWZ7BBAAA4G7U4F4Mp/Ufj0dFRWln
jtCD4N59fPjhh7m/R5s2bcpz5pSUlFmzZqkBWW6enp4//fRTITdBogKDe+Ha
tWvVqlXT2GoV3VMdCO6dBMF9DsG9+QjuJcrKylLvg+oIPz8/Ntd2sCO4DwoK
mjRpkvZlbi7JjuBefCxHjRp16tQp2bUXhvDwcFv7p2zZsrNnz75165bs2gtb
RkZGRESErd2lTb2PtDMguAcKQUpKitgj57dNiI2NzXMpy69n9erVC7lmW5Uu
XVopdcKECcqUK1euKFMqVaqkvazlrfIbNWokDirVq/V79+5tOaf6EMCpU6eK
/65bt65hw4bivyVLliy6D/4r0B9//PH+++/369evbt26oqUhISHlypUTH4no
6OiJEyeuX79e7Kpk1wgDiEOt7du3JyQktG7dunz58uKNDg0NFWM2caj+5JNP
Ll68WH1mBIwlBj9TpkyJioq6//77lW6vUqWKOCofMGDAvHnzfv75Z9kFGk9s
n5cuXZp7q9KxY0exVdmwYQNbFUMcP3781Vdf7dKlS9WqVZWPltghiiOLnj17
zpw5c//+/bILLHrOnj27aNEiMXCqWbOm6E/RqxUqVBD/7tq16wsvvLBjxw7t
EwWLtHv37n399dfPPfdcq1atxBdW3Uc0bdp0+PDhb731lnumkGpw361bt8ce
e0z7MFx0mtjuccBrFIJ79yF2ZHn+rmV1gdiRI0fEKEKMK7S/iUOHDpXVECn0
BPfCsWPHct/WQCV6tYhejkdw7yQI7nMI7s1HcC/XyZMnNX551klsK2S3o0hS
g/vnn39eHPJrd7L4prz88svXr1+XXbUcanA/btw4jWcKK8TRrhhbXrhwQXbV
hUcN7sWOoFSpUhqd4+np2aRJk4ULF+Z++LKbeO2113Rt12yxbt062c36H4J7
oBAsX75cY5uQ3yU/mZmZYiOszBMYGFjINdtKHR8qkbogdhzKlKZNm2ovO3Pm
zOLFi8fExGzfvl2ZkpGRoSwrduiWc44cOVKZHhsba3U2qUsmIGLgPWjQIPX+
A/kJDQ2dMWPGnTt3ZNcLO4n37o033ijwhkhig9CpU6ejR4/KrtdF3Lt3TxyW
1qtXT7vbhebNmycnJ8uu1xgnTpwYOHBggVuVkiVLii0zWxW7bdy4Uf2lWsOD
Dz746aefyi62aNi3b1/Xrl3VcVF+Klas+Pbbbzv/77E2EQOqefPmqbc2yo+X
l5cYSomRg+x6C5Ua3A8ePFj899dffxX70yFDhrRo0aJ+/fo1atRo3Ljx448/
/sILL+zcuVMMrWXX61II7t3ErVu38rvjfYMGDcaOHZuYmNi/f3/tC8ZV/v7+
7nYmqs7gXvjoo480uq6IXmhGcO8kCO5zCO7NR3Av3ebNm729vfXsjvOUkJAg
uwVFlRrci4PWu3fvbt26VYyOunXrJr6/4pC/bt26LVu2FEcob7311pkzZ2QX
K5ka3H/88cdZWVl79ux56aWXnnjiiSZNmtT+S/Pmzfv16zd//vzjx4/LLlYC
Nbj//fff09LSvvjiC/HF7NSpk/gsiaMYcYQrRlYjRoz44IMP3PB2DZZSUlLK
lClj9+YuT7Vq1XKqEQLBPVAIoqKi8tsmiN23xsnzlpugP//8szBrtpWPj49S
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
tWvXll2LW3vggQeUN6JMmTKyazGF2M6LIYHl9l989R588EHL39DUn87EEZPE
UvUQTVC/+wEBAbLL+S/RkzVq1NDew6q/btWrV09iqeZRG2jfj59SiG+B1YNX
ijn9bxpFUVBQkFsdgjmidOnSSl+J4aXsWpyReqhiuXWFlYYNG6rHGjp/RxIj
UnGcKLtw24jDKMsm7NmzR3ZqCsiUmppq+IWKAAAAAAAAAAAAAKDf2rVrZQen
gGQbN25MNILGU5W7du2qfz3qqVZCjx49lIkDBw4MDAx0/CsvVj569GhD2mu3
AQMGONiKBx988LnnnpPbCvuUKlXK8TfRUkhIyPjx42U3C9aioqKMfaOL/XXD
dtnNcnY9e/Y0vNvbtWsnu1kFCA0NNbbJYoUTJkyQ3SznEhcXZ2wnF/vrjjqy
myVTQkKCr6+vsV1auXJl2c3Sq23btsa2Xejdu7fsZhUSMTZWmly3bl3Ztbgd
y2cAVaxYUVYZ3bt317/vu++++9RLop5++mlZNRdR8fHxYkxbp06d8PDwiIiI
Jk2aPProo3369HnmmWfUeWJiYtTeLl269MSJEyUW7CQ6deqkdIjoMVuXbdSo
kdqf4sjRjPLMpt52bOjQobJrcWtdunRR3gjxoZJdizEmTZrUuXPn4OBgndt/
sUVSR5tiWdnlF6BFixZq5eXKlZNVhhhl6f/NSrwX6sMIpP/MaBL1ZqGjRo2S
XUvBxF5b/xek2F8PZGnYsKHYrcsuvEhS764zaNAg2bU4O/Ui4m7dusmuxRmF
hIQo/SO+wrJrcV7jx49Xesnf31+dKI47Ro4cKb6DYjs2cODAuLi4on4kMmbM
GMutNLfKBwxx69Yty8Ddkhj33rlzR/+q1OcwCsqD6ZcuXWrg79viCNq0btBl
48aNdhcfEBAgekNu/XY7ePCgUW+iwsvLa/v27bKbhTy0bNnS2Pe6d+/esttU
BIjRmrHd3rx5cyd/Xvb+/fuNbbLYquzcuVN2s5zOrFmzjO3nypUrX7t2TXaz
ZFqzZo2xXRoUFFSEntuo3ufNKEOGDJHdpsLDM+4lkv6M+99++61z5862fkHU
e4/zjHszNG3aVO3qb775RnY5TsHuZ9wL//jHP9T+bFx0nnNtiWfcOwkXe8b9
L7/80rp1a7u3/zzjvkBiF9mtWze7e5hn3EsnPuTt27e39R1UvPjii7LLL3p4
xr1+PONeG8+410N9xn3p0qVl12IinnEPmOGjjz7Kbwhk6wF7ZGSkuuyECRMm
T55s39ArP76+vr/99ptJ/aDHJ598Yl/lbdq0KUI/y+eWlJRk7Fv56quvym4T
8pCWlubj42PgGx0REXHr1i3ZzSoC1HOeDVGuXLmzZ8/KblMBFixYYGCThdde
e012m5xRdHS0gZ3s7+/P0f3TTz9tYJd6enquWbNGdpv0unnzZu7nTjrioYce
SklJkd2swkNwL5Hc4H7Pnj2WjwC2A8G94ZKTk9Xu7devn+xynIUjwb3liW2d
OnUyozyzEdw7CVcK7jdt2qRekGgfgntt4ttauXJlR3qY4F46u386btSoUWpq
quzyix6Ce/0I7rUR3OtBcA/AbrGxsfmNgo4dO2bTqtRbgAolSpSwb+ilbdq0
aeZ0gy52BPfiMG3JkiXZ2dkSy3Zc9+7dDXwTx44dK7tByNuBAwcMfKOrVKki
90yboiItLc3AbhfbnEOHDsluU8Es70/ruHHjxslukJMy8HkEPj4+GzZskN0g
+erVq2dUlwqLFi2S3SAb7Ny508C2V69e/dKlS7LbVKgI7iWSGNyLAwHH7z9G
cG+4J554QulbsXc7deqU7HKchSPB/VdffaV+Yvv3729GeWYjuHcSrhHcZ2dn
z5kzx/EzHgnuNXz44Yf53T5UP4J7ub788kv7vibly5c/f/687PKLJIJ7/Qju
tRHc60FwD8A+qampAQEBeY6CIiMjbV3bU089ZcdwyyZi8GlGP+j0+eef21rw
ggULJBZsFKMuB/bw8Jg2bVpRP43Bhb399tuGvNHF/vqqchil008//WRUt1eu
XPnw4cOyG6SLg1dGqMRWZcaMGWxV8qPeBNJB991339dffy27NU4hMDDQkC71
8fH54IMPZLfGNq+99pohbReaNm3qbql9DsG9VLKC+4SEBEO+MgT3xjpz5oy3
t7fSt2PGjJFdjhMx6or7Z5991ozyzEZw7yRcILi/d++e2Ncbsv0nuM/P888/
b0gPE9xLlJaWZt/PAr6+vrt27ZJdflFFcK8fwb02gns9CO4B2EfjUa3icMnW
tU2dOtWOEdf/Z+++46Oo1v+BpxFIIEDoAkFCIHQEpBcp0gmX0AxVUCEUpSq9
BZTeexMiLSAqTToCoRdRigSRDkrvAQKp/J7L/Jzv3LO7s2dnZ/ds+bz/uC9u
nPKc2Sln5jPFUteuXbPBkuCifI7AlPTp02fOnFn+v053Wd6oIkWKWP/DUdd6
+fLlopsCamJiYqz/oUmDBg3whnx+tE/TZbGXKVPGiV5xEBISYn2Taa+yYsUK
0U1xaLq82DxfvnxO8RoH+1Ae4jULCAigHoXoplhMr5u7wsPD3fO1lgjuBRIS
3OuVKZBbt27Zp2Y30bdvX2nB+vv7Y9kqWRPcL168WF5jp0+fbovybA3BvYNw
9uA+LS0tMjJSr/0/gnujRowYodcSduRc2xpOEdxHRUVp+9XoaCW6dieG4J4f
gnt1CO55ILgHAG0iIiKM9oKyZs2q4ZrqF198oa3TZRGB4a/6S2I9PT2//PLL
+Pj4OXPmyH9cv369qGp1VL58eSt/tVy5cu3du1d0O8CM3bt3W/lD01bQu3fv
5ORk0U1xJn///beVi520atXKuT4VXbZsWSubnDt3btoni26Ho5OfKNSsatWq
eNJTiQ5nVi7SIkWKnDt3TnQ7tJBzZ83oGPHVV1+lpqaKbooYCO4Fsn9wr+/9
zA8fPrRDzW7i8ePH8jfd6OxVdDmOxZrgfsqUKfIau2HDBluUZ2sI7h2EUwf3
aWlpOr6I0svLy/FfLGb/4P6bb77RawkTV31PoOMH90+ePNH2KjN8Js9KCO75
IbhXh+CeB4J7ANAgISHB1JfoNZwinT59Ol26dBo6XZYSeIGFerwqhTVq1Ega
TD7TJPv27RNVrY6s/MZ9mzZtHjx4ILoRYN7+/fut+aELFiyIl2lrYGVwHxgY
uGjRItGNsJiV37jHXoVThgwZNC9kPz+/iRMnOv5jPnZWtGhRzYvUy8srMjLS
ue6xUdq+fbvmthM6r9+zZ4/oRoiE4F4gOwf3M2fOtGZjMfT8+XNb1+w+xo0b
Jy1Vb2/vS5cuiS7HsVgT3CtvVnHSF/UguHcQTh3cK1Ns61FvXHSDzLNzcK/j
1/0krnprnOMH99re99igQQOcn1oJwT0/BPfqENzzQHAPABps2rTJVF/o5MmT
Fk0qKSnJ+scnOdWrV89GC4Snmco7Qv39/du0aSO/8Llt27bSYCtXrpSHcY2z
fmqmth8rKChoy5YtossHXpqDe29v7759+zpvGiWW5uDe09OzXbt29+/fF90C
LVq1aqWt1e+++64zvmNcFFO355lVp04dxBlGlStXTtsiLV26tLOfvGgO7tOl
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
WeLt27ePOl2G95yQ/Pnzd+jQYfHixSqX8uzD+uD+8uXLy5Yt69y5c3BwsGFL
vby8mjVrRueMDv7KdyvFx8dnzpxZ3+2ocuXKTrHQ6PdlKqe/PHr0SHRdLgvB
PT8E9+oQ3PNAcA8A/GbPnm3Yo+vXr59Fw69Zs0Z9LrTTlgem8zjmvz5+/Fi+
oZ1TmzZtdGg8aILg3k0guBcCwb3oWlwZgnvdIbj3QHCvFYJ7gRDcg0tKTk7O
mTOnRefUZkVGRopulg7S0tKWL1+eLVs2i9qeLl066R8I7i2Smpr6zjvv6Lse
du7cWXSzHMg///wzceLEkiVLmlpcOXLkqFu3bp8+fRYvXnzs2LH4+Hh7lmdp
cP/ixYsTJ04sXbq0f//+9erVy507t6l2hYaGjhkz5tq1a7ZvhHgrV67UdyPy
9fV1ll3ZgwcPwsPDvby8aCdcq1atTZs2ia7IxSG454fgXh2Cex4I7gGAH/WC
DDt1mTJlMvUaos8//5wZOHv27ElJSepzoZNlPz8/aXjmtOvs2bOFCxe2tNvp
qt+xcgoI7t0EgnshENyLrsWVIbjXHYJ7DwT3WiG4FwjBPbikEydOWHpOre69
995LSEgQ3SxrPX/+vGXLltYsB2dJuxzEmTNn9FoDJSVKlKAfUXSzHNGpU6eG
Dh1Ky0d9AXp6egYHB4eFhfXt23f69Ok//PDD8ePH79y5Y6OqVIL7+/fvnzx5
cv369TNnzuzfv394eHhISIiXl5d6/UWKFKGjtrtFip06ddJh41GYPXu26DZZ
JikpKTExUXQVbgHBPT8E9+oQ3PNAcA8A/P766y+j/brGjRsb/VyU4Wkv5/XG
0NBQecrSX9LS0hYsWJAxY0ZL+5y0c0MXTiAE924Cwb0QCO5F1+LKENzrDsG9
B4J7rRDcC4TgHlzSkiVLLD2tVlGwYMFbt26JbpO1Ll++XKpUKSsXBYJ7i6xY
sUKXNVASFBR048YN0W1ydJcuXZo2bVrjxo39/f35l22GDBlCQ0Pr1q0bERHR
s2fPYcOGTZ06denSpRs2bIiNjT179uyVt2g/8Pgt5jaepKQk6e93796VhqRR
9u/fT91CeRY5c+Zs27ZtvXr1ihcvLj/Iw1lb/fr1J02aFBcXJ2qpivXee+9Z
sJ2YM2DAANENAseF4J4fgnt1CO55ILgHAH5paWlZs2Y12rvr16+f4SeQqlWr
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
P8opBAYGqiwo/gCC6ue5EkudVVNToN6sPNi1a9dMDUY/h/oszPbNaHGtX7++
VatW9HMYLtL8+fN/9tlnP/30k0U9ap7gft68eSqLmtZ5eUhaw6l3mjFjRqOr
0Icffqje7bFFA02hzrOpFlE329RYK1asMDXWN998Y2qsGTNmqPzu8jJ5+PDh
wIEDacU2uslUqVKF5m59ww3RSktNph0UbZWenp6Gsy5atOgnn3xC5zIaJi48
uKcVRmXtPX36tDzkiRMnwsPD06VLx8ya9pP9+/e/d++ejvMyi86A2rdvzyTR
ShUrVty+fbtcuanBSKdOnUzNxVRwn5qaunjx4nfffddwarSG1K5dm/YbZpvQ
u3dvue3lypVTTuS9994ztZQsemfL/v37leN6e3sr59KxY0dTc/nhhx94pv/i
xQva6CIiIoxulaGhobRiaNsuGMojXfPmzZVz0XykUwnuDx8+XLNmTaNrC+eh
WcXly5eHDRtWqlQpLy8vZuLp06eno8DkyZNt8WoXqnnLli30Y9EGa9guPz+/
ChUq9OnTZ9u2bXSqa2oiO3fuVFnayoOd0oMHD1TGiouLMzU7Wn9MjfXll1/K
gyUnJ8+fP79kyZJMo2iFr1Sp0sqVK2mDtWbRuTBaK44ePRoVFVWrVi2jWzGt
k9WqVRs+fDhzJc0olR2y0oIFCwzHpY6i+litW7e2wQIA/dFpGu1dw8LCqFNq
+DvSfo/2fj169KDjsrbpmwruaTP/9ttvCxYsaHT9+eCDD2jHrl8rAQAAQKND
hw4pe/XUMVAesitXrmy0869ys73s1KlTdIpduHBhw55ApkyZmjVrNm/ePCsf
eLHpLPiDe/4rkNrG2rp1a+3atQ1PV+kE/5tvvnnx4oW2BtK5eaNGjZiLEjJP
T8+GDRvKocDy5cuNDiYZN26cthrevL2IQROneRk9/cmaNSst+REjRlDXUdtZ
P60AdHJKnWF/f3/DNpYvX54m/vvvv2uuX3bt2jXlL8hcwShSpIjRH3ratGlG
R2csW7ZMntHLly+nTJlSokQJw8Xl4+NDmzCdcauXevXq1ZEjR5YpU8ZwpfL1
9a1Tp87EiROtfBrLDrMAAHBSsbGxKodUOWhYv359lixZVIako9iwYcPS0tKs
n5dZ1B8oXry4yqRkFStWvHXr1htdg3tqY1RUlOEBhdG8eXP1e8PatGnD0wRD
27Zt41xQ7733Hs8EVTrSyjsKVPpX8fHx6rNQSX7fvO1bUjeSp9R33333+++/
52w+T3DPBEmMCxcuvHl7W0KfPn2Mxr5KKn1gGzXQFFP5OGnVqpWpsbp162Zq
rPfff9/UWKVLl1ZpDq0YNMyBAwfy5s1rtu3U/dbrTuBnz54tXry4atWqZmcq
K1u27NGjRy2ai/DgfvDgwSotkqLq5OTkgQMHqq+9AQEBclBuzbx4LF26NHPm
zKo/xf/Xs2dPKl7f4P7JkyfM3w3RsqI9v3orjN7AYxZNmXMpkQULFmiYBfnq
q6/Up0znsDNmzDB6B5GhChUqHDp0iL9sQx999JG2htBu09Q0TQX3Y8aMMXto
poOahtu26RS+S5cupq5UKNH5b9euXR8+fKh9kf2vw4cPM9fEVPj5+XXo0GHP
nj2GeffkyZNVRpQOdoboJFplrB07dpgqW2UFo/6YNAydfTP3vRiqXr06nr5n
XLx4cejQoUbv4jCK1smOHTs+fvxYZZoI7t0Z7a9op8p5yiChDfPcuXOWzsho
cP/06dMmTZqoz46OnlOnTrVB0wEAAMACdC7P31uQ9enTR2WadEYQFhbGMx1/
f3/qA6vcqCxwFvzBPfPQFuOvv/7SPNbz58/Nnnrnz5//7NmzFjUtLS1t9OjR
hs+AGKKTZTrlfGOz4H716tW5c+c2W4YkR44cffv2VXlIjUE/+pAhQwzzeqMa
Nmxo6vSZ0/HjxzkbolS3bl2e0eUH9g8fPlygQAH1aQ4bNsxUkXQa3rVrVzqX
NFsY/fRdunTheSDI/rMAAHBqPGH6qlWrzF4MlwwfPtzKeZn166+/Zs2alRmX
DsqdO3em7sSUKVO+/PLLOnXqyBfYixYt+uDBAya4nzhx4qJ/UafC1LyMBvfM
i5FVtG/fXqUhjh/cx8fHK6/lli9f3tSMNAf31AkcNGgQM3DZsmX79etHXb6v
v/66Z8+eISEhzADUD+HJOnUJ7hMTEzk7+UaDe5s20BSHCu73798v936psEaN
GlF3q0OHDjVq1DDsnlGvUuXFDvxmz57NTNnT07Ny5crUdadtf+rUqSNHjmzZ
siXtN5TD0MmI2cRWyfGDe5pXp06dVIaR+fr6qj9erUtwT4vX8BaCEiVKfPHF
F+PHj6e9xOeff668KYuKZ05J8uXLt0hB5VUehsF9QkJCtWrVeJYGUb/x2HmD
+9u3bxu+K6Zq1arSphEVFfXZZ58xt9nQ0Z+2F80PPtstuB8xYgTnlNu1a2dR
E06dOvXOO+8op0CdEDq+S10O2jQaNGhAW5ByAFpRadXVtsSUoqOjlXcL0L9r
1qzZp08f+rGmTZs2ZswYKiNPnjyGbYyJiWEm5WjBPU2Z54Yuj7dHTLt9icAp
GG7CdJD9z3/+Q9spHd1o3ejfv/8HH3zArJPvvvvuyZMnTU3z22+/lXaqtDIr
x6LfUbnLZT5lIrlz5448wNy5c+UjO3VvpD/u2rXLlssDrGV4XkO7fVqF6Ggy
adIk2ssNGzasWbNmzMkXrXVmn9BhGAb3r169MvWOFEO0P7TNAgAAAAAuugf3
dDaRKVMm5cB0akMnpGPHjpUu7VavXp25Fl2qVKnLly/z12yHWbxxgOA+ISGB
s08VGBjI37q0tDTq0htOpEqVKtIlTToh7dq1a1BQkPyfxo0bxwT377//vvKE
QsMT61QG810G6og2adKEzsSl8+IRI0ZQZzUgIMCwVJ7GxsXFFS1aVDkWnXfT
adGAAQOojaNGjerQoQNzlTVDhgx0AmVpQ2R2CO5pneS5N9tUcH/u3DnmHVxZ
smRp27atdA1kyJAhjRo1Sp8+vXIA2rIseujDDrMAAHB29+/fX6fQpUsX5V6x
e/fup06dkq7+pUuXjnabX3/99eLFi+fMmUOHsCJFijD7fB8fH5V35pudl9lq
qUPCHC4zZsw4b948wxeM//PPP61bt5aGCQsLY4J7zgd7DYP7n3/+WQqeChQo
MHz48O3bt9PyOXr0aExMDB1fDG9vUHmO9ciRI/KioKWqHIu6PetM4/+68Y8/
/ih1jcLDw5XTL1GihLLjZKons2bNGqY5V69eNTokLX/lBOWglnpxKn2z5OTk
zp07K6dPPWSj76netm1boUKFlEM2bdrU7FvlaW1po2D0tVd00FcuW2Y9uXDh
gtw/9PPzo64g/VLUnEmTJtHay4R3hsG9rRtoysaNG+UW9ejRQzlZleD+5MmT
plZIleD+hx9+UP70zBOpFy9elO6Jpf4YTTYxMVE57r1796inzWw1tBys/6Qp
E9zXrl3b6CudqZ7vvvuOie/5rwwLD+7Pnj2rXHuZG3VoNaDurvRv2m1S733q
1Km0954+fTr92/DujsKFC9PpnuZ5ma2WFiyT2tMc9+/fbzjkwYMH5Vdnf/LJ
J8pRSpcuzblwDIP7Xr16Sf+uWrXqrFmzYmNjae994MABOpxVrlyZWRq0Vqg8
57t+/Xp5UbRs2VI5Ip1Tq+y9OYt/8/at7MoRmVvc6Xc0NQuVu8rpwMfcJlSj
Ro0///yTGSwlJWXt2rXMdkF7PG3ZPR0fTe1YpN2CKSr7AcPgfsuWLRYdmvnv
f9u3b5/ydUPUHaLjmuE2S3szZl0NCAjg+eyCCmqFsnLaexvtutCRgjYu5jNG
ht8eosOZcvEy71AyFdzTcU05FvOSPZXgXnkYYu5CoeMsLUB5H0KHRToQ0GZI
a3VUVFSdOnUMb++hk3crFqSrUQb3dMwdMmTIs2fPDAejLYh5WVCuXLnMfsqB
ueORqMT9hqjbKY2VOXNmm34IEnTEBPd0FDN6C+XLly9pO1Ve+qbVj/a9/DMy
DO7lPjYdhemcSz4uz507t0qVKsyqSHu5Bw8e6NZsAAAAsNDVq1eVpwaNGzdW
Hqk7duxo9LSODu5Gp0YnLMqTXDo9WbhwoeEpJ50XMy/nyZcvH2f0bIdZSPiD
e+YKJHPSbSq4NzvWZ599Jlfeq1evGTNm0LnVpEmTWrZs6efnx/Sp6tWrx9ku
w8c3qIdmeG0tLS2N+nXSXdl0AstcBf3oo484Z2fK2LFj5anR2Q2d/kjv9mTQ
ORGdTjJXTi5evKg+cTrZYS6OtWnTRnpzrxKdwM6aNYtZmJrfHvDo0SPlDxoZ
GcmsP0Y3Jeoq84z+8ccfX7p0SX7RZdGiRfv370897fnz5w8aNKh8+fLKgY0G
97S+KZcJLdIRI0YYXi18+PAhzVp5vunv72/0Ep+QWQAAuB4mqu7WrZv0IlM6
cNCenxk4JSVlypQpzCVWOsZpm5fZ4J76V8zzkrTHVv/SouHDzhJtwT11P6Q7
CenAYfTtSXT4YMLcBg0a8MyIjlnKsUqWLMkzFr9jx44pp58pUyaVhE4m3/kg
43lTJXV7pIHz58+v/ukE5tepVKmS0YvPknv37jGRAfU9zBZjKebL19TXlVZv
OgcxfCcP9eSVDwwaBveO0MBvv/1WOU2V4F6JWSFVgnsG00mWMk3ahzx58sTU
KFu3bmUevf/Pf/7DOTtTlME91ZCcnKwyMO0NlL+7r6+v0YcKDQkP7hlMVE0n
a9LtqX379jVcOamr36JFC6YS/psWTH1B3pTr168z9z+XLl1aZXN4/vy54UV7
DyuC++HDh9O2TD/ud999Zzgw/ShMpkw4X7/ARB4DBw7krNAizM3S/LdvyWg1
ow1ZOZH27durfPqNtgvmXdy0iKxrxH/f1aacIO3xtE2HCe7pzFR6BRwdmo2+
+cTw0Fy/fn2eGVG3R7ne0v5tw4YNKsNPmDBBOZc8efJovg2Jfq/g4GB5Us2a
NVM/nl64cEF545lhcM9gXjPI+a6/WrVqKcdSCe6VaF1SjkV1jhkzhv5BNRjd
ddB6kitXLuUo9CtoeGWlq1IG92Z/6LVr1ypv/6hYsaL6ikTKlCmjXPh0IsBf
G21Z0lg9e/bkHwvEUh7F6FxMfQ2Ji4tTvk8jc+bM/Hs5JrgfNmyYdFxeunSp
4UzpL8we1YPvNAQAAADsg3kIetKkSfzj0gma8qGPLFmyqFzapV5B165dlfMq
VaqU2bMDO8xCxh/cM5g3mZsK7tXHmj9/vsfbC1lTpkwxvPZ1/fr1SpUqMX0q
ns9EHjx4kLkBnvpyKtfW/v77b+aCqsTK4P7y5cvKx67Hjh2rPvzPP/+svMCo
Htzfv3+feQvcqFGjVIb/9ddfmQsL6yx5OsOURYsWKacpv+te2+idOnWSXr+Q
L18+w8sXtKoPGDBAHtgwuKcVRhmp00ak/jnX6dOnK+eeI0cOs4GLHWYBAOCS
mKhaegUr9TpUvgnbt29f5SgZMmRQCelU5mU2uGeu1ZNly5apj0KHJPkqopK2
4F46QNNBUOWiFjMKHYB4EhZbB/dUsPLlRR4cQRv1UQ2/71OtWjWz8xo6dKg0
sPqnrHbs2KHsBFIv2vCeRsaff/6pfPWrp6fn4cOHzdZjEaafKb0eedCgQaaG
X7VqlTwwExg5SAPFBvceb1+0a3YTYLphHlb3fuXgPmfOnDy7I+p+K29A4nyT
toMH99LeOyoqytTwiYmJzLez69Spo21eZvcnjRo1Ug5P+xZTr++Q3bt3z/C1
AJqDe2nvbfj+cJVRKlSowDMjZwnue/furZxC2bJlzd6+deLECeU5L/3bynub
bRTcSz9ux44dVQ7NzCh0aDYbNtEGQuuAcqwxY8aYrY25H0bz1723bNminM6x
Y8fMjqJ8SY4jB/f0ewUEBNDW/ccff5gahdY0j/+1evVqnnm5Azm4p3WeZ3jm
HkKzu+t58+Yph8+UKZPKTVZKly9flo+kp0+f5hkFHIF8FCtSpAhPh4TZO/Hf
ZcoE99Kue8WKFfyj0JGLc14AAABga5qD+8ePHzNX3sx29VNSUqRnymRDhgwR
OwslscF9njx5vLy86GTQ1PAPHjxgLq306tVLfRbUJ2ResUvL0+hz7kq///47
8xJOD6uD+1GjRsmT8vf3N3qjPoN6p/IoKsF9amoqc52qefPmZm9yXrt2rXKU
LFmyXLlyxeJW/S99g3vpOnZQUJCpa260qstvfGWC++TkZOZ5yaFDh5otoF27
dspRwsLCVAa2wywAAFwVkzt7vH1D+I0bN1RGuXPnDnNoVvk0rcq81IN72rcz
Xz8pXbo0z5t7z58/b/iaXG3BvcfbO7vUc0DqRTAJi/oDehJbB/dvDDrVnTp1
Uh9eft+pEi3Jf/75R31EuXenEvEkJiYyvybnQzT9+vVTjsX/iidOhjeIVq9e
XaXnRh1geUhlB9JxGig8uJ89e7bZsWjrZk4KChcubLbDrEIO7gcPHsw5SrNm
zeS50w7N7F0Wbxw+uPd4++5Z9cX43XffKYf39fVlPmfAOS/1JIhO35jCONNt
wzs6NAf3Hhxvcvj555+Vw9NqwHOPvVME90ePHmXejcMZuTKvfw8JCVF5SN8s
GwX3Hm8PzY8fP1YZhX5K5r1269evV5/LxIkTlcMXLFiQZ+u4fv060yPSlmAy
N1rwvCSHekTSSbqHYwf3kkWLFqmPxXylsWvXrjzzcgdycM/5gUjaNJQ7kNq1
a6sP//TpU+ZBkvnz5/PMSL5DoEqVKjzDg4OQj2IzZszgHKVixYry6uHv78+z
g3pjkMKTJk2aqI+yfft25fB0GoJPMAAAADgIzcE982w7Z8y9b98+5Vh0cvfw
4UOBs1ASG9x7cES9zEvvixcvrj786tWrmVmYfW5O0q1bN2ZEK4N75WcNOS8H
Xbt2Tb76oRLcL1++XFmnj4+P4XuGjWJy54YNG/I2xgR9g3uPt0+B7d27V2WU
7t27S0MywT0TguTNm5enn3/r1i3lM2geqs8d2GEWAACuyjCqVn9uWsI8lTZh
wgQN81IP7jds2MAUtnjxYs5GUa+JGVdzcM/zodXatWsrR1F54lVmh+CeeX4t
a9as6hmEfD8bE/fMnTtXZawzZ85Ig+XJk0cl34mOjlZO09/fn/MtDXFxccoR
qTbDDzRbwzC4N9sZoDOCNm8p41fHaaDY4J7zowyE+Qgy2b17N+dMDVEPvNBb
Bw8e5ByF6euajb3eOENwbzZWu3v3LrOBq3whXWVe6sE988ktmuPff//NM5dH
jx4xnXNrgnuz23J8fDzz1Qb1T7FInCK4lz5aIStXrhzniBcuXGAWo/pLzNTZ
LrhXf6OdpE6dOspR1I/mtFXKIbhk/PjxnOUxX3u06E3jMubJfbNPN0jkD9w4
eHBfsGBBs3eAjBs3TjlKxYoVeeblDj766CM6utFWzH97W926deUlSTtVsw+q
yF/JlLz33ntmZ0GbjPyxBs7LeuAgpk6dKnWZ+Duc0tcuZL/88gvPWIbBPfU2
1UehdZXpWB45coSzSAAAALApbcH93bt3mXNb/tctFitWjGeOdpgFQ2xw7+np
ef36dfVRYmNjlaN4e3urX6ljbqLOli2b+gcoZSdOnGD6e1YG98rv95m930Am
LyJTwT2dSTHvn2zbti3nxDdv3sy08dSpU5zjGqV7cN+sWTP1UbZt2yZdx1a+
lJJ+YuaSOM9lFglz+cLUo4J2mAUAgAszjKp5rpD06NFDOcqnn36qYV7qwX2r
Vq2UA1PPhP+jioaN0hzcq7zZVcZ0Xzt37mx2FDsE9ykpKcyF+u3bt5sa+NWr
V9KHfX18fJgnLtVfpj1y5EhpMFolVAYrXbq0cpotW7bkb0hoaKhy3L59+/KP
axbTheDvFjIcp4Fig/uIiAjOEWlzZhJk/nF1wdxczZO1OXhwnyNHDp5zK+ak
78cff9QwL5Xgnmpgvm5fvnx5zY3SHNzTps0TchUuXFg5Fk9I7fjB/aVLl5jX
zvC88l1WokQJ5bjW5Ke2C+7Pnj1rdizmsz7qp8PMzVfE7McdZMyJs7+/P+eb
xpWYr/xs2rSJZyzadS96y+zDAmKD+6+++srsWMzlr6xZs/LMC4xieulmY1bD
C25mv4Mpf6mBfin+74GCk1J+mINQ559nLCa4z5cvH8+b05jr5/hqBgAAgIPQ
Ftwzp890rsR/PYTOtZXjBgcHi5oFQ2xwX7VqVbOjvHjxgunenzt3ztTA165d
Ywbu0KEDZ4sMy7MyuM+SJYs8Kc53Y5L169dL58VPnz41OgDzWieydu1azpJe
vXrFvKCM8xNmpuge3P/0008aymB6+OT8+fOc4zKvL0ifPr3Rt1XYYRYAAC6M
iaqph8NzUWXChAnKsTjDQYuCe+bZt2LFivE26c2bAwcOMIcGbcE9dRh4op9p
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
ZDFvpyTUGbb/LAyJDe45L7DUqFFDOZZKcM98M8vDwmtWS5YsUY5rZXBP+vbt
62GCr69v48aNFy1aZNGtBYbftqOVxKKSmPfZelj4RUiGvsE951Vfxi+//MK0
iBasRddAcuXKpRzd8IERO8wCAMC1MZ2cyMhInrE0RNWG81IJ7ufOncvs3i1N
9JhHDrUF97ZbGnYL7pk8Im/evIYPvnXt2lX6r/IdgykpKcyNbStXrmTGunjx
ovSfsmbNmpiYqFID8ylz6+l4EY8J7rVlIg7VQLHB/dOnT/lLZV7c4cH9GlWj
qN9uGBnzc4HgnvN7T0w0M1Hv4J7Oc5n20r6Ct0lvb71Qjqs5uLfd0nDw4N4w
dqclY9GsHz16xEyB89X0hmwU3Hfr1o1nLP7gfsWKFR66CgwM1NbS6OhoPz8/
9YkXL158xIgR58+ft2jKAoP7HDlycBbp7e2tHBHBvWz//v3Muy4twhncG17R
ovkaDiZvL9myZUtISNC7rWAP165dCwsL07xGaQvuf/zxR56xPv/8c+VYCO4B
AAAchIbgfuTIkZr7G0YZfuLQDrMwJDa45xyLqlKOpRLcBwcHK4f08fHhbI6E
+USd9cF9amrql19+aeqedomXl1fVqlVnzJhx+/ZtsxM0TJB79+5tUUlHjx5l
ptClSxet7dM5uOd8AJOxbt06lcWrgZ+fn/1nAQDg2vjDdCVbB/fUA2T2z5Y+
g6xLcG+7pWG34F5+Db7s8OHDygFSUlKkZUWdIuVS6tGjh3Ks8PBwZsrjxo2T
/pPZPkb+/PmNH3S16tevn17LR5fg3qEaKDa4j4+P5y918+bNTMMtfW+S7OLF
i8y5DAkICGjRokVUVNSCBQtWr1697n9NnTpVOTCCe73mxSR9Hnyft5YhuJdo
Du5Pnz7NLH/Ob77IDN9YrvmjaTYK7jnvqeMP7qdPn+6hKzqeJiUlaWss7c2a
N2+ufplCbhFnkv5GaHBPfQzOIhHcGxUdHc0sGRISEvLZZ59NmTJl8eLF6wzQ
Vq8cmDO4J5UqVVKO2L59e8NhqlWrJv1XHTtjYE+//fZbjhw5mDUqW7ZsH330
0ddff71o0aI1a9YwaxStQsqBEdwDAAC4IQ3BPXNYt15wcLD9Z2HIxYJ75rlm
/hemSXQP7iX79u2rWLGi2d+LTpQiIiLOnDmjMinDBHnIkCEWFXP27Nn/x969
x1s154/j76aEIiOkMSgMBmMUQ8yYcRtGo4mSW8MMQhkUSXzJZRAxGpdGriWh
3AshDBnDuKWp3EO6qFDpRqdz6vf+tH+zHmvWPmefdXbnnL07PZ9/9Djtvd5r
vdZlr/V+r9da73diDlUarj2hehP3VS2eMWTIkEq3bVUtWbKklhcBULcVZ+I+
+/T+17/+NeUaZUjcRxKvISf684mePNxnn33inyc6AmratOnixYvjE7Rr1y7z
VaUJstatW8dn1aRJk6FrJr+R6MtVLYn7olrBtTpxn18WYP78+Yld0Lhx4yuv
vDJxxCYkKt4S99W1rNB+SaxvlX5WEvcZ1Zi4r2rPaSUlJYk5bL/99lVfg/+z
9ibuw3VzDU/ja/gznzp16nnnndeqVat6lfn9738/b968Smcocb+WCodx4imO
UG956qmnwpUlR6lEmjV94v6uu+6KFwz1ma+++io+QXTpDFFVtdsHisH06dM3
2WST+F7ecMMNb7rppu+++y5Hqeeeey5eROIeANZBeSTuEyPgBL17916TRtaw
YcNqfxHZ6ljiPrT341M2aNAgd1sjoYYS9xkvvfTSSSed1KxZs3o5hYZkaD5X
9PD8qFGjEtNfdNFFVQpj8uTJiTmEim7eKzW0KBP33bp1W5MfTrB06dJaXgRA
3VacifvsPrSret9mww03jBdflxP3jz76aHxZ2267bbwOFr1Zf/3118dLrVix
IvE+zujRo6NvP/3008yd5I022ij3vb5g9913j88nVKiqdwXXRLUk7otqBfNL
3CcGFl+7uspPDFMeWhnhmK+0lMR9RrUn7rt3755Y33feeSftKq3uETpeVuI+
Y026yj/ssMOqtOgFCxYk5pB4rCu9tSVxP2zYsMQq33jjjfmFWr3Kysr+8Y9/
nHnmmYlnERO23377GTNm5J5Vfon7X/ziF/FSEve1bNGiRYkufUIVLs3ZIO/E
/ZIlSzbeeON42UGDBsUniJKq6e9PUlSOPPLI+P5t0qRJuQMiJEjcAwDV0lX+
2LFjqzeqWlhEtjqWuG/fvn1iG1Z6mzfutttui5et3sR9xrJlyx555JEw5w02
2KBexQ455JBy77Zlj1AfDuYqBfD6668n5pBfujyjGBL3Dz74YGKNrrnmmjzm
U9hFANRtxZm4z76qVqkP7bKyssQLSuty4j7UcBKPMbz11luZr8KGil7omzZt
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
l1q0aFFitOV6q580mD9/flUDSAy6utNOO1Wa4b3hhhui6UMtukoDPadRjYn7
VUWzgtldVYSfxvvvv5+YLCwr86BLqHkmRlLIO3GfqbG3b98+x0gBY8aMSWRn
1rBDiTPPPDOxvn/6058SPYfHTZ48OdGmqydxXwPLev7556NsZkbz5s1vu+22
RFs4VONDmzpzxm7VqlVi4IYiTNwnEh/ljtt+4IEHZr4NP5CUY8MlxJ/nCe66
667EBKG1GH3bs2fP7DmE5SauMrkfAAu/2bAu8enLHQWgqnbcccf4PLP7/I+f
AytK69RO4j54991349e7UN+o9BG1zz//fNttt42KDBo0KE1s2eK3O8rdoQkf
fvhhfCCb1q1bV3qkhUtSfIOE83DYsInHOcKZc+TIkZlOYMKpNdRn4kUk7mtZ
OD3+8Ic/jG+TRo0ajR07NkeRRJcgGfkl7sORkJhPqGC7YbK2SzzbGVx44YU5
pn/llVeiO2YRiXsAWAflnbgPQg02PiJbaHNVOlTiW2+9FY0fF8o++uijBV9E
pE4m7letvmmcGDgvNDMfeeSRxKsxCxYsuOaaazJVxD333DPxsHF1Je7rpXtf
LOy1eJGDDjoox8SfffZZYlDCIUOG5Jj+008/TSQXbrrppqquVLbiSdyvWv3Q
fvzGQjgAbrvtttxFZs6cGc/UVNrfbC0sAqDOuO666wb+1+9+97v4Cf/nP/95
9FXi/nO4ykdfhetCvNR22203MGbGjBmZIqE60SOmQ4cO8VI777xz/NuKBrf9
4osvEr1q11t983CfffY57rjjTj311LAK8RubV199dSiVPnFfa1sj4bzzzouX
uuKKK+Lffvnll1tttVXmqxYtWuSX+kmYN29e4q548M4771Ra8Mgjj0yU+s1v
fpNHAMuWLYvyWRmh/jlmzJhyJ549e3b8rbEmTZo8//zzeSw0IdTM43snUWcL
OyX+bcpusopqBVetfo408UBjvdV3+/fff//Q1Lr00kvDv6E2G3WlG34C//zn
P+MTh8p5fDvkaO8kEvdhPplndMOKZ1fv58yZ07dv38To5+H3MmvWrDVZ37lz
57Zq1SqxvgcffPCkSZMSU4ZWQKhmZwbqTSSkNttss/gqR885hJZL9GFomySW
8pe//CX6dvjw4dGC8itVqdDKiAeZSImGE1H0VaLJeeONN0ZfhdNavNThhx8e
ffXXv/41KhJ2X/z8nEgehTNA/NuK+tx+8sknE7n7eqs7ozjkkENOWi38EVXg
wx+vvvpq4r3gHIn72twaCfEEd2h0vPnmm/Fv4w/t5/1QSuIBhl//+tfxZ1FW
rFgR766t3PfxV61+RmXzzTePz6dr167lPjP/73//O5HlP/TQQ9MPKpfD+eef
H5/t5ZdfHv82XOminhkSV7pwzY32ReIatPfee0dfJS7N4XwbfRUOsHipxKW5
olrBgw8+GO9mPJyvevbsWe6TSKWlpffdd198kJTOnTvnN+THqv9N3AddunSp
qPKwavUvK37SC0HmTuZmDBs2rF6WUNM44YQTLrrooosvvjhckqKKxzbbbBPW
OnGe/NOf/hTfhvGk/+OPPx593r9//3ip8NOOl4pnfsOZNv5V4uoQrlbRV5Xe
dqurRo8enbh7FipyYX9lPzwZDulMdbRx48aJd0lCzSS+nVMuOlwxE2MAhTN2
da8fte3jjz9OdEoWHHXUUR999FFiysWLF1911VWZi3jiVLDtttuWezqdPn16
/PPEw0Innnhi9FUiif+3v/0t+ipx9Ib6RvRVVavlAMCamDRpUvzKnrijG287
Z+TOaYYJ4sVDHSO0Dct9qSF8GNrs8UcHQ6MyTcA1t4hvv/02vqaJkQETLc14
8/zWW2+N3znJ3IyKdOvWLfrqggsuiErlvm8ZQi13WaHyFi8VooqXCq3j6Ksc
t6FCrSzR+qi3+knsI444IjQGQ3XuF7/4RWhuZD4PbdLPPvss8R5QNSbuQ8Pn
wgsvrKhn9RUrVtx8883xO07NmzefNm1a7kU899xziW4Ge/fuXe6tjyeeeCKR
WQi7Kb/2/uzZs+O7JtS947Pdc889B2ZJvPASv4tVafGK0isVefTRR6N9mtkm
p512Wrkv65WVlY0aNSo+bP1vf/vbHK9N1eYiAOqG7N6tyxUuf/FSxx13XJpS
wYQJEzJFXnrppZRFgvvvv7+igGfNmtWxY8dK5xCuAoMHD84USZ+4r7WtkZDo
lDhUSEItaOTIkY888kioW8bvyV933XUp92ylfv3rX8dja9u2bZpSiWpYcPvt
t+cXwLJly44//vjE3LbffvvzzjtvyJAhYd3DFrj22mt/97vfxa/pzZo1q66k
dvb4njmEHbTWrWDGa6+9lp0wLdcJJ5wQap6JxH1CCL6iBSV+PosWLQorGD0f
summm4Yq1h//+MdQvd9///0To+4GW2+9dfYbuHl45513QhU9MfNQFdx1113D
0vv27Xv22Wd36tQpulndvXv3d999N8cqP/jgg5k5J7rOzmGvvfaK4smvVKXK
HUGsXJ07d44XzL5LX65wHEZF+vXrl3JZQY4OFkJDMpERLtdWW22VGYQ9feK+
NrdGwh133BGfMhznAwYMyPy6Tz/99OinHf5I82RUuUpLSxOP34Sz95133hmW
Ehqnme5lMnI/RvXBBx8kUifhtNatW7dwrQytoXvvvfcvf/nLPvvsk1j38AOp
lqz9qtVXuvj9kHByCD/JzJXuiiuuiF/pEq9sxM+QOYTJ4qWyT78Vqehph1Wr
0+KJeyNhFcJRdP311993330h8qFDh/bq1Sv+on291efSSgfpyCGRuM9sq0MP
PfTSSy8dNmxYaOeOHj06LPecc85JnF7CeTXsxzSLCKf6xPB8FQm/kXCGDEUS
2bqE+E2wTP8taYTNG5UKK5WyVO/evfPetmu7q6++OnuDhB/ygQce2LNnz3Cu
DqedfffdN3PlDcdDOEQT4zwmpF904hHTvAe1oai8+OKL2VXEBg0ahCvLKaec
Eo6oP//5z+FcET1W16dPn9wX3NDci+ac5ucchGpwPKTsfpDKlUe1PNvs2bPD
RXwoADUszeu9FLnsYZty23zzzXPPMBwYiUpIaHadeOKJoXH6wAMPhKrmLbfc
ElqLiYfPL7roovTZ0hpaxPTp09Nvh/iAa9mvQVVkq622ikolepxLuaxZs2al
LLX33nvnWNkHH3wwsX3Kteuuu2Yeya65xH1GqJR26dJl4MCBoTGeaReH7RNq
rfHcbhDqk//+97/TLGXChAmJsuEgOfXUU2+66aZwhNx9990XX3xxojfC+vXr
hxZW3k/ph8BS7prI3Llz43PIvuGZww033FDVCJ999tlNN900PpNQ8e7UqdOg
QYNGjBgRGpi33377WWedlXitMuyX9B2K1sIiAOqAtS5xnxGuzvvtt1/2s3/1
VndHHE7m//nPf6KJM0PtRObMmVPwrZEtVG+yU5kJoYZZjY+WhTpqfOZ9+/ZN
U2r+/PnxrdSwYcNKe4DPLVS3otf6KvXb3/620mcm06vpxH3BVzDy/PPPV1q1
+/Of/7xixYowcTUm7letHgQ8Ta3ykEMO+fzzz6trfT/++OP27dtXutDwiwv1
7dLS0nC6yDGZxH11Je5XrX6a5corr8zuOCUjVN0vuOCC6DXwf/3rX/Fv99xz
z2LYGgmhvRbOzLmLh59Gmo7dcgiHaKXt5dBYrvRsvHjx4j59+qTMg7du3brS
a3FV3XvvvZVe6U444YTEla6AiftVq+/MhCZkylm1bNly2LBhebfiM8JVoH//
/tmdh+QWTnqvv/56+qWEH2OiZ6Fs22yzTSZrv0rivmiMGjUqzYkrVDzCiTFM
X12J+w8//DCqdYeDc00eTaGoTJw4MfFMV7nWX3/9G264IZzc6lLi/qKLLkoZ
JABrKMddONYK1Z64X7X6Lf799tsv5QzbtGnz1FNPVTXsmljEOpW4D77++utz
zjknkd2ObL311tddd130qH/iOAlN+6rtsP/173//+9RTT010TVCpo446qkp3
F8PZKcSZ6PCtIrvsskuo5a7hSlVpderVeuJ+1ere6bt06VJuziVbqL3fcccd
Vc1W1MIiANZ2KV80uPPOO+Olnn/++ZTP1kbjdM+bN290aqEilCb4L7744r77
7guVhFCL6Nev38CBA8eOHZudNoqnCcJFIcfNxlrbGuX617/+ddhhh5VbW9ht
t91SvkaXXqjIbbrppi3+K33/OZ07d45KHXHEEWseSajj3X333WG2zZo1K/ca
veWWW5522mmvvfbami8rbsqUKSl3XJA9rnR6hVrBuFDTCz+T7Nxf+EUceOCB
//jHP6Ipw1GaYzvkCLLcxP2q1e2aUNnOHhc1IzQT1jzPla20tPShhx761a9+
VW7KLzQuzjrrrKgP/G+++SbHKkedOY8aNSrl0RLvjz2/UpUKtdyUs3322Wfj
Be+55540pcIRGxX5z3/+k/7snTKb8+abb4bf1OWXX545e996660TJkzIPDoS
SYwWl6Nn5trcGtnC0RvWJfEYdkY4n3fs2LGqvZOVa8aMGT169IgPBxYJjegB
AwZUNEhBubO64oorfv7zn5d7uQmnqXCyCqtcQw8zhyvd4Ycfnj1WS73VV7py
e+pLeWkOk8VLvfDCCymPitmzZ1ca9ttvv92nT5+K0lvhPPPLX/4yBFAtY9lk
hJ/Dyy+/3L9//7322mv99dcvd7n1VrdhTzjhhHHjxuXRjA2Hbjjt7LPPPtm7
IxxUl1xyyeLFi6OJx4wZk2MbxrvKT18pilf2pk2blrJUOITWcNuu7b7++uur
rrqq3A5MwjU9/LQHDRoU7btw/smxMdMvNBwt0VOI8buC1AHLly8P595wKij3
waq2bduef/750f3P3Bfc6HQaWhkpf9HPPPNMPJgQSZpSa1Itj4Qgb7/99pRx
ApC30CJe85M2hfXBBx9Uaaenv4H54osvnn766Ymh2yOh/Rsaj+EQWpPGafUu
IlSz02+H+K2Af/7znylvqsTHPps8eXIey1q6dGnKUo899liatQ7NvZdeeum2
22679NJLzznnnNAcCI3f0EZO3MobPHhwfNueffbZaWae25IlS0JTtGfPnjvv
vHOOtwDC/g2Le+utt/JbytSpU/v167fbbruVO/PNNtvsxBNPDG3nNc8dz507
N/3xk5G41ZPyLlZG/K3Gqnr33XdDK6DcO131Vr+fst9++4VDIvfLOwVfBABF
K1RX4qf95s2bFzqiSixatCjUKu+///5whQ2X41A/mTlzZqGDqiXLly8PV+1x
48aFSn5Y/QceeODZZ5/NMbbvWqfgKxgq1ZMmTXriiSfuuuuuO++888knn6zG
R98rStxnhKrm+PHjb7jhhlAZDvX8q6++OmyEjz/+uLqWXpGw3FdfffXhhx8e
urrx+Mwzz4QKebU/J0BNeOihh+JH1LHHHlvoiCoRztWhiZ1JOtx3330vvPBC
RUOw5a2kpCQ0RUNb/vbVwoEdjue8G49fffXVv/71r3BCCGeDEHY4NU2cODGc
pqo35nJlX+nWllP99OnTJ0yYkOkkf9iwYY899ljYIzX99nFpaelHH30UdlD0
IFD447nnnssx9E+VzJ8///nnnx85cmSYc/j3nXfeSTxFQ3H68ssvQy0is+PC
IRGOzDRPoeQnzDxzKm7QoMFnn31WQ0uhsBYvXhx2dOY8M2LEiHBa+PDDDwsd
FACwTgjtnZdeeunBBx/M3LoJLcTJkyfHHw9eKxaxjrviiivi93Auu+yy6p1/
5p7q2LFjM3cS7rzzztGjR7/88stff/11dS1i5syZr7zyyqOPPpq5qzN+/Pgp
U6as4+96f/HFF9E2ueeeex577LE333yzem8c1cIiACg2idGrf/rTnxY6Iqib
cifuoaoSozn379+/0BEBrKP+8Ic/ZE7Fhx9+eKFjAQAAik7UZMio9p5jAYA6
I9QT4tWGP//5z4WOCOomiXuq13HHHRc/osaNG1foiADWRQsXLozGu3n88ccL
HQ4AAFB09thjj/g9nCqNNQ8ArKV69erVpk2btm3bVmlwk+OPPz5ebajSKNJA
ehL3VOQnP/lJOHsfffTR6YuUlJS0bNkyOpzC0eWIAiiIIUOGZE7FrVq1qumB
IQAAgAKaNWtWm9X69euXvtTMmTMbNGgQ3cPZbrvtai5CAKB4dO3atarJ94UL
F2644YZRteGHP/yhEVKghkjcU5HMebhJkybpx3wfM2ZM/HA66aSTajJAAMq3
cuXK3XffPXMqvvTSSwsdDgAAUIOmT5+eqfy3bds2tAVSlrr22mvj93AGDhxY
o0ECAEUiStwfdNBBKYucffbZ8WrD4MGDazRCWJdJ3FOR6AGq66+/Ps30y5cv
32WXXaJjqUGDBu+//35NBwmwzmrUqFE42R511FHZXz311FOZU3GY5osvvqj9
2AAAgFoTJe6D0BZIU2Tu3LmbbrppVKpFixbp39oAANZqUeI++Pvf/17p9CNG
jGjYsGFUZK+99vr+++9rIU5YN0ncU5Eocb/RRhtNmTIl98SlpaUnn3xy/Fiq
Uv9sAFRVJnHfunXrFStWxD8vKSlp37595lR83HHHFSo8AACgdsQT99tuu+3c
uXNzT79o0aJf/epX8Xs4w4YNq51QAYCCiyfuGzRocPHFFy9ZsqTcKb/55ps+
ffrEx9Zp2bKlt4SgRkncU5H4kCWbbbbZqFGjKupvbfLkyQcffHD8QAr/LS0t
reWAAdYpmcR9cM0110Qfrlix4qyzzopet586dWoBIwQAAGpBPHEf7LDDDv/4
xz8qmjh89dOf/jQ+fc+ePWsxWACgwOKJ+4zmzZsfe+yx11133f333//oo48O
Hz782muv7dixYzxJFOy8884ffPBBocOHuubGG2/sFxN/VCbo3bt39JVRKtZx
iXNysM0224TW3K233jp69Ohw9r7zzjv79++/zz77JI6ibt26VfSAFgDVJUrc
B+FUfNZZZ/Xo0ePHP/5x9GHfvn0LHSMAAFDjEon7jN12261Pnz633377Qw89
9Mgjj/z973/v3bt3+DA+Tf369fv16+fNCwBYp4wZM2b//fcP1YDs+kNFmjRp
cuaZZ3rzF2pCooqew09/+tNCB0shXXnllW3atEl/6g623HLLW2+9tdCBA6wT
4on7bIcddlhJSUmhYwQAAGrc0qVLzz333M0337xK93B23HHHxx9/vNCxAwCF
MW3atJtvvvnoo4/eYostKqotNGzYcM899+zfv/+sWbMKHS/UWRL3pLdy5cpX
X331sssu+9WvfrXRRhtVdKhsuOGGhxxyyJAhQ7777rtChwywrvj973+/2Wab
ZZ+Tf/CDH1x++eXLly8vdIAAAEDtKSkpeeaZZy644IK99967SZMmFd3D2XTT
TY888shRo0aVlZUVOmQAoCgsWLDgjTfeeOyxx+67776hQ4fec889TzzxxD//
+c+FCxcWOjSo+x566KGh6Tz88MOFDpbiMnPmzJdffnn06NHhvB2OkBEjRjz9
9NNvv/22lzoBCmLlypUfffTRs88+m6lUh9Pyv//9byl7AABYx5WVlX366afP
P//86NGj77zzztBYuP/++0PDYerUqfL1AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1
xvLly0eMGDF0tbKysqoWnzp16m233XbGGWcccMABP/nJT9q0abPzzjt36NCh
R48e99xzz8KFCwsSFQAAAAAAAACsFV555ZVddtml3n8tX748ZcHXXnutV69e
rVq1qpfT+uuv379//6VLl9ZOVAAAAAAAAACwtliwYMHpp59ev379eJ49fYq8
Q4cOUaktt9xy4MCB7777bpjnsmXLpk+fPmLEiPbt20cT7L333t98800tRFXL
vvvuuy+++EKHAAAAAAAAAABU1UMPPRS9LN+gQYM1Sdy3a9fu66+/zp5gxYoV
J598cjTnLl261EJUtWny5MlbbbVVCG/DDTc899xz586dW+iIakpZWdmwYcMK
HQUAAAAAAABAHfHFF1/87ne/yyTE27Rp8+yzz2ayz/kl7hs3bvzJJ59UNM33
33+/9dZbRzOfNGlSTUdVa0pKSnbYYYd4twAtW7Z84oknCh1XjRg0aFBYwRkz
ZhQ6EAAAAAAAAIC6YP/9969Xr16jRo0uuOCCzNDza5K479SpU+7Jzj///Gjm
V199dU1HVWuefPLJeuU5/fTTM/HXGStXrszsiwceeKDQsQAAAAAAAADUBR06
dNhrr70mTpwYfZJfivyPf/xju3bt7rjjjtyT3XXXXdHMzzjjjJqOqtbceuut
5Sbug7Ai33zzTaEDrDaTJ0/OrNdll11W6FgAAAAAAAAA6oJx48aVlpbGP6nR
FPnw4cOjmffq1atIolpzjzzySEWJ+2CXXXaZNWtWoWOsHkOHDs2s1CmnnFLo
WAAAAAAAAADqphpNkV9xxRXRzG+++eYiiWrNvf766zkS98FOO+00b968QodZ
DU4++eTMGnXu3LnQsQAAAAAAAADUTTWaIv/5z3+emXOTJk1mzpxZJFGtuRkz
ZuRO3Ae//vWvV6xYUehI19Qvf/nLzOoccsghhY4FAAAAAAAAoG6quRT5yJEj
ozlffvnlRRJVtVixYkXDhg0rzd1feOGFhY50TW277baZdTn44IMLHQsAAAAA
AABA3VQTKfIwn7/+9a+NGzfOzLZXr15lZWUFj6p6tWrVqtLEff369Z966qlC
R5q/sNeinfib3/ym0OEAAAAAAAAA1E3VkiJftGjR6NGj77rrrkGDBnXv3n2z
zTbLzHCPPfYYO3ZsoaKqUe3bt680cR+0bdv2+++/L3SweZo1a1a0Ir/97W8L
HQ4AAAAAAABA3VQtKfIPP/wwkbDebrvt/v73v+c9yHvxJ+6PPvroNIn74Lrr
rit0sHmaNGlStBZHHnlkocMBAAAAAAAAqJuqJUU+Z86cHqsdc8wx++67b5Mm
TTIz3HLLLf/f//t/ixYtKkhUNapPnz4pE/cbb7zx3LlzCx1vPl555ZVoLTp3
7lzocAAAAAAAAADqpppIkS9duvSWW27ZZJNNMrP94Q9/OHHixIJHVb3+9re/
pUzcBwMGDCh0vPl4+umno1Xo0qVLocMBAAAAAAAAqJtqLkX+0UcfbbHFFpk5
N2/e/MMPPyyGqKrL448/nj5x36pVq7xHDSigUaNGRavQrVu3QocDAAAAAAAA
UDfVaIr8qaeeima+9957F0lU1WLixInpE/fBE088UeiQq+zOO++M4j/hhBMK
HQ4AAAAAAABA3VTTKfLdd989mv/zzz9fJFGtuQULFlQpcX/EEUcUOuRKfPnl
l/Pnz49/cuONN0bxn3baaYUKDAAAAAAAAKBuq+kUed++faP59+7du0iiqhYb
b7xx+sR9kyZNli5dWuiQK7Ry5cqf/OQnnTp1in94+eWXR/Gfe+65hYoNAAAA
AAAAoG6r6RT5XXfdFc3/kEMOKZKoqsVuu+2WPnEfPPvss4UOuUJvvvlm5umC
srKy6MPzzjsvCv6iiy4qYHgAAAAAAAAAdVhNp8gffvjhaP7t2rUrkqiqRceO
HauUuO/bt2+hQ67QX//610yQc+bMiT489dRTo+CvuuqqAoYHAAAAAAAAUIfl
kSIfPnx4jx497r333jQTDxs2LJr/gQceWHNR1b6zzjqrSon7PfbYo9AhV+gP
f/hDJshPPvkk+vCYY46Jgr/xxhsLGB4AAAAAAABAHZZHivxPf/pTmPjQQw9N
M/HFF18czf+kk06quahq36BBg6qUuG/UqFFJSUmhoy7fAQcckAny/fffjz78
zW9+EwV/zz33FC46AAAAAAAAgLos78T9BhtssHTp0kon3mOPPaL5jxw5suai
qn2jR4+O5+U32WSTY489dsstt8yRu//ggw8KHXX52rRpk52432effaLIn3ji
iQKGBwAAAAAAAFCH5Z24D6699trcU8YHuN98882//fbbmouq9r3xxhvxpPyF
F14YPly0aFH37t0rStyPGTOm0FGXY+XKleuvv3524n6XXXaJIn/55ZcLGCEA
AAAAAABAHbYmifsmTZo888wzFU32xhtvbLLJJtHMhw8fXqNR1b65c+fGk/I3
3XRT5vOysrLjjjuu3MT99ddfX9iYyxVfkXjivnXr1tHnkydPLmCEAAAAAAAA
AHXJHXfcMTQmnlu/9dZb419V1BN+lLgPGjRocPrpp7/77rtlZWXRBJ9++mn/
/v2jl7iDv/zlLzUdVe1buXJl06ZNozjDKkRfffvtt9tss0124r5Xr14FDLgi
kyZNKjdx37x58+jzGTNmFDBCAAAAAAAAgLqkcePG5b4Mnm3WrFnlzmHy5Mk9
evRo1qxZfOLmzZv/+Mc/3n333RODvLdt23bcuHG1EFVB7LTTTlFgQ4YMiX/1
wAMPZAffvXv3QoWawz//+c8owvfeey/zYVlZWf369aPPlyxZUtggAQAAAAAA
AOqMnj179khnwYIFOeazbNmyp59++pxzzjnggAM222yzeHq6SZMm7dq1O/30
05977rn4m/i1EFUt+81vfhOt9Y033hj/qrS0dMcdd0wk7jt37lyoUHMYN25c
FOGUKVMyHy5cuDD6cOONNy5shAAAAAAAAABUqrS0dP78+XPmzPnuu+8KHUvt
OeOMM6Ls9sCBAxPf9u7dO5G4P+SQQwoSZ24PP/xwFOGkSZMyH37++efRhz/7
2c8KGyEUp5KSko8++uiZZ5659dZb+/Tpc/vttxc6IgAAAKBCX3/99bnnnjt8
+PCvvvqq0LFAhT777LNwlJ599tlTp04tdCw165tvvgk/yWHDhvlJrgtmzJjR
q1evlO9vkvHaa68Ver8BrE0GDhwYZbcvueSSxLcDBgxIJO733XffgsSZW6ga
RRFOnDgx8+Hrr78efXj00UdnPpwzZ87IkSPDmr7zzjuFixcK4Ntvvw2H/UMP
PXTttdeGKtNBBx203XbbNWzYMP4D32STTQodJgAAAJRv5syZ119//U033bR8
+fJCx1IwI0eOzDThQ4t+//33D238aNRIKKz333//9ttvP/HEE3/0ox9F95r6
9u1b6Lhq1oMPPhj9JPfbb7+BAwfW+WcV1mU333xzPaoonBMKvd+K0Zw5c264
4YbBgwcvW7as0LEAxWXUqFHRKbRXr16Jb7PfuN9zzz0LEmdut9xySxRhlLh/
9NFHow8vvfTSyZMnd+vWrVGjRplPevToUdiYoebMmjVrwoQJ99xzzyWXXHL8
8cf//Oc/b9myZXatqX79+olPmjVrVujYAQAAoHznnHNOpvX6+OOPFzqWgrn3
3nuzG/jbb799nz59XnzxxRUrVhQ6QNYhZWVlkyZNuummm7p27brFFluUe8fp
vPPOK3SYNSt6liaubdu2vXv3fuGFF/wk65jBgwdn725yO/744wu934pR//79
M9vn/vvvL3QsQHF54403olPocccdl/j2xBNPTJxmO3ToUJA4c7vmmmuiCKNn
Gm+99dbowx//+McNGjSIr0iXLl0KGzOsuZKSkmnTpo0fP37o0KH9+vULraR2
7do1a9Ys73qUxD0AAABFq0ePHpnW68iRIwsdS8GUm7iP8qQbbLBBx44dhw8f
Pn/+/EJHSt1UWlo6ZcqUoUOHdu3a9Qc/+EH2QZiwbibu/STrKon7PEjcl+vc
c8/NbJ877rij0LEAxeWrr76KTqGHHnpo4tsDDjggcZo96KCDChJnbhdffHEU
4RdffJH9YbZu3boVNmaoku+++27atGljxowZOHBgjx49Dj744DZt2iQ6uq9X
cSspJYl7AAAAipbE/aoKEvfZtwWiXrt1pM+aW7FixVtvvRUOp44dO2688cZV
ute0bibu/STrKon7PEjcl0viHsghej931113TXzVokWLxGk2Giy+qERdpQVL
ly5dtmzZ0KFDmzdvnuN6ceqppxY6aijf/PnzQ2to9OjRUY5+u+22q9bqUoUk
7gEAAChaEverKkvcl6tNmzZnn332+PHjS0pKCh0+a42lS5e+8sorAwcOPPjg
g5s2bRodTlV9Z2QdT9z7SdYxEvd5yO7nmVUS90BOu+22W+YUsemmm8Y/nz59
evZpNlQqChVnDqecckomvFB17NixY7wyWZE+ffoUOmrWdeV2dL/RRhtVU50o
H40aNSr0VgEAAIDySdwHt9xyS96t/k033bRr167Dhw9fuHBhodeDYrR48eLx
48cPGDDg4IMPbty4cbXca6rzObvbbrutqtskevihRYsWfpJrl9NOO61afhfr
lN12263Q+60YSdwDOXTq1Ck6iy5btiz6/PHHH88+zV599dUFDLUixxxzTFWv
F5dddll+y1q0aNHs2bOrN37qvOyX6Guio/s1FwIo9KYCAACA8kncB2ecccaa
tPozfzRq1CjTa/eHH35Y6BWiwObNmzdmzJh+/fqFQ2K99darhrtL/6t9+/aF
XsWaddZZZ+W9cbI70veTLHKdO3eupl/GOmTbbbct9H4rRhL3QA7xfuanTZsW
fd6nT5/s0+yDDz5YwFDL9fbbb2d36V+pu+66K7/FHX744brZJ4cCdnS/5iTu
AQAAKFoS96tiG6G67LLLLv369XvllVfKysoKvXLUki+//HL06NFnn312u3bt
avotkjqfuO/Vq1f1brFMR/p+ksVJ4j4PEvflkrgHcoiPzDJhwoTo81Bzyz7N
Tpo0qYChJixYsCC0LPLruOnVV1/NY4lh+4Sybdu2rfZ1Ya3z/fffv/fee2PH
jv3b3/4WqtNHHHHETjvt1KRJk7zqL8VC4h4AAICiJXG/qgYS95Etttji1FNP
feKJJ5YuXVrotaT6ffLJJ3ffffdJJ53Upk2bGjqEyiVxn7fwkzzllFMef/xx
P8niIXGfB4n7ckncAzmECnl0Fo1eqP/222+z+/Fu0KBBvC/9Alq5cmU4obVs
2TLv68VXX32Vx3IvuOCCTPElS5ZU+0pRtL755ps33njjgQceuOqqq/70pz8d
cMABW2+9dcG7ta8JEvcAAAAULYn74Oyzz665ewKZP9Zff/2OHTsOHTp01qxZ
hV5d8rdy5copU6YMGTLkuOOO22qrrbJ3dO3Yd999C70latZ5551XQ5su/pM8
4ogjbrvttpkzZxZ6ddd1xx57bA3t7jps++23L/R+K0YS90AO//nPf6Kz6HXX
XZf5cOzYsdnn2J133rmwoWbMnj370EMPXZOLxTbbbJPfojt06JCZw/vvv1+t
60RRKCsrmz59+osvvhgul/379z/mmGPatWu3ySabZB9CdSZrH2r+u+yyS2iP
Z/670UYbFXonAAAAQPkk7oN77rknsxGi4chr7h5FmHP79u2vuOKKd955p9Dr
TSqlpaVvv/324MGDO3fuHH/jqfZvZEX30/785z8XeqvUrBEjRmTWtHZ+ku3a
tbvsssvCXl65cmWhV31ddMMNN2T2xVFHHTWanPr27ZvZVl26dCn0fitGEvdA
DosXL46u/meeeWbmw549e2bXDU4++eTChhp8991322677RpWcsIVNo9Ff//9
91FH6C+99FK1rxq1afny5dOmTRs/fvzQoUP79evXtWvXUO/dYIMN1vDQKmah
xRTWMaxpWN+w1mHdwxbIjJYV/s1M07x580LvGQAAACifxH0wfPjwzEY444wz
XnnlldDG33HHHWvhrsLmm2/evXv3MWPGfP/994XeBvyPFStWvPXWW4MHD+7a
tWuLFi1q4WCIiyepW7VqFWIYOnTolClTbrvttsyH5513XqG3UM0Kp6PMmp52
2mm1/5McPXr04sWLC70N1iHRoMMXX3xxoWMpdo8//nhmW51wwgmFjqUYSdwD
uW222WaZs8Shhx6a+aTc0Y6GDBlS2DhXxR5izFuoQOb3ROL7778fzeSpp56q
9lWjhsyfPz+0X0I9duDAgaGNf/DBB4fDu0GDBmt4IBWz0EzL5OgHDBgQVjys
/oIFC3JsIol7AAAAip/E/apY4r5nz57Rh1OmTBk4cOB+++0X3e6o9nd+oxk2
bdo005H+7NmzC7gd1nElJSVvvfVW2OlhXzRv3jx7N9WaNm3adO/ePRwPn332
WTzCdTBxH05Q0YfTpk0bPHhw/CdZ7YxtURAS9+lJ3OcmcQ/ktvfee2fOEm3b
tg3/fe+998qtD7z77ruFjnTVGWecsSZVmlCDWrFiRX6LHj9+fDSfcN2p3vWi
Gr355pv9+vXr0qXLnnvuufHGG+eo2a7tQs1811137dSpU+/evW+55ZZx48Z9
+OGHy5cvr+oWk7gHAACg+Encr6ogcR/58ssv77jjjiOPPLJp06aZyWruHkiD
Bg06dOgwaNCgvG+1UVXz5s27+OKL999//8aNG0c7opZvczVs2PBnP/vZOeec
88gjj4R4Kgp1HU/cR+bMmXPnnXd26tQp6uezRn+S++yzz7XXXltSUlL722Ed
IXGfnsR9bhL3QG7HHHNM5iyx3nrrlZaWhip39qW/VatWxTB0zi9+8Yv8qi67
7bbb+PHj12TRoZYVze3JJ5+srjWi2u211175HSTFrGXLlqHuffzxx19yySXD
hg2bMGFCNT5GK3EPAABA8ZO4X1VZ4j6ybNmysWPHhi3WqlWrmr5l8cILL9Ta
6q/jrrjiiprem+Vab7319t133wsuuODJJ59cuHBhmlAl7hPCTzJsvdNPP711
69Y1vb+effbZWlv9dY3EfXoS97lJ3AO5XXjhhdGV/eOPPz7ggAOyr/h//OMf
Cx3m/9luu+2qWlfZf//977333tLS0jVc9IABA6J5jhs3rlpWh5qwxx57VPUg
KR4NGzYMB/nBBx8cavvXXnvtww8/PHHixG+//bZGt5jEPQAAAMVP4n5V6sR9
ZOXKlW+++eall176s5/9rIZuZbhLVmsuueSSGtqJ2Zo0aXLAAQeEI2f8+PFL
liypaqgS9xUJP8m33nprwIABe+65Z/T2ffW+hj927NiaXut1lsR9ehL3uUnc
A7kNHTo0urIPGjSo3MF3Ro8eXegw/0+oNFa1rlJdi4730u/BxWJWhIn7cqvf
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
/hWCexEQ3GsBgnv1KRfcc86fP2/qhmOlS5e+ffu2EjPVGgT34iG4F4bgHsDe
6N/r3oCYoJmcafLvHzp0qPj5vnjx4sSJEzt37ty0adPu3bvJpq307w74X5E/
fPhQ5qTIYI90jql+M4X5kEy8qlWrWto6A66urlS+IKE0BPeWQnBvV6Q9iFmf
n5/f4cOHWbfDarAK7idPnixzQfPITlW1ssFSqamptO6oU4TS/YvswYMHD6pV
q0ar27UThQibNGkSrSbXq1ePdWs0KjMzk8pv7TkTJkxg3SCtu3v3bkhICK0O
37hxI+sGUZOVlUXlt/acmJgY1g1SA4J71SC4f4XgXgQE91qA4F59Sgf3HD65
5nl4eNhPwIfgXjwE98IQ3APYlfv37zs7O5s6az516pTZKSQkJPDvb9eunfCb
dTrdwYMHyX6mevXqhfMgUkndunWnT5/+6NEjSu37m4YNG5K5eHl5yfkZOPns
li1bpF2AZT4kE693794SGqjPWi65ILi3FIJ7uyJwgBCjQ4cOd+/eZd0Ia8Ik
uJ85c6acpWygZs2a6pQNlrp+/Xrp0qUpLuuffvqJdZuswNOnT2vUqEGx25cv
X866TebNmDGDYpNr1arFukFaRMZLERERFPt53LhxrNukaeT8VP4d8vXZzM2I
Xr582bZtW4o9M3bsWNZtUgOCe9UguH+F4F4EBPdagOBefSoE97///rvB3Yoc
HBzsaoeM4F48BPfCENwD2JU5c+aYOmWuX7++mCkkJSXxH6lSpYqpt2VkZMyd
O1fkjxTc3Nzi4uKoD6i438g3atRI8hSOHz/euHFjMU0wavjw4RSboyiBByiI
QUZl1vLcRgT3lkJwb1fI3ljaTqBUqVK29FMy1agf3O/du1f+fRX0tWnTRoWy
wVJZWVn88Y6W1NRU1s3SOp1O17FjR7rdvmvXLtbNMuPHH3+ku1dp27Yt6zZp
Ea0nEfBsKT2kjox+6X5NgkhOTmbdLDpoPWqHN3v2bNZtUgOCe9UguH+F4F4E
BPdagOBefUoH98+ePatVq5bBgT4uLk6JeWkWgnvxENwLQ3APoH25ubnXKRH4
5Tg5koqZwq5du/iPuLq6Xr161eAN165dmzNnTsmSJU3NyJR69eqdOXOGVkuJ
rVu3hoWFff311xI+e/bsWTKAl/m450GDBlFsjqJSU1MrVaokuaXz589n3QKx
+N/BHThwgHUtf/Pll19yhQ0ZMoR1LX9DtnGusKJFi1KcbPHixbnJXr58meJk
QSYJwX2JEiVGjx59+vRp1rVbpalTp/I96efnp/TsyEHW399f8q7eqJEjRypd
NkgQFRVFd0GTLb3wkA8M8IdyWshA9OTJk6ybJYTs/CWM+YVFR0ezbpbmJCQk
yDwrKWzz5s2sm6VdFB/9wHFycvr1119ZN4uCxMRE6qvixo0bWTdLDWTPxrV3
4sSJrGuhxtPTk1+Oc+bMYV3OG/y9BOfOncu6Fmb4H+xERkayraR9+/ZcJatW
rWJbiQH+uw1t27ZlXQtlo0aN4ppGjmWsazEjLi6OK5WcudCa5tKlS/UPMVeu
XKE1ZTnI7oirh+yg2FbSoUMHrpLly5dTn/ilS5eaNGlicJQnc7x27Rr1eWkZ
/+UZXCoxa8mSJVxfdenShXUtWjRo0CCuf6ZPn866ljeOHTumv4EjuAc7l5eX
R/HhegAAAAAAAAAAAAAAAAAAltq7dy/r4BSApdzc3LJly7LeEAEAAAAAAAAA
AAAAAADAfmntOTgA6ktPT6dyOwv+JuGFfffdd+Kn4+fnx3+QuyXalStX+Nt3
yLd69Woq7ZUsISFBTv3e3t5WdOv4wlJSUpYuXUqW7LJly8iKcerUKYM3fPDB
B3xjP/74YyZFSoZb5e/evbtBgwbi12cnJyfuD9wq3x5wt8onC511IfZCzVvl
84/HooWsJz/88IOiNYMEv/zyC7/fpqVfv36sm6V1ZCTs6+tLt9ubN2/Oullm
jB49mm6TnZ2dySiFdbM056233qLbz8HBwZcuXWLdLI0iPUNO5eh2eJs2bVg3
i4569erR7ZmgoCD7WRVxq3xpLly4MGzYMIse5sU/FspmbpV/7dq1+Ph4ix5M
w59r41b5puBW+dSRFZWc2/r4+IhfUfk3W9et8klLZ82aZdET6PhN0lZvlT9t
2jTxvcEpW7YsWe4HDx6kWIYSrl69GhsbW6JECfFN488K7fBW+fPmzStdurT4
vuJH3fZwq3wy6CWjQQ8PD/H9w+9ncKt8ANvGP6i6sNq1a1s0qbCwMP6z5Oj8
7Nmz9957T/xux6wmTZoo1Akiff/995KLb9Gixe3bt9nWr6hHjx65u7tzjSWH
4+fPn7OuyDJ169bliidbBOta/mbRokVcYZ9++qlCs9DpdHFxcS4uLtLW7WLF
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
V64GUAcf3PPfvsjMzDx9+vTu3bvJgt6yZcvBgwfJoE7Lv3ewRnxwzz+tPjc3
9/z583v27Nn0WnJy8rVr16z6q48G9IN7/kXsVajTD+65V8j50ZUrV8hgj1u1
yDp26dIlsr6xrdNmFL6gnZOTc+7cOX5bPnDgwPXr121pWxZJP7jnXiGdQM6n
9FfFixcvYlU0BcG9gCpVqtA9da1YsSJ/40RrQf05dy4uLlq4LSSCe/UpGtz3
6dOH7orq7u5OjqoUK6QV3H/88cd0W+rs7Pzbb79RbKk0agb3/I1bfX196S5l
6sh+gO7i9vLyunPnDutmKeKTTz6h21eOjo4nTpxg3Sxq+NCBlrJly6anp7Nu
1l8Q3ANQNGnSJKMbPv+gdjF0Ol1ERIRFO5ZixYqRk3qR+5bt27cb/Xaxpn7C
wP84kT/X/uabb/hSbeCXU6ZkZGQUL15cf7k0adKkoKCAdV0SqRPcJyYmSn7s
l/zg/qOPPpI2a1Nq1apF/cHHCO61CcG9ytgG92CTCgf3oILCwb3NMxrcA3WF
g3tQlJoXtK1L4eAeLILg3pQTJ07QPXV1dHS0uscK5+TkGFxykW/KlCmsm/U/
CO7Vp1xwn5GR4enpSXdFnTlzJt0iqQT3eXl5/AUrWiZPnky3pdKoNs5JSUnh
fm7v5OSktc3fQFpaGvUnklvdXV9EKigoEPk8PvHGjBnDulnUXLhwgW7nkI1o
+/btrJv1NwjuAShq3ry50W3fouPmkiVLxO9VXFxc/vWvfz1+/NiiOlu0aFF4
Upq6w56vry9X1aJFi7hXyDCYL9WGw8cVK1YUXjSJiYms65JI6eCenBfExMSI
314Kkx/cV6pUSU4BBkqUKJGamkqlc/QhuNcmBPcqQ3AP1CG4ZwLBPSgEwb3K
ENybguBeJgT3psyePZviqWsRzQTWFjl+/DjdTmjXrp1GbgyC4F59ygX3Bw4c
oLuidu7cmfpNwKgE99S/UNS6dWuNbJLqjHNyc3OrV6/OzUj7R73du3fTXdy9
evWy1bvbXbx4kW5fhYeH29LNmhYuXEi3f/7973+zbpMhBPcAtOTk5HApjAFf
X1/xo5dbt255e3uL3KWEhoZK22bffffdwlPT1M/Y+ecbrl69mnuFv3zh5ubG
tjZFNW7cuPCiiYmJYV2XRIoG948ePTL6FRSLjBs3Tk4N2dnZFB865unpeeTI
EVr9ow/BvTYhuFcZgnugDsE9EwjuQSEI7lWG4N4UBPcyIbg3ZdCgQbROXYkh
Q4ZYY1xi9LcSkjVs2FA7t9VFcK8+5YL7BQsWUFxRyTmLEg89pxLckx0axZbW
r19fO4+OUmecExcXx82lb9++ys2Fljlz5lBc3C1btrS6Z7WIt2XLFop9FRYW
9uTJE9ZtomnkyJEU+ycyMlKDQxoE9wC0HD161Oi2P3DgQPET4R+9bRYZ8b54
8UJaqbVq1TKYmoODg0a+kfjq9fNh+cI2btzIvcgPRfz8/NiWp5yzZ88aXda7
du1iXZpEygX3qampQUFBIjcWAf369ZNTxsOHD+XXwPH39z927Bit/jGA4F6b
ENyrDME9UIfgngkE96AQBPcqQ3BvCoJ7mRDcm9KjRw9aZ6/jxo2z0if6zZ07
l1YnREREPHv2jHWD/oLgXn3KBffTp0+ntaJ26NBBoa+XUAnu58+fT6ulrVq1
0tRDYFUY59y6dcvDw4PMom7dukp8N4M6/gAtH9mfWEWTJVu5ciWtvgoPD//z
zz9ZN4iy/v370+qfkSNHaicU04fgHoAWU18bIyMZkVMQf8eYhg0bShsRvXr9
/KDCdwbw8fGRNjUl3L9/ny9s586d3IuxsbHcK0FBQUyrU9CIESMKL+vmzZtr
8EtfIikU3N++fZtKak+0adNGTiVka3J0dJRfRmho6OXLl2n1T2EI7rUJwb3K
ENwDdQjumUBwDwpBcK8yBPemILiXCcG9KUOGDJF/6urk5LRgwQK6rVMTrZ/3
Dho0SGsn1wju1adccP/tt99SWVHJVi/56rFZVIL7devWUWnpwIEDtXYbcBXG
Ob169Sry+pmbN27cUGgWdM2bN4/K4h49erSVfnlMvO+//55KX5FDQ1ZWFuvW
0PfPf/5Tfuc4ODjExsaybopJCO4BaDH6VR9yeiXyti1kgFG1alWRO5a5c+dK
rtPoI71q1qwpeYLUXb58mS9s//793IuTJk3SYKkU6XS6kiVLGiwXT0/PCxcu
sC5NOiWC+9u3bwcHB4vcUszq06ePzHrkf4WgZcuWSt+wCMG9NiG4VxmCe6AO
wT0TCO5BIQjuVYbg3hQE9zIhuDeFX7UkK1GixO7du+k2TWVHjhyR2QlOTk4z
Zsxg3Q4jENyrT7ngPikpSeaK6uLiQr0qA1SC+59//llmS8kmOXXqVOqtk0/p
cc7Ro0e5Z3cmJiYqMX0l7Ny5U+bidnV1XbhwIet2qOH8+fMy+8rR0XHSpEnW
+2NAYd98843M/vH29t66dSvrdghBcA9AC59R6uvVq5fIj8+aNUv8vmXNmjWS
6xw7dmzhCUZEREieIHUnTpzgCyPjEO7Ff//739wrtnrF8ubNm4WXy9q1a1nX
JQv14P7JkyeVK1cWv6WYJf+bdRMmTJA8d09Pz/j4eBVuyIPgXpsQ3KsMwT1Q
h+CeCQT3oBAE9ypDcG8KgnuZENybcufOHScnJ8lnr++///7du3fptkt9Op2u
UqVKkjshLCxMs1fOEdyrT7ng/uXLl4GBgZJX1Nq1a584cYJuSYVRCe7JJhka
Giq5pTVr1vz555+pN40KRcc5BQUFDRs2LPL67h/UJ66c3Nxcf39/yYu7bt26
p0+fZt0I9dSpU0dyX5Ej3YEDB1i3QEEPHjxwcXGR3D/t2rW7ffs260aYgeAe
gIq8vDw3N7fC+4GEhAQxH3/+/DmfrImxatUqaXXm5OSULl268AQ/+ugjaRNU
wv79+/nC+CMyH9z37t2bbXkK+fXXXw0WyujRo1kXJRfd4J6M5zt06CB+MxFj
+fLlMqt69OhR+fLlJcy6bdu2N2/elN8tYiC41yYE9ypDcA/UIbhnAsE9KATB
vcoQ3JuC4F4mBPcCxowZI+HU1d/ff/369RSbw9aWLVu4n6laxNXVdcqUKVq7
F7c+BPfqUy64J9auXStha3V3d58+fbpyt8fXRyW4J7Zt2yZhk3RxcSF7ey1v
koqOc/gHoN+5c4f6xBW1bNkyCSu2p6fn7NmztfkgcuXs3btXwtftnJ2dY2Ji
bPL2+Ab4mzNbxNfXV844Sk0I7gEM3L59O8lyRp+TRQYeGzduFPPxwYMHC+9V
vLy8ihcvzv/vqFGjJBRJGP25fZHX39CTNkElkLMhvjAyFOFe7NOnD/dKjx49
2JanEINV6L333iNnN6yLEmX37t1kFGr0n/ivspPWyZ+RqbVXDn4Fk2PJkiVl
y5YVP9O6devOnDlT/nzF46/zkFN4NecLwlxdXYu8vrEb60Lshf4zsEqUKKHc
jPgnEoaFhSk3F9ACsoi5ZU0WOuta7EhERATX7bGxsaxrUcmiRYu4JteuXZt1
LbaMPyMjf7CuxS68++67XIfHxcWxrkVboqKiuJ4ZMGAA61qsUmRkJNeBQ4cO
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
YsWKmarEyckpIiJi8+bNmgruqd/igJg7dy7rZplx9erVfv36GdxnwN3dvWvX
rqRDLl++LG2yEoL7W7durV27lgwACv/crGPHjsxPqcaPH0999di5cyet8i5e
vFj4kbhkQ0NqD2CTENwDUMGfG+rbs2ePqfdv3bq18PvN3rX+woUL/JuNnsWf
OnXK399f/PihSpUqclsONuTGjRuFB4EyDR06VKFq8/Pz79y5k5qa+ttvv5E/
ENYLQHCvTQjuVYbgHqhDcM8EgntQCIJ7lSG4NwXBvUwI7sEqZGVl6f/WmIrW
rVurUPnt27f79Okj/m7zderU4f7QQnBv6RMYzapUqZLWnk1gyvnz57t27Wr0
ol9AQED37t3nzp2bnJx8//59kRMUE9z/+eefKSkp8+fP7927d9myZY32YZs2
bX7++WeqbZUiOzu7ePHidFePd999l26R/fv3159+5cqVySKjOwsA0AgE9wBU
GP3S5nvvvWfq/XFxcYXff/LkSeG5pKen82+Ojo42+Nc9e/ZYOsagdQ9zsA0z
Z860aP0xq2LFimlpaaybBQjuNQrBvcoQ3AN1CO6ZQHAPCkFwrzIE96YguJcJ
wT1YBTKMoXv5pUSJEtevX1e67IULF0r+vgHz4F7/x1BUkHP5lJQUto2y1K+/
/hodHU3WFoF2+fj4vP3224MHDya70wULFmzbtu3o0aNXr169f//+06dP+VvZ
GwT3hw8f/v7778lJd2xs7JAhQ955552SJUsKzIXs1j766CMtRPYcUjyd1eL/
K1asGOk0ukW+fPly/vz5nTt3joyMXLduXW5uLt3pA4B2ILgHoGL//v1GD9Om
fnRPxj8G76xRo4aYGfEPwOrduzf/ok6nmz59upOTk6WjiFOnTtFpP9iETp06
WboKCSCDcKxgGoHgXpsQ3KsMwT1Qh+CeCQT3oBAE9ypDcG8KgnuZENyDVRgz
ZgzFyy9OTk47duxQtOCcnJyBAwfKKZJ5cP/tt99S6u83rHcnk52dnZiY2Lp1
awlXkjmSb9fp6Oj49ttvL1++PD09nXU3/M24ceOktcgo0rHbtm1j3SYAsGII
7gGoePTokdEjdbly5f7444/C73///fcN3jlhwgQxM+LvMcVfuLtx48a7774r
YRRBJkWxB8AGVKtWTcKKZJS7u3tSUhLrBsEbCO61CcG9yhDcA3UI7plAcA8K
QXCvMgT3piC4lwnBPViFjh070rr84ujouGLFCkWr/f333xs2bCizToG7kqqD
bjIbExPDtjlUPH36dOPGjYMGDSpdujTFzinMz8+vb9++a9euffjwIetGG9el
SxdajXVwcFi6dCnrBgGAdUNwD0BLcHCw0eN1nTp1Cj8hqF69egZvO378uJi5
tGvXjnt/mTJlsrOz582bp38GZ5FVq1bR7wWwZuXLl5e2LhkoWbLkkSNHWLcG
/oLgXpsQ3KsMwT1Qh+CeCQT3oBAE9ypDcG8KgnuZENyDVWjZsiWVyy8eHh6b
N29WtNSLFy+WKVNGfql169ZVtE6zhg8fLr8VRV5/U2L27Nls20KdTqc7d+7c
ypUro6Ojw8PDvby8BHqA+7m98I/u3d3dGzduPGzYsKVLl54+fbqgoIB1E81o
06YNldWDNHzjxo2sWwMAVg/BPQAtPXv2NHXULleu3O7du/XfHBQUpP8GMtrJ
zMwUMxf9O1OR8bnkgUSFChUQ4YGB+vXrS16jeJUqVUpNTWXdFPgbBPfahOBe
ZQjugToE90wguAeFILhXGYJ7UxDcy4TgHqwCvw+Uw8/P7/Dhw4rWefXq1cDA
QPmlFnl9sUjRUs2KjY2V3wo3N7f169ezbYgKCgoKyKJPTk4mOxxyMBo6dGiH
Dh3atGnTsGHDevXqhbxm8CP9wYMHT5kyZdWqVfv27UtNTX358iXrRlimb9++
8lcPskkeOnSIdVMAwBYguAegZe7cucKH72bNmv3www/clwyLFSum/0/+/v4i
5zJ+/Hj5Awli0aJFSnYGWKX+/fvLXK8iIiIeP37Muh1gCMG9NiG4VxmCe6AO
wT0TCO5BIQjuVYbg3hQE9zIhuAer8MUXX8i8/FK3bt3r168rWuTNmzcrVKgg
s05e8+bNFa3WrI0bN8psAukNkbdLtQc7duzQ7xyrS+oNxMXFyVw96tSpc+3a
NdbtAAAbgeAegJbLly+LOY4HBQWRE0mDGwoJ3zAqJyfn9OnTK1asGDlyZLly
5WQOJIjq1atb+4AKlLB//37JK1WJEiWWLVum0+lYNwKMQHCvTQjuVYbgHqhD
cM8EgntQCIJ7lSG4NwXBvUwI7sEq3Lhxw9HRUdrlFzc3t7i4OKXP7tPS0kJD
Q6VVaNSAAQMULdisrKws/tqIpRwcHEaMGPHixQu2TdAUGwvub9265eTkJG31
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
+DpTTsRY4P71118XD7RmzRovHSheQeAevCp+Bu5v3bol9pty5cp1//59X2eK
i7HA/aNHj1gX0hsvCdki0X379rWxkwkTJog7GTNmjEoqPwncf/nll+IO33rr
LXv7QeAewLcQuAcAMFOkSBG9eEyYMOGdO3fMtixQoIADgfv/mjJliphqxIgR
Xs4mAADEkKZNm4olfM6cOR89euTrTEE8gsA9AMQ34eHhI0eOrF69euvWrX/9
9VdfZ8c5BO5jNQTuwaviZ+A+KvpLn27dulWtWvW99967deuWr7PjBAL3Tn37
7bcNGjSoV6/eN998o5gEgXsA8CAE7gEAnLp9+7a4qlHevHklG2/btm3ZsmXr
1q2LsezFJHuBe7J06dI33nijbt26X331VWRkpFczCQAAMWb16tV6pZAmTZpj
x475OkcQvyBwDwDghxC4j9UQuAevireBe/+HwL2nIHAPAB6EwD0AgFN79uwR
i0fqxvo6Rz5jO3APAABx1XvvvZckSZLatWsfP37c13mBeAeBewAAP4TAfayG
wD14FQL3fguBe09B4B4APAiBewAAp9auXSsWj02aNPF1jnwGgXsAAADwHwjc
AwD4IQTuYzUE7sGrELj3WwjcewoC9wDgQQjcAwA4ReWhWDy2atXK1znyGQTu
AQAAwH8gcA8A4IcQuI/VELgHr0Lg3m8hcO8pCNwDgAchcA8A4NS3334rFo+t
W7f2dY58BoF7AAAA8B8I3AMAuOPFixfUxXv58qVnd4vAfayGwD14FQL3HvHk
yZP79+97dp8I3HsKAvcA4EEI3AMAOIXAvS4eBu7plJ89e+brXAAAAMR64eHh
P//889SpUz/++OPg4ODevXuPHDly1qxZhw8fjoyMtLdPeeD+4cOHCxYsaNu2
bZEiRehPBQoUqFSp0rvvvrty5UpvvB6M816+fHno0KEvv/ySbhzdvh49egwf
Ppxu6ObNm58+feqlg964cWP27Nn0wDRv3rxVq1Z0+yZOnPjbb795JM744MED
eianTZtGJ0KnQyc1YsSIGTNm7N2798WLF+7v34bTp09/9tlnHTp0aNq0afv2
7YcNG/bTTz/J26L0y1q+fPmAAQOok9KsWbPu3bt//vnndIls/6xEERERdDXo
mnz66ae9evWi6//JJ59Mnz59+/bt3vsR3bt37/vvvx84cGCbNm2aNGnSqVOn
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
1BKTvywSx6A6oqcau3r1qtnG1NFjwyMXLFhg88QAACBeev78OavHqQdNlRd7
BX3t2rUhQ4aIn4wlSJBg4sSJkj0PGjSo7P9o04HqgoKCygrESCW1dsQ/sUq/
VKlS+p9UVuiOJyZMmCCO4qPbNHToUPadF93QOXPmsNcjdOsl3wl+//334r1g
6/PSPdX/JL4Y/Pvvv8VUbKRH/vz59T9JYkZTpkxhX6517NjR+JEXndSMGTMy
Zcqkb1a8eHGVaf+dmj17tphztmCl+OyJL2G6d++u/3uuXLnYT0ncoR5COn/+
vPjvbOl5avvpf3rnnXfMcku3WExFXYYxY8awhSnDwsK++OILdgsow5KBDeoX
gThdg1Vu+PDh4g5p/9T0pbY62+zff/+lp1qco7JKlSrygKAEPfmSk6K2vf4n
6k7qqS5cuCCmYmMYChUqpP+pT58+eqoGDRqkEbDHOHXq1PqfqAtjluEDBw6w
j4N01PJnn+527dqVbqh64D4mr4bo2bNn4sLiVAvs2LFD/yt15apVq6b/VWV5
aBVjx45lF3DAgAGWqa5fv85uHF0lxVVfmdDQULo44q6yZ8++cOFCY8xl//79
4hh1OqIxOmYPdYf1u8PG8KRLl67sfym+YfarE4yKjmLQE+UwoAc1d+7cefPm
TZIkif6P2hfBLHBfoEAB8TqYrU7IAvfDhg2bNWuW9t85cuSYPHnyxYsXtdDV
48ePd+7c2aVLF/YTo9/+0aNH3Tzfbdu2sRrZEf3J55o1a8Rg3+nTpymHWhVQ
t27devXqidvTZdHPt127dloS+umJ1yFz5sxikixZsoh/pXvqTioVnTp10hOy
9VaSJUsm7lb8pIKeQP3fqVUgpkqYMKGYSl8onOoXsehm71io1BX/OnLkSLMM
T5o0ybhsvYaV6rRP7eemHriPsavB7N27V0xFP3mxPDx48GD69Om1P6VKleru
3bvKt/c/WLRr9OjR+nszaqn269dP/5NYjI8fP168NawcoMsi/lWff7tmzZr6
WYvv94zXRAxh20ulTvt2W9e/f3+9tUalihhbpydBT0X3Wjy0fi80VObrf+rc
ubN4uNatW+t/YlP9ZMyYUdyn2TT4+/btY9HqcuXKbdiwgZWf1Pqlokmc5IRS
ScYYyxkHddNvYfHixcbwPV00KirZqrUVK1ZU+UjfON2rhkoGqiyomhOfNLo1
lIRdihIlSugXkMUm6FHX/0TdIjFVypQpxSsv9mioq6X/OxuDTdWBmGrdunUu
XVK6IMYp6+lBGjdunDir3p07d6hjqI2HpF8Wqw2pohHzYOyymWGL1xQpUsSl
zCt6+vSpcTIl6qZROXPu3Dl9M2q6/Pjjj2Wj3z9Q74wNaGHFrF6XnThxQvx3
VtTnyZNH/1Pv3r3FXFGXQf+T2Jl1/LfeLF++vDeuCQCAt1G3SCweqTwUCzpq
mJU1MBs2FhX9mpHqVnEP1OOYP3++MbZ++PDhN998U9+MWuZTpkxRybBXD0EN
fv00S5UqJR6FeoviRRBnZps4caLYlGUdQNbQ1YdEUtdY3CFb+UWsmNgscG+8
8YZKxUSNOrPTDAsLM8buNdQfZy+R6GrTNWezTnkwcO+Ibs/QrXH6cQp1yTt2
7Ch23KiBZ7kEHvVKxOUdHdFP8uzZs9nbj+vXr3/00UcsgGK20BUAAIDEy5cv
hw8fzmaapSq1YsWKzZs3b9y4cfHixdmbZ+qTrlixQr5bNh5AQhyayGbvlxg0
aJCbJ963b986sQR17SWfVEdFj/ZkLwrollFDiG4f3US6layNRLf7k08+kX+Z
bpyP18zHH3+spwoNDVVMJf9AbPXq1cavMHLkyFG9evXWrVs3bdq0dOnSLIJJ
F8qdT8LpgijmXJyKn00pIKGPkTh+/LhiEklsl3z99dfsc2m6INRObtKkCV0f
ak6zhj3930mTJslHkKpfBEf0x8s2rvOiRYvYWAJHdPu8Ro0abdq0cVrgtGzZ
0p35tI3LUpuh66OnYkN/JaiDo6fSZj9WQacpyTM19dmXg0aJEyfWP7NVD9zH
5NVg2OfedJcrVapEN71evXrik0wn7qllv86ePcuypzhVAmVMTOV0uWFFVCgZ
byX9GOkXSk87nX6tWrXEIQ2O6Ff3Kh+KKmIhSDkb64z4/AQ106dPNwuYil5/
/XWtMGGBe8ZsRWNj4D7qvzN4O6IfbPYhqo6q6QMHDnjkfJctW8YGfWmocs+Y
MSMVzuJvqmbNmnTWkiKFWgvabp1OXGxGX3LFXioV5cuXV9ytOOug8eNKM/TY
aEnu3bunfgpm82Zrdu7cyUazGGXPnl2fhlE9cB9jV8OIPTz0dNWvX59+3RUq
VBDr69mzZyveWaNTp06JA2wc0cNpqCvRrFkzcSgIPdvi+teffvqp4tkRPQxq
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA/l97cEgAAAAAIOj/azfYAQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAKTAvAqQ==
      "], {{0, 3828}, {
      2707, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSize->{764.5730407523511, Automatic},
    ImageSizeRaw->{2707, 3828},
    PlotRange->{{0, 2707}, {0, 3828}}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771631778139007*^9, 3.7716318086770906`*^9}, {
  3.771765172608336*^9, 3.771765173560946*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"87f2f3a0-d60a-45fe-b4c3-137357041d29"]
}, Closed]],

Cell[CellGroupData[{

Cell["Preparing the Sheet Music", "Chapter",
 CellChangeTimes->{{3.7715844170303698`*^9, 
  3.771584421360414*^9}},ExpressionUUID->"d385d2a4-222b-4f95-8e5c-\
79616f85baa9"],

Cell[CellGroupData[{

Cell["Detecting the Staff Lines", "Section",
 CellChangeTimes->{{3.771584436376894*^9, 3.77158443870697*^9}, {
  3.771584475385931*^9, 
  3.771584484886223*^9}},ExpressionUUID->"e3cba559-bdb4-4e02-9fc5-\
e1e746f7b3a0"],

Cell["\<\
Staff lines are long horizontal and thin. They can be detected by using a \
bottom hat transform with a short kernel. Then, by looking for close groups \
of five lines, we can extract an image for each staff in the original score.\
\>", "Text",
 CellChangeTimes->{{3.771584489023285*^9, 3.771584526459016*^9}, {
   3.771753796797714*^9, 3.771753799409107*^9}, {3.771754268885809*^9, 
   3.7717543142789717`*^9}, 
   3.771754354898095*^9},ExpressionUUID->"42aa4747-20b8-40eb-a229-\
fb40c8a1b7ee"],

Cell["\<\
Find the lines and return a list of the images of the staffs along with the \
median distance between the staff lines:\
\>", "Text",
 CellChangeTimes->{{3.771765307304246*^9, 3.771765399389409*^9}, 
   3.771940837968911*^9},ExpressionUUID->"e34a248b-447a-42f2-a3f6-\
cdd97b77c514"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Crop", " ", "the", " ", "segmented", " ", "image", " ", "along", " ", 
    "with", " ", "the", " ", "original", " ", 
    RowBox[{"one", "."}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"detectStaffLineImages", "[", 
    RowBox[{"image_", ",", "segmentized_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"staffLines", " ", "=", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ImageLines", "[", 
           RowBox[{
            RowBox[{"BottomHatTransform", "[", 
             RowBox[{"image", ",", 
              RowBox[{"BoxMatrix", "[", 
               RowBox[{"{", 
                RowBox[{"1", ",", "0"}], "}"}], "]"}]}], "]"}], ",", 
            "Automatic", ",", "0.0065"}], "]"}], "\[LeftDoubleBracket]", 
          RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Abs", "@", 
             RowBox[{"VectorAngle", "[", 
              RowBox[{
               RowBox[{"Subtract", "@@", "#"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "]"}]}], "<", 
            RowBox[{"10", "\[Degree]"}]}], ")"}], "&"}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\[CapitalDelta]", " ", "=", 
       RowBox[{"Median", "@", 
        RowBox[{"Differences", "@", 
         RowBox[{"Sort", "@", 
          RowBox[{"Map", "[", 
           RowBox[{"Mean", ",", 
            RowBox[{"staffLines", "\[LeftDoubleBracket]", 
             RowBox[{"All", ",", "All", ",", "2"}], 
             "\[RightDoubleBracket]"}]}], "]"}]}]}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"staffLineGroups", "=", 
       RowBox[{"Gather", "[", 
        RowBox[{
         RowBox[{"Sort", "[", 
          RowBox[{"staffLines", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Last", "@", 
               RowBox[{"Mean", "@", "#1"}]}], ">", 
              RowBox[{"Last", "@", 
               RowBox[{"Mean", "@", "#2"}]}]}], ")"}], "&"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"Last", "@", 
              RowBox[{"Mean", "@", "#1"}]}], "-", 
             RowBox[{"Last", "@", 
              RowBox[{"Mean", "@", "#2"}]}]}], "<", 
            RowBox[{"5", "\[CapitalDelta]"}]}], ")"}], "&"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Map", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"ImageTrim", "[", 
            RowBox[{"image", ",", 
             RowBox[{"Flatten", "[", 
              RowBox[{"#", ",", "1"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{"4", "\[CapitalDelta]"}]}], "}"}]}], "]"}], "&"}], ",",
           "\[IndentingNewLine]", "staffLineGroups"}], "\[IndentingNewLine]", 
         "]"}], ",", 
        RowBox[{"Map", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"ImageTrim", "[", 
            RowBox[{"segmentized", ",", 
             RowBox[{"Flatten", "[", 
              RowBox[{"#", ",", "1"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{"4", "\[CapitalDelta]"}]}], "}"}]}], "]"}], "&"}], ",",
           "\[IndentingNewLine]", "staffLineGroups"}], "\[IndentingNewLine]", 
         "]"}], ",", "\[CapitalDelta]"}], "}"}]}]}], "\[IndentingNewLine]", 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7717594347580976`*^9, 3.771759477924284*^9}, {
  3.771759511153246*^9, 3.771759559838932*^9}, {3.7717601670236607`*^9, 
  3.771760172446357*^9}, {3.771838256392539*^9, 3.771838257970199*^9}, {
  3.771838315630115*^9, 3.7718383243942213`*^9}, {3.7719408464160624`*^9, 
  3.7719408475233097`*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"53051d17-72af-47c2-87af-291582cee282"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"only", " ", "the", " ", "original", " ", 
    RowBox[{"image", "."}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"detectStaffLineImages", "[", "image_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"staffLines", " ", "=", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ImageLines", "[", 
           RowBox[{
            RowBox[{"BottomHatTransform", "[", 
             RowBox[{"image", ",", 
              RowBox[{"BoxMatrix", "[", 
               RowBox[{"{", 
                RowBox[{"1", ",", "0"}], "}"}], "]"}]}], "]"}], ",", 
            "Automatic", ",", "0.0065"}], "]"}], "\[LeftDoubleBracket]", 
          RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Abs", "@", 
             RowBox[{"VectorAngle", "[", 
              RowBox[{
               RowBox[{"Subtract", "@@", "#"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "]"}]}], "<", 
            RowBox[{"10", "\[Degree]"}]}], ")"}], "&"}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\[CapitalDelta]", " ", "=", 
       RowBox[{"Median", "@", 
        RowBox[{"Differences", "@", 
         RowBox[{"Sort", "@", 
          RowBox[{"Map", "[", 
           RowBox[{"Mean", ",", 
            RowBox[{"staffLines", "\[LeftDoubleBracket]", 
             RowBox[{"All", ",", "All", ",", "2"}], 
             "\[RightDoubleBracket]"}]}], "]"}]}]}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"staffLineGroups", "=", 
       RowBox[{
        RowBox[{"Gather", "[", 
         RowBox[{
          RowBox[{"Sort", "[", 
           RowBox[{"staffLines", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Last", "@", 
                RowBox[{"Mean", "@", "#1"}]}], ">", 
               RowBox[{"Last", "@", 
                RowBox[{"Mean", "@", "#2"}]}]}], ")"}], "&"}]}], "]"}], ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Last", "@", 
               RowBox[{"Mean", "@", "#1"}]}], "-", 
              RowBox[{"Last", "@", 
               RowBox[{"Mean", "@", "#2"}]}]}], "<", 
             RowBox[{"5", "\[CapitalDelta]"}]}], ")"}], "&"}]}], "]"}], "//", 
        "Echo"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Map", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"ImageTrim", "[", 
            RowBox[{"image", ",", 
             RowBox[{"Flatten", "[", 
              RowBox[{"#", ",", "1"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{"2.25", "\[CapitalDelta]"}]}], "}"}]}], "]"}], "&"}], 
          ",", "\[IndentingNewLine]", "staffLineGroups"}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
        "\[CapitalDelta]"}], "}"}]}]}], "\[IndentingNewLine]", 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.771632187052854*^9, 3.771632195802431*^9}, 
   3.771632425809208*^9, {3.7716324865163307`*^9, 3.771632491814995*^9}, 
   3.771632580572052*^9, 3.771632820964923*^9, {3.771760177599287*^9, 
   3.771760181412352*^9}, {3.771760450495906*^9, 3.771760522043934*^9}, {
   3.771768571564652*^9, 3.7717686224393597`*^9}, {3.771768668189187*^9, 
   3.771768672397441*^9}, {3.7717689333072367`*^9, 3.771768980091522*^9}, {
   3.771769048003524*^9, 3.771769048816455*^9}, {3.77176947952312*^9, 
   3.7717695337119503`*^9}, {3.771769574886077*^9, 3.771769575301037*^9}, 
   3.771769654403219*^9, {3.771769771799292*^9, 3.7717697750262527`*^9}, {
   3.7717698068645153`*^9, 3.77176983585398*^9}, 3.771769915312982*^9, {
   3.771838328192741*^9, 3.7718383361443233`*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"0133cd74-b451-4a4a-a6fc-427ef6a45d0c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Removing the Staff Lines", "Section",
 CellChangeTimes->{{3.7715848650089207`*^9, 3.771584890490951*^9}, {
  3.771632041639303*^9, 
  3.771632043313753*^9}},ExpressionUUID->"abc35530-432c-400e-a0d5-\
e8a703958f7b"],

Cell["\<\
The staff lines can be removed by considering the minimum of the negation of \
the highlighted version of them with the closing of the image with a short \
vertical kernel. This is then cleaned up by returning the maximum of the \
version with no lines with its morphological binarization.\
\>", "Text",
 CellChangeTimes->{{3.77175381003802*^9, 3.7717538133866377`*^9}, {
  3.771754010919807*^9, 3.7717540186650543`*^9}, {3.771754089383836*^9, 
  3.771754191605942*^9}},ExpressionUUID->"e11e1d51-ac0e-4a02-8b07-\
19acf1bd51c2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"imageMax", "[", "imgs__Image", "]"}], ":=", 
   RowBox[{"ImageApply", "[", 
    RowBox[{"Max", ",", 
     RowBox[{"ColorCombine", "[", 
      RowBox[{"{", "imgs", "}"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.771632288373945*^9},
 CellLabel->"In[63]:=",ExpressionUUID->"6f2cd697-80f5-49a1-99dd-b0f2a539faf3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"imageMin", "[", "imgs__Image", "]"}], ":=", 
   RowBox[{"ImageApply", "[", 
    RowBox[{"Min", ",", 
     RowBox[{"ColorCombine", "[", 
      RowBox[{"{", "imgs", "}"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[64]:=",ExpressionUUID->"9dd19415-42f5-45fe-b627-628552df561e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"removeStaffLines", "[", 
   RowBox[{"image_", ",", "\[CapitalDelta]_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"withoutStaffLines", "=", 
      RowBox[{"imageMin", "[", 
       RowBox[{
        RowBox[{"Closing", "[", 
         RowBox[{"image", ",", 
          RowBox[{"BoxMatrix", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\[CapitalDelta]", "/", "6"}], ",", "0"}], "}"}], 
           "]"}]}], "]"}], ",", 
        RowBox[{"ColorNegate", "@", 
         RowBox[{"BottomHatTransform", "[", 
          RowBox[{"image", ",", 
           RowBox[{"BoxMatrix", "[", 
            RowBox[{"{", 
             RowBox[{"0", ",", "\[CapitalDelta]"}], "}"}], "]"}]}], "]"}]}]}],
        "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"imageMax", "[", 
     RowBox[{"withoutStaffLines", ",", 
      RowBox[{"MorphologicalBinarize", "[", 
       RowBox[{"withoutStaffLines", ",", 
        RowBox[{"{", 
         RowBox[{"0.66", ",", "0.33"}], "}"}]}], "]"}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{3.77186881201062*^9},
 CellLabel->"In[65]:=",ExpressionUUID->"883fe860-7518-475e-9d9e-676cc5255f87"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing It", "Section",
 CellChangeTimes->{{3.771632127971341*^9, 
  3.771632129494216*^9}},ExpressionUUID->"cef6d98e-3d8c-493b-96bc-\
b6d7d852cab9"],

Cell["Get the staff subimages and the median line distance.", "Text",
 CellChangeTimes->{{3.771838347145129*^9, 
  3.7718383918549423`*^9}},ExpressionUUID->"0244fe8c-2195-4680-a030-\
dec75aef8fdc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"staffs", ",", "\[CapitalDelta]"}], "}"}], "=", 
   RowBox[{"detectStaffLineImages", "[", "exampleSheetMusic", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771632150977812*^9, 3.771632155752659*^9}, {
  3.771632242681303*^9, 3.77163226090186*^9}, {3.7716325536245117`*^9, 
  3.77163255643676*^9}, {3.7716337108584633`*^9, 3.771633712119162*^9}, {
  3.771760195697*^9, 3.771760198658646*^9}, {3.77176541652736*^9, 
  3.7717654204223146`*^9}, {3.7717699258568707`*^9, 3.7717699265536346`*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"bdba51ed-bae1-4dc3-a54f-b5ae97988dc6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "3625.0240958853988`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "3625.0240958853988`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "3579.010001520752`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "3579.010001520752`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "3442.9683312252746`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "3442.9683312252746`"}], "}"}]}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "3228.9027617897436`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "3228.9027617897436`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "3182.888667425097`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "3182.888667425097`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "3136.058487886975`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "3137.691103042357`"}], "}"}]}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "2785.7670269302107`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "2785.7670269302107`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "2740.753238964795`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "2740.753238964795`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "2618.715858258558`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "2618.715858258558`"}], "}"}]}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "2388.645386435324`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "2388.645386435324`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "2343.6315984699086`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "2343.6315984699086`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "2297.617504105262`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "2297.617504105262`"}], "}"}]}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "1969.5170051573457`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "1969.5170051573457`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "1923.5029107926987`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "1923.5029107926987`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "1877.488816428052`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "1877.488816428052`"}], "}"}]}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "1526.3812702978123`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "1526.3812702978123`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "1481.367482332397`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "1481.367482332397`"}], "}"}]}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "1131.0761012410317`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "1129.44348608565`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "1084.2458418375104`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "1084.2458418375104`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "1038.2317474728638`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "1038.2317474728638`"}], "}"}]}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "710.1312485249473`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "710.1312485249473`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "664.1171541603005`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "664.1171541603005`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "618.2868231143252`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "619.9194382697069`"}], "}"}]}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "290.0025608477374`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "290.0025608477374`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "244.17216176153548`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "245.8047769169172`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.`", ",", "199.9749849169068`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2707.`", ",", "199.9749849169068`"}], "}"}]}], "}"}]}], 
    "}"}]}], "}"}]], "Echo",
 CellChangeTimes->{
  3.7761722550591507`*^9},ExpressionUUID->"3a689369-3c93-4142-aee1-\
25842f29d7d6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Show", "[", 
     RowBox[{"#", ",", 
      RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], "&"}], "/@", 
   "staffs"}], "//", "TableForm"}]], "Input",
 CellChangeTimes->{{3.771632557996174*^9, 3.7716325705671387`*^9}, {
   3.771632620038952*^9, 3.7716328024366713`*^9}, {3.771760239297305*^9, 
   3.771760240087778*^9}, 3.77176547912435*^9, {3.771769252825553*^9, 
   3.7717692540416737`*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"0cbe471a-12de-4339-9775-dab5ea37d1ed"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      GraphicsBox[RasterBox[CompressedData["
1:eJzs3XmcTfUf+PFhxjAYsoxI1pBdRaEoMYqsJSRJdvqGyJA9FBFKpCzZl0LI
viRkSdZkzb7v22CYYZbf5+f+fvfx6XPuPfdzZ+bec+/M6/nH99F33Pfnfc65
557zOed9zudTqHXXt9qnDQgI+CSD+J+3WvV6tXv3Vr0bPSb+T+Mun3Tq0KVd
29pderTr0K57pdaB4o9D0wQEjM0YEPB//zsBAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAgVYqKijpx4sTOnTsPHz4cGRnp11l8yvXr1w8ePChW+cyZM/fv3/fr
LP7owYMH58+f//vvv/ft23fp0qW4uDj/zQJrRUdHnz17dvfu3QcOHLhy5YrV
iwMAKd+1a9dE92bXrl0e7d54JwuSTvSvRC9L9LVEj0v0u0Tvy3+zQF9sbOzF
ixf/+eefvXv3Xrhw4eHDh/6bBYCmW7duHT58eOfOnSdPnoyKivLrLL7DdoIT
BzovnEY9ncV/3blz5+jRo2KvE/8r/tuvs/iUK1euHDhwYPfu3WfPno2Ojvbr
LAAAaLp69epO+BXRPdb5ZiMjI2fNmtWsWbOcOXMG/FfGjBnfeOONcePGid5I
Evef5M2yZ88ezY0gR506dUozKlkeJzh+/PioUaNq1KiRPn16ZZXz5MnTqlWr
+fPnJ/3CMBmz3L59W3P7iG6/HCiuxXSiRLc2iSvrFnGpuGbNmo8//rhYsWLK
lkmbNm2FChUGDBig7CGWZ7E90KLj1q1b9qgbN25oRp05cyaJ6+t9//77r+ba
3b171x4lrqQ0oy5cuOByGR48eLB06dJOnToVLFhQ+ZaDgoJeeumlL774Yt++
fZ7cDAmnT5/WXCMAqYHoCMXGxnr0sGMt0dP46quvqlevHhwcrBx4n3jiiTZt
2ixYsODevXu+k0V0HTW/u2PHjsmBmn1a8bEkrqy/Exth4MCBzz//vOhfKV+W
6IN17dp19erVSX9mMhmzXLp0SXOXkC/ZYmJiNKMOHz6cxJX1C1u3bu3du/cz
zzyTJk0a5RspVapUjx491q9fHx8f7ztZxLep+Q1evnzZHiUu1jSjlKuwRNC/
cIB3XLx4MYnfaQojrljHjh1bq1atkJAQ5fcYFhbWvHnzOXPmJP12TTJmEf0E
ze9aOW7v379fMzBZ3gj466+/+vXr99xzzxlPcCVKlOjevfu6deuSnigZs4jr
9ET8iO7fv68ZdeTIkSSurLuuXr06efLkRo0aZc2aVdk4WbJkeeuttyZNmpT0
VwOSMYv4pjQ35t69e+VA29MCOpLemU949FMaOnRolSpVgoKClFUuUKBAx44d
lyxZIvpXvpPl+vXrmtvn1KlT9ijRD9GM8vS9KQCAr3n++ecD4Ffy5ctn/p1G
R0cPGTLksccec9lUunTp2rZtm7g+pCeyiA6n5kaQLwpat26tGbV69epErKmd
uAx85513jJcqRrly5RozZkzi7r0ne5bff/9dc/vUq1dPDsyRI4dOlLgoTsRq
Js6iRYuefvppnaWqWrXqzsSW75M9S7NmzXRaE8RFgT1qwYIFmlFdu3ZN3Jpa
qEaNGpprt23bNnvU+PHjNaM+//xzk+zi4mjGjBniQkynqdq1ax88eNATG0Fc
AGbIkEFzjQCkElOnTvXEAcdyp06daty4sU735vHHHx83blziOlHJnkV0HTW/
uLfeeksO1OzTio8lYjVThl27dr388ss6W6lYsWILFy70kSyjRo3SaU0YMGCA
Per06dOaUS+++GLi1tRfbNq06YUXXtDZFGXKlFm1apWPZOnXr5/mN/j111/b
o/bs2aMZVbdu3cStqV14eLhmLnhH8eLFk/idphiXL19u3bp1unTpXG60bNmy
ffHFF4mrxCV7lr1792p+18px2/jkvzNJfN1DXCaL1DqJSpYsuWzZMh/JMmTI
EM3tM2zYMHvUoUOHNKPEwTBxa5oId+7ciYiIyJgxo8ulCgkJ6d69e+IeTUn2
LHfv3tXcmKK3LAfWrl1bM/Cff/5JxJraHT58uE6dOsaH7ozy588vLp0S96Rf
smeZPXu25vZp3769PUocizSjChcunIjVBAD4r1mzZrWHX5kwYYLJF3rkyJEy
Zcoo5/dKlSqJq5jevXt36tSpZs2ayuVMzpw5165d69Zu46Esvly4nz9/fmho
qNxahgwZ3njjjc6dO4tVbtmyZbly5ZR04gLn3LlzlmdJGYV7cVX73nvvKakL
FCgg/tizZ8+PP/747bffzp49u/yvgYGB4qrQrT68h7JQuDeysHB/8+bNunXr
Kp8vVqxYixYtevXq1aVLl4YNGyo/w+Dg4HHjxnliO3zxxRdWn1IA+JCPPvro
9OnTnjjaWGvu3LmZM2eWj6ui81CnTh1796Zs2bLKYblKlSo6Y6d4OguFe08Q
vSZx+hM9KHlTZMuWTfSyRF9L9LhEv8v4cN27777rVo3DQ1ko3CdabGys6Ggp
d8hz5crVtGnT7t279+jRQ3SYn3jiCWWDdOzY0a0qnoey+H7h/pdffrH6DIb/
mDZtWhK/05Rh1apVyl0FcWH12muvffjhh+LU3KpVK+MzNuXKlVMGsbEkiy8X
7uPi4vr37688ppgzZ84mTZp069YtIiJCnMvy5cunpGvdurVbcwZ5KEuKKdzv
2rVLGbhPbKuXX365Xbt2Yq8TB4FXXnlF2Xr58+ffvn275Vl8vHD/ww8/KOOO
hoaGNmjQoEuXLuL83qJFC+NbNmLBbty4YXkWCvcAAMCZ3bt3Kxcs9erVM468
d+XKle7du8s3NIKCgubMmWN5lvfff7/x/1e+fHk5RYECBRpL5Drp+PHj7X9X
3qnJnj27HKUM9KTv22+/lVckXbp0gwcPlkc1txG9U2UBRJ9Zf+RDD2XZv3+/
vBHy5Mkjx1auXNn+T19++aUcKK657P9UpEgROap06dL2f2revLnmCiZaZGTk
Sy+9JC/AU089tXbtWqVcHh0dPW3aNGUUCLEWmoO2eS7LN998Y99cSsk4ODhY
/nbk9/e3bdsm/5NyOVa/fn37P/nj65mDBg2yL3/NmjXlVcuSJYu84vJgd6tX
r7b/XVxVBfyXHPXLL784zHv58mXloaOyZctu2bJF+VhUVNTYsWOVx9p79uzp
wS0CACnUqFGjlO7NF198YXwb6O+//1bOwgULFjxx4oS1WUTXUT65PP7443Ks
aMr+T1999ZUcKPdpCxcurJx37P8kPqa5gimG6C+1bdtW3iCiTyV6MspcoqL3
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
pkyZ5Lyvv/66Wy3UqlVLDk+fPr1xsE3vZJFZXrhfsWKFstuMHz9eP1ysnVKR
b9iwoVVZZBTuAQBI5U6dOqV0Pxo3buxWC8OHD1da+Pnnny3JIrO8cG98RXfW
rFlutaDclAsKCjJOL+WdLDI/KtyXLl1aTiquX/SfNE5w9Lh4y5YtrcpiR+He
yAuFe2WSuIIFC7q1hMbZ0CIiItxqAQBSlVGjRimHTfNen9Hzzz8vh6dPn974
wJV3ssgo3Cea8Qne/fv364eLvlnGjBnl8JIlS1qVRUbh3lyDBg2Ub+TChQv6
4VFRUaKDJ4c7fLrGO1lkFO4BZ2bPnq38HseMGeNWC/Xq1VNaML7x4Z0sMssL
98qkHsKJEyf0wx88eKAMMuBwKhnvZJH5UeFeHLSVjdOlSxe3Wvj444+VFv74
4w9LssgsL9z37t1bWeDffvvNrRaU8Tdy5MhhvKfnnSwyCvcAAKRyv//+u9L9
+OSTT9xqYe7cuUoLw4YNsySLzPLCfdeuXZUFNu/uGr3zzjtKCwcPHrQki8yP
CvfKvdPixYu7FX779m1lyzi8C+edLHYU7o08Xbi/c+eO8h25NVWfcOzYMaUF
cT3lVgsAkKoo3YYA90tUykgpwtGjRy3JIqNwn2ivvPKKsqnF2dmtFp5++mk5
PEOGDFZlkVG4N1emTBl5TYODg91tQXn2Umxwq7LIKNwDzgwePFg5DrscLF1h
PLlv2rTJkiwyywv3yqOG4uI3NjbWrRby5csnt5A9e3arssj8qHBvfFxk5MiR
brUwevRopYVp06ZZkkVmeeHe+LiIeW/cyNj9M56XvZNFRuEeAIBUzjhSt1uT
OSY4ms+xZ8+elmSRWV64b9GihbLAu3fvdquFtm3bKi1s3rzZkiwyfync379/
X1kvcRXpVgtxcXHK6zOlSpWyJIuMwr2Rpwv3xpFvxa/ArSW8ePGi0sKrr77q
VgsAkKoYnyrct2+fWy20bNlSaeGvv/6yJIuMwn2iKQMcibO26EG51UL58uWV
LysqKsqSLDIK9+aU7eOygmOkvOCWPn16q7LIKNwDzhjf9l27dq1bLfTq1Utp
wXi29U4WmeWF+8KFC8tNZcyY0d0WxFW23ELatGmNp0jvZJH5UeF+7Nixyj7z
ww8/uNWCcpNTGD16tCVZZJYX7sPDw5UF1twN7JSbnAGO+mPeySKjcA8AQCpn
7JV99dVXbrVgfJu+TZs2lmQxyej9wr2xV3bkyBG3WjC+TW+cF9s7WUwy+mzh
XilwC9WqVXO3kZCQELmF3LlzW5LFJCOF+wTPF+6V9oUmTZq4tYTGd/bLli3r
VgsAkKooBW7h5MmTbrXw4YcfKi2sXLnSkiwmGSnc61NKq5kyZXK3hZdffln5
ss6ePWtJFpOMFO4VSoE7X7587ragPIwR4OhRCu9kMclI4R6wUwrcidjVjW/T
T5061ZIsJhm9X7hXCtxhYWHutlChQgVlla9fv25JFpOMvly4VwrcAe5Pc2l8
m75fv36WZDHJ6P3CvVLgDnB/uKQmTZooLezYscOSLCYZKdwDAJDajBs3Tuk8
jBo1yq0WNm7cqLTQokULS7LILC/cG+8GHzt2zK0WxHWZ0sL8+fMtySLzl8L9
yZMnlfWqXr26u42EhobKLRhfwPFOFhmFeyNPF+7/+usv5Vt+55133FrCe/fu
KS24O6UCAKQqr776qnLYPH36tFstdO7cWWlh8eLFlmSRUbhPtLCwMHkjZMmS
xd0WjF+3sc/snSwyCvcm4uPjlcmOCxYs6G4jSnVGED1A72dRULgHnDEOhmM+
lI3RF198obRgfOPYO1lklhfuM2XKJDdl/rKAQ5UqVVJW+cKFC5ZkkflR4b5v
377Kqs2ZM8etFn766SelBeMwpN7JIrO8cK/MdxPg6tk5o2bNmiktGIch9U4W
GYV7AABSOePjlIMHD3arheXLlystdO3a1ZIsMssL98bHKffu3etWCx06dFBa
+P333y3JIvOXwv2tW7eU9RLXgG61EB8fnzZtWrmFIkWKWJJFRuHeyNOF+6NH
jyrfcr169dxawqtXryotvPjii261AACpyptvvqkcNg8ePOhWC61bt1ZaME4+
650sMgr3iVa0aFF5IwQGBrrbgujVK1+WsVrqnSwyCvfmREdXXtNEvLwp+tXK
d2ocddk7WWQU7gFnOnXqpBxFze9OGPXp00dpwfhigneyyCwv3OfNm1duKjQ0
1N0WjEOLREdHW5JF5keF+5EjRyqrNmnSJLdamDx5stLCl19+aUkWmeWF+6pV
qyoL7O7Nrvr16ystHDp0yJIsMgr3AACkcqtWrVI6D5odLTtxhaK0YCzKeyeL
TCnca74hm4yFe+PF4NatW91q4b333lNa+Pvvvy3JIlMK93PnztXJoowl64XC
vfH1GXEN6FYLUVFRypapWLGiJVlkSuFe/1o49RTuCxcurBN1/fp1OcqkcK98
MsD9cRVOnTqltOBu6R8AUpW2bdsqh03zwSSNmjZtqrRw4MABS7LIlMK95tOP
7dq1k6NSZ+He+ArevXv33GqhVKlScrjov4lenCVZZErh/vDhwzpZUk/hvlix
YvKahoSEuNtCnjx55BZy5sxpVRaZUri/fPmyThYK90gN+vXrpxyHly5d6lYL
xqkA161bZ0kWmVK4HzdunE6W/v37y1FJKdyXLVtWbipt2rTmpyejQoUKyS1k
zpzZqiwypXB/5swZnSyWFO6nTp2q7DPffPONWy18++23SgvGorx3ssiUwn23
bt10siRj4b5hw4bKArs79VWNGjWUFoznZe9kkSmF+w0bNuhkUR5LpnAPAID/
2rt3r9J5+OCDD9xqwTgMvrFf550sMqVwX7duXZ0s4npNjkpK4d4469nChQvd
aqFmzZou+3XeySJTCveaj+8q98a9ULgXnnzySTmpu6/PnDhxQtkyoq9uVRY7
pXCveS0cFxeXJk0aOTAFF+41v4ILFy7IUSaFe7H1QkJC5A+XKlXKrSXctm2b
8i23b9/erRYAIFVR7lQHuH9HvVq1aspB3jhytXeyyJTC/bRp03SytGzZUo5K
nYV74/AI7t4vzZkzpxyeN29eq7LIlMK95qMjyhTAKbhw/8orryjfSGRkpH74
w4cPg4OD5fAyZcpYlUWmFO41R1ooXLiwHEXhHinSd999p/weJ0+e7FYLxmHw
jcPpeCeLTCncm7/CbNerVy85KimF+9dff11ZYM1Hhmzi4+OVYfCLFi1qVRaZ
Urg3f37SrmTJknKUdwr3xreZevfu7VYLxmHwly1bZkkWmVK4b9eunU6WiRMn
ylFJKdwb32Zy9/yojPOQPn16cWa3JItMKdxrXqQoN2wp3AMA4L9iY2OzZMki
n9krV67sVgvG+T33799vSRaZUrjXTDdv3rykLKRs7dq1ygJrXp3Z5c+fXw53
OIK6d7LIlH7gsGHDdLIo7/VrRiWRcR6B69ev64cbL3kc3ir3ThY7pXCvmc74
Xr9bC+njlMJ9unTpYmJiXEYpj0yIKJMPK6UZcZEljmn6Szhjxgxl+0+dOlU/
HABSmxUrViiHzVGjRrnVgvICrMNZVLyTRaYU7keOHKmTRXmvXzMqhRkxYoTy
Za1evVo//Nq1a0p448aNrcoiUwr3oluok0h5r18zyh99+umnyiZ1a1iMI0eO
KOEOn5z0ThaZUrjfvn27TiLlgKMZBfgX5cpOiIiIcKuFZ599Vg7Pnj27ceoK
72SRKYV7zXTKe/3uLqRMqa4GuJrcR3HmzBkl3OFklN7JIlMK93/88YdOIuW9
fs2oJLp586YySeJbb73lVgtvv/22HJ4mTRrR8bAki0z50jXTKe/1u7uQMuPN
lunTp+uHx8bGKiflqlWrWpVFphTuNR/3Vd7r14wCAAC+qXbt2vKZPVu2bG6N
ZxUeHi6H58yZ02G4d7LYKYX7rFmz6qSbNGmSHPXaa6/pL6Hi7t27yuDkLVu2
1A+/ffu20t9u3bq1VVlkSuG+RYsWOonq1q0rR2kODZdExlEaNm/erB8+evRo
JdzhI7XeyWJnLNzrXAsrb5cLDx480F9IH2e88fLPP/+4jNqxY4cckiNHDpMP
K9MLCkeOHNFfQuMNYc1XqwAgdYqMjAwMDJQPm23bttUPv3nzpnLU7dChg1VZ
ZErh3mWny0Z5f01zYtwUxjh2zddff60fLjpLSvjYsWOtyiJTCveiW6iTSBnu
SXPaU39kfLrGrfvkv/76qxI+a9Ysq7LIlLv3mvfVM2bMKEeZz40L+KnY2Fil
FKs5dqI9XHll2+GbvN7JIlMK92+88YZOImXInUGDBukvpOL3339XjlRudSeU
OSUDnLzJ650sMuV7/OGHH3QSZc+eXY7as2eP/kImhTJEv8sHPhXKY3vOZmn0
ThY7pXD/9NNP62RRxg51+YSGCeO8hG5NzHr06FElvG/fvlZlkSmF+549e+ok
Kl++vBz1yy+/6C8kAADwNd98843ShdB/gD8qKkoZRLp58+YWZrFTCvfCv//+
6zKRMmhqo0aNNJfQoVdffVVuLW/evPrPKixatEhZ/p9//tnCLHZK4V7zKkCZ
7GzGjBmaS5gUR44cUcaHHzhwoH64uJqWY8PCwhwWu72Txc5YuNe5x6vciE7E
3J2+zFi417lgX7BggRxSsGBBkw9v2bJFSfHdd9/pL6EypG2xYsX0YwEgdapS
pYp85CxQoIB+rDKAUoDziYS8k8VOKdy7HE/bRvS15Ki5c+fqL2SKIXpHoo8k
bwfRI9UPVx7AEz03h9cF3skiUwr3zZo1c5lFLKTywMm+ffv0F9K/3L59O3Pm
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
ChWcPUJZrly5Pn36JPExbI9mcVi4Fw4dOqRMDC0rW7asW0N8AClGTEzMtGnT
6tatK8/BLRMnylatWjkc4t5Hsjgs3Cc86nWIM4izLsdjjz325ZdfJvGem4lL
ly4NGTLkhRdecPbebpkyZT799FNxSvLZLA4L9wmPbsjUqlXLYTqhVKlSbg07
6TlxcXGLFi1q2rSpsxKwWMEmTZosXLgwKTfTPJrFYeE+4dFsnsOHD3f2BIU4
D4o9PxFPg2iKjIz8+uuvq1Wr5qx3/dRTT3Xu3Hnv3r0+m8Vh4T7h0Q+qefPm
zn5N+fPn15/CAwAA+C/Rbdu5c+fixYsnTpwoLhnGjRs3f/78zZs3R0dH+3gW
Z4V7m/v374sUogdVu3btV199tX79+m3btp0yZcr58+eTvDZa7t69u2HDhrlz
53777bdilX/88cclS5b8888/vp/FWeHeRlwoia+vZcuW4eHhYsM2atTok08+
WbZsmQ9O7S0uDJcvXy6uzb/66ivR2Z41a9aaNWuS/ZmNZM9iUri3Ef35/v37
N2jQQGx/sXu/9957I0aM+Pvvv5O2Hv5NbHDxexdXlOLacMCAAWPGjNm0aVMy
3gA5fPjw0qVLp06dKjb1N998M3v27HXr1iXlkQAAgAnRvVm/fr2tezN8+HBb
90Z/VnELszgr3NtcuHBh7Nixostq60S9/fbbPXr0EL0I2yznMCFO9KtXrxa9
LNHXGjlypOh3ie2WuKGrvJzFWeHeRnQwRAe+SZMmYn+oWbPmO++8I/p4Gzdu
tHAAK58irjtWrlw5Y8aM0aNHjxo1avr06StWrDh79qzvZ3FWuLcRF2uff/65
OAKI7/31119/9913Bw0atHXrVl94BBqw1v379//444958+aJ06U4PE6aNGnx
4sW7d+9O3mfbPJHFWeHe5tq1a+IvrVu3Fod68cN/6623unbtumjRIs+VNRWX
L19etWrVzJkzxYFOnOBsB7pkH4XSE1mcFe5tDhw4MHTo0MaNG4utKvpgzZo1
Gzhw4ObNm33wcCrO7H/++efChQvHjx8v9jrxv+K/xV+S94zviSzOCvc2d+7c
ER2njh071qpVS3wLDRs2FP89e/Zsr02/fuvWrXXr1omMY8aMGTFixNSpU5cu
XSr6V76fxVnh3ubUqVPidyR6CDVq1KhevXrTpk0//fTTtWvXJu+9egAAgGRn
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
tGnT1q1bd82aNVavHAAAAJCwe/fuwMBAZ33XmTNnWr2AAAAAAAAASF2io6Oz
Z8+uX34tXrx49+7dp02b9usjEydO7NSp01NPPeXs88WKFZs7d25cXJzVKwpd
x44dc2uE/EqVKvXt23f27NnLli1buHDhuHHj3n///ccff9zZ51988cX169db
vZYAAABI7dq1a+esy9q2bVurlw4AAAAAAACpy8qVKzXrs7lz5/71118dNhIX
F7d48eLChQs7i33++ef/+ecfL68aEmfEiBGau0Tp0qW3b9/usJHo6OgJEyaY
PBPSoEGD8+fPe3nVAAAAALtTp06lS5fOYWe1TJkyVi8dAAAAAAAAUpfvv/9e
p0QbGhp66NAh86Zu375dq1YtZy0EBwd//vnn8fHx3lkvJNqHH36os0sULVr0
2rVr5k2dPXu2ZMmSzlp47LHHZs+e7Z2VAgAAAIzatm3r7OIlJibG6qUDAAAA
AABAKjJ69GidKu3gwYN1WouKinr22WdN2mnSpMn9+/c9vVJIilatWunsEosW
LdJp7ezZs7ly5TJpp1+/fjzOAQAAAEscP348KCjIYTd1//79Vi8dAAAAAAAA
UpF58+bpVGn//fdfzQb//PNP8xnSw8PDHz586NGVQlL079/f5f4QGhqq/wrS
pEmTzFvr3LmzR9cIAAAAcKZ58+YO+6g///yz1YsGAAAAAACAVGTHjh0uq7SB
gYFxcXH6bVasWNG8wa5du3pujZBEU6dOdblLuDXpZ0xMzGOPPWbe4OTJkz23
RgAAAIAz69atc9hBHTZsmNWLBgAAAAAAUqmHDx/euHHj5MmTx48fP3funPhv
JvVLDWJjY3PmzGleVM2YMaNbbQ4ZMsS8wTRp0mzZssVDa4QkOnPmjPmYCcIL
L7zgVptNmjQxbzA0NPTChQseWiMAqcfFixcnTpzYo0eP//3vf5999tn333+/
fv36qKgoq5fL7+3Zs2f48OFdunT5+OOPhw0bNnXq1L1797r1UB8A+Kz4+PhC
hQoZO6jt27e3etEAAAAAAEAqcunSpYkTJ7799ttPP/10unTpHBbU8ubNGx4e
3qVLl8mTJ+/bty82NtbqpUYy69y5s3lRVbhz545+g3PmzHHZYPny5ZnZ3GdV
q1bN/OsrVKiQWw326dPH5S7RsmVLz6wNgFTh/v37ERERDucpDg4OfvHFFwcN
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
AACgnWnTplk0bBZWrVq16dOn4xbWVuvRo0c9evSwrV/Uent7v/XWW7Z+Lzir
deXKlebNm7u4uNBezxYoVarUvHnzaPec3Tp06FBYWJiTkxPt9WyBSpUqffvt
t7R7zradO3fOw8PD0p4PCAhITU198OAB7fKt1+LFiyVs0pGRkRs3biwqKqJd
vi25ePFiVFSUTqeT0OEKIoOWxMREe7olRUZGRsWKFen2arGXXxb66quvaHcG
ADg03jPux48fT7sisCtvvPGGtFNkSEjI7t27aZcvyubNm6W10dPTc86cOfY0
vgIAAAAAMOXXX38VvimuNC4uLr179z58+DDt9oFEly9fLlOmjMAq/vTTT0Uu
Svwj1PElagAAWuLi4iSf9EuXLr1q1SqkzIby8/PFP4TIUOPGjX/77TfajbAT
er2+S5cuhp1MRjsFBQUCMzZo0EBgHQ0fPlyzJlinW7duGb3b7eDBgwXmunHj
hvDGv3XrVs2aAAAg0hdffME9UuGOcKCgnJwcNzc386NDE5ycnIYNG2b9D4Vv
3bq15DYSDRs2/OOPP2g3AgAAAABAXT179hQ/SK5Xr15aWtrOnTvPnTt36dKl
Y8eObdy4ceTIkX5+fqZm6dq1Kx7YaqNOnz5dvnx5U2s2MDDw1q1bYpbTp08f
kRsYnk8NAECFXq8XOJUXe3kxcNy4cfv27duyZcucOXOMRpmNGjU6ceIE7aZY
lz179gif+EqVKrV8+fL9+/d/8803pIeDgoJ4Ezg7Ow8dOvT+/fu0m2IPHj58
GBERYbgWlixZYmqWu3fvCv+Ev0uXLlo2wTodOnSoePHivJ5xc3O7cOGCqVlW
r14tvGt8/vnnWjYBAECM5ORk7pGKnOVpVwT2IyMjQ/jMKEadOnWuXbtGuykm
PX/+XP6dkby8vH744QfaTQEAAAAAUIterze8zmaUp6fn+vXrTS0nNzd36tSp
pkbg5PXx48fn5eVp2TRQxNWrVwUesta2bVuzt6+/deuW+Eejnjt3Tpt2AQAA
171794SPz6NHj+bNsm3btmrVqvEmc3V1fe+994R/v+xQzKaT27dv507/7Nmz
tLQ0w7FZ+fLlt2zZQqsV9uSvv/4KCQnhdW+pUqWuX79udPq1a9cKr8HKlStr
3ATrtHnzZsPfCXbo0MHUQLFXr17CHTt27FiNmwAAYFZsbCz3SHX79m3aFYH9
kPZwJUPlypXLzMyk3RrjzN5vRySdTke6i3ZrAAAAAABUcffuXZEDYzHPDv75
558FnpweGhp68uRJDRoFysrPzx85cqSpp1337Nnz6dOnpubV6/Xib+lA3uLJ
kydaNg0AABi3b98WPkQbvXnO/fv327ZtazhxdHS0yFuy2L3ly5cL9GqVKlXI
idJwrt9//93wp/fkLDlhwgSz35cDs27evFmrVi1e90ZGRt67d89wYrIxC+8a
FStW1L4J1mnbtm2G39UcM2aM4UZOVoHZuwEnJiZSaQUAOAgyhvn1118/++yz
qVOnkiPV4MGDe/XqRUY15LDfsWPHvn37kqPQwoULd+7ceefOHWaWv//+28PD
gz1MlSpVim4TwM6Q7U34zCiel5cXOSnTbpAR165dU6qNxLhx44wOpAEAAAAA
bFpOTo6Y8XBMTIzIBZJPvgLL8fHxwQMrbdTOnTtDQ0NNbR6XL182nOXx48cJ
CQniP3a1bt1a+3YBAADx9OlTgeNzYGCgqRnz8vKaNGliOEtQUNDRo0e1bIJ1
Sk9PF+hYcpY0NeOpU6fIqMlwlrZt2z569EjLJtilu3fvtmrVite3wcHBZLTD
nWzdunVmRy+1atWi1QordODAgbJly/K6qHPnzlevXmWn0ev1vXv3Ntuxqamp
FBsCAHYpNzd306ZNQ4YMqVGjhqnvpRtVvHjxsLCwMmXKcF/s0KED7QaBXdmw
YYP4bdIsT0/PvXv30m4T35MnT+TfKp9r8uTJtNsEAAAAAKAwvV4v5jbm8+fP
F7/Apk2bCizKxcVl165dqjYKVJKfnz937lx/f3/D1eru7j5w4MCNGzceO3bs
5MmT27ZtIx+gypcvb9Fnrm+++YZ2EwEAHJfAQTs8PFxgxhs3bnh7exvO5efn
99tvv2lWv3XKzMwUOPFNmTJFYN41a9YYnSsqKurBgweaNcFeFRQUjBo1yrB7
a9euPWbMGDLgefPNN8mo1dzgpRgZ99JuinUhB4TGjRvzekmn03Xq1GnSpElz
5sx55ZVXzPYq8cknn9BuCgDYj4MHDw4aNMjLy0vM8Uek5ORk2s0Cu3L+/HkF
t0/C39/fCp93X6dOHWWbSQbMtNsEAAAAAKCwiIgIsyPhjIwM8QtctWqV8NIC
AgJMPUgUrN+DBw9SUlJKlSql0Mes/9O7d2/aLQMAcGj9+vUzdYiOjo4Wnjc1
NdXojP7+/leuXNGkfCv1/PnzEiVKmOrYOXPmCMyr1+sNA1BGmzZtcM98RXz/
/fdkXGrpoIWrY8eOtBthdchmT8aKMn9St3TpUtrtAAB7cODAAcNbrChixowZ
tBsH9qZmzZrKbqXNmze3tpvJJyUlKdtGLy+vS5cu0W4WAAAAAICSJk6caHYk
LOYB96wbN26YXWCvXr3UaxFo4PHjx4sXLw4ODlbik9a/N/59+PAh7TYBADi0
b775xtRROjIyUnjemzdvmgrpGjVq9Pz5c22aYJ0GDBhgqmOnTZsmPO/KlStN
zfvee+9pU7/dy87OHjRokEX3TObq1KkT7RZYqcOHD9erV09arxZDcA8Asv3z
zz9yDu9mkZFPWlqataWiYNPmzZun+Ia6bt062s36H+fPn1f2bvlEjx491C77
2bNnO3bsSE1NJQP79u3bt2nThvyXHGFmzJixf/9+fJ8WAAAAHMelS5eWLl2a
mJjYtWvXtm3bknERGYy9884769evv3v3Lu3q7Me5c+ecnZ2Fh8EW3ayyqKjI
zc3N7ND6119/Va9RoA2yrn/++ef+/fuLeeCCUR4eHlOmTHHwTAcAwBo8e/bM
8OHUjPLly5udvW7duqYO9Z999pkG9Vutffv2meqZkSNHCs977do1gRPojRs3
tGmCIzh06FC7du0sGsMwENwLKCwsXL16dZUqVSR0LIJ7AJCDnHwrVqwo4eBj
qe7du+P5NfLl5+efOXPmp59+Sk9PX7Vq1ZIlS1asWLF+/fpvv/32119//euv
v2gXqJHHjx+XLl1a2U20Tp06tJvFN3DgQGXb6OTk9Oeff6pULdk4Z8yYIXzP
SfKvcXFxe/bsUakGAAAAAGtARuYxMTECgyKdTtesWbMPP/zw0aNHtIu1B/37
9xceBg8aNMiiBQrcFZY1YMAAlZoD2nv48CH5TD18+PCqVauaXfWMSpUqjR8/
HqEDAID1WLp0qamDttnvTHbr1s3UvOTU4OC/R+vQoYPRniGjWeEZCwsLBR6z
/vbbb2tTv+PIzMx88803S5YsKTyGcXZ27tKlC/M3gnuzCgoKMjIyyF4gsDEz
fH19O3fuzPyN4B4AJEtPT/fw8BA+4CgoODh47969tBttY549e3bgwIG0tLRX
X321UqVKZm+M4OnpGRERMXTo0LVr1169epV2+SoiDVR8Ez158iTtZv2Pmzdv
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
rFmz9u7dW1RURCabOnUqUyGCe7AVCO6BB8E98CC4Bx4E9w4IwT11CO5VguAe
AERq374978KU2XQyJibG8HJWSEjI06dPTc3ywQcfsFMK/7A6NTXVcOFGJSYm
SmyzmiZMmNCmTZu///6bdiGq+/DDD0WuKZFcXFxkxr4qQXAvbMmSJexKPHjw
oBrl8SC4d0AI7oEHwb0chYWFjRo1UvYk/tprrylYYUJCgrLlybknDBXkvBwU
FKRsJ0yePJl2s7RDPiYo23tkddBuk3EI7sHmILgHHgT3wIPgHngQ3DsgBPfU
IbhXCYJ7ABCpefPmvAtTc+fOFZ4lOTnZ6BWttLQ0U7MMGzaMnezUqVPCyze8
e79RDRo0kNJgNeXl5TF3+1+7di3tWlRXWFio+M1sd+3aJfCOT548OXPmzPXr
1zVrIwPBvbDdu3eza1D4zhtKQXDvgBDcAw+Ce5mysrJ8fHwUPIMruxbIWSk0
NFTB8ojs7GwFK9TAjh07dDqdgj0gfE8tO5ObmxsWFqZg7xHXrl2j3SwjENyD
zUFwDzwI7oEHwT3wILh3QAjuqUNwrxIE9wAgUv369XlXpZYtWyY8y4EDB4xe
zvLx8WHvZc3TsWNHdrLbt28LL7+wsLBr165G34LL1dU1Ly9PYrPVcfjwYaY2
B/lNU05OjrLX1devX2/qvTIzM5mIoWLFio8fP9aymQjuhZ0+fZpdg+PHj1ej
PB4E9w4IwT3wILiX77vvvmO+bagInU7H3LhbKadOnfLz81OqPOLEiRMKlqeN
+fPnK9gDNWrUoN0gTZ07dy4gIEDBDiTjfNptMgLBPdgcBPfAg+AeeBDcAw+C
eweE4J46BPcqQXAPACIZBvdmL6cUFhYGBgYavaI1YMAAo7Owv3lxcnJ6/vy5
2arIx/kGDRoYfQuu/fv3S2mzar7++mumsL59+9KuRSM3btyoUqWK2TUl0vvv
v2/qjbgf55OSkrRsI4J7YWQbYFdNz5491SiPB8G9A0JwDzwI7hWRnp6u1G+6
yQCPjA+VLe/YsWMlS5ZUpDyCHEaULU8bKSkpSvWAj48P7dZo7cSJE/7+/kp1
4JYtW2g3yAgE92BzENwDD4J74EFwDzwI7h0QgnvqENyrBME9AIgUFRXFuyo1
adIks3ONHDnS1EWtTZs2GU7v7e3N/Ku/v7/Iwi5cuGD2Jq5mbw6gsVWrVjGF
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
rcEIRwL2I5LkD1kaKFmyJLv2X3nlFdrlAGXkKM09IJC9j3ZFQNmgQYO4m0Ri
YiLtioAy9gpMsZc/QaVdDtDHXjMkKlSoQLuc/0E+nTGF1a9fn3YtdoW9P7B9
jxPatm3LbtsSrseqinwKZgqrWrUq7VrsSpMmTZiOJZ+IadeiFjKW4w7tcKt8
AGlM/VR/69atYma/dOkS++RHMcQ8xNyonJwc7l0WWVb1FKGff/6ZLezkyZPM
ixMnTmReiY+Pp1qd9Ro7dqxFm0d+fj77iNuaNWuqXR6ecS/gxo0bvAPIzp07
VSqShWfcM65fvy7wGBFTqlSp8sMPP9Cu3WJ4xj3w2Mcz7skhVPx3b1iVK1f+
/vvvadf+X6VKlWIKU/sZ99K0adOGKU/aM+4zMzONjj+F1a1b13puB3f37l12
y1HpLcgxmfsQc5HInrt27VqVSlIQ+31RPONeMjzjHrjwjHvgwTPugQfPuAce
POPeAeEZ99ThGfcqwTPuAUC8atWqGV5MEz/kGDZsmJkLcxzr1q2TXOeAAQMM
FxgbGyt5gYo7dOgQWxj5m3mRDe7btWtHtzyrZWlwz52FOH78uKrlIbgX8P77
7/N2yV27dqlUJAvBPYN7iw9Lvf766zk5ObRbYAEE98BjH8F9z549Je/Fffv2
zc7Opt2Cf9l3cB8RESFtBZGTFBmrPH78WPEWWUqD4H7EiBGSt+ROnTpdv35d
pcIUgeBePgT3wIXgHngQ3AMPgnvgQXDvgBDcU4fgXiUI7gFAPPZsyEXOF0VF
RWJmz87O5t7/UNjy5csl1/njjz8aLrB+/fqSF6i4M2fOsIXt3r2beTEpKYl5
JTIykm55VktCcH/27Fm2qydOnKhqeQjuTcnPzyfT83bJffv2qVcnA8H9i5c3
IWEeGSBZQECADf30HsE98NhBcH/37l35e7E1/PTejoP733//Xc4KKvbyvoLS
vjCgILWDezIYKFGihJxeIrOvWbNGjdoUgeBePgT3wIXgHngQ3AMPgnvgQXDv
gBDcU4fgXiUI7gFAvJSUFKOX0cTf5HPhwoVC1+M4evXqJbnOR48eGd7Vv0yZ
MpIXqLgbN26whbHPGpg+fTrzStWqVemWZ7UkBPcE+5SrKlWqqFfbCwT3ps2f
P99wHz969Kh6dTIQ3BN79+4VedQV4OTkRI7/tJsiCoJ74LGD4H7fvn32sRfb
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
devWmW1w584d2akBAAAAAAAAAAAAAFb5f+W61h8=
        "], {{0, 0}, {2707, 390}}, {
        0, 255},
        ColorFunction->RGBColor],
       ImageSize->Large,
       PlotRange->{{0, 2707}, {0, 390}}]},
     {
      GraphicsBox[RasterBox[CompressedData["
1:eJzsnXd4FcX79k86oQQIXSBSpAsiSEcBKSJIE+lVkKI0qQm9V+lSpUZAukgv
IiX0CESQItJL6DUhoSSQ93mz13d/4+w5c2ZP25Pk/vzhhSfzTNvdaffMM3k7
9Pqys6fJZOqbiv7z5dfB1fr0+Xpg4wz0P0169v22S89O33zes1+nLp36lO/g
RT8W9zCZfkxtMv3/fycAANyGN2/e1KhRw8RQvXr16OhoS+FPnDiRPn16NvzC
hQvdJBXir7/+Yq0KFSokY/X06VPTf3n79q2MoS6mT5/OJpE5c+azZ88KslSx
YkU2fIMGDWRy5ZpUiHfffZc1/Oeff2SsqlSpwlr99ttvMlbuz5EjR3x8fNRy
eXt7b968WRw+Xbp0SmAvL6+DBw8KAh87dszX11eN3MPDY+7cuYLw9AQnTJig
hs+YMePVq1dtK1eShuqB+65fvnxp1SoiIiJVqlSsFX1TYpOpU6fSQ1EC02P9
999/7cz5l19+yWZg2LBhygvQs2fPFy9eaMNTSX/88Ud6kVirqlWrynzLW7du
Za0+/fRT2/J84cIF9hNQqmLfvn2Wwp87dy5v3rwmDadOnbKaVosWLViTtWvX
cgHmzZun/nX+/PnaGOhNKFWqFBtJ7dq1nz9/LkiUeqUsWbKo4WfPnm01n8CV
rF+/Xvs6Wf14X79+nSlTJs6Khh+vXr3Sm4GZM2eykQQEBFA7LwgfGxvbuHFj
NfxHH31kQ6K66NGjh7aKRo0aZVts7l9es1Cr+Pnnn7M5/+yzz2JiYiyFp0w2
bdpUDVyvXj1dkdOYJyoqylJ4GrJSB82GF3fuKjSuY63y5csnY/Xdd9+xVlOm
TLFqQqN37oWx+tSoEurWrcuaUGP74MEDgcmVK1fee+89NXz//v1limOVoKAg
Nhu3b9/mArRp00b9699//62N4fLly9xkRFxp48aNYwPTw71+/brVfLomFatU
q1aNjXbbtm0yVt9++y33htSvX99SZ0rvxujRo00a6Bt0Xg4BcHPq1KnDvti7
du3iAkycOFH966pVq7QxUC9ToEABNpJOnTrFx8dbSnHDhg3slIEmrWFhYXaW
ghr54sWLc582FW3Hjh1sTmgs3atXL0qR/krN/j///MOGz5Ahg2Ry33zzDWtI
kyAb8kxTdW1zVLlyZRuiSkjs0Ln547Rp08QmFMCx80dqY7k3QXkZuD6CplrN
mjVT/rp69Wq2/zVZ6A21cI+gUaNGyj/GjBlDIwezJvv37+fGPDQTFAzAALCZ
1q1bcx8CfWtWB0u///67tk1o2bKlDRn4888/2Ujef/99GStqSFkraiqtmlAD
W7VqVdZKPK8JDw9XFyEVQkNDdRRMjmfPnvn5+XE1WbNmTauG3CKPwh9//KE3
A9SOpU6dmo3khx9+EJvMmjVLbZDTpElz7tw5vYkqUOW/88473Lu3YMECS+Hp
oX/88cfaUi9dutRqWjS1YU2ogbUtzyqtWrViIyxUqFBkZKQgPP2V7fqpX7Az
AwAAALSMHTuWbZzz58//+PFjscm2bdvUTo2gPlEgDbsylQQ3Fu6PHz/Ojl5o
viyQtBTu3r2bK1cuNlczZ850h1QUINyrPHnyJE+ePGy5ZsyYYdWKlZnoRbW0
wEKRc/omzYhlcjVgwADVpFq1avqKlCywQbiPjo4uWLAgazJkyBCZtIYNG6aa
VKxY0c6cc8I9zR3ov126dBFbTZkyhSuvzH4nRwn3bdu25VJfs2aN2ISmVP7+
/pyVjHDPPSPtStetW7fUvzZt2lQbQ/fu3dkYSpcuLbNwRHNwdQtNqlSprly5
YtUEuAxupqlAE2Gx1a5du7RWBH0XulI/ceIE2/l6enru2bPHqtXr168/+eQT
1YqaEV2J6oLe8AwZMmhLGhQUJFjet4T7l9cSkyZNYotfoEABGgGKTV69elWi
RAnVZPXq1ZKR08Dg4cOH4sjpDWTHutQknj592mop3Fm4nzx5Mhuexor37t2z
mtC1a9fU95Mq5NChQzIlEnD//n02G1myZNGGoUepBtAO26ikZcqUYSOx2gsT
X3/9NWtC44G4uDhBeNekIoMNsjh1tdyGvaJFi1rtTKmA3EsF4R6kZLJly8a+
2DQx5wKwDX6nTp20MXDjn6pVq1ptELgpQ+7cuR89emRPKVTdVoGacYGYrm6F
5eY7Lhbuv/jiC5M5zpw5ozcqmj/SXJ6NZPDgwTKGw4cPV00qVKigvxD/4fDh
w1xZgoODLQVWtl/mzZuX2+Rmm3Cv0KdPH7HV9u3buX3m/fr101dIAKxBIytu
P6SC1b002r2IpsSdyTJHPzhcJtyPGDGCNSlYsKDVec3GjRtZk7Rp0164cEGq
VNKsWLFCW5M0YhR3NC9evKDa1hrS/EVX6jQQpeEoG8OAAQNkDMeMGaOafPTR
R7YpAvSacfkfOHCg2ISqhVtMNhkh3C9atIiNjbrpGzduWLWiWV6OHDlUK71L
KAAAAMTQTFDZ86wiWJBkqV+/PmtVpkwZw1NRcE/h/s2bN9zggabYMoYLFy5k
rfz8/ARHp12TigqEexVu6kpPwdJWc45atWqpVpZUzk6dOrGRFylSRHJ5luYs
hQsXVg1lVJVkhg3CPXciNX/+/JIzNXoorLJj53oyt5BF5MqVS0ZZrly5MmtF
o/dnz56JTRwi3MfHxwcGBrLx0GRHxrBv375cSa0K9/RYuTWf+/fvc2HoA1QV
9pIlS3J/3bt3L6uU0b/FJ4VZhgwZohpiU7H7QN8pt0SjjDo8PT21x2xZOAlJ
Hat8/fXX8qlrO19588uXL6vvakBAgJ0r5wIWL17M5tDf31/ZEUSI/cNoSRLl
NYvWMci6detkDPft26eaUJNidoiojXz58uUykbOOCIgPP/zQ6hDUbYX7f//9
l3UQZJIe8Cf8dyxao0YNSStLUKvOZqNgwYLaMEePHlUDdOvWjfsru3xnSlSU
njx5YjXdBw8epE2bljUUn/FxTSoy2CCLz58/n3s9ZB7348ePueYawj1IsURH
R3MfkbaNff78ufpXmkdzf6WpNGtOwx6ZHbA0bueE5nbt2tlcilWrVnGlGDp0
qNjkxIkTXGdhcq1wf/36dW42obrVosmg3th69uzJRkWdsm3zRzslj8GDB3Ml
Ek8etduoTHYI97lz546NjbVqyO30poH3pUuXZEsIgATc4oY6uatUqZLAika8
2bNnN2uod6KU4Crhnlp7rh379ddfZRLi/IPZf+qEg1vLUmuSZqMCq02bNpm1
ypEjh+TiqgK3vvTuu+/KNE0JiT0j65LRtpVqzgEC9WsC32sqNGc0/RcXC/cU
FeejYN68eZK27Hm00qVLO8N3MQAApFg6dOjANs40g5PsE9nFLoXdu3cbm4qC
ewr3GzZs4OI/f/68jOHr16+54/A0MTQ2FRUI9wqRkZHcyoO8v6ktW7aoVmYP
xVPknJupFStWyOdtyZIlqmHdunXlDZMHeoX7+/fvcwfAFy1aJJ/cypUrVcPq
1avbk3OtcD9r1iwZw507d3KGVj26O0S4//vvv7l0x40bJ2NI803O0Op6I7uA
qWBWSKIam5CItuo+++wz1rxOnTqSxUxI3BGtyiU+Pj7aPQPAENi21JS40UV1
gi34BGh6zp10GzhwoPKPTJkyyZ9g5TpfDw+Pa9euyWeeHSPRGytvqIty5cqx
mWzfvr266PrFF1/oiipJlNcs3Bp14cKF5Qd7H3zwgWp4+PBhq5Hnz59f0pXB
iRMnTP9l+/btYhO3Fe65SihWrJh8DdNYlB1YRkRESBqahesNzW79pcH/hP/B
DUdjY2PZu1FM0scnEzQLhjly5LA09nBNKpLYIItz+gsNhsU3zqiwlxSYINyD
FAxN9Ni3mqYhZoNRc620VFp3u+XLl2djaNCggWTS3HY+GtPadukGDZa4ZYT3
3ntPZgTVv39/039xpXA/dOhQNobcuXP/8ssvajZ0+W9/8OABp3dI3vCowG57
sNnvmUK9evXYbNBwSxyeZjGc02yTHcK91ePMCv/88w+7fdokdAsAgA1wi880
NFXOF3h6egr8foeFhbFWfn5+ffr0Uf5Nkya9eXCNcM+NpigVyVH3gQMHuO93
//79MoYy0FCQaxLV+bV4QbJdu3asVcuWLdV5AWVYMvXHjx9zW1slryFTYDVo
q477tFD9cyvDTZo0kTGkMTxXaS4W7kNCQtioqE+U98hHpWYd5qfA82IAAOAk
tJrgoEGDJG2pcabGnLW1tOrimlRU3FO4r1SpEhu55MhNgVtoTZMmjaUTaq5J
RQXCvQJNNtkS+fj4yJyWUnj16pU6sKSRufb+CC5yf3//6Oho+bzFxMSoI0Aa
Q1p1nJXM0Cvcs+4KlRqzeqMHC+uWzcvLyx5JlxPuKTYZV8MJiUXm9op/8MEH
YhOHCPfaK+Fo1iOZYW6SYlW45xwg0xenK6sUP7depPdmN9YlqeDCMuBKOMfR
PXr0UDftC17p/fv3s1Y0Vnn27Jl6Bk17z6wlKlasyMaj19kpu3gi6apCLxER
EdwXevjw4fDwcOXf1MLoWq53//KahVpR7v5Zq64LWVhflCEhIVYj13VRe758
+Vhbq+2wewr32koYOXKkTMZU2NOC8hK2WbjtJVWrVtVlPmfOHK7gNL+QtNU6
K7a0CdA1qUhigyzO7YLLnz+/ZFqzZs1iDSHcgxTLxYsX2bc6c+bMusw5pckk
7eklIVHd4Dwi9u7dW38JEn799Vfb2iIaz3MZcJlwHxcXx91BTL0V9W7qZk7x
sVAOzlW1VXfQHA6cP3K31cuUghP+TLYK9zS3unnzpmQ+2TOtBFW71Vt4AJCE
vu5MmTKxL9jevXvbt2+v/FtwFKJXr16sVd26dc+cOaP8OzAw8PXr17qy4QLh
/saNG5ynr+HDh0tm7+3bt6x7c5P+XdwC1q1bx8ZMg8Po6GjldAzNtS0tSFIN
Z8yYkTWkzkXdO0FPRzJ17opeqkNdjSr7/lh13Kfl4cOHpv8iee1mgmZ+7Urh
PioqirtQ7/vvv9cVA3tRmt6rDQAAAFhi7ty5XLdy8OBBeXPuWA31a2ZFLtek
ouKGwj1727KCrn3FnKxGLFu2zKhUWCDcK3AX0H/yySe6zHfv3r3mf2hHlVzk
tWvX1pu9efPmBf8PyWeUbNAr3BcpUoQNrHedPyHR069a2zbckKjCCfe6tC1u
kzkh9kDoEOGec9RJ7NixQ9KWu9LLqnB/7949Nryvr6+urLK+7hWsXkLNcfTo
UfUpr1q1SpctcAY00+eWaPbt26dekyeYsHOuTZUli0GDBin/K3PTNHHz5k3u
jRo7dqyu/MfHx1OiyhsVEhJi57FZs3Tt2pXNYYkSJZTf1bVTq15tVZJEec3C
3QpEhIWFyZtHRkaqnbX2WIo2cnoJ5SPv3r07a+vh4SFeZXJP4V5bCcePH5fJ
mMqFCxfU1lXXARktnJZk1qmRAE4jzpUrl/y8gCotc+bMrLklYdo1qUhigyzO
bRhWGxar0EdkQ84h3IPkx7///su+1VmyZNFlzt3w5enpqWtM+/HHH7PmOXPm
1Jn9/w9NTtlIzG5EtwS3+cdlwj3XQVCeb926lcAcOSxfvrx8bNzlQdrrDKyy
aNEih8wfucGwzBFaTmIz2SrcFy5cWD6fnEt/k87lQQAEcKcJsmbNSvOOzZs3
K/9raTSoPS+m7HtRV4d27typKxsuEO5nzpzJfUfHjh2TzyG3ZERpyXh0l6FF
ixZszMpO5kaNGin/a2mRmfOUlSZNmpiYmEOHDin/S09HcoTMekgz2XQLwJIl
S9QGWebqGZbr169zD2X8+PGStmoVKbhSuNd2BPQd6Yrhxo0baqVNnTrVtmwA
AADgaN68Ods4e3h46DrMq1Xkzd7+45pUVNxQuF+xYgUXuS6th/OhR3Tu3Nmo
VFgg3CeYkzBsuBdPPnK4ktOFLuH+/v373EFs+Z29DocT7nX5Z9PeOSu+XsEh
wr06q7Kh/SlYsCBr6Gzh/pNPPmHNbVulBG7Frl272GeaOXNmxUerOvww67OU
2oegoCDWUFmiUf2WZ8uWTcZHnPZOOhtuQnQqNOhS9jCozJkzR/mT2lzkyJFD
8iyJ+5fXEtpjZc+ePXNe5PK+dxLMSd7iSyrdU7jnKsHLy0vyTklnYI9wT2Xk
XMHoPYjEScxp06bVOo52TSo2xyYji3NrjLlz55ZMi9vsB+EepFjsFO7Z69GJ
PHny6DLndH/i8uXLumKgkQN3y5iuHexjxoxhbV0m3HMbBtT7Baj4np6eyo+S
/k+080cHLgXohXPRLPM0L126xL0Dtgn3X331lXw+tdc7QugBjuLbb79lX61O
nTolJPohV6ZCltwYHjt2jLWiYA8ePEhgNvxLbudWcYFw37hxYzYwtV0vXryQ
z6FW95c/diFArWqVo0eP0u/Lli1T/peGjmYNO3furG1SaBqSM2dO5ReZbQmP
Hz9W23AFeh/sL5Q8NPHhalV+/bZZs2asoSuFe+4sA4HrIAEAwB1QO0GFXLly
6TLfs2cP17yb9QvqmlRU3FC45066ESdPnpQ3p5xwt4+ZLZRrUmGBcJ9gTsKw
4ZY9+cj1+vRO4egS7rUbTefPn+/K3LJwwr3kffEKe/fu5Qoi3oHgEOE+MjKS
W7bSupK2hCuFe5rPcle31KpVS94cuCecZx5115n6UZv1VXLkyBHWytvbWz2n
lj9/fuVHmUPTXOrElStXHFg6++E286RJk0YVrKOjo9Wuf8OGDTKxuX95LcE5
98iRI4fzIs+WLZsuc+1dk2IXhe4p3HOVQG27TK6chD3C/cGDB7lS9+nTR1fq
2jH5n3/+aUgq8tggi/fu3Zs18fT0VBa6rQLhHgAFe4R7rUKhd0zLXVpBLFmy
RFcMnDhFdO/eXd5848aNrK1rhHtWndc2JqqmLyn3sBciK8ybN08+Mw4kLi6O
y8ndu3etWlEvz8n9tgn3AwYMkM8qN4YhmjdvLm8OgCXofeYuDVTFaPWqO7Mr
PPQCs1Y1atRQflfXlpWT+/I5cYFwT1liA+fNm1c+ewmaE+4mPRfaClDvqlNQ
T8o/ffpUWYQxe/Un1S1XnF9++UX5k7rBTOYOMi51k0PXZiVRr1xRkPeYaqBw
X7JkSTYeeha2xQMAAMCBaDeDVapUSVcMNOvhYtBun3NNKixuKNzTwI+LXNfF
ZwSN9FhzGsJps+eaVFgg3CdobrUjaLjovMi3b9/uqMhTArqE+wkTJnCBJWUs
Z8AJ94Lr2LRoPXTVqVNHEN4hwj1RunRpNp6CBQtKTm9dKdxzd4kSrVu3ljcH
bsibN2+4S/pUZ4YxMTFp0qQxJd43qnXc2q9fP9ZKXaIh+vfvr/zYs2dPqxmo
Xr0691I9f/7cgQW0H+4u0W+++Yb9qyrESy4suH95zfL69Wtuc1G5cuXcJ/Ib
N25wtSo+fO2Gwr22EipXriyTKydhj3C/dOlSrtQzZszQlfr48eO5GFauXGlI
KvLYIIv/8ccfXAYkFSsI9wAo2CPcHz9+nPsAlbOl8qjuo1UGDx6sK4Y5c+Zw
MehSSU6ePMnauka4V/3hK+TJk4d6OvWvqhAfEBAg4yVy4sSJXA2IHeY4D61w
b+kuaQ7u1hXbhPsxY8bIZ1W7Qli2bFl5cwAsERYWxr5XGTNmVP2JqcNCsxuc
1D3bCqprMuK9995TftyzZ498Tpwt3D979oz7iPRe8vjPP/9wMTRt2lRXDGZp
164dGyc7la5Tp47y45o1azgr7uCJn5+fuslc/ZPMzoSpU6dyhVq9erX9hdIF
1zb6+/vL7KFKMFS4507wFStWzLZ4AAAAOBCtF26912dz6onJ3JVerkmFxQ2F
e27NnJB0SKtSrlw5Lgatf1fXpMIC4T7BnFshXUN6vZEfOHDAUZGnBHQJ99xG
a5P+q50cCCfc6/K0oG3NKlSoIAjvKOFeu3Yn6fbQlcL90aNHuUx27dpV3hy4
Ifv372cfaIYMGVhhUfUiqP2IuCUa9kJt9T3JmTOn1cHAhx9+yMbj6enpwPGD
/YSHh3PvPHcmVx01eXh4XLp0yWqEbl5eS9y9e5erh+rVq7tP5I8fP+ZiEN/J
6IbCvbYSPv/8c5lcOQl7hHuqGa4syj0a8vz4449cDLNnzzYkFXlskMXj4uIK
FCjAWlGbeefOHauGEO4BULBHuNeel9TrtUPrpEuvV+Fhw4ZxMaxfv17enNtP
6wLhnrow7jjk2LFj2QDUrL3zzjvKn3766SerEQYHB3M1sGvXLsnMOBatcC95
PSXnLcc24X769Om6cuvt7c2aG+uiByQbevXqxb5Xbdu2Vf/EbufmzjdFRESw
VjS1iYyMVP+qfuO63Ik4W7i/cuUK973Xq1dPPnvErVu3uBjYTey28fr168DA
QDZOmqerf120aJHyY7NmzThDqlvWit29zG7RpyclzoB6tYHK1q1b7SyUXg4f
PsztZGbfQwFGCffULXKVVr58eRviAQAA4FhOnTrFtc+6rqYinj9/zsVQvHhx
Q1JhcUPhnpsN6b2ROcHcATetZ1rXpMIC4T6BcbqlInP7ks2RL1++/LgdSM7E
kw26hPuOHTtygRcvXmxPbVsVoAVwwr34knoO7bpN4cKFBeEdJdzHx8eXKVOG
jcrLy2vixInsMRazuFK437ZtG1c5rVu3tucpE0niuHEyhtvg1K5dO/avK1eu
VH7nVjO4Q16enp6s2ERNh9rBHTp0SJwBriv09/e38426evWqw2pH07KVKlVK
G6Zs2bLKXwcOHGg1QjcvryXOnTvHffv169d3n8i1aybi4asbCvfaSqDexM53
Q6/nKBZ7hHvtup/eAzs0fuBiGDVqlCGpyGObLL57925ufbJYsWJWR5sQ7gFQ
sEe4V0c4KsOGDdOVunZrn1ZPEaPdZK56PZKBEx1cINxTM8sa+vj4aPcaqY1z
6dKl9eaEWLRokT0dn83zR5uFe/VAsYJtwr1ef9Tp06dnzXW9+QCYhaZvQUFB
7Hu1ceNGNkCTJk2U3zlJlBuPcQ6j1HYye/bsVpc1VJwt3B/XeFxp0aKFZN4U
njx5wsVgdpKoC247WbZs2VgHjDSqpyaXfk+bNm1sbKz6O3uRvQJ3aYt6M5RV
nzDffvstV6j58+fb0yD/9ddfNtSDdl2RGkyrS0ZGCffUCXK5LVOmjD2VRty/
f9+GnAAAAGCxf6b28uVLLoYCBQoYkgqLGwr3nBdff39/vTGot62pnD9/3pBU
WCDcJzDjfxUaqDgvcjv54IMPHJW3JIEu4b5NmzaOrW3Jxscs9gj3hJeXF2tO
n6ogsKOE+4REFytUaq4e8uTJQ5OsTZs2nTx58rI58ubNy4Z3qnDPiQUOIaXt
h3Er6BvPlSsX+zi4y0qioqJSpUpFv9N/WR8y9E6yVh9//DEXs3p3s9Xza9xd
ivaj60CHGBrbKKdLVMxe7KiegKCyWPXV487lFcANDglqZh0VOXdUx4bItfo4
tZyC8G4o3Gtr2H42b94sUy6z2CPcq5dlqKxbt05X6j///DMXg3ax0TWpyGOz
LD5r1ixOu6dByBdffDFnzpyDBw+eO3dO2+9TQ8SGh3APUiz2CPehoaFcCzBi
xAhdqXObGIkGDRroikE7e9LlHY7TC1wg3NM0hzVs3LixNsy1a9fUmZTVeX3b
tm1NDsXms+dJS7jn/POnS5dOlzkAWjjHevRSvXjxgg2g7tvhrqMqUqQIazht
2jT2rzTZVE9I0ahGMjPOFu4PHTrEfe96r/+j9oGLoWjRorpi0NK5c2c2wi5d
unABatWqpfyJvVLk8OHDrJXWJcLu3buVP1ldXtMq5nYi459fS0xMjFpSlcDA
QJrzrlq1it6NS5cuacfGdevWZcO7TLinLs+xlUbQDMWGnAAAAGDRXvUrvk9T
C/WnXAzaOz1dkwqLGwr3NARiY/bw8JC8+lmlUqVKXPbu3btnSCosEO4TNKNT
IiwszHmR24kDPQMnCXQJ99ozI3ZCH5TNObdHuNdudipRooQgvAOF+4REVb1B
gwb21JtThXvOrbpDkLy2DDiDI0eOsM8ibdq03BINUb9+feWv7O3P4iUa4uDB
g8qf8uTJIx4PcFHZj96FdwGcJ22qn6ioKG2w2NhYmukrYdauXSuO053LK0C7
KCGpFbomcnouXAziYy9uKNw7Y9nn6NGjMuUyiz3C/dixY7mc6F2Amjt3LheD
trZdk4o89sji69ats2dLD4R7kGKxR7jfuHEj9ykNGDBAV+oHDhzgYvj66691
xdChQwcuhn379smbu1i4v3jxIrfLyNK1aOpdzJ06dRLHybnmth/xRTkCkpZw
nzp1atY8d+7cuswB0MLde6g9L0ZfhL+/v+m/V6hrr3rXOh3t06eP8if560ic
Ldxr/Vw1atRIMm8K2iuuOFcDeqEpAzcU1N4bMm/ePOVP7DaDvn37slY1a9bk
rOLj46lzVP565swZQR769etncihlypSxrTZevnzZs2dP7jSNLlwm3Gsnofaz
fft2G3ICAACARXufpq5FLeLGjRtcDDTHMSQVFk64l1zMdKpw//HHH3ORm105
F8BdKUtTTpqaGZIKCyfcS87ykplwP3DgQK7aHbiQqI28bNmyNaThqppo3ry5
o/KWJNAl3I8cOZIL/NFHH8nXNreeTDRs2NDmnHPC/cKFC+VtHz58yOWE3gRB
eE64t2e/gQp9BdRQc9cXSuJU4Z6aKS65oKAg+adMZMqUiTW32k4Cp8JNz802
ceqhVPVcFU35uYd4/fp1zor12sddCs9RuXJlNjaaoet6o0qUKMG9k7NmzXJU
/RQvXpyNuWvXrpZCqncL1rB2v6E7l1eA9t4lO5enWLSHVvRGrvVSqF22YuGE
+1y5csmkwgn348ePt2oiL9xrKyFr1qy63g3OTyZx6dIlmXKZxR7hXiuI0y+6
Up88eTIXg3b9zTWpyGOnLE4zqWHDhnH3dklim3C/YcMGmwoKgBthj3Cvld27
deumK/UdO3ZwMdCwSlcMWpVE14XCN2/eZG2dLdxz8tB7771nacFn06ZNSpi0
adOy/pq0jBo1iqsBO+ePep0eqBgr3E+aNEk+qzS04HZQiDeZAyBD/vz52Zdq
zZo12jANGzZU/rp8+XLll9GjR7NWZoVa9Uh4UFCQ5CoxJ9xLniaTF+659RCi
Vq1aMkmoXL582VGNj8LevXvZ2AIDA7Vu3CjbipadPn16ZV2OdWigYHYwrDY4
4v3eNLXhClW6dGn5BplzyWKyJj1Y5eTJk61bt+bc30lig3CfOnVq2/Lp6+vL
xpMxY0ZdMzjt4F+8eAIAAEAGGjAr/mNV9PrG0V6s06FDB0NSYeGE+6xZs8qk
cv/+fS4VBwr3X331FRe53qVIbjEzc+bMRqXCwgn3R44ckUmlQoUKrFVSF+5n
zJjBVXtoaKjzIte1jqodjctvEk4e6BLuOcetpv+68LJKZGQkZ/7dd9/ZnHNO
uJ8+fbq8rXbfuFk/kCqccF+8eHGbs81BU7P169cPGTKkWbNmNKQvW7ZsaXNw
fYRThXtuOmzS71aOa8GyZcumyxw4lnz58rGPw+xp8SdPniizUZrMKrfLcbt0
6M00G3mPHj2UACEhIYI8aDtfyZVSBa2rW0epUVonihEREZYCnz59Wgnj4eHx
77//CqJ12/JaJW3atGy69txmYjVyva5uqd3jqqVNmzaC8JxwLyl2cMK9jFt1
eeGeSJcuHRtS7+6FFi1asOaenp5Wr4MUYI9wr71URa9fCO7YF7Fjxw5DUpHH
IefZadwVHh4+d+7czp07f/HFF1WqVDHb73Or67YJ9w4cbwNgFPYI9zTT51oA
6qB1pa69bmPy5Mm6YhgzZgwXw6pVq+TNuUOjThXuX7x4wW2+nThxoqXA8fHx
uXPnVoLNmTNHEO1PP/3E1QDNfSRLkaCRXYhvv/1W3pzFWOF+6NCh8lnVHvW1
0+EbANytVf7+/mbHkMuWLVMCqOfTS5YsyRqa3dTKXs127Ngxmfxwwn3OnDll
rLgFJYFwT987J7bqvROTc1tnMufZXhfqJnCF9u3bmw2mjuW2bNmSoFntp8H/
nTt3tFbbt29XAoiXqpYsWcIVSleXpF0pooZO3twS1BTToHrcuHGtWrWiEW+F
ChXMjo1V93cKNgj3hG0nStT+TqFYsWK6zLkJJkFvsg3ZAAAAwMEdyPXz89Pl
XH3FihVc+7xgwQKjUlHhhHsaz8gkx53rpwGDfA6tMmXKFK4IuvaiR0VFcXuS
69WrZ1QqLJxwL5kcNza25wJTd4CG7ly1DxkyxFGRh4eHc5HrOpmoHY3rGrgm
A3QJ96pupaJr8Up7x7E9B9844V7XrbX0TXE5GTVqlCA8J9zrWjN0CAULFmQz
cPnyZXF4e4R7bXJ6PVJycoPVdhI4D+5uVktLNETt2rWVMMoV0tyh7wkTJpi1
Ug8OFChQQJANbedrdfMJy6RJkzjzW7duyZsL4O5dFV8zRNC3oIQU+9p12/Ja
pWbNmmy6Pj4+2pMgNlOjRg02cm9vb12Rr1mzhqsWsVLACfdeXl6C3k2Fu/lR
ZoEuJiaGNRFfw8Td5/jOO+9YjZ+levXqrLmdu8jsEe6pl+GGxC1bttSVOndl
DE0ruPs6XZaKPK50RM9tWqAxjw051HXAEwD3xB7hnqY5WbNmZc31Hlum+YXp
vxw6dEhXDL/88gsXw7hx4+TNubmqU4X75cuXsyY0fRDfCThixAglpFgO0/ry
+uGHHyRLkaBZuSKWLFkib85irHAv8OmkRessIqUdLgAOZ8iQIewbZcnz4dOn
T/38/Ez/mzZqtz9Z2r2sXqooeSMJJ9ynTp1a5lwYd+5GvMqhTtx0JaGydOlS
ruz2LF5R0pz4a2mZV73HTTmOx7kY/fjjj81a0awqMDBQCSO4oVV7gEVXl8RN
r4iffvpJ3txOmjVrxiatrFqI0Qr3N2/etD9pve8St6tf0hEcAAAAqwwdOpRr
58XHrKyaX7hwwahUVLTTH3F4BW7OFRAQIJ9Dq3DDNpPOOyi16q3Z+aBrUmHh
hHvJWSp3QFLXRXhuCM2RuXN24tPNWlavXh2ciPYsJEXOnV+zetEeC7dAQVy7
dk1X3pI6uoT7N2/ecAcxxAceOWhozaUlmFNYhRPudXndpy+Ry4n4CB4n3Jtc
vkWWU9JpQi0Ob6dwzy00UWsvv5eM3h9uc7uuySBwLNyCs+Bqv4ULFyphmjdv
fvHiRe6FtzQmoRcjW7ZsShgaWliKXNv56rqoukuXLqxtUFCQvK2AR48eKdc4
qixatEhsop6Fz5Ili6CpdM/yysA5wyTOnz8vb37//n2lszY7uNI6yz179qx8
5Fpz8R2O2pUlme0T9P6zJpYWx1g4h1RiH4zc0UsPDw+xLMLBOVrs3LmzvK0W
e4R7olChQqz5hx9+aI+5Jd3HNalIYqBwLzm45XKod58DAG6IPcI9QbNO1pz6
fV2n7bTmAp8qZrly5Yrpv7Rr107enFOOnCrcc7cKWr0/7ubNm+qdXwK/gjTZ
tGf+uH79eq4CdY1MWIwV7mVGFCoLFizgsrp69Wp5cwC0FClShH2jli1bZilk
3bp1lTBr1qyZOHEiayXYMhoWFqaEyZ8/v0x+tNMlai2tWnGb0qltEQQOCQnh
krh69apM3iyZy+TQEuptAgoBAQGW5pKRkZGenp6m//nS5xaCBH4mqXNRwgiW
X6hBzp49OxuhrqtC1UtSVCTbQ4fQtGlTNum9e/daNdEK94ofA73Mnj2bi0dG
Q1Hhrtxt0qSJDXkAAACgRbvZVdftipzH4Dx58hiYiopWuF+xYoXVVDjpyrGb
xGgaRdNwNv7PP/9c3lx7U4/Z5VnXpMLCCffNmjWzmsqbN2842evEiRPymXRP
6tevz5aIBti6fEqUKVNGMVRv2mJR7+FS0OV9t1evXqwtPS952+SBLuE+QSNq
6FKUgoODWVuaMthz3QYn3OvKSZ06dVhbHx+fx48fC8JrhfuVK1fanHMbYKdX
/v7+VuvNTuF+7dq1XHnDw8MlbbUbnKiD05U6cCCFCxdmn4XZJlTh4cOHyupr
unTp1CNUCuLjaV27dlWCCVyAsvq+gvhCH45SpUqxtnrvbrDEtGnT2GgzZMgQ
ExMjNomNjVXPMvzyyy+WgrlneWXQesjR5cRmw4YNipXZK5+OHj3KRT5z5kz5
yD/55BPWlkah4pZQK9wvXLhQbyqCVTUVGqSxJtRcCwJrVynNXjBqFu1lnYJF
VxnsFO7VmzIUPD0979+/L2l748YN7ih9//79DUxFElcK95yDbklfVVwOaWhE
0wrnZRIAF2CncK+950t+Szz15mqnr2DbZb7ckEDXNTR9+vRhbZ0n3J85c4ar
qD179lhNRfVqYsnnswJ3z0vu3LklS5Gg0c6oMm2ePxor3KdPn17e0RBXY9SX
UY8maQuAFm5U7OvrKzgIsHjxYiVY06ZNy5YtyxoKbiyi8UaOHDmUYIKrx1Rs
GxJz2xrz5s0rCEyNGJeEzFxA5aOPPmJtxf7lrNK3b182NvrGBYErVaqkBOPc
uFFTcP36dUtWqlfJ0qVLCyLnPM7pWpTjzgxmypTJleNM1UOgwrlz56yaaIV7
SY8QHDQU4eYUNLqQtI2NjfXx8WFtdU2BAQAAiKFej21j5edr9+7dU3bKqUyb
Ns3YVBS0wr3MdW9Tp05lTSzdeGsz3I26qVKlkr8TlnOCJLgCzDWpqHDCfUBA
wIsXL8QmWm9UZu8wSlr88ccfXKHCwsIkbdXLl00WVCfVV7OK/CE+buOx2F96
skSvcK+9XEB+Ywm30XTQoEH25JwT7gma/ckYPn/+nDtma9UFhFa4r1u3rtiE
plTzE+FWvR4/ftwkEXk3jzExMep5FpOctmKncB8XF8e1XfI3EXDnSQsXLmzP
9gxgD9warJ+fn9hXg+rJPHXq1Kwh9ZsCq927dyvBzGq1Ktxx6ezZs0uuXlIP
yL7/Jrnd9Vah15Jr/7t37y5j+P333yvhq1SpIgjmbuWVh9sLWrt2bXnb3r17
i1+G8uXLs5HXrFlTMuZHjx5x1WLVB7hWuLfabmudKpskLjlSLwNVoDKKw6tr
cQqtWrUSh1fhfARlzJjR6lYTMXYK9//++y83AZH3IDpnzhzW0MfHx5K/I9ek
IonNwj3lWen65R31jx071oa0uByaJDTKTZs2KcMVey4RAMB52CncUzvJHffu
16+fpK16gFRl586d+ktg5nJbeeeKnNsQ5wn3qptrBUpXZgBPTZMSnoaONGe3
FEy7c+/48eOSBeF2Mw4cOFDSUIuxwj2xfft2GUPW5bUCDdFlDAGwBDcxER9f
evjwoaIz+vv7c2Ll6dOnBYZqWyez21Ar3Iu1bAXOAwANqgWBqRH74IMP2PAN
GjSwmoRCZGQkV3Zdm5m1OeG8ZondvKtr79ysXLwI//Lly4CAACWkwDkAt+XY
JHSZwlGuXDnWUL4/1UItJA2Mhw8fLm9SrFgxNWlqJGX2DGiF+9y5c4sNnz9/
rgyM165dy/7+xRdfsPHISzbcWiJ9VvSJSdoCAACwyqpVq9hm1svLS9I9F7cb
jXoWwdTANakoaIX7VKlSWfUaxF0TSf2sTPbkefDgATcskfRjHx4ezo2pBHMi
16SiwolfJomNeYsWLWLDZ82aVSZ77g+3NUVmr4gC6ynO0nFRbjdsz549ZWLm
1hB8fX2TwR4JvegV7onKlSuz4SVd9XLNjre3t50HB7TCveTVgdwxW2LXrl1i
E61w7+npKZ7gqKm0bduW/Z3mgMrvFSpUkMltArMmpiCzvcRO4T5Bs1MrR44c
Mq5B6XUqUKAAa4jtxAbCbVSzOrucO3euyRzi9cm4uLjMmTMrIQX73ml+ynW+
kgeNuYstaMIuY2WVffv26SqmCpVRGQzQfwXjNHcrrzycT1oajsocZ0hIfBPe
eecdxcqScM9FTg2p2N29CrfemD59+mfPnolNtMI9lUWcnHZ4bJLYpdmmTRs2
vNU+kZPL/fz8aGgqNlHgLrjv27evjJV8TvQK90SjRo3YGEqVKiUj9Lx586Z4
8eKsodithGtSkcFm4V7d00J1LmlCL56akI+PT1RUlA05NCVuMRJXV86cOZWQ
4tV4AIzCTuE+wdwJQas9iALnJ79EiRK2bUalj4v7MENCQmQMtfulnSTcx8TE
UMxseMkVEmppVTVKPObn/PBLXv9x6tQp1or6ccFpU6sYLtxLLoCo551V5J3z
AGCWkiVLsm+U1YPnNWvWNGmw6tlSPa1TpEgRq1nSCvf+/v5WF4g4x4nffvut
ODy3vdbb2/vixYtW85ag8fVBXY8922WPHz/OxkaTRHFs1NBxi88KEyZMECfU
qlUrJaT4klZ2kGmy5jJFhZtb0Tzu8uXLMoZmUXzR0JxO8gKa27dvs3Xy5Zdf
Slppq3HevHkCE3WVgLsYgjsvRsWXvHmBu+BelyM+AAAAVomPj69SpQrb0src
0H3nzh11t5vCTz/9ZHgqCtzKpHKSpV69eoKNZ9TfpUqVSr6zs41JkyaxSVBX
LvZfnZCoE3GjSiqIeE7tmlQUOOGeqjpr1qxidZib1drmkc8NOXDgAHtcjgZd
x44ds2pFo7j8+fOrVpaE+0OHDrGR+/n5Wb08nR4ft7zZpUsXWwqWxLFBuKdJ
Fnubg4+Pj8xiL+fYStf1jmbRCvf0Dlh1tkAfu+rDTaFs2bJWN+tqd8maEpUp
wV5Zda3PknBPn4DkIrl6DtqUKMHLLFjZL9zHxsZykseYMWOsWnEXMlJVS2oN
wBmUKFGCfRxWL3C/e/eul5cX91nJOHTt2LGjEnj06NGCYJMnT2ZjLlCggFUX
NI8ePeJOQNvpG1yF80EqPq/BoY7WevfuLQjmVuWVh9pDts0hGjZsKGPIbvyw
JNxrI5c5+UINGicozJ4926oVt7hEg1hqdatWrSpwfaC+yQpBQUHKnsOff/7Z
kgk16ZwLF0FgBaqEWrVqsSYyW2F///131iR16tT2iBcK9gv3Fy5cSJcuHRuJ
zCW8S5YsYU0yZswoXvhyTSoy2C/cS7qwOHHiBLs4KX8fNJdD5eWktshS+MuX
L6uBIdwD98R+4f7p06f58uVjIxFc7qPCbdqnAdL+/fttKsH/h1NJ0qRJc/v2
bbEJzdG421tMThPuuQaTekz584Cqry3xVsPjx49z80erdw4Sn3/+OZsxblal
F8OFe3qjDh48KLZ6/vw5u/qhVKy8j30AtHAuPb29va1uGdVeMmKS2HEUHx+v
3kxqdWsuJ9wri9JffvmlYJX15s2b3KWiVqe39NVzrq5krnS/detW2rRpWSt5
Z4lmGThwIBubjOjMXVKgYHXXgTq2F3sAi4iIYJf36ZWQ8aLJ3X8q4yFBgHqJ
jNWpk0L//v3Z1CUH4ZxwT10PFZYmBYJlQ7VT44R7omnTpmxsMnuxjh07xroO
owzIu4cFAAAgSWRkJHc3+vTp0wXhX758yfkalRkeuCaVBI1wX7BgQeUO8W7d
utHARhueBmBcH03djfwVk/LQII3bQlmrVi3xZejDhw9nw+fOndvqNNM1qShw
wr2yAfLDDz+0pN3PmzfP9F9CQ0NlEkoScG4/g4KC7t69Kzb59ttvWRPBBc2c
g+7SpUuLD1NwXrZy5syZMn2E2iDcJ2gEqRIlSoh3v8yYMYMNT6P0e/fu2Zlz
TrhXRv6FChUSNE3UvnFyieSqESfcV6tWTfESRt+y2bOoYWFhqgBqSbg3Jc6n
rAp53Ml3Sf8G9gv3CYmyF3tkmCZ34hsu/v77b5oEsemKXcABp8ItdNMUVabb
0i4Ry7gk3b59uxK4ZMmSgmDU2nALsB07dhQsztAH27BhQzY8fb8OuXmBWgk/
Pz82Zl1d7YoVKxSrwMBAwSfsPuXVC3XN2bNnZ3MiPrWRkHgvA6utC+5NoPGP
rshfvXrFbWiUPLDGCff58uVTzjs0adLE7PBg2bJlnEv2fv36Ke82vS0rV67U
mkRHR3OfDLWZMruVqIbZK489PDxWrVolCH/r1i3OwabkWUgx9gv3CRqPYenS
pbPq1iBNmjSsyfr1690kFavYL9wT1ICIAz958oS+IDU8DSesbka1lEPlvBi9
YCNHjtTqPm/evGEPFEO4B+6J/cJ9gmbXMbX2W7ZsEYR/8OABp/XbeZ/ahQsX
uF1e1LWJjxlyrmYUnCTccxfZ6PJPcvv2bfX23gMHDghCcpc1Fy9eXDx/nDlz
Jhue+k2rSwdijBXulSPPOXPmFFzaQqM+7mwmvauHDh2SLSEA5uAWvmRu/Lx3
7552O7fMvYSdOnVSAouvWkvQCPc08lG+kV69epldlKYfuVVcGp/LrODduHGD
uzBFvAE4NjZWWR5Xkd8/aYmCBQuyEVodCiZonpopcc3NqhVlXtlyQGO/mzdv
CkJyDaz4TEqCxjVf5syZIyMjreZHgDoVoomh1Z1su3btYq+Jl7+3lxPuM2bM
2KVLFyVR7kZLhevXr6uijFa4pyE6NyMTO9SlsQQ7pDfJ3SIBAADABqhVZ2db
NIwZOHCg2b2vly9f5vT0jz76SPLUoWtS4YT7QoUK0XRAGZh9+OGHy5YtU7ts
inD9+vWck3OiadOmMgnZgLZrq1Gjxq1bt7QhaUzSvXt3did8QECAzCFul6WS
oBHuT5w4oeygpgHD+PHjL168qBz1pVEoPYK2bdtyDpFozCA5nUwSUGG5qSjN
gg8fPmw2ME3kOfezJqFwT5FzJyjLlStn9gJBeqbcltc0adLI3+uUzLBNuCer
9u3bs1alSpUyK2FTbMOHD2dfbGri7DmxosIJ99OnT1dmZAUKFDAb/5UrVzgn
/ybLp8jj4+MvM3AXWNBsV92l7Ovr26pVq1WrVtHc859//tmxY8fgwYPZZlwg
3JsSfdhaWr15/vx5nz592KorUqSI4PpImreqGQ4PD2dToWnOZcsI7j1ft24d
u86ZLl06S+rS1q1buZPCwcHBlqIFzuPs2bPHE+nbty/7OD744IPjDJZWSrkp
vMnyJaT0jaixUfupbtrftm2b8qPZ/Wn379/nrhqkD8TsW02z7Hr16rEhqb+w
ejyE+vEJDJw+e+rUKSVv9HKyMVPmDxw4oBbHbM5fvHihBqD+Wv3GJ02apPx4
4cIF15fXeYSFhbG6p6enZ//+/S31Dhs3buQ+f4Fwr0TObgqiyAcMGGBWv7h6
9SrXbtMwVdBkUTuvtmw7d+5kDfPly3f9+nVld0HOnDmHDRu2b98+arRPnz69
du1absuEKVGCVxaRVJ+TNWvWXLp0KTX1NHijoQu9YLly5eKsJG/qSUh0Q5Q+
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
accRi7e397BhwwQrITLCvVJ8q8lxwj0N14cMGcLtHrFK48aNxc4kE5wm3Cck
OsFWrgaQIWfOnL/99pvUIwROwE7hnmAlnj59+lgKZrNwn5D4FQwYMEC7PmkW
av+7d+/+/PlzmeK7oXDv1PI6m9u3b3N+cqwSFBREFSjjzJaaWa4ZF5A6dWpL
xxlYrAr3CYmORCytASp4enpOnTqVjfb+/fvc/ZhaqOmzdCxRAL2i3H0KAjJm
zKhVhPXiDOFegWYH3LW8AgoXLmzbnknXpKLiKOH+yJEjZkUZARkyZDB7QYOu
HCrO/J8+fcp5lzULhHvgPjhJuE9I9L3DOaYQkC1bNhmHxvLQ1IMm+DL7fk2J
XjIuXrx4584dQRhWVU8Swr2CrvljtWrVrF7rLMCthPuExJvFZKaBNBrs16+f
/X4eQIrFfuGeBupsYyW4CMOBwn2C5ipzs6RNm9aGE9806v7iiy8kqyVdunRT
pkyx5xu0X7hnLwNVF+3NYptwr7Bq1SqB0s1B8wgb5jtmmT17Nncg3SplypSR
WU60KtwnJC4a0NxNnJwl4T4h8Rig/ByZ3qVp06ZhFxYAALiMo0ePduzYMUeO
HGabZQ8Pj48++mj06NF23gLvvFQsCfcJif5OuQ11LNRNnzx50p5C6eL27dtD
hw41e5hLISgoqGvXrhEREW6bilnhPiHxtj6tJzQVms0lv7P2HDExMTRU+/TT
TwXLmOnTp2/YsOGCBQus3nnE8ezZs4kTJxYpUsRSzFmzZm3dunVKPmivYqdw
n5B4yS9NamiqZam2s2TJ0rJlS6s7Y/ViVrhPSLxGhF4bwR6kypUrW23HqF0t
bRlqENSQNHeg0gnUIjawCs0BqUL69OnD3dnBQTOLtm3bnjhxQqZCZs2apeaQ
885NtSEojow0QO/Jpk2b6tSpY+mwqp+fX/Xq1efOnRsbGyuTW+AkOnfuXEMC
Qeu3bNkyNZhAqqM2XJyE2EFKQqKP1u+//14wsy5YsGCvXr3M3nhiCbFw36xZ
M5nKMZvza9euia369evn+vK6BnoNOnXqJFii9/LyKl68eHBwcFhYmN7dquHh
4d98842llROl7Ro5cqTktsny5ctbaujq16+vBjt//nzt2rXNdhOffPIJDb+1
Mb9+/XrSpElmhQYaxnTp0sWG7aMq+/fvb9KkiaV9pFS9FStWpNR1+e+yBD1K
tU44BTxdunSCnsLsbTgcVEuhoaHUU3BXOaukTp26Xr161F9b3YNheCoKNLxh
K4HzjPHee++ZrasNGzaYje3u3bvz5s1r1KiRYPsuvZb0NU2fPl3y+jMuhxzq
zcjUidPMgmZ8ltKl11jsdxQAVzJhwgT1NeamGDQQFbzzZj2Qc9DnsGXLFhoS
0DDb0udQtWrVH3/80Umb6OjDFKsVlAGaPihtvrxwv3r1akHNaHdsUrciMyjq
27ev2VI0b95cbCgeD1idP2bOnLlFixb2O2qbPHmyoFpoNGvWKiIiQmBlSTla
s2aNoELUjc2PHz+mYYNg8li2bNkUe4sfcBSRkZEyH7j4U6UXVQnToEEDgYS9
c+dOcRJm3YhZEu6JX3/9lVtHZfn0009PnTplc80cPny4Q4cOlo4ReXp6lilT
ZuzYseIL32VYuHChTP1PnDjRUgwXLlxQg82ePVuQVu/evQVJ0ARTnFXq7Gjk
Kdj/nylTJmrz6UHbWBeWOXHixPDhw2kGp3WPqUIDexr279ixQ1L7rlmzpqXW
u1q1amqwR48eUQcnGJOXK1dOnNCxY8datWpl6SCP8i6NHj3awMvvAAAgJUO9
xl9//bVq1Sqa1g0bNmzMmDHUNW/cuFHmnJGxqQiE+4REZ+abNm3q0aMHdfHU
tVWpUqVx48aULo2s7C6Njdy8eZNmOj/99BP1etStz5o1i6ZFAk9B7pOKJeFe
gR4EPdMvvviCZmcVK1akf9CYauvWrSnKhc6zZ8+2b9++ZMmSSZMmhYSETJgw
Yd68efQGOuQg/PXr1ymqBQsWKM+UPqKVK1fSTBzbHVXsF+5V6Aui2qYGSqnt
mTNn/vLLLzQUd9JhAUvCvcKVK1dmzJjRrl27qlWrUjtG87s2bdrQFMyeIxsC
njx5QhPMESNGdO/e/bvvvhs6dCilTlMbmYaabA8ePLh48WL6BAYPHjxq1Ciq
umXLlp09e9bmF/XevXts5fj6+toWj5bo6Og9e/b8/PPPU6ZMGTRoEP03NDR0
165dbnJAGCQ5qH04ffr0+vXrqc+ldoNaD+oC6GuiT9iG2MTCvTvg2PK6mFOn
Tq1evVoZjo4cOXL69OlLly4NDw+3tO4tD7V1bOTqWPfOnTsOyblZ/v3339mz
Z/fu3btz587BwcGLFi2y2kFQ/0gjFip7t27devbsSc31unXrdLnHF0BjP+oL
li9fPm3aNGpdf/jhBxoa0ZjQqrsVm6EXj/1e2LUsO4mNjd29ezf1DkpPMXXq
VOo19u7d69jxrWtSYaEqYmtMOc9uA9QOXLp0acOGDfTC09uujH7nz59Pb5fz
HrcCTT2ozenfvz+99vTy07iIKu3kyZOvXr1yaroA2Ax3L3mWLFkcFXNcXBwN
G6jVpe6MRuATJ06kVpc+Q5sdI8tDvR4lTf1IpUqV8uTJExAQkDFjxkKFCjVq
1Igyw/p/fvTokUCOsaSqJyFcPH90H2iytmDBgm+++YZmqTRXpRlr69atqRKw
hwqkEATCfULiLk2aCHTv3r169erqovS4ceMkTzRYhRrhiIiIlStXUptDUw8a
DtFEgNoiezbiJgNu3bq1efNmqgoanVK1KA0yPSkXNMg0qj9+/LiyyjQsERrY
U6d87NgxR91WYxaaNezcuXP8+PG9evWisbEyofjtt9/kl6NpCH306FGqKHUs
sXjxYqpG6PUAAABsQyzcAwciFu4BMBwHCvcuRizcp3CcJ9wD4M64v3APgPvg
POE+ueIo4R4AII/zhHsAAABGIRbuAQAAAABSJhDuXQaEe+DmQLhPlkC4BykT
CPcAyAPhXi8Q7gFwPRDuAQAg+QHhHgAAAABAC4R7lwHhHrg5EO6TJRDuQcoE
wj0A8kC410v16tUh3APgYiDcAwBA8gPCPQAAAACAFgj3LgPCPXBzINwnSyDc
g5QJhHsA5IFwr5eGDRuyNUYVaHSOAEj+QLgHAIDkB4R7AAAAAAAtEO5dBoR7
4OZAuE+WQLgHKRMI9wDIA+FeLx07dmRrLDQ01OgcAZD8gXAPAADJDwj3AAAA
AABaINy7DAj3wM2BcJ8sgXAPUiYQ7gGQB8K9XqZNm8bW2MiRIy2FfPDgwYRE
Dhw44MocApD8gHBvAzS/mzt3bunSpYsUKRISEvLixQujcwQAAP8Bwj0AAAAA
gBYI9y4Dwj1wcyDcJ0sg3IOUCYR7AOSBcK+X48ePszVWv359SyH37NmjhBk+
fLgLMwhAMgTCvQ1MmTKFrbQ2bdoYnSMAAPgPEO4BAAAAALRAuHcZEO6BmwPh
Plny6NGj0gzly5c3OkcAuAII9wDIs2fPHran6NKli9E5cndoyFSiRAm1hUmT
Js39+/fNhhwwYACEewAcwo0bN9iWqkaNGkbnKAmQO3dudjjk4eFBUwOjMwUA
AP8HhHsAAAAAAC0Q7l0GhHvg5kC4BwAkGyDcAwCcyurVq9lGhoYicXFxXJg/
//wzTZo0EO4BAEYREBDAze8uX75sdKYAAOD/gHAPAAAAAKBwnGHlypUQ7p3E
pUuX2KrOkSMHhHvgbpw5c0Z9RbkZkzsL97du3WI/rmrVqkG4BwCwQLgHADib
Tp06se1M0aJFp0+fvm/fPhqZbN++/fvvv/f391f/CuEeAOB6mjZtyjZTRYoU
efv2rdGZAgCkaKgVYhdzli1bBuEeAAAAAIDw8PAwWQDCvQNp0KCBpXqGcA/c
BPrkBW+p2wr3gwYNEmQbwj0A4NSpU6xD3Tt37hidIwBAciM+Pj44OFgwsWKB
cA8AcD337t0rX7680grlzZv3r7/+MjpHAICUTlxcnGC8BOEeAAAAACkWCPeu
AcI9cH8g3AMAAAAA2MyhQ4caNmzo4+Njdkzi7e1dunTpUaNGXb161eicAgBS
IvHx8SdOnDhw4EBsbKzReQEAAAj3AAAAAADmqVmzZg0LtG/f3ujcJR+GDRtm
qZ6JmzdvGp1BABLokxe8pa9fvzY6g+ZZtGiRINt//PGH0RkEAAAAQAoiJiZm
7969Cxcu/OGHH8aNGzd58uRly5YdPnw4Ojra6KwBAAAAALgL8fHxgsWcb775
xugMAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICk
SlRU1OPHj2NiYozOCAAAAAAAAAAAAAAAAAAAAAAAAJAiePPmzaZNmzp06FCs
WDFfX1/T/wgICChTpkxISEhYWFh8fLzR2QQAAAAAAAAAAAAAAAAAAAAAAACS
IXv37i1SpIjJGoGBgSEhIXfv3jU6vwAAAAAAAAAAAAAAAAAAAAAAAEDyYfr0
6Z6enlZVexV/f/8ePXrcvn3b6IwDAAAAAAAAAAAAOIbbt28vXbr0woULRmcE
AAAAAAAAAEBK5MCBA15eXvKqvUrGjBkXL1789u1bo0sAAAAAAAAAAAAAYBeP
Hz/OmTOnyWTy8vIaNGiQ0dkBAAAAAAAAAJDiaNiwoQ2qvUqtWrWuXbtmdCEA
AAAAAAAAAAAAbGfUqFHscsfo0aONzhEAAAAAAAAAgBTE27dvU6VKZY9wb0q8
+H7//v1GFwUAAAAAAAAAAADARkqXLs2udXh7e0dERBidKQAAAAAAAAAAKYUH
Dx7Yqdor+Pr6Llu2zOjSAAAAAAAAAAAAAOjm1atXfn5+3FrHxx9/bHS+AAAA
AAAAAACkFG7duuUQ4Z7w8PAYM2aM0QUCAAAAAAAAAAAA0MeJEyfMrnXQ70Zn
DQAAAAAAAABAiuDFixdeXl6O0u6JiRMnGl0mAAAAAAAAAAAAAB388ssvZlc5
unbtanTWAAAAAAAAAAAkT16+fPn4vxQpUsSBwr2Hh8fPP//82BxxcXFGlx4A
AAAAAAAAAACAZ9q0aWZXOTJnzozVjKTOo0ePFi1a1K1btyZNmnTp0mXYsGE/
/fTT2bNn3759a3TWkhWvX7/etm1b3759W7Zs2a5duwEDBtBndeDAgZcvXxqd
NQAAAAAAANyOV69etWnTxtfX14EyvS5Sp049aNAgo6sBAAAAAAAAAAAA4D+E
hIRYWs34/fffjc4dsJ158+YFBASYfbJZsmT56quvfv3111evXhmdzSTP0aNH
ixYtaraeU6VKVaVKlRkzZjx48MDobAIRb9++PX78+Jw5c3r27Nm2bdsmTZq0
b98+ODh48eLF165dMzp3AAAAAHAp169fDw0NpVlSx44daVTQqlWrHj16zJw5
k0YL2P7qKKZOneoYAd4+9u/fb3RNAAAAAAAAAAAAAPwf7du3t7SOERwcbHTu
gI2MGjVKZqkqU6ZM3bt3P3/+vNH5TaocPHgwTZo0VuvZx8enQYMGW7duxWKv
u/H69esZM2YEBQUJHl/x4sWpMbx8+bLRmQUAAACAc9m+fXvFihUFo4Ls2bN3
7Nhxz549Ruc0yfPtt9/KzFaczYoVK4yuCQAAAAAAAAAAAID/o0GDBpbWMcqX
L2907oAtrF27VteClaenZ+PGjU+cOGF0xpMYkZGRmTJl0lXVH3zwwapVq968
eWN03sH/5+LFi6VKlZJ8dt7e3q1atTpz5ozRuQYAAACA44mNjW3Xrp38oK5C
hQqbN2/GnkybOXTokI+Pj66BtMMpUKBAVFSU0TUBAAAAAAAAAAAA8H/UqFHD
0lKGj49PdHS00RkE+oiJicmaNatti1d16tQ5d+6c0SVIMjRv3ty2ei5YsOD6
9euNzn5K58mTJ++9957eZ+fh4dG+ffvHjx8bnX0AAAAAOJLWrVvbMKgrW7bs
6dOnjc57UuXUqVNjxowJNketWrVseBwC3n33XS6JmTNnPnr0yOg6AAAAAAAA
AAAAAPgPCxYsECxx7Ny50+gMAn38/PPPVleuihYtWqVKlbx582r/5OPj07t3
76dPnxpdDnfnwYMHXl5e4nrOli1b9erVixUr5uvrq/1rjRo1sE3CQIYMGWL1
SxE82bVr1xpdAgAAAAA4hgMHDtg8KqDBc3Bw8MuXL40uRHLDtq0UlnjvvfeM
LhAAAAAAAAAAAACAdd68eVOuXDlLSxwDBw40OoNAH927dxcvW82dO1cNfOHC
hX79+vn5+XFhcuXKtXXrVgNL4f7s3LlTXM+NGjVSl3AfP35M1Z4zZ04ujK+v
7+jRo1+/fm1sWVIm7777rvgJWqVVq1axsbFGlwMAAAAA9tKlSxc7RwXFixe/
dOmS0eVIVtAIuX79+nY+F5WAgACjCwQAAAAAAAAAAAAgxa5duywtcXzyySdG
5w7oo1WrVoI1q9KlS2tNLly4ULx4cW3gDh06QJe0xKpVqwT17OnpeevWLc4k
Ojra7N2ppUqV+vfffw0pRYrlxYsXHh4egicoSfny5e/du2d0aQAAAABgF1Wr
VrV/VJApU6awsDCji5KsePXqVd26de1/NKZExwhGlwYAAAAAAAAAAABAlkqV
Kpld4siQIcPbt2+Nzh3QQYcOHQRrVuPHjzdrFRUVVbFiRW34Dz/88OrVq64t
QdJgw4YNgnqmyrRkOGjQILMf2ubNm12Z/xTOzZs3hYu7OsifP/8///xjdIEA
AAAAYDvvv/++Q0YF/v7+a9asMbo0yYrY2FiH3HdPj8boogAAAAAAAAAAAADI
snXrVkurHDdv3jQ6d0AHISEhgjWr9evXWzK8d+9eUFCQ1iR79uxnzpxxZRGS
BIcOHRLUc/v27S0Zvn37tmnTploTT0/PRYsWubIIKZmnT58KHp9eMmfOfPbs
WaPLBAAAAAAbqVChgqNGBTSiW7p0qdEFSlbExcX17NnTzueSIUMGo8sBAAAA
AAAAAAAAoIMyZcqYXeXYtm2b0VkDOli3bp1gzUrswHP9+vVmrbJkyXL+/HmX
FSFJEB0d7ePjY6me+/fvL7C9f/9+hgwZtFYeHh6LFy92WRFSONmzZxeu7+oj
V65ckZGRRpcJAAAAALbQvn17B44KvL29MYFyOMuXL/f397f5oWTLls3oEgAA
AAAAAAAAAADoYOHChWZXOX788UejswZ0cP/+fW9vb0trVgcPHhSblyhRwqxh
0aJFnz9/7poiJBUqV65sqZ6Dg4PFtmYd5hN+fn7h4eGuyX8Kx6zfA3uoUqVK
fHy80cUCAACQgnjy5MnZs2d37979888/z5gxY8KECcOHD6dBSI8ePTr/j+BE
6E+TJk2i0f6mTZuOHz8eGRmJPotl0aJFjh0VBAYGXr9+3ehiJTdokGzzpQYQ
7kEShdpqarHp5d+4ceOaNWsWL148f/78yZMnU6s+cuRI+u+0adPol6VLl9Jf
t2zZ8tdff929e9foXAMAAAAAAAAAcADPnj1LnTq1dpWjT58+RmcN6KNhw4aW
1qxoLi+2HTt2rCXbXr16uSb/SQXBGm+XLl3EtqdPn7ZkW6hQobi4ONcUISVj
yb+EPcyePdvFpXjy5ElERMTBgwfDwsL++usvasZdnAEAAACu4fnz5+Hh4YsX
L+7bt2+tWrXy589vz+ljwsvLK0eOHGXLlv36668nT568c+fOlOw65vHjx35+
fo4aDyjUq1fP6GIlQ169ejVp0qTAwEDJp1CyZEnlHxDugfsTHx9//vz5NWvW
DB06tFGjRmXKlHnnnXeorbah/fH19Q0KCqpYsWLz5s3HjRu3adOmq1evGl0+
AAAAAAAAAAC6ad26tXbS16BBA6PzBfSxf/9+S1N4q/4TNm/ebMnWz8/v2rVr
rilCkiAmJiZHjhxm6+qzzz4T28bFxQkcIyxYsMA1RUjJxMfHFyhQQLjipZvM
mTPHxsa6IPNHjx7t1KlTrly5tHnIly9ft27dtm3b5pqcAAAAcB5XrlxZvHhx
mzZt8ufP7+np6dg+yyyBgYE1a9YcM2bMwYMHX79+bXQFuJTvvvvO4fV54MAB
o4uVPHn69Om0adOKFy9uqea9vLw+/fTT0NDQZ8+eKb9AuHcfHj58ePny5YiI
iMOHD//+++9//vnn33//Tb/Q3MrorBnA3bt3V65c2blz51KlSjl8+xBHQEBA
xYoV+/btu2XLlqioKKOLDgAAAAAAAADAOrt27dLO78qVK2d0voBuLB26b9eu
ndjwwIEDgsn+mDFjXJL9JIOlQ/eZMmV6+/at2DZjxoyW6hkfnWtYu3atcHHL
FkJDQ52a53v37jVq1EgmJ/SCDRs27OHDh07NDwAAAMcSFRW1YsWK9u3b58mT
x+GdlC5Sp0792WefjR8//sKFC0bXiiuIjIwMCAhwbB22bNnS6GIlc65evbpq
1aoRI0b0798/ODh47Nixc+bMCQsLe/LkiRLg+fPnyrOAcG8UMTExe/fuHT16
dJMmTUqVKpU+fXrBJ5M9e/ZKlSpRA/jjjz9GREQk1xs9Xr58uWnTpp49e77/
/vseHh6ObXYk8fb2rlChwuDBg/ft2/fmzRujqwQAAAAAAAAAgHloyvbOO+9w
c7o8efIYnS+gm+vXr5vVhXPkyCFeAFm5cqVggl+xYkWXFSFJQJ/Mp59+arau
jh07JjCMjo4W1LOnp+f9+/ddVoqUTL169awta+mjRYsWzsttZGRkzpw5deUn
bdq0/fv3x5kaAABwc16+fPnbb781bdo0VapUVtt2Ly+v3Llzf/TRR3Xq1GnX
rl3fvn1/+OGH+fPnh4aGrlmzZt26db8nsnv3bvrvli1b6MfVq1dTgJkzZw4d
OrRr166NGjWqXLlyoUKFqJuQ6U0orSlTpty6dcvoenIus2bN0tXJWiVTpkxQ
xIwFwr1RXL16ddKkSRUqVPDx8bH5C0qXLh2N1allU3diJGmoNdi3b1+nTp0y
ZMggU/w0adLkzZu3fPnyVAlff/31gAEDRowYMWHCBGqN5ydCM3flH9QF0O/D
hw+n7qBt27aff/55qVKlcuXKJXmEn0L269fvr7/+MrqGAAAAAAAAAACYgaaE
3Dwubdq0RmcK2MKaNWvMbuDfuXOnwGrEiBGCSX3mzJldlv+kwq1bt6hatHXV
vXt3gdWJEyfE6ydHjhxxWRFSMg8ePAgKCrKymKWHYsWKOS+3NWvWtC1XVMZt
27Y5L2MAAABs5ty5c2IdJ126dFWrVu3SpcvkyZM3btx4/vz5V69eOTADkZGR
+/btW7BgwYABAxo1aiQ46e/p6VmtWjUaYSbXY7Bv375t3LixbV2tJW7cuGF0
sVI0EO5dzIsXL+bPn1+2bFnHHiT39fWtX7/+77//bnT5bIQmjCEhIblz5xYU
sHTp0s2bNx82bNiKFSvCw8MdtVfh3r17YWFhixYtCg4O/vLLL2mq4uXlZSkb
9Ncffvjh2bNnDkkaAAAAAAAAAIBDWL16tXYG59jlQeAyRo0apX2a5cuXF3hx
r1ChgmDNxMPDI7ku1drDoUOH/P39ubqiX65fv27JZNy4cYJ6Jn777TdXFiEl
c+rUqUyZMokfhzzO29xy/vx5O/PWtm3b5HFeCQAAkgdHjx5t2LCh9vJ6Ly+v
Dz/8sGvXrkuWLDl79qzrj2zfu3dv8+bNQ4cO/eyzz8z6tS5QoMD8+fNfvnzp
4oy5gKioKPFgWC80zDC6TCkaCPcu49GjR6NHj86SJYvgc/D19X333XcrV65c
u3btJk2atGnTpnPnzi1atKB/16hRo0yZMjly5BAr/iVLlly+fHlcXJzRxZXl
4sWLnTp1ooJry5I/f/6WLVvOmDGD+gJXrrdER0fv3bt3woQJ1AFRhWszliFD
hiFDhjx48MBlWQIAAAAAAAAAIODevXvauRs2XSddunXrpn2gc+bMMRv4/v37
gh34ChDuzbJx40btgkzdunUtLbZXqlRJXM/jx493cRFSMhEREWavlrABHx8f
J2Vy/vz59mevaNGiV69edVIOAQAASPLHH39UrVqVa6IzZMjQvHnzZcuWuZVc
EhcXt3///gEDBhQrVozLcPbs2SdNmhQbG2t0Hh3M06dPy5QpY3+fq7B3716j
C5SigXDvAmh6SLNLs2PpggULtmnTZsqUKbt3775z545g97jK69evr1y5smHD
huHDhzds2NDsTgBqjtz/yzp79myLFi24ybWfn9/nn39O1SXY4O1izpw5QxNP
mpxyWU2dOnWvXr1u375tdAYBAAAAAAAAACS8++673NQY120nXd6+fdu3b1/u
gfr4+GzZskUbePTo0VaXH5Pl6SqHsG3bNu25+549e2q1+4iICKv1PG7cOENK
kWI5fPhwunTprD4Xq/j6+joph8OHD7c/e6bEhetjx445KZMAAADEXLlypWHD
hmyznD59+u+++27//v3uf4b06tWr06ZNe//999n8BwUFrV271uisOZiHDx+W
KFHCId0uDTCMLk2KBsK9swkPDy9VqhT7zvv5+TVu3HjBggXXrl2zP36aSZ04
cWLixImVK1fmDuO3aNHizp079ifhcJ4+fdq7d29vb281qzT7btq06YYNG+iF
NDp3Fnnw4EFoaGiNGjVYPzA0P5oyZcrr16+Nzh0AAAAAAAAApGiaNGnCrTjd
unXL6EwBu5g+fTq7dGBKvKV04MCBjx8/VsOcP39eRriEcC/gyJEjWn+DNWvW
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
mL/hYWFhs2bNMveXk+TFIyIioqOjLW0Wcfz48Vq1ao0ZM0bvceFfMzJwkUmU
iGQ5JyenYsWKI0aMsIe7YNy7d48M7/Xq1TPsqIsXL8bGxvLfLc7Hx6dnz55M
7q0AAAAAAABg1Q4dOqS7e9WxY0fWFYER2dnZgYGBAg9EKMrFxWXLli2s+0Mp
Wq02OjqadR//15AhQ1j3h/W5cOGCn58f2w8uKirKrEN5M2fOZFuwk5OTXDHT
X3/9VbNmTeFvHRwcvHjxYtw9U4Rnz5517dpVeFd7eHiMGzfu+vXrrAsHYCM+
Pt7csbFp06bp6emsC7dWH3/8Mdm4COxqBweH7t27Hz9+XPYyyOa4WbNm5n70
8ipXrhzZOMreNKtz/vx55jO0li1b2tgvBnNzc83ac/Hy8powYcKtW7dYF66I
VatWmfuVCAoKmjdvHiai5lq/fr27u7vwfm7dunVmZibrqgEAAAAAAKzGr7/+
qrtXlZSUxLoiMO7+/fvff/99mio8PDy478PatWt1H9+0aZNtXxKQKCoq+uWX
X9TpZ3om2ujRo/X+dODAAdY9Ya3u3LmTnp6u6Ae3Zs0a7oPz9PTU+9PPP/8s
4pjwiRMnjL7Rhg0bZL8h7PDhw3XfYuPGjXIFCk+ePKlVq5aIkqpUqUJWOllq
sB8JCQkiutrd3f3zzz8noxzr8gFUpXdbKLNERkYeOXKEdQuszLp160R0tUaj
GTJkyMOHD+UthmyUMzIylJoQ/B/6o7WUlBTdx8mE5N69e/K2yHqRGdrWrVsV
/SBWr17NfRBeXl56fxI3Q7NwvXr1ErGukc5JTU1V+kYVKsvNzS1TpoyI3iAq
VKhA5vY21iHKIXup3E1hzNWpU6ecnBzW5QMAAAAAAFiBTZs26e5PzZ49m3VF
wF7p0qW578OzZ89Y12LL+vfvz/VzWloa61rADE+fPuU+uDJlyij9Xvfv33/1
1VfFHYc0KiUlRaFSFy9eLLoqjUYTHx+PdEOgrKws0mOiezsyMvLs2bOsGwGg
nmJ/6OLl5UW2yGSxli1bGuYRDg4OgwYNun37Nut2WAetVlulShXRA1RAQIA1
XtmJuw84cfToUda12LUnT55wH0TZsmVZ16K4kydPil7RiObNmyt3lwr1bdy4
kb+9jo6OnTp1evfdd2NiYnx8fAwXaNas2R9//MG6HVbgjTfeEP2ts8kfjQAA
AAAo5MaNGzt27Jg7d+748eOHDRtG/vvpp5/+8MMPuJwmgD2YNWuW7s4ULgoK
LxDcqwXBvZVSM7h/8XKeVqNGDdGHyPSQb51CdRZ7L+NiVa5c+eTJkwqVZ0uk
317B1dV1zZo1rNsBoBL+u9v7+vpevHiRLnz37t0ZM2aUKlVKb7GyZctu2rSJ
YSusxYEDByQOUCVeXhxGxL2nGUJwbyHsKrj/4IMPJK5oZKDbuHEj63bIY9Kk
SfyNXb9+PV04Pz+f/G9wcLDeMs7OzpMnTyZ/ZdgQC3fnzh3++9oL0alTJ7Kq
sm4KAAAAgIW6fft2SkpKw4YNTZ2zQx4PDw8ny+D8AgAb1q9fP90V35Z+eA+i
IbhXB4J7K6VycE9cvXo1KChI4lEyTufOnRUqUpYK3d3dt23bplCFNkPcdfL1
kHn+lClTcNIT2AP+65a89957hk+5dOlSnTp1DBfu3bt3bm6u+k2wIt988430
AYpo166d7JfNVw6CewthV8G9uOvk6+EmA6ybIoORI0fyNJOM54ZPIfN5o30Y
Fham+2su0PX7779L/9YRdevWzc7OZt0aAAAAAMty7949Mq11dXUVOKdycXFJ
SkpCfA9gFZ48eXL69On9+/fv3LkzLS1t2bJlixcv/vrrr7ds2fLrr7/qXUmj
qKgoMDBQd2W3vXv/gQgI7tWB4N5KqR/cv3h5dfRq1apJP1A2bNgwhSr09vaW
Xh7h5OT0xRdfKFSkbYiNjZWlq4m+ffvizDKweQ0bNuRZC3bv3m30WY8ePapf
v77h8vXq1bt06ZLKTbAiS5YskWuAatCggbXcEBnBvYWwq+C+Q4cOcq1rQ4YM
sfaDABMmTOBp4KRJk4w+S6vVJiUlGS7v4+Pzww8/qNwEq5CZmSnXt65SpUq4
0BYAAAAAtX79eprImIXMXVetWsW6fADQ9+zZs4yMjMmTJ7dv3758+fLFrst+
fn6tWrUaMGDA1KlT+/Tpo/unhg0bsm4NWAQE9+pAcG+lmAT3L17+8LJdu3Yi
pnC6lDuvyvCKo1IsXrxYoTptgCxn3FPdunWzrktSA5grJiaGZxW4evWqqSdm
Z2cb3XEODAw8e/asmk2wInKdcc8JDQ29efMm6zYVD8G9hbCr4F6WM+6p+Ph4
q74Iz+eff87TumXLlpl6YkFBQVRUlOFTnJycdK+uDxy5zrjnkC3smTNnWLcJ
AAAAgLHnz58PGTJEb6ZUvnz5Ll26TJo0afny5WlpaRkZGRs3blyxYsXkyZO7
du1aoUIFveX79++PHAfAEhQWFm7fvr179+7u7u5y7ToNHTqUdbPAIiC4VweC
eyvFKrh/8XLkT05OljLOKxfc80dj5nJwcNi6datCpVq7+fPny9jVxIgRI1i3
CUBBM2fO5Pn+81/6ftGiRUafVa5cuStXrqjWBCty6tQpeQeohg0b5uXlsW5W
MRDcWwi7Cu5nzZol77o2fvx41m0S78iRIzxN++6773ie++effzo7Oxs+y9HR
ccuWLao1wSqQnSAnJycZv3UVKlS4ceMG62YBAAAAMEPmV7qX0qpYseLUqVPJ
bnWxTzxz5syMGTN0z6Jq3br148ePVagZAIzKz89fsmSJvOc2chYuXMi6cWAR
ENyrA8G9lWIY3HPS09MNf1opkHLB/WeffSZ9M6TLx8cHuZhRsudixMaNG1k3
C0ApR48e5fnyP3r0iOe5ZNbt6+tr9IkRERG404ShoqKigIAAeQeopKQk1s0q
BoJ7C2FXwf2hQ4fkXdE0Gs327dtZN0ukgoICf39/U0379ttv+Z/epUsXo0/0
8vL666+/1GmCtWjevLm8X7w2bdpY9dUeAAAAAER7/vz5G2+8wU2Kqlatum7d
OnMviUl2wNPS0mrUqMG9SFRUFA5TADBB9qZluc2xUVWqVDl9+jTrJgJ7CO7V
geDeSjEP7l+8vPnypEmTBF5xhazR3bt35/6tXHCfk5Nj9HwlKd5++22FqrV2
9erVk7erAwIC+ONLa3Hv3r29e/d+8803qS9t2LDh4MGDttE0kCIsLMzUl//v
v//mf27fvn1NPffjjz9Wp37rMnr0aHkHKI1GQ1Zk1s3ig+DeQthVcK/VakND
Q+Vd1ypXrkxmuaxbJtL7779vql1ffvkl/3PXrl1r6rmtW7dWp35rsXTpUnm/
dQTuygoAAACW7/Llyzt27CDzltTUVDK93Lp16+nTpyXeepKLBpycnKZMmfL8
+XPRr1NQUPDRRx+98sor5NV69OiBX0UCqInsRI8YMUL2vSQ9JUuWXLFiBeu2
AmMI7tWB4N5KWUJwz7l///5nn33WqFEjBwcHw/Hc2dk5MjJy/vz5d+/e/eST
T7gHlQvuiQEDBsi+VUIIYpS8d5HmzJo1i3WzxMvPzyf7TU2aNDG6LpCdl9at
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
vyC4B7A6W7ZsMVyXvby8TF1iiGzW9RYm86tik1atVuvi4sIt369fP90/Xbx4
sU6dOuaONrZ3gVZAcK8OBPc8ENzLC8E98LCx4J6Tmpoq5dSGYoN7sr9GXz8s
LEzc+VZNmjQRXaEhjUazefNmUb1lcRDcA4XgHoRDcC8FgntDCO6VxiS479ix
o4yzL4LMOVUrHoBHXl4eGcC7du1KD/maUqFChZYtWyYmJqakpKxYsWLbtm2H
Dh26evUq/2lZH3/8MX2FoKAgsv7u2LGD7D/OnTt3xIgRb775ZtWqVfnP63dw
cGjRosXSpUvv3r2rWrecPHly4sSJZIeCvDt/baT+t99+e/z48YsWLfr+++/J
E+/fv69anbqKior++eefffv2ffPNN7Nnzx46dCjpt2JPtXN1dY2JiVm+fPmD
Bw+YlA1gJ3Jzc+Pi4vjXR34I7gGszrx58wzXZZ5f8JK5hOHyX3/9Nf+7XL9+
nS48btw4vb8+efLkrbfeMmu06dy5swyNB0uC4F4dCO55ILiXF4J74GGTwf2L
l0dpIiIizJrS0OM5xQb3xIABA+gTt2/fLqLCqVOnmlVesby9va9evSqiEkuD
4B4oBPcgHIJ7KRDcG0JwrzQmwf3ixYvlnX25urqSOadq9QMYIkPo9OnT/fz8
TH1FySo2evTob7755vjx46LPy9YN7qtWrWp0mefPn587d+67776bNGlSu3bt
TGXNLi4uQ4cOvXTpkoRGF+P69euzZ8+uW7euqTXX39+/bdu2Y8aMWb58+ZEj
R6zidPV//vln586dc+bM6devX3h4uKmfqZPujY2N3bp1a2FhIeuSAWzW6tWr
TY26ptBfVSG4B7A6ZB5luFJnZWWZWl5vb5cTFhbG/y5kDaULk8294QL5+fnd
u3cXPux4enqSuZnUxoMlQXCvDgT3PBDcywvBPfCw1eD+xcuzFdasWVOtWjUh
85n69evTrhAS3JMZGr2M4euvvy6ivL/++svR0VH4jEuI2NhYEZVYGgT3QCG4
B+EQ3EuB4N4QgnulMQnub9++7ebmJu/sKyoqSrX6mSBr6Pbt28keZXJyclJS
EnfB8I0bN5q6Oiio5tq1a+TjcHd31/tOki95586dFy1adOzYsYKCAlneS0hw
r0er1Z4/f57sY5JZHNk06xVJ9oN69eol++9edu/e3aNHD6NXm69UqVLv3r2/
+OKLs2fPyvumTDx9+jQzM3Pq1KmtWrUyegu2ChUqzJw5E4dTABRCNo7jx4/3
8PAodp6g0Wj69u0bFhbG/S+CewCrYxiX16xZk2f5u3fvkhXfcDQgG26eZ5HZ
NV3S1On5hYWFXbp0KXbYoX777TdJLQcLg+BeHQjueSC4lxeCe+Bhw8E9p6io
6IcffujXr19AQIDeBMbJyalWrVoJCQlk7kQW++ijj7jHhQT3RO/evelLnT59
WkRtPXv2FD7dEoLMDNXcDVQIgnugENyDcAjupUBwbwjBvdKYBPfEqFGj5J19
lbDdY2J79+596623TF3/nEw7yTxt8uTJf/31F+tK7c6DBw/ee+89vXOug4OD
33333R07dihxKE9EcK+L7GodPnyYfFsaNGigeyib/LtLly6ynH2/bds2w+ut
+fn5kd3AVatWXblyRfpbWKznz5/v27cvJSWFTEr1fhlOviRJSUnYkAEo5OHD
h0uWLGnXrl2pUqX0xh9PT8/IyMhp06ZduHCBLPnaa69xjyO4B7A6b775pt4K
3rdvX/6n1KxZ03DyTObVPE/59NNP6ZI8V3bNy8tr1qyZsbm5EWTqJa7JisrI
yPjyyy/l+nGpXUFwrw4E9zwQ3MsLwT3wsPngXtetW7d+//13srfyxx9/ZGVl
5efn6/7V3OB+z549dKQaPny4iHquXr1qeI6MRDx3WbIWCO6BQnAPwiG4lwLB
vSEE90pjFdzfvXvX399f3tkX2bVXswkqyMvLGzp0qNFzhQw5Ojr26NHjxIkT
rKu2F2vXrtU9gd3V1ZWM4WTHRNE3lRjc6zp37tzYsWN1rzJNmjB16lTRV3PN
yMgIDw/X/U4GBgaOGTOG9IkdXi7+zp07q1at6tixo+5lB8i/yRpN9oVZVwdg
s4qKirKyso4cOXL48OE///wzOztbq9XqLoDgHsB60WM+VLHHjRMSEoxOm3ft
2mXqKbq/LiYjCc+Lk90Zoz8MMNS2bVuRbVYMGS25SeDOnTtZ12J9ENyrA8E9
DwT38kJwDzzsKrjnZ25w/0LnJ5Te3t7iNpqy32u1UaNGIsqwKAjugUJwD8Ih
uJcCwb0hBPdKYxXcE5s2bZJ39hUcHKxyE5Sme10pgTQaTVxcHPbdFHXr1i3d
66OSYerzzz+/f/++Cm8tY3DPyc/PJ9O8li1b0pcNCwsz98r5Fy9e7Ny5M30F
FxcXsjn7+eefi4qKpFdo7e7cuUP2NHWPrXl5eX366ae43S0AEwjuAawXXX+p
hQsX8j8lLS3N6IS5Zs2apjbEunO8Yq8URNbuihUrFjs/9/b2trRJ0fnz57na
Zs6cyboW64PgXh0I7nkguJcXgnvggeCeEhHcz507lw5W3333nbj37dWrV7Fz
LeGsaGgyBcE9UAjuQTgE91IguDeE4F5pDIN7YvTo0TLOvhwcHGzpxN6MjAzR
XeHr67ty5UrWLbBNhw4dKl++PNfPFStWXLFihZrfOtmDeyozM7NRo0bcK7u6
ugr8/mi12oULF9J7u1eoUIFUePv2bRkLsxn79+/v2bMnvYR+gwYNzpw5w7oo
ALuD4B7AeoWFhenNeBcsWMD/lIcPH+rd0oiaP3++0ac0bNiQLpObm1tsVSdO
nPD09Cx2cn727FkxbVbMli1buML69evHuhbrg+BeHQjueSC4lxeCe+CB4J4S
EdzfuXPH1dWVe1ZcXJy4983Pz+/QoUOxcy2ByMxQXBmWA8E9UAjuQTgE91Ig
uDeE4F5pbIP7oqKi+Ph4uWZfJYQdXrMW0n9TSma26pwGbj/Wrl3LHf4tXbr0
3Llz1T9Yp1xw/+JlCr9582Y66o4ZM0bvEtN6bt++3a5dO27hihUrLlmyRO8O
aGDo4sWL/fv3d3JyKvHy0gTFnioIAPJCcA9gvSIiIvTmukLuHf/mm28anSd7
enpmZWUZLk9v5lWqVCmBha1fv77YaTmZQ5rXWoV9/fXXXGFvvfUW61qsD4J7
dSC454HgXl4I7oEHgntKRHD/QudaRmRmJXq7mZ+fb2pGZy6NRiOuBsuB4B4o
BPcgHIJ7KRDcG0JwrzS2wT1RWFj4zjvvyDL7Ih48eMCkFUqoX7++9A6pVq3a
hQsXWDfFRixZssTBwYH0avfu3VndplzR4J5DdogmTZrEJct9+/Y1dT2BM2fO
BAcHk2VKliw5ffr0vLw8JYqxVWfPnn3jjTe4zzExMRGXzQdQDYJ7AOvVvHlz
vYnuoEGDin2WqavlE5GRkQUFBboLP336VKPRcH+tXLmy8NpIJfxzcktL1hYu
XMgVZgN3elUfgnt1ILjngeBeXgjugQeCe0pccL9s2TI6Xu3atUv0u+fm5ure
5FE0BwcH0TVYCAT3QCG4B+EQ3EuB4N4QgnulMQ/uiefPn7/99tvSZ1+ELZ1g
Tq/HLhEZjZERSHf9+nWNRuPq6rp8+XKGZagQ3HP2798fGBhI3mXTpk2Gf718
+bKXlxf5a+vWra9evapcGbZt/fr1Pj4+JSRcMg4AzIXgHsB60ev8UBEREcU+
Kz8/38/Pz9Q8edq0aboLnz17lv4pPDxceG25ubk1a9bkmZCTnR2zG6wkOqXU
m08uXboUY1SxENyrA8E9DwT38kJwDzwQ3FPigvtr167RX0WOHj1aSgFkUpeY
mMgz3RLCyclJSg2WAME9UAjuQTgE91IguDeE4F5plhDcv3h5zfzk5GQ6lxPN
loL7atWqSewNys3N7ddff2XdIOum1WqXLVtG1he2ZagW3BM3b96cN2+e0atY
kAG5Xr16pBiy5ipag80jPRkdHT1s2DDWhQDYCwT3ANbL8DZSZIpr6tJAukaN
GmVqkuzk5KQ7Sf7xxx/pn9q1a2dWeSdPnqR3cTVUvXp1sxusJDql9PHxoQ8+
evTIxcXFMo8AWxQE9+pAcM8Dwb28ENwDDwT3lLjgnqhXrx73xDp16kgvIzU1
lbuFpTi4x70KENyrBsE9CIfgXgoE94YQ3CvNQoJ7zvr1693c3ETPvkrYVnAv
1/2bOJ6enidOnGDdJpBKzeAeAMD2ILgHsF5G83ch6/KpU6d4Jslly5bNzs7m
lly6dCl9vFevXuZWOH36dFPv4uTklJ+fb3abFTN//nyuMI1GQ3/88MMPP3AP
sronlLVAcK8OBPc8ENzLC8E98EBwT4kO7mnQ7ODgIMth2z179lStWpVndscD
wb0KENyrBsE9CIfgXgoE94YQ3CvNooJ74vjx43Xr1hU3+yphW8H9zJkzRfeD
UdWqVXv48CHrZoEkigb3RUVF169fP3fu3M2bN7VarbwvDgBgCRDcA1iCw4cP
p5qvc+fOhvPb+Ph4Ic8NDQ3lmSQHBwcvWrSILKb7u9nWrVubWyF5EX9/f1Pv
Mn36dLPbrJjevXvTwubNm6f34IgRI9iWZ+FKlSrFdRT3tQGFREZGcv2cmJjI
uhaLU6lSJboKv/XWW6zL+ZeFCxdyhXl4eLCuRahu3bpxNUdHR7OuRagyZcpw
Nc+ZM4d1LTauRYsWXFcPGDCAdS2M0ZlYp06dzHpiUlISHbLkmmOQoYassC4u
LjwTPF3e3t6Ojo4lXv6WUpYCGNKdr1auXJl1OUakpKRw5QUEBLCuxcYlJCRw
Xd20aVPWtZhEd8QmTJjAuha7tmDBAu6D8PT0ZF2L9WncuDHXe0OGDFHh7caM
GaO7Cfvss89UeFNzkRGeK4+M+axrsU2TJk3ierhKlSqsa/mvxYsXd+3aVfip
9+4vWfLXWJzp06dLv3eAnpYtW7JuloVatGjRRx999OGHH86cOdOSv0VdunSh
n6a/v79cLzt37lzy3SAbbvriDg4Ofn5+ZKvUp08f0idyvRFQS5cunT17Nulb
8q37+OOPyf+yrqh4ZNeYribz589nXQ6AGEFBQdwoN3XqVNXeVPc3VyUQ3IPd
e/r0qfCjrAAAAAAAAAAAAAAAAAAAstu8eTPr4BSAJa1W26NHjxDzlS9f3nCF
cnR0FPh0nhvQc7y8vHSXKV26tIgiCVM/P/bz8xP3gkooW7YsLaxSpUrcgz4+
Ptwj5B9sy7Nw3Cl7JV5eq4F1LbbMw8OD62fydWVdi8XR/fmTt7c363L+hawX
5o7PzNH7X1jR6Ofs7MzVXLlyZda12Dh6goO/vz/rWhjz9fXluoL8w9zn0vOS
SpUqpURtZJZIJlrkw3J3dyebDzKpI6sz2XxUrFhRrwbyXyUKUBMZ9ukmgGwO
WJdjBL0sDBmpWNdi4+iUnnztWddiEt3DIusp61rsmjXO0CyHyjsm9GR2TlBQ
kApvai46F6XHE0BeFSpU4HqYjKKsazGOVEhmX2TS5fESmYaR2ReZMJPH6TJO
Tk6W/DUWjbRR9pPuSU+ybpZFILP3Yo/f0lWDjJas6/0vuqNUQqYJMOkHeuyx
WOTbSFZAjMbikAkSWfuErNFkQCtdurQlHAomQ5DAkyJLliwZGBjIul6A4tGv
tO4xHKXpXs+W2L17N+vgFMAq3bx50+g26NixY0Ke/uOPPxa7OdPdTC9dulRc
nYcPHzb64snJyeJeUAnbtm2jhZ0+fZp7kFTIPTJ48GC25Vk43ONeHbjHPQ/c
415euMc98MA97inR97h/oXPDMtnv+SjcK6+8UgL3uFcF7nGvGtzjHoTDPe6l
wD3uDeEe90qztHvci0N/fmBL97jn6N3SQjrMmohff/21ZMmSZvUbmQxv376d
deEy3+O+qKgoIiLC3K+Qs7Mz2VqdPXtWlhbZicePH4eFhZnVz35+fmR3+OnT
p6xq/v7777kdW+HIduTnn39mVTCAELjHPYBVIxtHw63PRx99JPDpjRo1Er5R
k3J8nmwQDV+we/fuol9Qdrt376aFHTlyhHvw/fff5x7p1KkT2/IsHIJ7dSC4
54HgXl4I7oEHgntKSnAfHx/PPdfBweHJkydKlFcsBPeqQXCvGgT3IByCeykQ
3BtCcK80BPcW7tmzZzRlkIVGo2EYBVoC8iXx9/cX13s9evS4desWw+LlDe43
b94s+ovk5OQ0cuRI21vjFNK3b19x/RwaGsrk5NycnBwvLy8RBZMRhuwv4IsB
FgvBPYBVa9WqleGmh6zXAp++b98+4RezWrFiheg6Fy9ebPiCFrW3RfcBid9+
+417cPz48eZ2qX1CcK8OBPc8ENzLC8E98EBwT0kJ7keOHElHLXqpH5UhuFcN
gnvVILgH4RDcS4Hg3hCCe6UhuLd82dnZ9C4ksiAvyLpNLC1cuFBK7/n5+a1b
t45V8fIG92Rex9/Y5s2bp6en//TTT6mpqTExMYbnX/v7+2PvtVg3btygt30R
wcHBYdiwYY8fP1azZrInLrpgIjAwcOvWrWoWDCAQgnsAqzZq1CjDjY5Go7l6
9arAV6AnfBVLypXtST2GLxgUFCT6BWV36dIlWtiOHTu4BydOnMg9Ur16dbbl
WTgE9+pAcM8Dwb28ENwDDwT3lJTgfvLkyXTU+v7775Uor1gI7lWD4F41CO5B
OAT3UiC4N4TgXmkI7q3C1atXg4KCDA8AinP58mXWDWKpc+fO0vtw9OjRRUVF
6hcvb3DfsmVLnjaGhIToXZzh4sWLHTp0MFwyJiYmJydHYjE2LC0tTfpXLiws
7J9//lGt5qioKIkFazSaKVOmaLVa1WoGEALBPYBVW7VqldGNzvz58wW+Apmx
eHh4CNmQeXp6njp1SnSp5cqV03tBV1dX0a8mu7t379LCtmzZwj04bdo07pHA
wEC25Vk4BPfqQHDPA8G9vBDcAw8E95SU4H7u3Ll01FqwYIES5RULwb1qENyr
BsE9CIfgXgoE94YQ3CsNwb21uHDhQkBAQAk5XLp0iXVrWJLr1gNvv/12bm6u
ysXLG9xHRkbyNNDoUQutVvvhhx8aXma2TJkymZmZEuuxVZ999pksXzky0JER
W52aq1WrJkvN8fHx+fn56tQMIASCewCrlpWVZXRz8/rrrwt/kdmzZwvcipUu
XZqG2uYyOuHMy8sT92qyKygooFXRa0nNnDmTe8TT05NteRYOwb06ENzzQHAv
LwT3wAPBPSUluP/qq6/oqDVhwgQlyisWgnvVILhXDYJ7EA7BvRQI7g0huFca
gnsrcuHCBbpGSGHnwb3uUQ6JIiIi7ty5o2bx8gb3Rk+fp3hurT5p0iTD5Z2c
nBYtWiSxJJtEDwRJ5+HhkZGRoULNISEhctUcFRX16NEjFWoGEALBPYC1CwwM
NNzWODo63rx5U+ArFBQUkCmc8A3Z4MGDnzx5Ym6db7zxhuFLXb9+3dzXUU6p
UqW4qr788kvukTlz5tD+xDVzeCC4VweCex4I7uWF4B54ILinpAT3K1asoKNW
QkKCEuUVC8G9ahDcqwbBPQiH4F4KBPeGENwrDcG9dXn48GF0dLThYUCz2Hlw
/+abb0rsQF0RERFq3nxc3uD+3Xff5WnauXPnTD1Rq9Wausz+nDlzJFZle8gO
voxfOTc3t3379ildc5MmTWSsuVWrVjiyDRYCwT2AtYuNjTW6rTHrsqtnzpxx
dXUVviErV67cwoULhV9DJi8vj8zTDF/HooJ7f39/rqrPP/+ce0T3GkHqX1fK
iiC4VweCex4I7uWF4B54ILin5LpUfpcuXZQor1gI7lWD4F41CO5BOAT3UiC4
N4TgXmkI7q1OUVER2Td3cHAwPBgokJ0H90bPFpeia9euqhUvb3DPf+91/iMA
J0+eNLxgPmfVqlUSC7Mxf/75p7xfuTJlymRnZyta8/Dhw+WteeDAgYoWDCAQ
gnsAa7d48WKjG5pGjRqZ9Tq6cyqBgoODv/7662Kz2ufPn/fq1cvoK4g4c185
QUFBXFUpKSncIwsXLqSl3rp1i215lgzBvToQ3PNAcC8vBPfAA8E9JSW4Hz16
NB21WrZsqUR5xUJwrxoE96pBcA/CIbiXAsG9IQT3SkNwb6X2799fu3Zto4cE
TaHXw7Tz4P7QoUNm9ZsQqamp6hQvb3D/4MED+q0wlJWVxf/0yMhIo08kr3n2
7FmJtdkYo6fdSREVFaXoNWx37dolb8EE2aFQrmAAgRDcA1g7U7e5Jy5cuCD8
dQoLCxs1aiRic1a6dOmRI0eePHnS6MuSx01dh9/Srj9Pd7QnTpzIPUImtLRa
pX8iaNUQ3KsDwT0PBPfyQnAPPBDcU1KC+1atWtFRq0mTJkqUVywE96pBcK8a
BPcgHIJ7KRDcG0JwrzQE99arsLBw+fLl1atXN3psUJe3t/enn35Kg347D+61
Wm3dunWL7TSzlC5dWp0hVN7gnhg4cKCpRhUbLU2bNs3Uc2NiYqTXZktmzZol
71eOWL9+vXIFFxQUBAcHy1swGajt/Lq7ZPA5duwYGY0TEhI6duzYpk2bdu3a
9erVa9KkSTt27MjLy2NdoF1AcA9gA6pVq2Z0Q2Nu4HL27FmzLpivp379+mPH
jt2wYcPevXszMzMXLVpk6kZCHC8vL2X6Q5D8/Pznz5/rPhIeHs4VNnLkSO4R
smdBq/3rr79YlGkdENyrA8E9DwT38kJwDzwQ3FOig3syCfH09KSjVlhYmEIV
8kNwrxoE96pBcA/CIbiXAsG9IQT3SkNwb+20Wm1mZubIkSPJzruLiwtdo319
fRs1apSYmLh582YuD6pTpw73JzsP7olNmzbpH0uVTJ17u8se3JMvg6lD1l98
8QX/c1euXMnTIcePH5dens149OiRn5+fvF+5+vXrK1rzl19+KW/BxLJlyxSt
2WKRgXr16tX8v7MqVapUx44d09LSioqKWNdryxDcA9iAd9991+hASqZG5p7S
Pnv2bLm2ccUKCQlRqEOE6N69u6enZ5cuXcj2/fbt2+SRZs2acYXR29msWrWK
Vnv69GmG1Vo4BPfqQHDPA8G9vBDcAw8E95To4D4jI0N3RlSjRg2FKuSH4F41
CO5Vg+AehENwLwWCe0MI7pWG4N7GPH78+OHDh0b/hOBeV5s2bYwdUhWvXr16
KpQte3BPfPDBB0Zb1L9/f/4nmrrJLMeKDnqoQ/csNrmcOXNGuYKLiopMXexX
NDJdV65gi/XgwYMOHToI76Xq1auvWLFC77xIkAuCewAbsH37dlND6IEDB8x6
qcLCwsaNG4vbqJmrbdu2CnVIsZ49e1ayZElaiZOTEymmcuXK3P/GxcVxi61e
vZougwNrPBDcqwPBPQ8E9/JCcA88ENxTooP7xMRE3RlRaGioQhXyQ3CvGgT3
qkFwD8IhuJcCwb0hBPdKQ3BvPxDc67p8+bKvr28J+Tg4ODx48EDpspUI7vPz
8+m1UnX5+PjwH418//33eTqkdevWspRnM7RabXR0tIxfOSI1NVXRms+cOePu
7i5jwa6urvaWR5PPPSYmRkRfhYaG7t69m3X5NgjBPYANIPMTLy8vo4NnQkKC
ua8m8YL5wo0YMUKJ3hDiwoULPIW1adOGW+zrr7+mD2ZmZrKq1vIhuFcHgnse
CO7lheAeeCC4p8QF948ePfLw8NCdeFSvXl25InkguFcNgnvVILgH4RDcS4Hg
3hCCe6UhuLcfCO71/PDDD05OTiYOYYqh6OnPHCWCe+Kvv/4yeiH3FStW8Dyr
efPmPL2B+bkhsp01dVtecSZOnKh0zevXr3dwcJCx5pycHKVrtih6VwU0i0aj
SUxMfPToEetG2BQE9wC2oXfv3kZHTg8PDxHD5qhRo0SP1cKtWbNGia4QQm/H
31BCQsLNmzfnz59PH1HniISVQnCvDgT3PBDcywvBPfBAcE+JC+7nzJmjN+tQ
53qVhhDcqwbBvWoQ3INwCO6lQHBvCMG90hDc2w8E94bWrVvn6Oho9ACmCOZe
nVUEhYJ7ghTv5uam16Ly5cs/fvzY6PJkXeP/2YOXl5eM5dkMsi0LCgqS6ysX
GxurQs1Lly7VaDRy1ZyVlaVCzZaD7D1J7DHyhTlx4gTrdtgOBPcAtmHLli2m
hs0vvvjC3FebOHGixLG6WGRLmp2drURXCPHDDz8IKdLFxYX++6uvvmJVreVD
cK8OBPc8ENzLC8E98EBwT4kI7h88eEA3mlTjxo0VrdMUBPeqQXCvGgT3IByC
eykQ3BtCcK80BPf2A8G9UV9//bVcJxTv3LlT6WqVC+5fvNwoGF4X/e233y4q
KjJc+Msvv+TvDWdnZ3nLsxlXr16ld5WVKCoqSp2aFyxYIEvBxKlTp9Sp2UK0
aNFCeqeRFXPbtm2sm2IjENwD2IanT5+aupkLWc3NfbXBgwdLH6v5sT2sunnz
ZnMLnjNnDsOCLRyCe3UguOdhycF9bm4uV5ijo2N4eHijRo3atGnToUOH2NjY
Pn36JCYmvvfee8nJyTNnzkxJSUlNTSX7leQj3rJlS0ZGxp49e44ePUomaVlZ
Wbdu3bp3755Wq1WhZgT3wAPBPSUiuJ8wYYLhHKN9+/aK1mkKgnvVILhXDYJ7
EA7BvRQI7g0huFcagnv7geDelGXLlslyzXwVshhFg3ti//79ZcqU0WtXXFzc
w4cPdRfLy8urXr06f2+4uLjIXp7NOH/+vCzZfffu3VWr+dNPP5XlJy6k7arV
bAlq164tvdMIMkYtXbqUdWtsAYJ7AJtB5iemxszjx4+b9VKdO3emz/X19ZVl
3NZj1kVlZbdp0yZzC3Zzc0tJSSksLGRYtsVCcK8OBPc8LDm4v3v3rizDJqXR
aLy9vcleakhISI0aNcLDw5s1a9amTRsydMfGxg4cODAxMTE5OXnChAlk1CL7
LKmpqStXriRfm23btmVkZBw8ePDo0aMXL168dOnSvXv3jN5OBcE98EBwT5kb
3F+7dq1UqVKGKzVZZ5Uu1SgE96pBcK8aBPcgHIJ7KRDcG0JwrzQE9/YDwT2P
n376yfD6XeY6fPiw0nUqHdwTly9frlevnl7TKlasSPbRTp06lZubm52drXt8
2xR3d3clyrMZt27donNX0UaNGqVmzenp6Z6enhJrtrfgPjIyUmKP6frss89Y
N8jqIbgHsBlpaWmmRsukpCSzXkp3rH7//fdTUlJkvEcM4erqyjZYERHccyIi
InC7FkMI7tWB4J6HXQX3umQcnF1cXHx8fAICAkJCQsqWLcs9GBoaGhsbGx8f
n5iYOGLEiOTk5ClTppCNwrx58+jvAcg+EXdlgNOnT2dlZeXk5Ny7d0/9nzkh
uFcNgnvK3OC+a9euRtc+8jpKl2oUgnvVILhXDYJ7EA7BvRQI7g0huFcagnv7
geCeHxlkdA+AiGAbwf2Ll5c3TEhIkNIVROnSpRUqz2YUFBQkJydL6eTRo0er
XPP58+dr1KghpWZ7C+4HDRokpbv0aDSa9evXs26TdUNwD2Aznjx54ubmZnS0
9PLyIpMZ4S9F448S//cTqbS0NFMvLsLgwYMV6wZBtm3bJrp4JyenKVOmGL1x
kt1CcK8OBPc87Da4t3Curq7cjwFq1qwZHh7etGnTNm3aREdHm/oxAP0lAL1N
gO6PAfhvE4DgXjUI7imzgvvly5ebWlPWrl2rQrWGENyrBsG9ahDcg3AI7qVA
cG8Iwb3SENzbDwT3xXr8+PGwYcPMvR44/dm/zQT3nC1btpQvX96srtAVEBCg
aHk2Y926dYa3JxBI/eCeIMNs//79zT3bha5W9hbcr1mzRtyHa4q7u/u5c+dY
N8uKIbgHsARk25csh9DQUFOjZYcOHYS/Dncgl9OlSxfuQbKxk36dGaJkyZLv
vvuuLO0VrVevXhJbUaVKFS5vAoJsi0u8nNuMGzeOdS22LCwsjPv6de3alXUt
FoeeIU40adKEdTn/MmrUKIkDDlAuLi5kI+Lt7e3r61uuXLkKFSoEBQVVrVq1
Ro0adMvFfBNj8+rXr891dXR0NOtaGKPpW4sWLfiXTEpKcnV1NfXFHjhwoDoF
63F0dCTvTv7L5N1l1LhxY9qZZGRgXY4RQ4cO5corXbo061psHNnl4bra39+/
saWiu1R16tRhXYtdi4iI4D4IZ2dn1rVYH3roPiYmRoVV+5133tHdbo4cOVKF
NzUX/TU7GfNZ12Kb6O/YyS4A61rE8/Dw4FpBdhJZ12K56AgzZMgQ1rVYtPj4
+IoVKwrclfby8iKzI+7fffr0Ubq2qKgo+tY+Pj5Kv93o0aPJZt3JyUlgb+hy
d3dXujybMWLEiIYNG3J7kcUii9HTK1577TVWNffs2TMwMFDgl8H3Je7fCQkJ
rGpmgqxEZEosYg3iUblyZdbNsmIBAQFcNw4aNEi1N01KStL9BBHcg53Lzc01
90eSAAAAAAAAAAAAAAAAAAAy2rBhA+vgFICxDz/8sI0coqKieH4D0KRJEyEv
0rRpU91nkdfUW6BOnTouLi7i1vfQ0FBZWspp3bp1REREq1atRDy3atWq0u8N
HRISImNzAEA0euYCERwczLqcfyFjlMShBszSuHFj1p+5jaNX+KxVqxbrWhgj
cwmuK6pUqcKzGP+VG318fFQrWA83aST/ZVWAXIKCgmh/enp6si7HiGbNmnHl
lSpVinUtNq5SpUpKbFkAwJTKlSursGqHh4frvunrr7+uwpuai4zwXHlkzGdd
i21q1KgR18Pe3t6saxGPHkwzPNQGFHdRxxIvb4vAuharwR0gJTto1apV4y5J
R/5NHmnZsiVdhux3cB1LHle6HlIGHbTd3NyUfjtdrVq1qlu3bkBAgKlj1xqN
pnTp0g0bNuT+lyymZnm2hKyhpKtDQ0PJV478t2bNmg0aNGjRogVdgN5EhkzR
GdZJke/Ga6+9Ruqkq0nt2rX1kgV6dDEyMpJhqUyQ+ZXsJ937+/uzbpa1oldp
E5joyaJ58+a6H9+BAwdYp6YAtqNbt26mhspRo0YJeYWDBw/Sp/j6+hpd5sGD
B2PGjKF7pkKQifeXX34pa1tfLF68uMTLC8yKe/qePXt074stwrBhw+RtEQCI
Y8n3uH/69KmUcQbMderUKdafuY3DPe4pIfe4X7hwIf83Njk5Wc2adeEe96rB
Pe5Vg9vTAKhs3LhxKqzauMc9vMA97u0J7nGvkJYtW3Ida2P3uOdBBuRdu3Yt
X7589uzZKSkpixYt+u677+7cuUP+9OjRI6483ONeOV988QXXyUzucS8OPbpo
b/e456xatUreiaKXl1dhYSHrZlkl3OMewMakp6ebGip9fX3z8vLMeoXw8HCe
JW/dujVr1qwaNWrwD9GvvPLKO++8o8R8u2vXriVenl0r+hWKioq++uor4feE
0jNkyBAZmwMAoiG4BwrBvdIQ3FPFBvc7d+4s9ifrmzdvVrlsCsG9ahDcqwbB
PYDKENxTCO6VhuDefiC4V4gdBvc8ENyrAMG9Nerfv7+8c8UrV66wbpNVQnAP
YGOeP3/u7+9vaqhcu3Ztsa+wbNkyuny3bt2EvOnZs2fnzZvXu3dvsnULDAz0
8fGpVKlSWFhYnz59lixZcv36dcnNMo67RK2jo+OzZ8+kvE5eXt6cOXO8vb3N
3fQkJibK1RYAkALBPVDKbXSAg+Ce4g/uDx8+TK/zaQqZw9y9e1f9yjkI7lWD
4F41CxYskH+7AgCmLV26VIVVG8E9vEBwb08Q3CsEwb0uBPcqQHBvjZ49e9au
XTsZ54onTpxg3SarhOAewPbwnGkSFRVV7NNnzJhBlx87dqwKBYtGb88ky67x
mjVrzN30ILgHsBCWHNwXFRUFBwebO7wY0mg00l/EHty4cYP1Z27jENxTPMH9
hQsXeH5ISUVGRjKpnIPgXjUI7lWzYcMGmTcqAMBr06ZNKqzaCO7hBYJ7e4Lg
XiEI7nUhuFcBgnsr9fTpUzpcSJeZmcm6QVYJwT2A7fn9999NDZUajabY7c6I
ESPo8p999pk6NYtDLz97/Phx6a924cIF7tVKly5dsmRJIZuepKQk6e8LANJZ
cnBPFBQU3Lt37/LlyxcvXjx69OjBgwczMjK2b9+elpa2cuXK1NTUuXPnpqSk
TJgwITk5OTExcdCgQbGxsZ07d27Tpk2zZs3Cw8NfffXVkJCQMmXK+Pj4ODg4
CJsdF0PzkiwvZVEQ3CsNwT1lKrgnM4ry5csL+bpOmzaNVfEvENyrCMG9ahDc
A6gMwT2F4F5pCO7tB4J7hSC414XgXgUI7q3X48ePIyMjZZkrHjhwgHVrrBKC
ewCbVLduXVOj5ahRo/ifGxcXRxdev369OgWLkJ+fT+vMyMigj5Mty969e0W8
4PXr17lXmzFjxsOHD6dMmVLsFW6HDx8uX4MAQDwLD+6V8PTp03v37uXk5GRl
ZZ0+ffro0aN79uwhg2F6ejr3e4B58+alpKSQoSw5OXnEiBGJiYnx8fGxsbHR
0dFt2rRp2rRpeHh4zZo1yV6qj48Pl9/ZBgT3SkNwTxkN7i9fvly5cmWBX9eD
Bw8yrB/BvWoQ3KsGwT2AyhDcUwjulYbg3n4guFcIgntdCO5VgODequXl5fXu
3Vv6XPHo0aOsm2KVENwD2KQ5c+aYGi09PDwePnzI89yoqCi68G+//aZazeZ6
8uQJrVP3BwYffPCBs7Pz5cuXzX3Bx48fc69GppfcI9evX4+Pj+fZ9IwfP16u
5gCAFHYY3MsuPz+f/hLg5MmTZGqdmZmZkZGxceNGMsampqYuXLgwJSVl2rRp
ycnJw4cPT0xMfOedd2JjY9u2bdu6devw8PCwsLCQkJAKFSr4+Pi4urqaMY/n
Ze5lARDcKw3BPWUY3F+5ciUoKEjgd5WsKYWFhQzrR3CvGgT3qkFwD6AyBPcU
gnulIbi3HwjuFYLgXheCexUguLd2Wq12xowZEi/7ieBeHAT3ADbpxo0bTk5O
pgbMhQsX8jy3Zs2adMkLFy6oVrO5CgsLaZ2LFi2ij9evX588MmfOHHNf8Pnz
59yrTZw4Uffxt956y1RP0ogfANhCcG+Znjx5cu/evStXrmRlZR07duzw4cMZ
GRk//PBDWlra6tWrU1NTP/vss5SUFDLqJicnDxkyJCEhITY2tkuXLm3atGnR
ogV3TYCQkJCyZct6e3s7OjoWu0eg0WhwEExpCO4pveD+0qVLFStWLPZbSsXF
xbGtH8G9ahDcqyY9PV34OggA0m3fvl2FVRvBPbxAcG9PENwrBMG9LgT3KkBw
bxvIHpafn5/ouSKCe3EQ3APYqjfffNPUgFmtWjWtVmvqiaVLl6ZLPn78WM2a
zUXvcf/RRx/RBz08PMgj3bt3538umaHduXNH9xEa3I8cOVL38Z49e5rqyeXL
l8vYHAAQDcG9/bh//z4ZvbOyss6dO0fm//v27cvIyNi6dWtaWhoZk3fu3Mm6
QNuH4J7SDe5v3bpF5leCd17/Y9WqVWzrR3CvGgT3qikoKFizZk0qAKiCrG7q
XDoGwT28QHBvTxDcKwTBvS4E9ypAcG8zbt261adPH7NOvS9Tpgz3DwT34iC4
B7BV69ev5xk8d+zYYfRZz58/pxcl9vDwULlmc3EZfQmdc+Tp9fOLPWw7ZcoU
srlp0aLF5s2bi4qKXry8TDT33AEDBugumZiYyD3es2dPvZ9D/P777wo1DQDM
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
A0/927O33XZbNC25uH/kkUfixV0Qhr2Q4h6gpRT3AOwTFPdQW1u7du3aqNyP
7sw/adKkqNzv27dvaWlpUVFRSy+OkY7i4uLozvxlZWVRuV9RUVFZWRmV+9Gd
+UP/1DSkuE+muM8CxX0uU9ynSXEPuezBBx9McRZ61113hQ64e4MGDUpE7d69
++uvv37ttdd26NBht2fXO3bsSLHChQsXRtOSb5X/97//fS8/4YQcp7gHaCnF
PQD7BMU9NEdtbW10Z/6lS5dG5X5FRcWoUaOicj+6M3/qy2XNudU8sd0+XUVF
RVG5n3j+hw4dGpX7iddl4cKFcblfX1+ftZ8QxX0yxX0WKO5zmeI+TYp7yGXb
tm074IADmjrDTJxYhg64e8OHD09E7dWrV/THxOFl5MiRKU6ei4uLU6/w2Wef
jWaeeeaZ8eDq1avjNXTv3n0P7g/QKop7gJZS3AOwT1DcQ6Z89NFHUblfXV29
cOHCqNwfN27c0KFD43I/xbdq0lLN+V2IkpKSqNwvLy8fNWpUVO5Hd+Zfvnx5
4vVKfePQ5lPcJ1PcZ4HiPpcp7tOkuIccN378+BSnl2vWrAkdcDdGjx6diLr/
/vsnD86dO7epnUr8GyT1CuMD1DnnnBMPrl+/Pl5Du3btUn9mH8g+xT1ASynu
AdgnKO4hyxLvsqjcr6qqqqysjMr96M78J554Ys+ePQsKCpq67MaeUFxcXFpa
GpX70Z35p0+fHpX7iZdp7dq127Zt2+3LqrhPprjPAsV9LlPcp0lxDzlu1apV
Kc4Mb7jhhtABd2PMmDGf+f+3n0oeTJy1NrVHffr0Sb3CHTt2lJSUJGZ+61vf
igc3b96cvJKtW7fukZ0BWktxD9BSinsA9gmKe9gL1dbWrl27Nir3ozvzT5o0
KSr3+/btW1paGp1qkjXFxcXRnfnLysqicr+ioqKysjIq92tqar7+9a9HMxX3
OxX3WaG4z2WK+zQp7iG4HTt2DB48uDScoqKips76CgsLAwZroHfv3ok8nTp1
SpxTxYNdunSJoh5++OHx4CGHHBIN5ufnf/azn03eo44dO+52Q9EiiTUnDyav
5LDDDsvgfgHpSz6OdevWLXQcgH1A9FGpxH9DB0lX4rAf/xWQ+OsgdBwAMqxn
z57J/x7v3bt36ERAsyTerYceeuhBBx3Uo0ePAw44oHv37l27du3UqVOHDh0S
52yJs9Dm3EmejEu+rLqHJF7reHN71bXlWOKHM4rXrl270FnarPj7eRNv/NBZ
miu+upg4doXOsm8rLi6OnsmDDz44dJZ9UpAfxV69eiX/ZfHUU0+FLk4hpNra
2vhQBgAAAAAAAJBl+fn5q1atCl2cQmArVqyoDOfWW29NvBObepOeccYZAbMl
q6ioaJCtY8eOnTt3jv5/2rRp8cyZM2dGg0VFRdHI3LlzJ0+ePHLkyDvuuGO3
G7rzzjvLy8sbzEz+ZdGpU6dmdtcAAAAAgMZuu+22ioqKH/3oR2PHjr3ooovK
y8v79+9/yimnHHvssYcddljXrl1TXNikgZEjR4Z+PcO7/fbbo2cj8cMTOkub
lXirRk9yWVlZ6CzNFX/i+Cc/+UnoLPu2o446Knomr7vuutBZ9knxXUFC9VBP
P/106MoU2NmnT5+mTuf222+/bdu2hQ74qVWrVqU47ayuro5nxl9Jn8Gvbf3S
l74Ub+v555/P1GoBAAAAgHTU1tauXbu2urq6qqrqvvvumz59+rhx44YPH15e
Xt63b9/S0tL27du3ouZue+69997Qr1V4vuM+C3zHfS7zHfdpCvId98DeJvm7
QRv7y1/+Ejrgp1avXp0i5Fe/+tX4OFZXVxcN5uXlZWrrJ598crytZ555JlOr
BQAAAAD2tNra2rfffnv58uVRuT9nzpyKiopRo0ZF5X6fPn26du2auvXOy8tL
PWHvt2DBgtCvQ3iK+yxQ3OcyxX2aFPfApk2bUp/RjRkzJnTGT7311lupcxYW
Fo4bN+7DDz9MTC4uLo4GM7X1s846K96QW4UAAAAAQBsTlfs1NTXV1dULFy6M
yv1x48YNHTo0Kvd79OixT9+Z/x//+Efo5zg8xX0WKO5zmeI+TYp74IUXXkh9
RnfooYeGzvipDz74oDnnn6Wlpffcc0+nTp2iP2Zq64MGDYo38eSTT2ZqtQAA
AADAPmTTpk1RuV9VVVVZWRmV+8OHDy8rK+vTp0/Pnj0LCgqa1aNnneJ+p+I+
KxT3uUxxnybFPfCHP/whPnk77rjjdnlSt3r16tAxd37yySetOB3N1NZHjBgR
r/Pxxx/P1GoBAAAAgDamtrZ27dq1Ubl/3333TZ8+PSr3ozvzl5aWtm/fvhWX
OtOkuN+puM8KxX0uU9ynSXEP3HLLLfHJ2yOPPNK9e/fGJ3WzZ88OHfNTJSUl
LT0drampycimx48fn/wsZWSdAAAAAEBuiu7Mv3z58qjcj+7MP2rUqKjc79On
T9euXVNf+czLy2vRlVLF/U7FfVYo7nOZ4j5Nintg7Nix8cnb+++/n/zR8lhZ
WVnomJ/68pe/3KJz0UjiRDf9b6WfNWtWvMIlS5ZkZHcAAAAAAJry4Ycfvvnm
m8uWLVu8ePG99957yy23TJw48ZJLLikvLz/llFOOOOKIzp07p740mlzuK+53
Ku6zQnGfyxT3aVLcAwMGDIiOA127dk38ccGCBY1P8IqKirZs2RI66c5zzz23
pa19bOjQoe+//36rN/3AAw/Eq6qqqsrgTgEAAAAAtM7HH3/8n//8Z+XKlY8+
+uj8+fPnzJkzZcqU0aNHX3DBBaeddtoXv/jF/fff/zOf+UzHjh0T00KHDU9x
nwWK+1ymuE+T4h44+uijo+PAV77ylcQf//vf/xYUFDQuvh966KHQSXdWVFS0
urhPOPzww//5z3+2btPPPvtsvJ5FixZldr8AAAAAAPaQurq62tra0Cn2Cor7
LFDc5zLFfZoU95DjduzY0aFDh+g4MGTIkGiwX79+jVvvqVOnho268/+2562T
OB9bv359Kzb99ttvxyt59NFHM75rAAAAAADsUYr7LFDc5zLFfZoU95Dj3nnn
nbiPnjhxYjT405/+tHHlPXDgwLBRI1dddVWa3f23v/3t1m26R48e0RqeffbZ
zO4UAAAAAAB7muI+CxT3uUxxnybFPeS4Z555Jm60f/GLX0SDK1asaNx3H3DA
AWGjxn7/+99HX8zUOsXFxXV1da3Y7qBBg6I1tO4z+wAAAAAABKS4z4Kbb745
epJ79epVto/o3LlzlPnUU08NnWXfVlJSEj2TJ510Uugs+6QuXbpET+DKlStD
v5WBAObPnx832lVVVdFgfX19t27dGlfe7777bti0sU2bNo0bN66goKB13f2a
NWtasdE5c+Ykli0qKmpd7w8AAAAAQECK+yy4+OKLW3fdHogtXrw49FsZCODG
G2+MjwMvvPBCPF5eXt74QPG3v/0tYNTGVq1addppp2XtiLdhw4bi4uLEFjO+
IwAAAAAA7GmK+yxQ3EP6FPeQmy699NL4OLBhw4Z4fNasWY0PFHPnzg0YdZfq
6urib59pvltvvbV1m7v77rvvuOOOzO4CAAAAAABZoLjPAsU9pE9xD7mpf//+
0UGgsLCwvr4+Hn/mmWcaHyimTJkSMGpTvve977X0iHf99deHTg0AAAAAQFYp
7rNgxIgR6fSVQMKSJUtCv5WBAHr37h0dBA455JDk8cQJTF5eXoMDxaWXXhoq
ZwpjxoyJ4iUCL1q0aPTo0d26dUt9xLvyyitDpwYAAAAAIKsU91kwc+bMTPaX
kJNqampCv5WBbNu+fXtBQUF0EDj55JMbPHrEEUc0OFCce+65QXKm9sMf/jBO
+MEHHyRGNm/e3Ldv3xRHvIsvvjh0agAAAAAAskpxnwV33313RgtMyEUvv/xy
6LcykG3r1q2LDwLf/OY3GzyaGGlwoDj99NNDxNyNqVOnxgnfeOONaHDatGkp
jnhDhgwJmxkAAAAAgCxT3GeB4h7Sp7iHHPTEE0/EB4GRI0c2ePQHP/hBgwPF
SSedFCRnarfcckuccNWqVdHgr3/96+RdO+2005J3ZNiwYWEzAwAAAACQZYr7
LFDcQ/oU95CD5s2bFx8EJkyY0ODRyZMnNzhQnHDCCUFypjZ37tw44YoVK6LB
Rx55JB4cO3ZsYuSvf/3rkCFDOnfunBiZMmVK0MgAAAAAAGRbXV1d9BWxZ511
VugsbZbiHtKnuIccdP3118cHgRtvvLHBoz/+8Y8bHCj69esXJGdq8+fPjxOu
XLkyGnzppZfiwQbnYOvXr//kk09CJAUAAAAAIKTt27dv2rSprq4udJA2a9Gi
RXu604S2raCg4J133gn9VoY24vXXX//d7343e/bsGTNmzJ8/P755+17ou9/9
bnwcmDVrVoNHL7roogbHioEDBwbJmVryacBLL70UDW7YsCEePOKII8ImBAAA
AACAHLFq1arlQGutW7cu9JsYmqt9+/bN/I2Ut99+O2uriixevPiUU05pvPgx
xxxz//33Z2LvM+zUU0+NQ95xxx3JD23cuLFDhw4NdmTv/Gr4xx9/PE5YU1MT
DdbW1saDhYWF9fX1YUMCAAAAAAAAtBl7Z3G/ffv2K664Ii8vLzE58d/zzjtv
2rRpM2bMGDZsWEFBQdx6b926NXPPRAYcfPDB8T5WVlYmPzR+/PjGz8Mll1wS
KmoKy5YtixO+8sor8XhhYWE8/sEHHwRMCAAAAAAAANCGHXTQQXE5u23btlCr
Gjt2bLRgt27dqqurkx9atWpVvOYLLrhg7/nod2If8/Pz413+5S9/GT+0bNmy
du3aNS7uJ06cGDBwU1577bVdFvf77bdfPL5mzZqACQEAAAAAAADasL2huP/V
r34VL/jYY481nrBy5cr4c/c33nhjOiEzaM2aNcml/IwZM6Lxf/3rX4cddljj
1j5h3rx5YTPv0tatW3dZ3JeWlsbjzz//fMCEAAAAAAAAAG1Y8OJ+69atPXv2
jJY6//zzm5p25ZVXRnM6duy4cePGdHJmyhNPPJFcyg8ZMmTz5s3z588/8MAD
d9naJzz11FOhU+9aSUlJ4+L++OOPj5MvXbo0YDwAAAAAAACANix4cT9z5sx4
qYcffripaS+99FI8bfz48enkzJR77rmnqYK+KXvJrxw0duyxx0YJX3755Xjw
9NNPj5MvWLAgYDwAAAAAAACANix4cX/MMcdEi3Tv3n379u0pZn7hC1+IZh54
4IF1dXXpRM2IioqKFrX23bp1Cx25SQMHDoxCvvrqq/HgeeedF4efO3duwHgA
AAAAAAAAbVjY4v7111+PFznnnHNSTx4xYkQ8eW+453xynuYoLy8PHblJ48eP
j0KuW7cuHrzooovi8LNmzQoYDwAAAAAAAKANC1vc//znP48Xue6661JPvvPO
O+PJ119/fTpRM+KMM85oUXE/Z86c0JGbdP/990cht2zZEg9eccUVcfipU6cG
jAcAAAAAAADQhoUt7i+//PJ4kXnz5qWevGTJknjy+eefn07UjDj88MNbVNyv
Xr06dOQmbdy4MT8//+CDD04evPbaa+PwEydODJUNAAAAAAAAoG0LW9z369cv
XuThhx9OPXnlypXx5COPPDKdqOmrq6srLCxsfmufeHJ27NgRNnNqkyZNanBP
gGnTpsX5x44dGyoYAAAAAAAAQNsWtrjv3bt3vMiKFStST964cWM8uX379ulE
Td+///3v5rf2Cddcc03YwK2Q/N0El1xySeg4AAAAAAAAAG1T2OK+e/fu8SKv
vvpq6smbN29OrsI//vjjdNKmqbq6uvmtfV5e3muvvRYwbevcd9998S585zvf
CR0HAAAAAAAAoG0KW9y3b98+XuTNN99MPTmxzuQ2/L333ksnbZruv//+5hf3
/fv3Dxi11f74xz/GuzBs2LDQcQAAAAAAAADapoDFfV1dXXK7vX79+t0ukpeX
F89/66230kmbpptvvrn5xf2DDz4YMGqrLV26NN6FwYMHh44DAAAAAAAA0Db5
xH3rXHbZZc1s7U844YT6+vqAUVvtueeei/fi/PPPDx0HAAAAAAAAoG3yHfet
c/bZZzezuH/66acD5kzHK6+8Eu9FeXl56DgAAAAAAAAAbVPY4r53797xIitW
rEg9eePGjfHk9u3bpxM1fUcffXRzWvsLL7wwbM50JP+mxIABA0LHAQAAAAAA
AGibwhb3p59+erzIww8/nHryypUr48lHHXVUOlHT16VLl9229j179tywYUPY
nGmKd/Pss88OnQUAAAAAAACgbQpb3F9xxRXxIvPmzUs9ecmSJfHkCy64IJ2o
adqyZctuW/uCgoKnnnoqYMiMOOaYY6LdOfPMM0NnAQAAAAAAAGibwhb3d911
V7zI5MmTU0/+2c9+Fk+eMmVKOlHT9Oqrr+62uL/tttsCJsyUAQMGRLszcODA
0FkAAAAAAAAA2qawxf0bb7wRL3LOOeeknjxixIh48tNPP51O1DQ98cQTqVv7
iRMnBoyXQYkdifZo2LBhobMAAAAAAAAAtAVjxoxZtmxZ8kiri/tMreq4446L
FikpKfnkk09SzDzyyCOjmT169Kivr29+1Iz7zW9+k6K1nzRpUsBsmbVo0aJo
p66++urQWQAAAAAAAADaglNPPTU/P/+qq6763//+F420urjP1Kpmz54dL7V4
8eKmpr344ovxtAkTJjQ/555QWVm5y8q+sLDw9ttvD5sts9577728vLzEriVe
ptBZAAAAAAAAANqCq6++OqqYDznkkD//+c870yjuM7Wq2traxBqipcrLy5ua
Nnr06GhO586d33333ebn3BNqamqiOjvZ5z//+eeeey5ssD2hX79+ib178skn
QwcBAAAAAAAAaCMWL17cq1evqGsePHhwSUlJ64r7DK7qt7/9bbzgQw891HjC
Cy+80K5du2jCjBkzWhRyD/n+978fZ87Pz7/sssu2bNkSOtQe8dxzzx144IG1
tbWhgwAAAAAAAAC0HVu2bBk/fnxchbe6uM/gqiZMmBAt2KVLlwYf7n7xxRc/
97nPRY9eeOGFO3bsaGnIPWH79u2TJ08eMGDA1VdfXVNTEzrOnrV58+bQEQAA
AAAAAADaoOeff/74449Ps7jP1Krq6uomTJgQ3X8+8d9vfOMbN9xww0033TRo
0KD4twKGDx/uc98AAAAAAAAAtCXbt2+fOXNmhw4d0izuM7Wqxx57rF+/fo2/
Pv5rX/vaggULWp0NAAAAAAAAAGi+devW/elPf7r99tvnzJnz4IMPvvLKK6ET
AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/D+m
+JFs
        "], {{0, 0}, {2707, 301}}, {0, 255},
        ColorFunction->RGBColor],
       ImageSize->Large,
       PlotRange->{{0, 2707}, {0, 301}}]},
     {
      GraphicsBox[RasterBox[CompressedData["
1:eJzs3Xm8TtX+wPHjGE+OSxkic6KbMiRkigZTA5FjHsqYDEWpFEWUMWSKZIwi
XKHBrGvOTMiskCHzUBwc5/y+9zz37t9q7efZz3qGc54zfN5/9KrTWnuvvZ+9
17C/e69VuM1rL3QIDwsLeyOT/OOF1m8/8frrrd9pkE3+o+Grb7zy8qvt2z39
ao/2L7d/vUKbtPLHt9OEhY2+IyzsP/8eBwAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAp3fLly2eb+eGHH0JdWAAAAAAAAAAAAAAAUppHH300
zEzRokVDXVgAAAAAAAAAAAAAAFIaAvcAAAAAAAAAAAAAAITQwIEDOygyZMig
Butbtmxp/a/evXuHurAAAAAAAAAAAAAAAKRwWbNmVQP3p0+fDnWJAAAAAAAA
AAAAAABIRQjcAwAAAAAAAAAAAAAQQgTuAQAAAAAAAAAAAAAIIQL3AAAAAAAA
AAAAAACEEIF7AAAAAAAAAAAAAABCiMA9AAAAAAAAAAAAAAAhROAeAAAAAAAA
qtu3bx88eHD9+vVLliyZPXv24sWLN2zYcPTo0SDu4vz587t37165cuW8efPW
rFmzb9++v/76K4jbTzjnzp3btWuXlHzOnDnLli3bsmXLpUuXgrLl69evb926
1XXOZct79uyJiYkJypbdunXr1v79+9etWye/r+xx6dKlP/300++//55we0RC
++OPP+RH/P777xcsWCD37LFjx2JjY0NdqP84c+aM3ClyVcv9/u23365atUpu
/5s3bwZr+9HR0VJlycU8f/58Ofy1a9ceOnQoWBv36tdff/3xxx9l13JoUptd
vHgx0XYdiBs3bhw+fFjqeblavvvuOym5nMMQXjBStUoZFi5cKKdx+/bt8p+B
b1MujB07dqxYsWLu3Lly1e3du/fatWuBbxZAkm1uAiEHJd0wVy0kDcqFCxdC
XaL/VGIHDhyQRu2bb76RNvTnn3+WQgZ3F9L93rZtm3Q+//Wvf0lbJv3z4G4/
5KRRlh71v//9b1e/XdqXYDUE0reRi18aULlm5HaQbnxQNhvnLXAv95qMRGbO
nDl8+PBBgwZNmjRp0aJFZ8+eDXCnstkjR47IEcmIQMYFsk3pIUg/IcDNAimS
DP/lBpFGUGpO6WfKveP3puTWkwG41MM//PCDVCZyD/72228yTg9iaR0cP35c
esjSlMuuV69eHXhNkjhkFClnSc6Vq8mWku/bt+/27dsJvV8ZPckYVnYnP72r
Tdm8eXNQxixXrlyRdkSuARmzLF++XAZlvm5BrhnpJKxcuVK2IK25NHxXr14N
vGAJKuHOJwAAgCHpRs4GEkYg40TVn3/++d1333Xp0qVMmTIRERFh7tx1111P
P/30tGnT/B4FbNmy5e233y5ZsqR94+nSpatWrdqgQYNkFBb44cyfP9/wBK5Z
s8ZkgzKSevPNNx988EF7ydOkSVOsWLHOnTvL0flX2sWLF9eoUSN9+vTalrNk
yfLSSy9JBeLfZu0uX748b968l19+uVSpUhkzZnT7K+fKlatu3bozZ84MeoRL
hmYLFixI0NshiVi3bp164K5XIwzt2LHD1xN77Nixt95665///Kf918ybN+8r
r7wiV6+V+IcffvC06w0bNrjSREdHLzPmtgq6ffu2jLs//PDDJ598MkeOHG6v
NLkCy5Yt269fP78rsTNnzowePVoqJbdV1p133vnMM8/MmDEjgWK1p0+fljrh
7rvvtlcIjzzyyJQpU+xhrOXLlxteBnKrWrn27t1rmMvkIc+FCxc+/fTT5557
7o477rCftKxZs9asWXPq1KnSIgRycqT8DuVUa92LFy/KdWKvWuU0VqxYceTI
kX40N3IBT548uWrVqpkyZdI2K3+RY5cDtN4b2bNnj0NRrWeAv/zyi+GvIKSi
C+TsOfv999/NSwL4Smu/NNLcSL13//33B6u5EYsWLTIsm1qZ79q1yzDXr7/+
6nxPnT9/fujQoQ8//LD9oEqXLi3/S62FVqxY4bCvYL2Q9scff3zyySdSG9sr
MSF9zm7duq1atSqQXUgLJR3CJ554QusNSt1buXLlOXPmqIkdOtXyK6spE7rD
Y06ukN69e0tzLEeknUDpb5crV2748OH+vZsh16FcFdKR1rYsZ7Jhw4bbtm2z
UkoD53D4W7du9bQLT4F72WDfvn3z5ctnvypkGCXdoYULF/p0LNevX1+yZEn3
7t3lhGTOnNm+WZEtW7bq1atPmDAhgd5LlHGf+TUDuHXy5MmEuDjtpFs4ceJE
aS/Cw8O1OyV37txvv/22eeA7JiZGqta2bdvmyZPHft9JJRAVFSW92QA75J7I
7fz+++/nz5/fvuuHHnpo7Nix9jcHpPdu+HPIAM3KJaM8w1y7d+/2WmxpjuX8
N2jQ4B//+Ie95JGRkdKojR8/PlhfVbjI4chwsmXLljLWlprWbT0pZ7JZs2bf
f/+9r29cSFssGy9fvnzatGm1bcoIWtp6r9e27PHrr7+WWtpeh0tjV6NGjXHj
xlndp0OHDjn8BFYy81/NJemcT69kg999951PR5d0SCc8uGcDAACIMmXKuO2Q
AIF79tlnA7w+V69eLT1nT8F6t+66665PP/3Up+/B9+/fX6tWLZONyxCjY8eO
AX7oJCU0PJZnnnnGeVO7du2SMaDh1mTQJEfqU1Hfeecd523ecccd2hNUX92+
fXvp0qWNGjXKkCGD4YGExT9/mDZtWhC/ofvXv/5lvvdkTc6z+vT+gQceMM/7
xhtvmJ9SuQf79u1rf+XDrnnz5q6HGEWLFvWUpnHjxq7N/v777+YF7tevn1qk
o0ePvv/++26fKnsSHh7erl079SGPV9euXXv33Xc9PWTW5MqVK7hXsvj555/v
uece5/1K3RIdHa3mKleunOE5+eWXX6xcgwYNMsw1atQohzJLYeTHypIli8mm
pAqdMGGC35+u7Nmzx2HjVq373Xff5cyZ07kkhQoVkurLfNerVq0qUKCA1wMs
VqyYK8L4wQcfOCS7ceOGa7MfffSR121a5JLz77yZaNiwoXlJAF9p7ZfFsLlJ
kyaN1dzcd999npI1adLE2rLbt87cOn78uJWrd+/ehrmmTJnicEPNnTtXejvO
W8ibN+/KlStd6StUqOCQMvDI5l9//dWzZ0/DPnnFihX9e2VUfqCnnnrKeeNP
P/20dTjZs2f3lEw6FeqW3b7g6kn37t0DPF1u/fbbb/Xr17fH6+2kQRw7dqxP
3QNp/d2GuizSpenVq5drm9u2bXNI+corr3jai9vA/dq1a006V1FRUSZT62/c
uFG6XpGRkV43aJHTNXTo0CBOl+QiXQLzMgButW7dOriXpVvSJ3z22WedSyLt
hckrSd9++63DiEyVI0cO6d4Hdxa+I0eOFClSxHm/VapUUd8ijvPlVlXfK5s0
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
XJ9Ca3755ZdHH31UTfnAAw8EZUUA7b2dsmXLqo9lpFlXQ+TqZxSjRo2yqi9t
9ic5M2rlduDAASvX2rVrrb+3adNGq6mk7rL+r6d1pqQK0t62kprW7VqHMhyT
ul0N30tKv1806tGjh/ZLffPNN56qPjmr2ntr2pvtdtJlUif8kWZXxmtqAvWd
Ybm6tOzSvthXPZO2zD4olp+jadOmrl1ol1+xYsXc9rLk9Kp/l8ZLzSWdE601
TwrnEwAAAEhh1AhUlixZNm3a5JxeetfSV1d70RMnTnRI/91336mBvEyZMjkv
nypDQnXjMkzwujipV3/88Ye6TRlamuT68ssv1VwyMnI7QlR98cUX1mcpmTNn
3rNnj3N6GX1r4xd7GmuWfhlq+T3wVAP3OXLkUD/mdUvG79ocqjKw8m/X0Mgd
oZ5YOc/+bWfDhg1aiDxv3ryHDh3ylP7s2bNuv7D7+eefg1tmtVT9+/f3uvEZ
M2aoG3/66acdEp8/f16bBb1jx47OD9tPnDhRrFgxK/0777zjtUheadFze+jh
22+/9XoS/v3vf6sbefTRR012/dtvv6m5smbN6jXLlStXtGkWWrZs6TwH/pkz
Z0qUKGGl79q1q0nZHGjLZFSvXt31Van83J6WoTx16pT2XlN4eLi6Lrbm1q1b
9qktrHdR7OSysYftxFtvvWVyRNqkLnKZmeQCkqP169fbmxv7+zAWqUDKli1r
v7lMvohUK09XXWFSQtmymitfvny+7kjUrl3b0/fy0o10fZ9YoUKF8uXLq7l+
/PFHkxJ6ZW/d7E/pVXv37tU+/ZaensmOtNhTWHzPfNy4cdrDcynPG2+84erT
SudWC9w7f81t+eGHH9Rc0qE1yeU36aWrrwJmyJDB+deRfpHaanh9N0y2pl0z
hQsXtr8vt2/fPtfSYBEREVrbJ7szPBYtcF+5cmXX7hxebpRhizb/sMMbv2rg
PmPGjF5fk5YWs23bturGhwwZYngsQMqwcOFC9RZo0KCBliA6OtqqKh988EG3
G5EetboR6Qxr7+GopGf7/PPPq+mrVKkS+BvIr732mrrNsWPHagl++ukn6/++
+uqrbjeizax17733muxaGiCtFvU624kk0HoUzz33nHOuy5cvu+pMF3WGH5+o
gWYZSzq8CuUiXQj1U/H06dM7L5qgvUFh7/BIu2x1DPLnz6/9X/UYXT788EOH
3Y0ePTrM5qWXXnI+KBdtLqDt27eb5NIk9PkEAAAAUhg1cD98+HCTLL///rv6
aMjhMZSk1L4emjRpktfta4+GKlSoEOBU7X4E7g8cOKCtBD1v3jyTfQ0YMMDK
UrFiRefE2iPNGjVq2NP069fPSqB9j29ODdxPmzbNJMvu3bvVslWpUsW/XUMT
rMB93bp11e2kSZNm7dq1zlnkfrQvIZFwgfvKlSsbrhurfdHv9vP5uPjnxtrz
q6efftpkEfZff/3VilNI3eXf0waVNk++/Rz++eefXk9XogXumzdvrmapVq2a
yUO/EydOWI8f5Td1fuHKKy144YqtlC1b1vnrVKm6XTNFWEqUKOGpOVDnJ3Hp
2LGj14JpH+qGEbgHbLTpQUwqBGlu7DOKJ53A/eXLl7Vlyh966KGrV686ZLlw
4YLrHTA1NBwWpMC9f63b4sWL1SyGayrNnDlT+11mzJjhKbErFlygQAEt1p8E
A/fnz5/XflOvgfi4+PcfrOlTIiMjz50755BYG55Iek9vS8oP6voEXq4rNYvf
gfuw+PeH1Y9Y3bLPpeBa38FODdy/9957JkW6dOmSuupZnjx5TDpgQIqhDsnD
PMzdbTWX0lDa5zaX+1F9Cy5z5sxeb2ppmLRpw3v16hXggWgT69nf25EazFrO
rGTJkm43kmiB+27duqnpS5UqZbJQ48WLF9V34TzVhM6sQLP8ag6rzKvmzZun
lrZNmzYOiUeOHKkm7ty5sz1NixYtrARqi2Nf7sRkbsZOnTppuUISuE+g8wkA
AACkMFbgPiIiwnyGT/VjzLC/L8es0mZWlKGWSSDv1KlT2sRfn3zyiQ+HZONH
4F5dVkzUqlXLcF8xMTHqPJmLFy92SKytMtawYUN7mqlTp1oJRo8ebVgMjRW4
z5kzp/nkluoktzLCss/XCj8EJXB//fp1bYF4t2992H344Ydhf5dwgXvzKXC1
RcY9TYUnG1STZciQwevzLov6bKR+/fqGuTzRTr7bL+Csd5YKFy7sdiOJE7jX
4iZp06bduXOnyY7i/r4qpeEF5okWuA+Lr1K8TvAS5y4c76kafPHFF9Vk4eHh
JsH0w4cPa2E4AveASpobrUtWs2ZNk4z2GGLSCdxr6xSL1atXe93L999/H2YT
lMC9VtFJ9eXpBTaNtrJA5cqVvWbRos/SZXXumWvfZrokwcC9tmZ0sWLFDLu7
3bt3t3L17dvXIaX2IplkdEh869YtdTjgEkjg3mH1Z8vNmze1JZ6LFi3q9ve1
AvdysbldOtktLd7n9X1RICXRpnkfPHiwPU2XLl2sBD/99JP6v65du3b33Xer
W3jzzTdN9vv111+rueSe9Tp1nrNChQqpG9yyZYs9jTUbSWRkpNuNJE7gXkYK
2oQ/nhYFs1NnSHj44YcNXyZXWYHmChUqGGa5evWqWto777zTYb9q6xPm4ZUM
tbuyZMkS6+9y8Whn0mR8d/bsWW0MG5LAfQKdTwAAACCFsQL3Pj1Pq1q1qtqL
drsk2aFDh6x5410Ml32Psz1/K1iwYCDzwvkauN+6das2FFq1apX57tSpv595
5hmHlEOGDFH30q5dO3uakydPzv4fwwe5dlbgPioqyjyXtrIYD+iCIiiBe/sl
avhyy8GDB7WMCRe4d5j7UaMtkNGqVSu3ybSp/ps1a2a4/bj4x2XWYvdSQofJ
Zr2KiYnRHiK5nex90aJFrtvW02QdiRO41xbkrVu3rsleXG7evKl+wBjIc0J7
4N7wbajbt29rE+B7mn1Uq68eeeQRw7JpK1YTuAdUW7Zs0W7ekSNHmmQ8cOCA
ljGJBO5v3LihRU+knjTZiyhTpox2UEEJ3GvT7z///POGGbWVysMMumpaS+r1
a2tpyiMjI7W9JLXAvfTzM2XKpO5r/PjxhnnVC1WaPE9BAWnotabf69BAO/yw
AAL36dOnN+xTjRkzRtvp8uXL7cmsK6dUqVKGRRL16tVTtzx16lTzvEByp32P
4LaSkaG6NWzX1qOX9Gr2dOnSeZ0q3EV6wvfee6+aN8DvjrWlT2RsaE8jVYR1
IG5fgkqcwH3Dhg3VxF4nM1RJZa5+aeLTwxwXK9DsdnYFTzJkyKCW2eHNKNfE
LBa3r4Ls37/f+iHU0au1lqKLfSJ9T7Qp+0ISuE+g8wkAAACkMIsWLbo3nvSl
zXNp01G6XeZefec8LP6hk6e1jO20+T/FV199ZV48ja+B+6ZNm6rpc+fO7dNs
kDImtT5Pk7GGw1Frc+4FvpC0JzNnznT9ys5rn6lu3bqlzYzKMvdBEZTAvdy2
2g3i9uUZt7Q1IIIeuC9SpIhcaZ6iq25pXxy4XeZeC3P7cUF26NDByhvIJB7q
NPgu/q3lkQiBe3vEbfr06T4V8vXXX7fymtcedvbAvcmyKS59+vTR8q5Zs8ae
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
GPHRAvcLFy4MYpGAlEEqf/U2OXbsmNcsWuBe+n4mO1q9erWayzmioU0XYDjB
r0tMTExERISaPcDAvZAKTd1g7ty5fco+YMCAsL9zeN00tIF7w2bOV3JQ2meG
LVu2DPpeQhu492lp5o4dO2qXhNs5juyTFdeoUYOX0ABPAgncjxgxQrvdfLqp
T506pWUPpJZLiMB9eHi4yRwCsi81l1Td0qp6SqwFeXPkyOFTCatVq6ZmL1++
vE/Z4+JnOdMal7Rp03bv3l0aHV835VbQA/cmxo0bp+7U8OmTFrj36eGYJaHP
JwAAAJDCHDx4UBsJ9uvXL/DNxsbGao9Gn3zySfPsN2/e1AaVDivFe+VT4F52
rQWJfFr/VBuYy3jE4WP2RAvc//TTT9qvPHbs2ATaF5xpQfAwvybuC4QWSTGZ
/NynwL32yk2lSpWCMp9Dly5d1M1GRESYfzchBZA7Uc3+ySef+F2SBArch5lF
tX788Uc1S6FChRwS9+zZU02cLl26y5cvGxZPDipTpkxq9kC+YdQC9+L8+fOG
eeUG0fK2b9/e75LY9e3bV934uHHjTHJpgfugtJtAClOkSBH1NjFZq1QL3AuT
dZq0Gsb53R4t+CKtg/kiINqcJ2HBCNx37dpV26ZPHzs3a9ZMzZshQwaH6Elo
A/cigd4X1V4ze+SRR3zKPnXqVNeniHL5eUoT2sD90KFDDTOKqlWrqnllPHXr
1i0tjTTBWgCle/fuifweKZC8BBK4t6/SMmTIEPPsy5cv17JPmDDB9yP4r4QI
3IutW7d6zbV79241S+bMmR0SDxs2TNvFb7/9Zl5CbUr21157zTyvi/zE6hZk
GOXT6xZehSRw/+mnn6o7/eCDD0xyaYF7GZX7seuEPp8AAABACrNmzRq1C/3Q
Qw+ZPLeJjo6eHW/RokWe0rRp00bdcsaMGc3jdytWrNBGapMnTzY9JBufAvfi
hRdeUNP79Jmq9gS1QoUKDokTLXA/f/58dUePPfaYSa4rV664fmWHSQPgK3vg
PpBnL37IkSOHtWvDiQ19Ctxrz0kM5+748ccfXRfbpUuX3CZYsmSJdt5WrVpl
smUhKbW8O3fuNMxrl3CBezl8r7mmTp2qZilZsqRD4nXr1mm7+P777w2Lt2XL
Fi2vbM0wr509cG/+rMY+ne/06dP9Loldt27d1I0bfjuvBe6rVq0axCIBKYMa
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
KKHm8mOtdk1CBO5doxhprB3mBjl8+LAVzHUxWQlRhi1qFpPJ4tTXscLiv6Qw
HPBqJJfaVfD6YCcu/qGTVXsnZuDecFIj7R148zmUtMC9qzWXIban9Grrb7Vc
CX0+AQAAgJRHnbpNhl1e16RWp1D2+kWt9slVlixZnL+c0gYUkZGRhlN4OfAj
cB9nm86rWLFip06d8pQ4JiamefPmavry5ct7DeclWuA+Ln4uNfUMHD9+3Dl9
165drfQE7oPIHgR3hSbz5cvndv1xdUVdh8B90aJFz5w547Df2NjYzp07q7t+
7733/C6zQ+IDBw6o3yR6HZVv3Lgxc+bMVnrn+uHEiRM5c+a0EoeHhzuvBbx4
8WLXoySX9OnTB7JQu0sCBe6lxnBN9NG4cePLly/b08vvW7x4cTVL9uzZTV5C
OHv2bN68ea1cadKk+fzzzx3Sr1q1Sn2mlzZtWue5l01ogft7773X9ezOIaYg
evXqpZ1qrw+1rOCXHKbXRXh//PFH9fKQm8h8Ik0tcD9s2DDXBdm7d2/7Sw7H
jh2TG9y6aA13ASQdauBeukPOAURpbjp16qTeIO+//77hjrTAffXq1V2R3MqV
K7v9CH358uXWPOcuUk+a7EhuVZ+qF1f6iIgIbZ3ioATuxcmTJ++++251y85P
1H/99VctTm0yhU5oA/dPPPGEK/IlTZL0K+zpZ8yYYSX2NXAfF9/iq1+RZ8qU
ybnFlwv1pZdeUkuYZAP3roh5hQoVHF6GlH1p94Kkv337tqf0kydPtlJKQ+91
3mNpr630BO6RCgUeuBcylFM3UqZMGYebWu7fpk2bqunLli0b4OvHcQkTuJeO
vev81K5d220PQYY2UiOpWaSKvnTpktcdyfnRosYDBgxwSL99+3bXK38WbaU5
nzRo0EA9RufX0WU8qM7tn5iB+zCDBWLkzKgf1EgXwuGVSI32E7hGPWHxr9Db
B61yAVhL4IUpgfu4BD6fAAAAQMojA0B1ec18+fKtXLnSbcpz5861b99e7beb
TIWtPR2VIcPUqVPtj5L++uuvHj16qM/cMmbM6PbJnq/8C9zHxsa+/vrrasai
RYuuWrXKnvK3337TPgstWLCgp8j4v//972X/ow3e69Wrt8wztw/f5LfroHCY
HVqGZlIq9Vh++ukntylPnTrVuHFjtWAE7gMRHR2t/o4ffvihem6feuqpo0eP
WkHAsmXL9u/ff8aMGQsXLhw5cuQLL7ygfk/nELh3/aZr1qxxW4aDBw9qqwQ+
/vjjDuFmr2V2PuR3333XSpw2bdrBgwe7fcp069atzz//XJuUwzlwL9avX6/G
TNOlS9evXz/79mXjw4cPj4iIsFLKmZwwYYLzxj05cuSIdTbsMzkvWrTI0237
66+/etqmFrh/9NFHt27d6nrnIX/+/HJQcodKNXLs2DE5ZPlPLW4SZjBPvmXb
tm1qSEiqWfmN7PHlmJiYsWPHak/+DddTcKYF7p955hmp7V0/yksvvWR/J0qO
OioqSjteyeUQg3BRv1qVkzl06FC31/mff/4pl6UatZej3rlzp8OW5ddRf1lt
PZcTJ07Ur1/f9e+5c+fu2LHj5MmT5S6Wf0o7ol6xBO6RHKmB+7D42L1Dc6P1
iJ544gnz5kZaQDVv9erVDx065KqUMmXK1KBBg08//XTBggXz5s2TqqlWrVpq
E+kiPUyTI5L9aosihcVPA3L69GktpfTxpC12JRg0aJAWeghW4F6sW7dOq1ik
PG7f45LDV99hc6X0NGnt7t27rdM7d+5cNZdD4P7s2bPq76K11J4C99qvqU6n
47oSpG632jK1wzNq1Cj5cdVf04/AvZCrQt2I9AFky27nzJfrSpu0OcwWuF+9
erV1LGrHJswxcL9v3z4r17hx49RcDoH75cuXz1ZokTVpxHPkyBEWf+tJSu23
vn79+pgxY7Qscp737t3rcK6kPVXXNpIrytMcPpcuXerevbt6YgncIzWQfrJa
oWmV/9tvv+2p879hwwZP2/zrr7+qVq2qVQtuJ0uR4aE15ZpL4cKF5Y9+HIjU
2Grx1N6vmDVrlqcD2b9/v6dt2gP3VmOdK1cuGaFIJ0EqfNn1pk2bpMutrWgT
ZjBPvkWKUahQITVvly5d7MulScU4bdo0bbhkuAqkJ3LC1WFRpUqVPJ0T+Xu1
atXUXdsDzdIXUk+v9vvKQXn6ITz1uNTAvaeXh+Pim2bpO6kHIkMktw+1LDIe
VwugvbK4fft2+flc/y4nvE2bNjKil77ZF1980bNnzzx58qiJ1cB9cM8nAAAA
kBrIwMqaF92lZMmS3bp1GzNmzJdffjl16tShQ4e+8MILahTMxXAN6xEjRmhz
oxUoUEC2P3LkyOnTp3/88cetWrXSngrmzJnT0/sDvvIvcO8iI031UZX8+6OP
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
NGniKZfUjQ6/i6cvJaUmdMglPRwrpXR4pFJ16PCoif2zfv166SFI19rtLjJm
zCidk9dee23ZsmWeImIvv/yyp2ORK9zTfqdMmeIpl5THUy4ZRHTwzFox4fff
f5ef3lPoSs7ngAEDHFam8GTPnj1vvPGGp46BnKuyZcu+9dZb0qHyY+NAMnX6
9Gn1/tXi7OXLl/d0p0s322T70dHR06ZNi4qKcvtamtx3NWvWHDlypE9fprsl
tZxaPK1j/Nxzz3k6ECmep216CtzHxUeTpeRuX/OTXUsN5vfUAXHxs0T27t3b
0ycV8hu1bt1amuygP8GQYdHixYul0fQUJb/zzjtr1KgxdOjQXbt2edqINHzq
6dUeiElnw9MPISMah7LJhSRl6969e4kSJaQP5rZ4+fLla9GixerVqw2Pd8SI
EZ4KI9S5JZcvXy4H7na0JcP/4sWLux3jB+V8AgAAAKnTmTNnfvzxx2+++UaG
bLNnz166dOnevXv9C9a7JR3+9evXy8Bq+vTp33///ebNm2WPwdq4JvDAveXm
zZu//PLLqlWrvv7666+++kqGKjt37rQvsmbogw8+UAv26quv+roF/wL3lpMn
T65cuXLevHnyK8+ZM0fG9QcPHiRYH1oykt29e/eXX345evRo10x3S5YscVh8
QXP27FkZlbuWmZOrVPJu2bLFpznVE4IUYOPGjXKnz5w5c8aMGfIv8p++fhrp
QK7kn3766dtvv5XTJf/csGHD8ePHg7VxjRRbe7bg33Nsh8C9i1wGcgF07Nix
cePG8s9evXpJhex2vWP/nD59etOmTa6TtnDhQqmQTT48949D4N7l559//vTT
T7t27dqqVasXX3xRDnbcuHH+LeWpiY6O3rZt26JFi2bNmuW6PNasWRPEGV08
kdMr1/lnn302ZMiQSZMmyS0pxQjkgykgqQlJcyPdHumDff755x9//LHcWfPn
zzd5Z9LEgQMHxowZ07NnT1ct9Nprr40fP94+r1TiBO4t58+fd9VgUn1JE7B2
7dpDhw4F98WqEHJ1eKQ7LWfe1eFZvHixeYfHkPQHpFcgzZxcqNIYSdddflav
c0EkZZcuXZo7d640lO3atWvatGm3bt2GDRsmTVvgF4Zcb3J/qTe1/EDJ+lwB
wVKnTh218pd7JFhblnHEnj175NaTwbgMAKWOkl5xEEdJmjvuuEM9ENecUb5y
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
3RMAAAAAAABAE4J7HcDh1wHm5ub29vZ169Z1c3Pr0qVL7969fXx8/P39f/jh
h7lz54aGhm7evPnnn38+fPhwXFzcjRs37t+//+eff2ZlZRUWFtJuLgAAAADo
uMTEROGxq4eHB+2KtFhxcfFvv/22du3a0aNHd+rUycHBQewEwdjYuGHDhn36
9Jk+fXpUVFRqairtwv/j3bt3s2fPtrKyYus0MDDo2bPn1q1b09LSaFcH4v31
11/r1q0jO5tAIGA3nK2t7bJlyzT2a+T79+9XdE7NuypVqrx584Z2TwAAAAAA
AABNCO51wPbt29V5PcHAwMDS0rJOnTqNGjVq1aqVh4dH//79/fz8xo8fHxwc
THakNWvWhIeHR0VFHT9+/OLFi4mJiX/88UdKSkp2djbtrgIAAAAALRAfHy88
/hw5ciTtirQPGXvv3LnTy8urcuXK3Ib99erVmzp1akJCApVbnRcUFKxevZrM
O5hi9PT0OnfuvGPHjszMTPUXA9ykpaVt3LixZcuW7E5VvXp1MnstKSmhXZoY
e/fu9fX19VGlvn37Mv1gampa5p/IbPrx48e0+wAAAAAAAAAoQ3CvA9Qc3CvJ
2NjYysrKzs7OxcXFzc2tffv2Xl5efn5+/v7+U6dODQkJCQsLCw8P37VrV2xs
bFxcXHx8/IMHD1JSUrKysrTi8YgAAAAAoKSTJ08KDyDnzZtHuyJtcunSpQED
Bog+CJ6z2rVrL1iwQJ3PjiezgHr16jF/3draevr06UlJSWr768C727dvT5w4
0czMjNmmzZo1u3nzJu2iKCBTWqYHatasSbsWAAAAAAAA0EQI7nWAdgX3DD09
PW4LGhsb29nZOTk5ubi4tG/f3sPDg8n9p06dGhwczOT+u3btio6Ojo2NZUL/
5OTklJQUDX+oIgAAAACwNm7cKDwC3LNnD+2KtAMZALdr1076cNrGxqZJkybM
jbN69+7dvXv3rl27urm51atXz8TERMqCpqamgYGBL1++VGkTioqKyJCeucV6
1apVyX/jtl0648OHD6GhocxdFAwMDMjG1cyf3qsOgnsAAAAAAACQDsG9DtDG
4J4WExMTKT/2Dw0NZXJ/0R/7FxcX097OAAAAAOVFYGCg8BAuMTGRdkWaLikp
6euvvxYd/drY2PTp04cMdI8ePfrHH3/k5+dLX09GRsatW7fI/GLy5Mlt27Y1
MDAos8KKFSsuWbJERd+JJeW1bt2aGbSTv/Lp0ydV/BWgKzs7e+bMmYaGhmRD
e3p6lqubqiG4BwAAAAAAAOkQ3OuAGTNm8B5w6zBlfuzP3uRf0o/92Zv8x8fH
JyYmMrn/58+fae8jAAAAABokNzc3KytLyhhJ+KHYZPBG3q/O8rRLYWHhvHnz
jIyMhAeurVq1WrJkCRmOKvmL5g8fPhw5cmT8+PFVqlQRXn+DBg3IcJevJrDI
XlG1alVPT89nz57xvnLQKHfv3iVTKkdHx6KiItq1qA+CewAAAAAAAJAOwb0O
GDFiBLckGjjgnPuL/tjfx8eHyf0l/difucl/ubqWBQAAADqjpKTk0aNHO3fu
nD59ep8+fRo3bly7dm0rKyvh0RQZIFWvXr1Lly4BAQHh4eFnz55NSko6fvy4
8HucnJxoN0Vzpaend+rUie2rqlWrBgUFPXz4kPc/VFBQcPjw4d69e7ObRl9f
f+3atbz/IQAdhuAeAAAAAAAApENwrwMQ3Os8ST/2Z2/yL+nH/llZWbR3TwAA
AChfCgoKjhw5Mnz4cBsbG14GQt999x3tNmmoGzdu2NvbM71UrVq1VatWffz4
UdV/9N69e2SLMM+gJ4YOHSrz9vsAwEBwr8PIuY9MwMkR8sKFCwcOHNi4cWNo
aOicOXOCg4OnT5/u/4Wvr6+PkDFjxpAXJ0+eHPzFkiVL1qxZQyb1J06cIIf3
58+f424zAAAAAADlEIJ7HYDgHqQwMDCwtLSsU6eOq6trq1atPDw8+vfvP2zY
sPHjxwcHB5MP/urVq8PDw6Oioo4fP37hwoXExMQ//vgjJSUlOzub9q4NAAAA
2iQtLW3mzJlVq1bldzCzcuVK2i3TRAkJCWZmZsxgb/bs2Wp+HPzdu3fbtGnD
bCBPT095ngyVlZWl5H37AbQdgnsd8O7duxs3buzbt49MpUeMGNGhQwdnZ2dz
c3N+T3wsExMTBweHFi1aDBgwgJxhycz93Llzz58/Ly4upt0TAAAAAACgEgju
dcDkyZPlnPRxvs07lFuVKlWqXr26k5OTm5tbx44dPT09fXx8xo4dO3Xq1Fmz
ZoWGhm7atCkyMjI6OjouLi4hIeH3339PTk5+9+4dfnsFAABQfuTk5MycOdPE
xEQVo5HvvvuusLCQdhM1y40bN5icyN3d/f79+1RqKCkp2bBhQ8WKFUkZvXv3
LigoEH1PUVERGSu2bt3a0NCQvE0gEJCBJRlVkpHkoUOHMjIy1F82aIiPHz9m
ZWWVt4eCIbjXOrm5ufHx8WvXrh06dCg5dllaWqriNMeBkZFR/fr1vby85s2b
FxMT8/r1a9pdpSOKi4vJ55SMamgXAgAAAADlF4J7HbBt2zZmI37zzTfkv8PC
wpYuXRocHDxp0qQRI0b4+Ph4eHi0bdu2SZMmTk5OVapU4XZNFaE/KEogEFha
WtaqVathw4Zubm5kP+zbt6+vr6+/v//MmTMXLFiwcuXK8PDw/fv3x8TEnDt3
LjExMSkp6eXLl2SmXFpaSvuDBQAAAHI5c+aMg4ODSgcVHTp0SE1Npd1QTZGf
n0+G9KRbhg8fTv2rkrdv365ZsyYpZsaMGWX+KSMjw93dXcpm1dfX79mz5969
e/Py8qgUD+r0+fNnMuwnc4H69eszX+RgVKtWrWvXrsuWLbt79y7tGlUOwb3m
KygoSEhIWL9+/YgRI1xdXclhSpUnNz7Z2dl5e3uTWfbx48ffvXtHuyO1SVJS
Eum3Tp06Cd8yyMjIqEGDBiNHjjx48CDuRggAAAAA6oTgXgds376d2YiBgYHy
L5WXl5eSkpKcnPzgwYP4+Pi4uLjY2Nhdu3aFhYWFhoaGhIRMnTrVz8/Px8fH
y8urffv2Li4uTk5OZDJI5i8cZpHI/YEDExMTssuRfc/NzY3shGRXJPukv78/
2TnJLkp2VLK7kp2W7LpkBya7MdmZyV6dlZWFOwcCAACoQWlp6ezZs9UzzLO1
tf31119pt1gjlJSUjBkzZsOGDbQL+a83b94MGzbsl19+EX4xNze3WbNmcm5c
c3PzadOmkVEcrSaAqh04cKBGjRoy94TatWuvWbPm48ePtOtVFQT3GuvOnTsr
V6709PQ0NTVV6NxkbGzs6OhIDnddu3YdMGDA2LFjg4KCli5dumXLlqioqOjo
aHJsjPvi4sWLiV/cvn2b+Y/r168z/3Tq1KnoLyIiIlatWjVnzpyJEycOHjy4
Z8+erVq1qlu3roWFhUJV6evrt27desGCBTdu3MAzSqR4+/bt0KFDBQKB9P40
NDTs168f6Uza9QIAAABAuYDgXgdwC+6VxOT+Dx48IPPN+Ph4JvQPDw8PCwsL
CQkJDg5mcn8vLy8PDw8m97ezs7O0tOT2lXXk/uUW501vbGxsZWXF5P5kDyT7
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
M26rleTgwYO0uwr+q7i4mB1BCTM0NHz79q2UBbdu3Sp9j1JbE4AvkyZN4veT
HhAQQLtNXGjsM+7/+OMP4e69f/8+jyv/8OGDlZUVh60sEAgGDhyYnJzMYzHA
GRlac9iIjo6OJ0+epF27RH/++Se3nVOKtLQ02s3SdLm5uY0aNVK0Y/X09EaM
GJGZmUm7fFC34OBgdjdo1aoV7XJ00Pv377P+jXZF5QsZ03I417i5ud25c4d2
7QDl2s8//8x+JCtVqsT7+vGMex2AZ9zrEt17xr1uCAsLY7bLnDlzaNfCUWJi
ovAY76+//qJdEYDKvX79Wni3R3APwNnDhw/luYDQqFGj1atXl3mEcdOmTaWs
ubS0NDk5+dChQ7Nnz65bt66cVyqkcHZ2/vz5s9p6BqR79eqVvb296GZasWKF
lKXGjRsnZROrYlIMqkY+lW3atFH+A87y9vam3SYuymdwv2XLFpkb1MXFpUOH
Dg4ODqL/ZGJiMnfuXDzwiK7c3NzKlStz/sD6+PhI/74WRceOHdPX1+fcNFHX
rl2j3SZNt2TJEs7dW7169V27dtFuAfDgw4cPKSkpZBbw5MkT5vu9cf/z66+/
Mq8kfzFlyhR2B0BwL1ZJSQnpzN9+++38+fNkVrV9+/ZVq1bNmTNn8uTJvr6+
33zzTdu2bRs2bOjk5FSrVi2rLywsLOT5xJmbmzPvJwuSxV1dXcnJ2svLy8/P
j2yXefPmrVmzZseOHb/88svFixd///331NRUMrmj3R/a5N69e5yPhwYGBsHB
wfn5+bQbAVBOIbgHmRDc6xIE95oJwT2ANkJwD8CXlStXSrlooKen17t37/j4
eObNZS4EValSRc6/IvyDGmWsWbNGZT0BCrtz545o3GNlZSUlxKlRo4b0TUwG
zOpsAvAiMzOzadOmvHzGK3z5mhDtBnFRPoN7mffJ37FjB/vme/fuTZ48WfR+
7M7OzhcvXuSxKlCI8JVJbqpXr37hwgXa7RBv586dZb5zqIzjx4/TbpCmU/4J
BYMHD8aXeTRfSUnJ8+fPT58+vW7dutmzZ48aNcrLy8vd3Z0M84yNjbltejKk
7N+/PzlNLFy4MCIiIiEhofzchIH0Z2pq6o0bNw4fPhwWFjZ9+nTyQWjfvj0Z
Ucj5EBMln1sk5+JGRka1a9fu0KGDr6/vzJkz169ff/To0Vu3buFuJGIFBQUp
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
NjnHDJrPy8uLadGRI0do11LuMD1fqVIl2oXojj/++IPpVUdHR9q1ZAUGBrKn
pxYtWtAt5s8//zxw4AA51w8aNKhdu3bNvujUqdOwYcMiIiLIBOTQoUNMqd7e
3nRLBW7q16/PbMF79+7RroULT09Ppv6YmBjateiCnTt3Mv3p6+tLuxb4L/Y2
kvxe8+Fg8+bN7OnJ1NRURX/lwYMHwo+YZJGp0MuXL6UsSA5iUmaj9vb2Yi/B
gSrcuHGDecobjyIjIym2KDo6mt/mEFeuXKHYInm8ffuWKdXc3Jx2LfCPpUuX
Mttl+vTptGvhiH2kJkNLh6AACnn48KHwbo9b5QPwaP369ZKGW02aNJFnDWfO
nGEXadCggaS3FRYW7tixo1mzZvKM9MjwacOGDaWlpfw19D/GjRtX4culQs5r
ILOtHj16yDdcFWPixIk8Nkd7ValShemQz58/064F6GAfK9a1a1fatfzn6JSY
mBgWFubn5+fi4qLQh1pfX592+f/CZjSM+/fv065INuYRzJrWkyCnWbNmMTsb
GU7QroUf3377LdOis2fP0q6l3GF63szMjHYhuiMjI4Pp1Tp16tCu5e/g4GD2
9NSqVSva5chw+vRpptQBAwbQrgW4YEd0f/31F+1auPD29mbqv3DhAu1adMHB
gweZ/hw5ciTtWuC/qlevzmyUjx8/0q3k559/Zk9PlSpVUt0fkhSS7tq1S8pS
Fy9elD4hffPmjepqhjI2btwofXMoasaMGXRbFBAQwG+Ltm/fTrdFMhUXFzOl
WlhY0K4F/hEWFsZslzlz5tCuhaPExEThz4KWDkEBFPL69Wvh3R7BPQCP3r59
a2RkJGnEde3aNZlr2L17N/v+Xr16yXz/nTt3QkJC2rRpw/zKUhiZJXXu3HnT
pk05OTl8NK6sFi1aVPjyJWolvxIQFxfXsmVLDiNYf39/vtqi1RDcA/XgPiUl
JTo6eurUqe3btxf+2ryenp5CH2oDAwMq9UuC4B7UDME98IjpeQT3PEJwzxmC
e22H4B6EIbjXQOUwuP/736dCVpMmTYqLiyUtEhISIn1CevfuXeadpaWlS5Ys
IecvlTahnIiMjIyIiBD7T2PHjpW+RRQybNgwNTetjIKCgq+//prHFv344490
WyQTgnvNhOAeQBshuAdQqX79+kkacY0ePVrm4qtWrWLfr9AvyouKip48eXL5
8uVTp05dvXr18ePH5BUl2iFbtWrVmDrT09OVXBWZE02bNk3RESyCewaCe1B/
cP/hw4f4+PjQ0FAvL6+qVasq+uGVxMbGRj31ywnBPagZgnvgEdPzCO55hOCe
MwT32g7BPQhDcK+BymdwX1paOmzYMNFJ5caNGyUt4u7uLn1CeufOHeadZMJr
ZGSkp6c3ZcqU/Px8lTZEh717965v375Sxk4lJSViNyI3Y8eOVXMDRX369Klz
5858tWjlypW0GyQDgnvNhOAeQBshuAdQqcOHD0sacZFpCxn8S1985syZ7PuX
Ll2qnpq5YeIh4tGjR8qvjcyPFB3BTpgwQfm/qwMQ3IMagvuioqIHDx7s2rXL
39/fxcVFIBAo+oGVR61atVRUPzcI7kHNENwDj5ieR3DPIwT3nCG413YI7kEY
gnsNVD6D+7+/hIZkPywzqTQ2Nr58+bLom8lsTuYd4Z4/f86+/8yZM+bm5uTF
r7766uTJk6pui44pKSmJiIiwsbFhpvn37t2T9M6ioiIyPJC+XeQ0d+5cdbZR
kg8fPpCxGS8t2rNnD+3WyIDgXjMhuAfQRgjuAVSqoKCADVJFSfnqL2PEiBHs
myMjI9VSMhdkbMZOeS5duiT8T2R8zmGFr169YtY2ceJEMtdzdXWVOYINCAjg
qTXaDcE9qCi4T0lJiY2NDQkJ8fDwYL+oo1II7pWH4F6rIbgHHjE9j+CeRwju
OUNwr+0Q3IMwBPcaqNwG939/uQAVFBRUZl5J5kTbtm0Tfqoj+e/evXtLn42a
mJgUFhYKr/zBgwdOTk7Mv3p5ef32229qaJEOIOd99uYG7du3l3mXzoKCAl5+
d3/mzBn1NFCmrKysLl26KN+iFy9e0G6KDAjuNROCewBthOAeQNUmT54sadD1
1VdfSX8ivKenpwaOOUWR+SBb5y+//MK+vnfvXmdn57y8PEVX+P79e2ZtK1as
+PvL2I/Ms2xtbaWMYKdPn85nk7QWgnvgK7jPzc29ePFiaGhov3797OzspM4g
VQLBvfIQ3Gs1BPfAI6bnEdzzCME9ZwjutR2CexCG4F4DlefgnrF7927Rr5o3
aNBg6dKlR44cOXny5MCBA2XORlu3bi265pycHPY57Hp6euR4Eh8fr7Z2aZfi
4uJffvmFdCPTXQYGBosWLZL/IZ6rVq0i01iZm0kSW1vbgoIClTZQIYWFhVIu
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
IEhIICEkQYMiEIRAhKCEPbJIQBYjsoXVBEFAlCEgKHCGTUEkAzrkOMOSgQFZ
ZBTxiKAiiiFMEBCC8nLYNIQ1MbvvlZqp05Ol0+mu7lvdfD9/we3qW79b3V1V
t5901cMPP1zxFvZpaWnqAuJsWUrZpuvQoYNSqnpxezEJUuv/4YcfjDx34sSJ
VW0ZNze31atXqxtHPdlISkqy+pDsE8E9Nm7caOJJuDU4OTmFh4cnJCSsWbNG
nFoXFRXJ3h6aIbiHjRHcQ0PKlie41xDBvdkI7u0dwT0MEdzrEMG9Tly9enX9
+vVinyPGbuJUukmTJlFRUUOHDp0xY8Zbb721fft2sac6fvy42N/evn1bq8Ju
3LiRnZ0tZuvinHzz5s3Lly9PTk4eOHBgZGSk6dfr8/PzGzlyZHp6+q1bt7Qq
DPbO7OBeERgYuHv3btmDcEBmB/eK+Ph4sTeTOwSCe9yHCO4BmxFnwkaOgxW/
xF66dKn6qHrjeN2KjY1VSh00aJDScvnyZbX+zz//3Mhzp0+fbvwkQUwfvv32
W7GkmPUoLeoF+VEOwT1sH9zXr18/Ojp69uzZu3bt+uWXX2RvAGshuIeNEdxD
Q8qWJ7jXEMG92Qju7R3BPQwR3OsQwb3eFBUVHT58+PXXX3/qqafq1atn9rzb
zc2tUaNGLVu2jIyMfPLJJ2PvGThw4JB7Ro0alXjP888/r7SIh5RlxMLiKaGh
ob6+vk5OTmYXINYeFxe3YsWK48ePV/zxEWBhcK8Qb+D8/HzZQ3Eo6hcLZhO7
jp07d0ocAsE97kME94DNnDp1ysgZcrmbuQvTpk1TH126dKmUmk33zDPPKKX2
7t1bafn111/V+vfs2WPkuSkpKdWeJIgZSlJSknqpfIL7qhDcw0rBveHuy9XV
NSIiIiEhITU1NSsrS6uLCuocwT1sjOAeGlK2PMG9hgjuzUZwb+8I7mGI4F6H
CO71TMydT58+/cEHHyQnJ0dHRyvzNdswI7L38fHp0aOHmJVs377dTvf5sCVN
gnuhY8eO165dkz0axzFmzBjLXxSxA0lJSZE1BIJ73IcI7gFbeuKJJ6o6Ajo7
O587d85w4WHDhqmPvvfee7JqNpGYpyulxsTEKC03b95U69+yZYuR5y5btqym
JwwE91UhuIf6fbi2/P394+LixIn6/v378/LyZI9SAoJ72BjBPTSkbHmCew0R
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
wcWe2ezXRcw6bVaqzoP7QYMGVbu5xAzd9A7nzZtnvDcdRkXQHME9ING5c+eM
x9CK5cuXy660PLP/WvKxxx77/vvvTVyLmkH37dtXbVQnoZU6ePCgdUZsNwju
ASshuIeNzZ07t+JhzvK/igcqJXYUPj4+RqL/N998c+XKlampqUT/CoJ7sxHc
2zuCexgiuNchgnsAelNYWDhhwgTz5ik6vIGsw8jMzAwJCTHjRXF1df36669t
VqfOg/tZs2ZVu8VGjx5teocXL140/s2PeHTnzp3WGxH0gOAekKtHjx7V7ts3
bNggu8zyHnrooWrLroqHh8eqVatMuahLUFCQ8pQnn3xSbWzTpo3S6OLi8tJL
L3l6ehp2TnBPcA9YCcE9bCw7O/vFF198/vnnhwwZEhsbGx0d3a5dOzGtbty4
sSU3CiT6h5U4Ozt7e3sHBgaGhYVFRkbGxMT07t1bvHvHjBkzZcqU2bNnv/HG
GytWrEhNTd2yZcuHH364f//+b7/9NisrS7zVc3Nzf/vtN9mfuZohuDcbwb29
I7iHIYJ7HSK4B6BPH330UXBwcI2mGOKozdebViWOFNOmTXN1dTX9RXF3d9++
fbsti9R5cC9OKavdaOPHj69Rn4888ojxDgMCAu7cuWOlEUEPCO4BucSRrtp9
+7Zt22SXWV5UVFS1ZRs3ePDg/Px842tRb2r/xBNPqI19+/ZVOzl79uzly5dn
zZrl7+9f614Yobdjt+21bdtWOXyXlpbKrgVwKAT30CFxJL106VJ2dnZWVtah
Q4d27dqVnp6elpa2atWqJUuWpKSkJCUlJSYmJiQkxMXFKel/RERESEiIOG6K
6baFh3KgUpb8cYiHh4ePj494f4o3amRkpHjHireueAOLt7F4M4u3tHhji7e3
eJOLt7p4w4u3/XfffSfe/+KDkJuba8uTH4J7sxHc2zuCexgiuNchgnsAulVQ
ULBy5cqmTZtWOy/w8/Nbt24d323axpkzZ0aMGOHm5lbt69K9e3cx+bJxeToP
7ktKSkJDQ41vNzGrrVGf6vmqEXPnzrXSiKAHBPeAXMXFxQEBAcb3wx9//LHs
Mst7/vnnqz18VMvwAviV6tixo7Jkly5d1MaxY8eqPezdu1dtF0ftEydOWGvA
9iMvL0+cz+Tk5MguBHA0BPdwSET/0CHNo/8hQ4aI97C20T/BvdkI7u0dwT0M
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
2tvu3bu1GhEAAAAAqyK4t3ft2rUzbxoIwJZcXFws/9EEAAAAANzn2rdvr0yy
wsLCxH9//PHHSqdg3333nexKf58yZYols8iEhIT8/HzzVv3pp5+q/ezcuVPb
cQEAAACwEoJ7e5eZmZkKQPc+/fRT2XsLAAAAALB7vr6+yhdZvXv3VlpCQ0Mr
pt6rV6+WW6ewefNmS4J7oU+fPiUlJWas+syZM2onXCofAAAAsBcE9wAAAAAA
ANC/27dvq3n0lClTlMakpKRKf64ut1ShsLCwZcuWFmb3ixYtMmPVRUVFtWvX
Vno4ePCg5kMDAAAAYA0E9wAAAAAAANC/zMxMNdFetmyZ0rhv376KeXd4eLjc
UhXXr1+Pj4+3JLgPCAgwb9Vdu3ZVejhz5oy2gwIAAABgJQT3AAAAAAAA0L8d
O3aoifbWrVuVxjt37ri5uZXLu52dnfPy8uRWq0pPT2/WrJnZ2f21a9fMWOmr
r74qnuvk5KSf7QAAAADAOIJ7AAAAAAAA6N+KFSvUOPvw4cNqe4cOHSrm3RkZ
GRJLLScvLy8lJUW9fH2NfPHFF2as8ciRI7V0c+UBAAAAAKYguAcAAAAAAID+
Gd7O/vz582r7rFmzKubdf//73yWWWqlTp075+fnVNLj/y1/+Yt7qBg8ePGnS
JG2HAAAAAMB6CO4BAAAAAACgf08//bTyLZaTk1NBQYHavnv37op59xtvvCGx
1KoMGzaspsF9SkqKeev67bffcnJyNC0fAAAAgBUR3AMAAAAAAED/WrVqpXyL
1aBBA8P2ixcvVsy7p06dKqtOI8aNG6eU5+zsPGLECF9f32qD+5deekl21QAA
AABsgeAeAAAAAAAA+le3bl3lW6zWrVuXe6hhw4bl8u5nnnlGSpHGTZs2Ta3w
7t27JSUlW7ZsadCggZHgfuzYsbKrBgAAAGALBPcAAAAAAADQuWvXrqlZdq9e
vco9+uSTT5bLu7t37y6lTuPmzp2rVnjhwgWl8U9/+pOR4H7o0KFyawYAAABg
GwT3AAAAAAAA0LkjR46oWfaIESPKPZqQkFAu7+7cubOUOo1bsmSJWuHJkyeV
xrVr16qNbdq0cXNzMxxIfHy83JoBAAAA2AbBPQAAAAAAAHRuy5YtapZd8f71
06dPLxfct23bVkqdxq1Zs0atMCMjQ2ncuXOn2vjaa6/99NNPiYmJderUUVom
Tpwot2YAAAAAtvHll18qs4AXXnhBdi0AAAAAAABAJRYvXqym2/PmzSv3aEpK
il384n7jxo0Vg/tvvvlGbRw0aJDSeOvWrd27dy9btkz9YT4AAAAAx1ZaWpqe
np6amnrx4kXZtQAAAAAAAMB2bty4cf78+XPnzv3666+lpaWyyzEmMTFRTbeX
Ll1a7tGkpKRywX3Pnj2l1Gnctm3b1AozMzOVxgsXLqiNjz32mNwKAQAAAAAA
AAAAAMCRDB8+fIhpcnNzbdNVSUnJwYMH58yZ06VLFx8fH8Ok283NLSoqatas
WWfPntV0M2ijR48eaqmrVq0yfKi4uLh58+blgnv1p+u6ot6zUsjKylIab968
qTbWq1dPboUAAAAAAAAAAAAA4Ejc3d1rmebSpUvW7ionJ2fOnDlNmjQxXNjf
379jx47R0dGGwbezs3NCQsKtW7essEnMFx4erla4du1aw4f++te/VtwOYgiy
SjXi8OHDaoU//PCD0lhaWiq2udp+9+5duUUCAAAAAAAAAAAAgMPYtm1bugHD
X7hv2rTJ8KH8/Hxrd3XgwAHDXHvkyJHqL74VP/3008SJE9UEuUWLFhcuXNBs
W1imrKzM09NTLX79+vXqQ9evX/f3968Y3E+dOlViwVU5ceKEWuGpU6fUdi8v
L7X9//7v/yRWCAAAAAAAAAAAAAAOzPDX7oWFhTbuyjC4X7ZsWVWLpaWlOTk5
KYs9+uijd+7csaROrVy5csUwlFcvlV9cXNy/f/+Kqb2wcuVKuTVX6pdffqk0
uA8MDFTbT5w4IbFCAAAAAAAAAAAAAHBgOgnue/ToYXzJ8ePHq53Pnz/fkjq1
cuTIEcNQfubMmb/fu/j/wIEDK03thT179siuuhJlZWW1a9euGNy3atVKrfzz
zz+XWCEAAAAAAAAAAAAAODCdBPcffvih8SV//vln9YL59evXz8vLs6RUTWzd
utUwlK9bt26fPn28vb2rSu2FH3/8UXbVlWvRokXF4L5Tp05q5Tt37pRYHgAA
AAAAAAAAAAA4MJ0E9zdu3Kh24aioKLX/ffv2WVKqJpYuXWoko6/I3d29uLhY
dtWV69atW8Xgvnfv3mrx77//vsTyAAAAAAAAAAAAAMCByQ3uL126lJqaumHD
BlMWnjp1qtr/3LlzLSlVE5MnT65RcN++fXvZJVdp9OjRSpHnzp1TG5999lm1
+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
AAAAAAAAAAAAAAAAAAAAAAAAAADA7vw/x2AWeg==
        "], {{0, 0}, {2707, 375}}, {
        0, 255},
        ColorFunction->RGBColor],
       ImageSize->Large,
       PlotRange->{{0, 2707}, {0, 375}}]},
     {
      GraphicsBox[RasterBox[CompressedData["
1:eJzsnXd8FUX79k8SIIQEjAFECU2kgxRp0kGkiPQWmoB0KUrvSpWmSFNEUBRF
EJAqIkhReq8C0kGIUgRCIKFD3vuXfZ5955k9O2dOy8455/r+4Qdz5t6dmd2d
ue+5przY4b3GXYJtNlu/tPSfxm8Pqta379tDmkTS/zR7t987Xd/t3OmNd/t3
7tq576sdQuiPhYNsthnpbLb/+3cSAAAAAJKJj4+/+V9u3Lhh+18uX76s/3r7
9m2rMwuALImJidzLXLhw4c8///z8+fNssitXrsyfP79SpUpsykyZMu3YscOi
jAMAAAAAAP/kzp07Nxny5MnDuqBbtmzRf4qLi7M6swA4Qc6cOdmXOTo6euLE
iX/++efjx4/1NLdu3Vq+fHnjxo2DgoL0lGnTpl20aJGFOQcW0qhRI/a1iYiI
GDhw4J49ex48eKCnuX///saNG7t3754mTRo9Jb1CI0aMsC7jAAAAAAAAAJBC
PH36lNM6KUqyOlMAuAIn3L/33nuPHj0SpP/uu+/YoYAsWbLExsamWG4BAAAA
AECgkT9/ftZfPXTokNU5AsBFWOG+fv36CQkJgsS///57VFQUq93v3bs3xbIK
1IEV7l9++eVLly4JEp8+fbpgwYJsmzlv3rwUyyoAAAAAAAAAWAKEe+A3sMJ9
vXr1ZEyWLl3KvvyVKlXydiYBAAAAAEDAAuEe+A26cF+kSJF79+45TH/w4MHQ
0FD95c+RIweFbymQT6AUunD/zDPPXLx40WH6a9eu0auivzZhYWEnTpxIgXwC
AAAAAAAAgFVAuAd+gy7cBwUFHTt2TNKqWbNm7Pu/du1ar2YSAAAAAAAELBDu
gd+gC/dLly6VNPnggw/Y93/KlClezSFQEF24HzZsmKTJihUr2Nfmrbfe8moO
AQAAAAAAAMBaINwDv0EX7osXLy5vtWvXLvb9r1KlitcyCAAAAAAAAhoI98Bv
0IT7iIiIhw8fSppcv349derU+vsfHR0tbwv8A124P3r0qKTJ06dP8+TJo782
qVKlunDhglczCQAAAAAAAAAWAuEe+A0PHz6ckMxPP/3klGHu3Ln19z84OPjG
jRteyiEAAAAAAAhkINwDv2HmzJkUeX3zzTdOWdWpU4f9BHbs2OGl7AE1WbZs
Gb02kyZNevr0qbzV8OHD2dfm008/9V4OAQAAAAAAAMBaINwDEBMTw34CK1eu
tDpHAAAAAADAD4FwDwKckSNHsp/AhAkTrM4R8AFWrVrFvjbNmze3OkcAAAAA
AAAA4C0g3APw4Ycfsp/A0KFDrc4RAAAAAADwQyDcgwBn2bJl7CfQqFEjq3ME
fIALFy6wr03OnDmtzhEAAAAAAAD/w6NHj75gSEhIkDTcsGGDbrVp0yZP5efM
mTMzZsx46623atWqVbRo0Xz58pUuXbp27dr9+vVbuHDhzZs3PXUjq7C8gNev
X583b17btm0rV65cuHDhQoUKVatWbejQoUeOHHH/4mLh/vLly5MnT6bCZs+e
PVWqVPRrlixZihcv3rNnz+3btzu1uZlPc/fu3eXLl/ft27dmzZqvvPJKnjx5
ypcv37Bhw+HDh+/Zsydw6sFf+eqrr9hPoFOnTlbnyJTHjx+vWLHi3XffrVq1
arFixV566aWSJUs2atRowoQJ58+f9+qtqa/5+uuvO3ToUKFCBWqIqCUsW7Zs
69atZ86cGRcX59VbK8K9e/e+//77rl27VqxYsUiRInnz5qW+ICYmZtq0adeu
XbM6dyJOnTo1derUNm3aUAum9WJlypR54403BgwYsHjx4lu3blmdQSc4duwY
vYeU87p161I7/PLLL+fOnZu+gtdee41eTuqsDx486M71z507Rxdp0qQJXTx/
/vxUXXSjiRMnxsbGeqoIAACfY8GCBXoMJd8a7Nu3T7datmyZpzJDzvncuXOp
xatTpw61fponUKNGjR49elDzeOnSJU/dyCosL2BiYuKPP/7YrVs3Criol6G+
gPr99957b+vWrR65vkC4v3379uzZsynEoK4tNDSUfo2KiiKXo127dr/88suj
R488kgH1IXd33bp1FGeRr0IeC70D5HPWq1evT58+GzduDJx68Fd27NjBfgIU
WVidIxG///77oEGDyIUuUaIEfZj0X3otP/jgg8OHD1uYKwo9pk+f3qpVq1df
fbVAgQIFCxYkx5ViWApVKGBx6lL0uW3bto0+t6ZNm1auXJkuRTFm7dq127Zt
S1GetwNMee7fv8++NunSpXPtOtTCr169mpr0Bg0aUKVRQEflpYJToDRlyhTq
uN3J5NGjR0eNGkVXpm4rT548FEdQP9K3b19quDw+ZHTnzh3qFyZNmtS+ffvq
1avTHaksFKSXK1eOWsuhQ4dSRxYfH+/OLR48eLB+/XoKuxo1akTfKYWQdBfq
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
h06XfliSeKl4o0aN2CtTcO2wCHRrTtty6C85i1G4f/bZZy9dumSW/sCBA3pK
bjhOkQJaK9zb5Hb8PnPmDLdwuG3btjJ39CH05TyrVq2SSc/JK++//76Mla8L
91myZBGvAubGWMSHiwnuJRbuY2NjuReSIjWHt6D3nztx3uaecE9BrlhT69+/
P5s+T548MjeCcG/zR+G+Ro0a4gMEuS6pVq1aDu9CaVgTmWaZ+sFChQqxVg6d
jZREPwZI4+uvv5axKlu2rJZefeE+a9as3P4/HM2bN2fTSypKAAAX4A4Qb9eu
nTg9fbzcdiVEcHCwQzWhV69eWmLxUvGhQ4eyVy5WrJhM70luPGvl8aNPjMJ9
SEjIrl27zNKz5xpzAqIiBbRcuCd/0uF+0VSNnG7lcEq/z6EL95KO7okTJ9gT
hWQi9yTfF+6pzTl27JjAhNPRwsLCJHcId0q4p3iHW75dsGBBGaWPO1fO5p5w
T971lStXBCb63pIaqVKlcrg3Y5L/Cvc3btzgnprMIYnULOfLl4+1kl+qb4Q7
pT08PFz8BDU+/fRTmwGHXe2WLVvYaRuhoaHUaDi817fffsveJXPmzImJiYL0
KSnc640kkT17dhmTX3/9VTcRCPenTp3iptLJbCJ669atqKgo1krmpDajcG9z
tBiEGwzJli1b6tSp6dEIhqHoveJK5HD695kzZ7idVDds2OCwONu3b2eno9Br
duHCBYdWAAAAAPBpyA/nPHOH+xA+ffqUOz2Z6NSpk8N76Xv7iKUu8ou42aeL
Fi0SX5nibjZ9zpw5HW6s7SyccK/tVU7Bhdlc/fbt2+uJuTBWkQJaK9yT702e
p3jNy71793RZROPZZ5+V2Rbet9CF+6JFizrcRSEuLo4NadOnTy+Ws3V8Wriv
U6eOLXnwiqI2u+nXr1/PHdI9cuRI1+4lFu6JYcOGsenpNV68eLHYxO4ggMvC
vfa/9MGajb5SMMhtM+hwH28NCPc2vxPutbdFcNI9vfDcEiF6XR3ehdphdmCf
vgKHR+xxu1VQO6ba5n76MUBE48aNHaanjltPr7hwrzWhFStWNNt545dffuFe
A5kBMQCACxiP3ZGZt1m7dm3b/1KhQgWHVvraMfGJ1RSnlClThr24QyeKm0Qa
Hh5+/vx5h/lxCk641yKvjBkzmu0ewMZKnHCvSAGtFe411UNccIrXuOkKqVKl
kjx5yofQNanMmTM71PLo5WE9NHJ4JA9l9mnhXnMbcuXKZSYMHT9+nF5F1iQm
Jsa1e4mF+yTDKmxi1KhRYhMKDDmvxuaGcK/50uXKlTPTVSk8587FphZb5kb+
KtwnJb/JbGyeNm1ah5vV9+3bl70pdVsy+8WZcejQIW6yfaNGjcQzlyiC5tRh
DYfCPTF8+HDWhFxu8Rx7umaWLFlYE4dnK6SkcL9w4UL2Xg4bPSpsyZIl9fQC
4Z6YO3cue/FMmTKJu1fqmNiJBES1atVkZu9wwj01p+RC0Ktotk/s1q1buXeG
Hqs2PEIel923kd4obuYzReIyk3a+/vpr1ipPnjzi+dV37tzR9xTSkFy8AwAA
AACf5quvvnLBAzSeG/XLL784tKLQWHPgyV8S++GbN28OCwvTLx4aGiqYuPjZ
Z5+xkw/p4oLlGBr37t07yyDj+HHC/Z49ezRnOyIiYsyYMXQRPSWFNn369GET
G+efe7uAMlgr3GtSZpo0acz277127ZpxlFL+BCgfgj1As169eoKT+y5evEgR
B1shM2bMkLyLTwv3v/7664svvkj/iI6O/vLLL9m45u+//x49ejT7NREUc7Gf
pFP3cijc379/nzvzNF26dALVkjKstXvcCiaXhfulS5dGRkbSPypXrmyMo9et
W2ecWCU5xgjh3uZ3wv3atWu1wbemTZtyHwV1fAsWLOBGqKgzkhydo6+SXQFK
X4GZG0Dt/8cff8z2YpRY8p1MSdhBKsqteABt9erV7PIKxYX7jRs35siRw5a8
aoa6Ufa4okuXLo0YMYI7bJGerGe3vAYA6OhHz2ukT59eZhYTd9SIZDNC7by+
7PHIkSOClNRBcNOx6Ppmu7X8/PPPrN9Fiak3cZgTNvKSGdbmhPuVK1dqrgJ1
atQYsp1IQkIC9TLseLtxy25vF1AGa4V7Chm0jnjkyJF2V0bTQ+H27yUGDhzo
RAl9BFYDIh9boMrdunWrSZMmbIV0795d8i4+LdxT8FKlShVb8lFukyZNomhL
T0lRGPnAmTJl4l4VCkBcvpdDk/r167Mm9CbT+2z2/a5fvz4iIsJmiLxcFu4p
HNamzRcqVIgcKu6++/fvL1WqFFcbkudx+LFwT1BTw14ka9asO3bssJuSOggu
Mb144j5LBuMJd++8847ZKokTJ05oow10a84rlhHuKeTk+qwGDRqYjeqQj83u
RU+0adPG4S1SUrin4tD19XtROylYKhIfH9+wYUM2b2LhPul/lzjZkrfROH78
uN2U5CBxAxT0Isk8kSSDcF+7dm1taIte7759+546dUpPSaWbPHkyt/CB3IDY
2NirV69qh1TmypXr+++/1xdPUTuwd+9e43ClfB/BxYZlypQxOw/0xo0bWoOs
U7lyZckdTgAAAADgi9SoUSN3MtwgP4U5uRnMQjDyulmryMhIszmlcXFx7AX1
KCA6Olr7i9lZTlu2bNHEKZ0WLVpQMKuL7ImJicuWLeOOlCI3W+b8Ps7vtev7
9erVqyQDN/3y3LlzFBWyf6QAlqI5buqshl23yqsFNKNixYp6ibRhfB2BcE9R
j27F7WAmEO5ff/119tFzdUJOuO7hU67mzJlz7Nixmzdv0rPYtWvX0KFDjTVJ
f3S54CrDqcD0XKZOncpOPKb3Z+fOnf369eO+1m7dusnfRXHhftSoUeznxm04
tj2Z0NBQ7X/pu6MGpEiRIhS4cQfYaQwePNideznMLUWj3AaAlI1WrVrR96t/
7Hfv3qVosWbNmlqC5557jttE0WXhnnK4YMEC/X8LFChQv359in/pv9xWHhqC
g/boM2SrghuFo0ouaQL1IJKZN2Pfvn2Cp0DtjNmtuTM3mzdvrv9kPFNAZeH+
9OnTbLm4sQJqM81qQHwvrpW4cuUKu5dpiRIlGjdu3K5duzp16hgHXW3ObFWR
lDw0ymabvgJ62bZu3aqvZ7lz586SJUu48/jCw8Nl9gO0BKoZtjiNGjWiDpeV
uRMSEn799ddmzZpxLY9RuD979iz71DJmzMimFyhuTZs21a24ZbkC4f79999n
b8fNZdqzZ8/mzZv1iRZsE2p8B2xYxAGAF3jnnXc0f5hre8m3Yb1l8rvsmnM7
pFETJNgitXTp0voF9daA/BDtL2aHop46dUqTLXTIUVm1apUuc5CHQ81+TEwM
myY4OFhmEunVq1dZq40bNxrTUMMo6BapNT558iS7yJf6u/z582fPnt3oCto9
a9urBTSjTZs2eom4GEog3H/99de6VdGiRVkrgXDfpUsX9l3iQtdDhw7Ro9f+
Te0/1TbV0rVk6KcJEyZwS4ZtyacDSJ4+7FtwizcpHifn5/jx47r3Qv84cuQI
uU9cL0mxrbxWorhw/+2337KfGzeNk2IWamE0uUr7CijwodeGPjduizMN8W6K
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
IYJ7WQjuVUBwrwKCexUQ3AcQ3CuG4B6KI7gHjLJ27dqc1/7C8OHDXVxDWlqa
uJi1u5JsLBbLnDlzPC71vvvuy7bC4OBgF+8MkAeuX7+uF7Z69Wpt4vjx47Up
JUuWlFue7yQlJeXc10FBQYcPH5ZdmtkQ3EtBcK8CgnsVEMApguDeEYJ7BXHc
gPr8K7g/ceKEuKbOefHFDfMNR3AvC8G9CgjuVUBwrwKC+wCCe8UQ3ENxBPeA
Ua5evZrzm+xCpUqVXF/Jxo0b7b6BYFefPn1u3LjhQamNGzfOuTbPVuULVqtV
35JLlizRJk6cOFGbUqhQIbnl+U5mZmbZsmVz7ppx48bJLs1sCO6lILhXAcG9
CgjgFEFw7wjBvYI4bkB9/hXcC61atcp55fXkk0/KrstsCO5lIbhXAcG9Cgju
VUBwH0BwrxiCeyiO4B4wkD4OyebAgQOuryQhIcHuSuy67777Nm7c6G6d8fHx
OVcljgbursd3ChcurFU1f/58bcq0adO0KRaLJTMzU255vjNu3Licu2bq1Kmy
6zIbgnspCO5VQHCvAgI4RRDcO0JwryCOG1Cf3wX3K1asyHnl1bdvX9l1mQ3B
vSwE9yoguFcBwb0KCO4DCO4VQ3APxRHcAwZylLmLc4HrK7lx44Y+qnRR69at
d+/e7eL6f//9dz0Wt6XUCDYmJkarasaMGdqUmTNn6qVev35dbnm+c+bMmaCg
INv9IjaFifuVheBeCoJ7FRDcq4AAThEE944Q3CuI4wbU53fBfVpaWokSJWyv
vEJDQ48fPy67LrMhuJeF4F4FBPcqILhXAcF9AMG9YgjuoTiCe8BAq1evzhmI
C2XKlMnKynJ9PZs2bXL9hvkaMX/nzp2///575y/066+/iutlu2tQ6jqiYsWK
WlUTJkzQpsyZM0cv9fz583LL86muXbva7pePP/5YdkUm5CS4F38IV69etVqt
UgozNyfBfUZGhtjsJr6ZhjqcBPdi+4u9IPaFlMLyFScBnLYX0tPTpRSW3zgK
7sVQKp/vBSfB/bVr11JSUqRUlc8R3EN9fhfcC6NHj7a98kpMTJRdkQk5Ce65
BPApR8G9Ns5JS0uTUlV+4yi4t1qtYi8o9S6ciTkJ7tkLecZJcJ+cnCwGujKK
yiNOgnvtHUgpVYHgHoojuAcMJAYb2pvAOW3evNmtVQ0cONDuenIVFxc3fvz4
U6dOZVvhxYsX33rrrfDwcLtLhYSEGLcZDKCP6EaMGKFNWbBggV7tX3/9Jbc8
n/rpp5/0TsWv061bt2RXZEK2wX1GRsbq1at79+5do0YN7c0NTalSpVq2bDlx
4kS3HnUBJ2yDe6vVumHDhoSEhDp16hQqVEjf7MWLF2/UqNHo0aN37drl1ued
4KJswb04Nw0ePLhu3boRERH6XihatGiDBg3E4feHH37grVRfyBbAbd++/aWX
Xqpfv35UVJS+F4oUKfLQQw+Ja8mtW7fyaQofsQ3uxcn31Vdfffjhh23vSiT2
iPjreOWVVzZt2pSvcnzb4P748eNiANmiRYuSJUvqW0acLsVQrX///mvWrLl5
86bsevMFgnuozx+D+wsXLoizgF72/v37ZVdkQrbBvbgEEBdiAwcOzHYJUKxY
sYYNG44aNWrnzp0MPo1iG9yLayttnCNGmNnGOS+//PLGjRvJ8X3ENrjfu3dv
YmKiuNoVv/D6XhBXYbVr1x4yZIi4OiZB9hHb4P7gwYOjR49u0qSJvmuE8PDw
WrVqiUPTN998wydUfcQ2uP/111/HjRvXvHnz6OhofS+I03HNmjXFWOKrr74y
2RuhtsG9ONiuWLHi6aefrl69ekhIiN5+TExM69atJ0+efPjwYdn15hcE91Ac
wT1grMaNGwfY4+7D8m7evBkXF2d3VS6qVKmSGBKIq7AXX3wxPj7eNpHMSQxZ
fbRBXCFGzuvXr7f9gKX+jvHgwYO1KYsWLdKrPXbsmKRK84j+W2SxWK5duya7
HBPSg/sGDRq48ocmLvTeffddsgkv6cH9fffdJ66Lc93sJUqUENfU3M7OWHpw
HxsbW79+/Vz3gjg7iMuZCxcuyC7cVPQArkiRIo0aNcp1LxQtWvSll14Sg3bZ
hZuNFtyLAVKLFi1y3QtRUVGDBg3K+cFIU9KHYZ06dQoMDHS+ZcQG7Nq16549
e2RXbXIE91CfPwb3Qv/+/fWyd+3aJbscE9LfdSxfvnzt2rVzPeGKo9zIkSPF
kFV24X5PewtIjHZatmzpyjjnhRdeyIe3sPY1PR0WR8Vc90KhQoX69evHAzsM
pwf37dq1y/XupmFhYb169eJxUYbTg/sOHTrken1RsGDB7t27m+bTdHpw36RJ
k3LlyuV6KKhYseLMmTNv374tu3CTI7iH4gjuAWONHz/e7mlXXAe5+7nNzZs3
u3vDfI/JfeS09v5weHi4GL8tXrw4OTm5WbNmWmG9e/fW5lmyZIle7cGDByVW
mwfWrFmjN/vZZ5/JLseE9ODeLeKiW/yB37hxQ3b5/koP7t06shUqVGjYsGEX
L16UXb5J6MG9W3shLCxs0KBB586dk12+SegBnFt7ITQ09Pnnnzf3PWfymKO7
JDlRoECBPn36/P7777Jr9y09uHdLmzZtdu7cKbt20yK4h/r8NLj/7bff9ATh
jTfekF2OCenvOro17AkPD3/xxRfN/Yw8X3P+3Q27xDjnmWeeOXHihOzazcP2
a90uCgoK6t69+6+//iq7dvPQg3vXifNCly5dTBMcq0AP7l0nzhodOnT4+eef
ZdfuLT24d0uJEiXeeecd4nvfIbiH4gjuAWPt27fP0Tl3xYoV7q7thRde8ODk
7oHHH3/cF1vDFdeuXct2CR8SEqLfN69r167abJ988ok+g+mPVFlZWZUrV9aa
bdmypexyTMiz4F5Tvnz59evXy+7AL+nBvQeKFy8uDgKyOzADPbj3QOHChRcs
WGC1WmU34ff0AM4DERER77//Pg+SMIQHwb0mLCxs6tSpJr6Xryu347BLjOjE
2JVPuPkCwT3U56fBvdCxY0et7LJly+arB6PkjWzvOrqlaNGiixYtkt2Bv7K9
CbNbxDhn8uTJPKrJEOJ32LO9IHbfuHHjeISBIVz5jrNd4mIhMTHR3I9fzzPV
qlXzbC8EBga+9NJLfn3zfM+Ce03FihXdffYuXERwD8UR3AOGE2dVu2fb+Ph4
d1clRiaO1massWPH+mBLuGT//v1OCqtevbp2r3jbW+Vv2LBBVrV5Zs6cOXq/
e/fulV2O2XgT3Gv69Olz9epV2X34GW+Ce03btm1Pnz4tuw//5k1wr2nZsqXY
lbL78G/eBPeaxo0b//bbb7L78Hu53qTRufr165v1FkD33XefN1umXLly3377
rewmzIbgHurz3+B+y5YteuXc7sxw3gT3mvj4+HzyqBpjBQUFebPZ69Wrd+DA
AdlN+L3w8HBv9kKNGjV2794tuwm/58F9D2xVqVJlx44dspvwe2XKlPFmL1So
UGHTpk2ym/CQN8F9wN2PRoshFs9RNRzBPRRHcA8YTj/yZxMYGPjnn3+6u7Zx
48Z5c3530bp163yxKVyRa4RasWLFBQsWPPfcc/qU5cuXy6o2z6SkpERHR2v9
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
bsWPEdxDcQT3gK+1b9/e0Rm2U6dOzpe1vY/cl19+mTcFe+D27dt6nd98840+
/dChQyNGjPBghf/884/tIGTfvn2tW7d2Plzxo2+gV6lSxd3BmF3169fP9aYN
cN2NGze8v3Oj+F2V3YefSU9P9/4O1atXr5bdh38Tl7qvvvqql3th8eLFsvvw
b1ardcyYMV6+dzF79mzZffg3sRcmTZrk5VPdxRpk9+ETX3zxRWRkpDdbplu3
brKb8GME91CfmsG9UTdmL1WqFN+sNFBGRob38eWyZctk9+F/pkyZon/nwjOu
PPMRzv373/8uUKCAN3shMTFRdhN+b9GiRaGhod7sBT/69pCyli9fHh4e7s1e
6N27t+wmPJScnNy2bVtveheOHj0quw8/RnAPxRHcA762YsUKR2fYwMDAP/74
w8myDRs29Is/z5SUFL3OTz75RJ+ufaJ769atHq/Q9qrw888/d/JddcUfJWAr
1w8huG7BggWyuzEVLyObzp07y+7AX4nf5JCQEM82e40aNTIyMmR3YAbLli3z
+Kq5UqVKfJHWEElJSfqjZ9xVtmzZW7duye7ADL799tsiRYp4thdKliyZnJws
uwNf+e233zz+bkhQUND+/ftld+DHCO6hPjWDewMf7T1s2DDZ3ZjNp59+GhYW
5tnuqF69OrcK98z69euLFi3q2WYvUaLE1atXZXdgBjt27PD4EYriYoEH3Bti
79695cqV82wviGPXyZMnZXdgBuIC4d577/VsL4SEhPh1cm21WseOHevxR/ef
euop2R34N4J7KI7gHvC1O3fuOLkseuWVV5wsW7FiRX3O06dP51nN7hKDDX2k
MWPGDH16XFycmDJy5Eh3VyiuwbW1ZfvCfpcuXRxtyXfffdeATvKEaMqzUVlO
xYoVu3TpkuyGzCYpKSk2NtbdfVGhQoUzZ87Irt2P/fTTT/fff78HfwIkQQba
t29fzZo13d0LUVFRu3btkl27eRw+fLhevXru7oXw8HAPPiYHR44dO9aoUSN3
90JoaOi3334ru3bfunLlylNPPeXulhGmTp0qu3b/RnAP9akZ3H/88cceHLLs
Cg4O5lFlhtu9e3f16tXd3RdFihTZu3ev7Nr92IkTJzx4ioQY59jeXxFeOnXq
lAePjRMHopUrV8qu3TzOnTvn5C6pjgQGBi5atEh27eZx6dKlrl27ursXLBaL
OfLWzz//3IOP8VSuXPnChQuya/dvBPdQHME9kAdsH1WfjbjkvHnzpqMFIyIi
9AFJWlpaXtbsroIFC2qlvvXWW9oUq9WqfYW2bdu2zpf95ZdfxKD3/Pnz+hQ9
uM9276lnnnlGm57zxmKrVq0yvCkfWbt2rbtDMif69u0ruyETunbt2iuvvKL/
VueqWbNmKn+0xl+kpqa+8847rn/R9YEHHiC1N5w4/E6bNs3J7U2yqVKlyu7d
u2VXbTaZmZmzZs0qUaKEi3uhQoUKO3bskF212WRlZS1YsMD1z3GVLVt248aN
sqvOI99++63rH/KJioqaN2+e7JL9nqPgXlzOi4H0nj179u3bd+7cOVnlAf9R
Nbj/448/XDxYuaJx48biIld2T2aTlpY2adIk178DXq1aNR5P5j0xzlm4cGHp
0qVd3OxlypT57rvvZFdtNuJ4smTJEte/blyqVKmvvvpKdtUmtHLlykqVKrm4
F8RIbPny5bJLNiHxu+36VzmKFClipkf1XblyZejQoa7fhbJly5bcdsN7doP7
27dvHz16dM9d4n/EJZjECpHPEdwDeeDHH390csKdO3eu3aVu3bplOzLM45rd
pWdt+vfrk5OTtSkPPPCA82W1ZyuLIUrv3r0PHjz4H5s3J5955hnbOfVnYY8e
PXrevHm2b6c7f+iAUm7cuGE3EY6OjhZNHThw4MiRI+vWrRs1alS1atVyHbAF
BgaSXfqIOEWK37SyZcs62vjBwcFt2rQRV3m8g2egq1evTp061cndmC0WS+PG
jRcsWMAd8n3n+vXr7733njh6Ozn4NGjQYPbs2Yp/qMyv3bx5U1xCPvjgg072
Qt26dWfMmMHlpO+kpKSIo029evWc3MOwVq1aU6ZMyW/PKcjKyvriiy8effRR
cSp0tGXKlSv3+uuv87aSIWyDe/H/8+fPj4+P1z/iqxNT2rdvLy4u/vrrL9kl
I99RM7gX7rvvvpwHqNDQ0EmTJu3Zs+e3337bvHnzO++8IwY2rtyudsWKFbIb
Mqfk5OR3333XSWoj9k6jRo3E8Y075BtIjHMWLlxYv359J7/8NWvWnDx5cn4b
5+Sl1NTUxYsXN2zY0Mkz+8SfxoQJE65duya7WNMSB5alS5c2a9YsKCjI0V6o
VKnSmDFjrly5IrtY08rMzFy1alWrVq2c7IW4uLiRI0devHhRdrHGE6P3xMRE
J5+nKlCggBjnr1mzRnalJmEb3P/yyy+DBg0SI8ZsZ0Pxz6pVq7788subNm1i
+IE8RnAP5I0qVao4OvNWq1bNbup34sQJfZ4aNWrkfc1u0W/soz/778KFC9qU
4sWLO1/W9o4E4pzYokWL6dOna/98/PHHbed87bXXtOmjRo36z90Pws2YMUPM
36VLF/9KTjt37pzzN2HZsmU55xSH5Z49ezoZtQrx8fF530K+cuDAgYULF44Y
MWLgwIGvvvrquHHjxLhu27ZtXDj71PHjxz/55BPxxy7Gz2Kc/MYbb8ycOfP7
77/n8RB56Y8//vjss89Gjx49ePBgcXgX/yOOut999x23ZctLp06dEicI8Scw
ZMiQl156SewFcZZcv349eWheOnPmzIoVK8aMGTN06NAXX3xRHJrefffdb775
hoekJCcnf/3112+//bY4RIgDxfDhw6dMmbJq1SpxDPevsZni9OA+KioqJibG
ybDQdnzIEzSQl5QN7u0+p0wcz3POeezYMXGqdf7U9YoVK/KpRZ86ceLEkiVL
9MGnGP+899574hLAlDGNOs6ePbty5UrGOXKJKywxgho3bpzYBWJHjBw5ctq0
aWKUJa4FZJeWj1y6dGnNmjXjx48Xl13ijCDOIFOnTv3yyy/96LtCJnDlyhWx
zd966y1tLyQmJorri88///z33383/fWFaPCXX35ZsGCB6DohIeG1114Tx4S5
c+fu2LHj+vXrsqszFT24d/4pfV10dLS45uV9YOQZgnsgb4jxhpODv917jm3f
vt32nbe8r9ktFSpU0EodMGCANkU/vIjTX2pqqpNlnTxKoHnz5rZzvvnmm9p0
MXTxXS954LPPPsvZ7J9//ulo/kOHDnXs2NHdXyEAAACYgB7cu6tx48bbtm2T
XT7yBWWD+3379uX803DyqO4zZ87069fPyQenZ86cmZf1AwAAwFh6cO+WwoUL
jxo1irvQIA8Q3AN5Q1z+O7n279SpU85FVq5cqc/Qs2fPvK/ZLbVr19ZK7dWr
lzbl9OnTev0nT550sqyT4L5YsWK2cfa0adO06S+++KJP2/G11NRU/R4Fuj17
9jhfaseOHY7uXF2/fv28qRwAAAB5zOPgPuDuZ2gTEhL4kg58TdngXmjQoEG2
v4slS5Y4X+TXX39t2bKl3b+p6OjolJSUvKkcAAAAhvMsuNdUqFBh48aNsjuA
yRHcA3mmQ4cOjg74gYGBOW+7NHPmTH0G9XPq5s2ba6U+8cQT2pRz587p9e/c
udPJskOHDnVyNoyMjHzvvfcyMzPFnPPmzdMmDhkyJC+68qWxY8dm6zTXt4/+
czfxHzVqlN3nye7atSsPygYAAEAe8ya415QtW/bbb7+V3QfMTOXgftmyZdn+
IkaOHJnrUlardc6cORERETn/oBYvXpwHZQMAAMAXnnvuOW+urSwWS//+/W/c
uCG7D5gWwT2QZ77++msnB/xXXnkl2/y2D+MbP368lJpdp9/IvX379tqUixcv
6vWvX7/eybKjRo3K9YRYp06dH3/8ccmSJdo/TRDci+0TGRlp26P+lIFc7dmz
p2LFitk20euvv+7TggEAACCF98F9wN33l8aOHSu7FZiWysF9enp6pUqVbP8c
mjVr5uKyJ0+ebNiwYba/JnHx69OCAQAA4Dtt2rTx/vLqgQce+Ouvv2S3AnMi
uAfyTGZmZrly5Rwd6osUKZLtCSl9+vTRfzpnzhxZZbuoZ8+eWqktW7bUply9
elWvf/Xq1U6WnTRpkosnxJiYGO1/TBDcC2+//bZtd1WrVnV92StXrrRu3dp2
8c6dO/uuVAAAAMhy+/ZtF0fLuRo4cGBGRobshmBCKgf3wueff277h1CwYME7
d+64uGxqamrfvn1tF69SpYpPqwUAAIDvNG7c2JBrq9jY2H379snuBiZEcA/k
pZx3R7c1d+5c25ltP/q1cuVKWTW7aODAgVqpDRo00KbcvHlTr9/5vQT1G+C7
zhzBfUpKSlxcnN6UxWI5f/6864tnZGQMHz48KChIW/ydd97xXakAAACQJTMz
093RshPt2rVzPbIEXKR4cC+0aNHC9g9hy5Ytbi3+73//Ozw8XFu2V69evqkR
AAAAPte+fXujrq0iIiI2bNgguyGYDcE9kJfOnDmjx6w5VatWzWq16jPXqlVL
/9GmTZsklu2KxMRErVRRtjYlNTVVr3/WrFlOlk1KSnL3nFikSJGhQ4ceP348
T5rzod27d4eGhup9LV++3N01HDly5MMPP1y7dq3tLw8AAADMJDY21t0BsxOd
O3fme/cwlvrB/dmzZ6Ojo/UiPXhyxF9//fXxxx+vWLEiLS3NBwUCAAAgL3jw
LUInwsPDf/zxR9k9wVQI7oE81qFDByfH+Y0bN+pzlihRQp9+4MABiTW74q23
3tJKrVy5sjbF9ptBkyZNcrLsvn37PDstFihQ4KWXXrp69WqetOgrH3zwgf5x
jsTERNnlAAAAQDmdO3f2bMDsyPDhw2X3BFNRP7gXNm3aVKhQIa1IHjQGAACQ
P+3du9fYa6vo6OizZ8/KbgvmQXAP5HTVl5YuXerkIN+uXTtttkuXLgUGBurT
f/31V59W5b0JEyZopcbExOgT9RZeffVVJ8ueO3cuODjY4zOjeMWNGzf6vkUf
Er8VRYoUEb3069dPdi0AAABQzuzZsz0eLdtlsVi++uor2W3BPHr37q3/drVs
2VJ2OQ5t3ry5bNmyoshmzZrJrgUAAAASXLlypUyZMsZeXjVv3lx2WzCPI0eO
2P52Edwjn8vMzLS9QT0AAAAAAAAAAAAA5DHb23QD+VBqamrx4sVl/yECAAAA
AAAAAAAAyL/Wrl0rOzgFJLt48eLGjRu/96WlS5fa3gY/m4iIiKSkJP2R8cI9
99zj03o8MHnyZFFYbGzsY489NmXKlA0bNowePdr2SKLNJnrRpnTo0CHXdY4Y
MUJ/4KBnEhISfNw3AAAAIMc333xTunRpb0bLObVq1Up2WzCJ9u3b679X9erV
k10OAAAA4MywYcOMvbYSlixZIrstmMGyZctsf6+4VT6QNzp06ODkCL948eKF
Cxfq/6xevbrserMbPHiwbcElSpRo2rSp/s8LFy5os2nPbRd69+7tymr/+uuv
rl27enxm7NGjhw97BgAAAKTauXNnSEiIx6PlnO69917ZPcEknn/+ef336tFH
H5VdDgAAAOCM1Wq1/eipIZYsWSK7LZjB2bNnbX+vCO6BvJGUlOTkCN+0adPx
48fr/2zUqJHserOLj493Uv+BAwe02aKiorQpnTt3dn3lW7ZsqVmzpgdnxrp1
6/qmXQAAAEAJc+bM8WCc7EhISIjVapXdE8yA4B4AAAD+5cqVK5UrVzbw8mri
xImye4IZENwDUmRmZpYtW9bJQd42uW7Xrp3serN74IEHnBQfGxv75ZdfXrt2
LTg4WJvyr3/9y631Z2RkDBkyxN0zY0REBG88AgAAwNymT5/u7jjZEYJ7GIXg
HgAAAH7nzJkzFSpUMOryiuAehiC4B2QZN26ciwf8p556Snax2bl7OnvwwQfd
fYkLFy649RKaK1eu+KJfAAAAQB1jx471YKicU5kyZWS3ApMguAcAAIA/+vPP
P51/xdJ1ixYtkt0NzIDgHpDl77//LlCggCsH/IEDB8ouNrsyZcq4dc4S82dl
Zbn1Erdv39YXr1KlSsWKFV15oZMnT/qmYwAAAEAhY8aMsVgsbo3Jc3LrgVaA
EwT3AAAA8FPHjx+Pi4vz8tpKOHTokOxWYAYE94BEnTt3duWAP2LECNmVZhcb
G+vuaatRo0ZHjhxx/SWsVmtQUJC2bL9+/cSUAwcO5LrFxDw+axoAAABQyLJl
y8LDw90dlttasmSJ7CZgEgT3AAAA8F+XL19u2bKlN9dWlStXlt0ETILgHpBo
/fr1rhzzJ02aJLvS7DwI7oXQ0NA333wzLS3NxVeJiorSFtS/CpSVlaVPtGvH
jh0+axoAAABQy/79+++9914PRuZCjRo1MjIyZHcAkyC4BwAAgF/LzMwcPny4
Z9dWwhdffCG7A5gEwT0gkdVqrVSpUq7H/Llz58quNDt3n3Fvq06dOidOnHDl
VUqXLq0t0qpVK31i1apVtYlBQUE572CzdetWnzUNAAAAKOeff/7p2bOnu2Py
mJiYo0ePyq4d5kFwDwAAABNYvXp1qVKl3L28evXVV2UXDvMguAfkmjx5cq6H
/WXLlskuM7u6deu6e/KyFRUVtXLlylxfpUqVKtr8TZs21Se2aNFCX8/ff/89
d+5c2y8Zcat8AAAA5EObNm2qX7++i6PxVq1a/fHHH7JLhqkQ3AMAAMAckpOT
hw8f7uJTyQoXLjx79mzZJcNUCO4Buf7555+CBQs6P/ivXbtWdpnZefnAF8Fi
sUyfPt35q+gfD2jSpIk+sUePHvpKtO/XZ2Vlif+ZMmXKyJEj09PTfds5AAAA
oKotW7aI0XKRIkXsjsCLFi3aq1ev9evXyy4TJkRwDwAAADP5559/Jk2aVLt2
bYvFkvPaKigoqE6dOlOmTLl48aLsSmE2BPeAdLZJtF3btm2TXWN2R48erV69
uosZvSPFixd3/irNmzfX5hT/o0985ZVX9DV89NFHvu0TAAAA8DcZGRn79+9f
sWLF/LuWL1++bt26U6dOya4LZkZwDwAAAFO6ePHid99999FHH4lrq8WLF69a
ternn39OSUmRXRdMi+AekG779u3OA+69e/fKrtGOW7duvfHGG2FhYd5k91lZ
WU5eol27dtpsLVq00CeOHz9eX3zMmDG+bxQAAAAA4AzBPQAAAAB4j+AeUMED
DzzgJN1W+bntf/31V69evQIDAz0L7p3f2f7JJ5/UZmvVqpU+cebMmfriffv2
9X2LAAAAAABnCO4BAAAAwHsE94AKZs2a5STdnjp1quwCc3Hw4MH4+HgPgvvU
1FQnq+3fv7822yOPPKJPXLRokb74448/7vvmAAAAAADOENwDAAAAgPcI7gEV
3LhxIzIy0lG6/eCDD8ouMHcZGRllypRxN7hPS0tzss5Ro0blDO4///xzfXHb
W+gDAAAAAKQguAcAAAAA7xHcA4p47rnnnATchw4dkl1g7tq2bStKtVgs1atX
dzG4z8zMdLLCefPm5QzuN27cqC9eq1Yt37cFAAAAAHCG4B4AAAAAvEdwDyji
559/dhJwjxw5UnaBuevWrZsoNTY2Vvz/Tz/91Lx5c+epvcVicb7CpKQkbc7W
rVvrE3fv3q2voXz58j7tCAAAAACQK4J7AAAAAPAewT2gjlq1ajnKuMuXL5+V
lSW7wFw8++yzotQyZcroU7788svSpUs7aioyMtL5Cvfv358zuD927JjrawAA
AAAA+BrBPQAAAAB4j+AeUMf06dOdfD9927ZtsgvMRUJCgqizSJEithM3bNjg
qKOyZcs6X2FycrI2Z9u2bfWJFy5c0NdgsVic32wfAAAAAOBrBPcAAAAA4D2C
eyCby5cv75Fk06ZNISEhjmLuzp07yyrMruXLl+/atct2SteuXUWdgYGBthMX
LVrkqKNq1arl+ioxMTEBd79xr0/58ccfbVeyfft2ozoCAAAAAHigS5cu+jVa
w4YNZZcDAAAAAH5p3bp1BPeALjU1tUSJEo6CZgAAAAAAAAAAAADwKYvFsmHD
BtnBKSBTRkbG/fffL/tvEQAAAAAAAAAAAEA+FRMTc+XKFdnBKSBZVlbWVXku
XrxYpEgRR3+kbdq0kVibrWz3q8/m559/1uc8duyYNjEsLMx2DSdPnnTxtbZt
25Ztyr333qu/1g8//OBlLwAAAAAAAAAAAIA6MjIyZEemAP5TpUoVR4F4gQIF
Ll26JLvA/zp06JCT4H716tX6nLdv39YmBgcHG/XqtWrV0l9r165dRq0WAAAA
AAAAAAAAAICsrKyCBQs6ycQXLFggu8b/Onr0qJMiw8LC3n33Xe2zQFarNTAw
UJtu1Ks3adLE9hv3Rq0WAAAAAAAAAAAAAICzZ886CcSFxx9/XHaN/5VrnUKt
WrV27twpZo6IiDA2uG/btq3+Ktu2bTNqtQAAAAAAAAAAAAAA7Nixw3kaHhUV
lZ6eLrvM/1y/fj3X4F6wWCwdO3bU7yFg1Kv/z//8j/4SmzdvNmq1AAAAAAAA
AAAAAAB88skneiT9zDPP2E3Dt2zZIrvM/97SPygoyJXs3pZRr96vXz99nd9/
/71RqwUAAAAAAAAAAAAA4M0339Qj6X379lWpUiVn/P3666/LLvO/YmNj3Q3u
J0yYcPbsWe9fOjExUV/nt99+6/0KAQAAAAAAAAAAAADQ9OnTR8ujLRbL7du3
hw8fnjP+rlmzpuwy/6tevXruBvdCgQIFhg4dmpyc7M1Lz549W1/h2rVrjeoI
AAAAAAAAAAAAAIDmzZtreXRsbKz459atW+3G36dPn5Zd6X+eeuopD4J7TXR0
9HfffefxS3/11Vf6qsT/G9gUAAAAAAAAAAAAACCfK1eunJZHN2nSRPwzIyOj
SJEiOYPvzz77THal/5k5c6bHwb0QFBQ0d+5cz156//79+nq+/vprY/sCAAAA
AAAAAAAAAORb6enpQUFBWh7du3dvbWK3bt1ypt4vvfSS1Er/6+zZs2FhYV5m
95597/7atWsWi0VbyaZNmwxvDQAAAAAAAAAAAACQP/3+++96qD1u3Dht4qJF
i3JG3g0aNJBbqiYpKSk6Otqb7N7jRqpVq6at4ZdffjG2KQAAAAAAAAAAAABA
vvX999/rifbixYu1iadPn86Zd4eFhWVmZsqtVnP+/PkuXbp4HNwHBgbevn3b
g9d97rnntDVcvnzZ8KYAAAAAAAAAAAAAAPnTggUL9ET7+++/16fHxcXljLz/
+OMPiaVms3nz5ho1aniW3e/fv9+DV1y+fLlYtnjx4ob3AgAAAAAAAAAAAADI
t0aMGKHH2UeOHNGn9+nTJ2fenZSUJLHUnDIyMiZPnhwUFORucL98+XIPXi41
NTUuLu6xxx4zvBEAAAAAAAAAAAAAQL7VvXt3Pc5OTk7Wp9t9zP306dMllupI
+/bt3Q3u33nnHc9e68CBAzt27DC2fgAAAAAAAAAAAABAfvbwww9rWXZ4eLjt
9EOHDuXMu1977TVZdTqh3xzAYrEUKlTIleD+9ddfl101AAAAAAAAAAAAAAD/
VaJECS3LrlSpku30jIyMggULZsu7e/bsKatOJwYPHqxXeP369XXr1j3++OPO
g/uEhATZVQMAAAAAAAAAAAAA8J9bt25ZLBYty27evHm2n9apUydb3h0fHy+j
zFwkJibqFZ4/f16b2LdvXyfBfY8ePeTWDAAAAAAAAAAAAACAcPjwYT3LfuKJ
J7L99Mknn8yWdzdp0kRKnc5NmDBBr/Do0aPaxOnTp+sTCxQokK2RnM0CAAAA
AAAAAAAAAJD3kpKS9Cz7+eefz/bTQYMGZcu769atK6VO59577z29wgMHDmgT
ly1bpk8cP378tGnTSpYsqU95+umn5dYMAAAAAAAAAAAAAIDw/vvv61l2YmJi
tp+OGTMmW3Bfv359KXU698EHH+gV7tu3T5u4detWfWKvXr3ElJSUlE8//bRn
z5716tVbunSp1JIBAAAAAAAAAAAAAPivYcOG6en2O++8k+2nI0aMyBbct2jR
Qkqdzi1fvlyvcP/+/drE48eP6xMbNWokt0IAAAAAAAAAAAAAMJPVq1evdE1K
SordNXzxxRcursHWN99840p5Z8+enTx58lNPPdWkSZNGjRp169btzTff/P33
3w3dBobp3Lmznm6/++672X7aokWLbMF9x44dpdTpnO0N/w8dOqRN/Oeff/SJ
MTExcisEAAAAAAAAAAAAADMJCQkJcM25c+fsriEqKsrFNdiqUKGC88Ju3br1
3HPPBQUF5VzWYrF07dr1n3/+8cH28MqDDz6oFzl79mzbH+3du1eUna2RHj16
yCrVCdu74h85ckSbmJ6ebrv909LS5BYJAAAAAAAAAAAAAKbRpk2b1jZCQ0P1
fLZly5a2P7p8+bLdNURHRxse3J87d65y5cranPfdd98HH3xw5MiR48ePL126
tGbNmtr02NhYPVZWRLFixfQGFyxYoE+3Wq05v24vPPfccxKrdWTPnj16hUeP
HtWnh4eH69MvXLggsUIAAAAAAAAAAAAAMLHY2Fg9nHXxW9VbtmwpVKiQHqbX
zU3ZsmWdB/e3bt2qU6eOtsIGDRpcu3bN9qepqant2rXTfhoXF3fx4kVvezbI
9evXbUP5uXPn6j96//337X564c0335RYsCOnTp2yG9yXLFlSn/7bb79JrBAA
AAAAAAAAAAAATMyD4P4/d2+urmX3JUqU0J+K7sjMmTOdB/dDhgzRCggPDz99
+nTOGZKTk/UQuUuXLi4W6WsHDx60DeXHjx+vTV+yZIndG/4Ly5Ytk1uzXRkZ
GXrBtsG9fg8EYefOnRIrBAAAAAAAAAAAAAAT8yy4F7Zt2xYREeFKdu88uP/j
jz9CQkK0Al5//XXnKwm4+7z1Xbt2uV6n7yQlJdmG8jVr1ly8eHG3bt3sRvaa
vXv3yq7aPv3XwDa4r1evnl75unXrJJYHAAAAAAAAAAAAACbmcXAvbN++PTIy
UiwYHR198OBBR7M5D+4TEhL0Ag4fPuxoJZcuXQoODtZm69Spk1t1+sjs2bOd
ZPQ5WSyWGzduyK7avocfflgr8tdff9UntmrVSi/+008/lVgeAAAAAAAAAAAA
AJiYN8G98MMPP+jZ/YEDB+zOc+jQofnz59u9S3xmZmaJEiW0V3dyL31N48aN
tTlDQ0OvX7/ubqmGe+2119wK7suXLy+7ZIeeeOIJrcjjx4/rE7t06aIXP2vW
LInlAQAAAAAAAAAAAICJeRncCz/++GNUVJRY/J577nGU3TuydetW/dWffPJJ
5zMPGzZMn3np0qUelGos53fFz6lv376yS3Zo7NixWpFnzpzRJ/bp00cvftKk
SRLLAwAAAAAAAAAAAAAT8z64F3bu3Kln9/v373d9wYkTJ+qvLv7f+cwff/yx
PvOQIUM8K9VADz30kFvB/WeffSa7ZIfWrVsnKgwMDLT9HRg6dKhe/BtvvCGx
PAAAAAAAAAAAAAAwMUOCe2HPnj1FixYVKxH//fnnn11c6umnn3Y91968ebM+
c6tWrTwu1SglS5Z0PbW3WCznz5+XXbJDd+7cETuubt26thPfeOMNvf5XXnlF
Vm0AAAAAAAAAAAAAYG5GBffCrl27tOfdFy9efM+ePa4sUqdOHf3Vt2zZ4nzm
Y8eO6TOXKlXKm1K9l5KSYrFYXA/uRadyC87Vhg0bdu7caTtl6tSpev0JCQmy
CgMAAAAAAAAAAAAAczMwuBe+++67kJAQLbv/9ddfc52/dOnS+qsfPHjQ+cyX
L1/WZw4MDLRarV5W643ffvvN9dRemDVrlsRqPTNv3jy9/meeeUZ2OQAAAAAA
AAAAAABgTsYG98LSpUsDAwPF2kqXLn3q1CnnM0dFRemvfvz4cecz37p1yzYK
F//0vlqPbdiwwfXUPiws7OrVqxKr9cxnn32mt9C9e3fZ5QAAAAAAAAAAAACA
ORke3AtjxozRVlitWrXk5GRHs1mt1qCgIP3Vc035MzMzbdPwv//+25BqPbNg
wQLXg/u+fftKLNVjX3/9td5Ct27dZJcDAAAAAAAAAAAAAObki+A+PT29Vq1a
uX5TOysry/Yx8WfOnHG+WqvVapuGnz592pBqPTNq1CgXU/vAwMD9+/dLLNVj
W7Zs0bvo0qWL7HIAAAAAAAAAAAAAwJx8EdwLe/bsCQ4O1la7ZMkSR7MVKlRI
f/Xff//d+Trv3LljG4jLvfl8z549XQzun332WYl1emPv3r16F4899pjscgAA
AAAAAAAAAADAnHwU3Avdu3fXVlu4cOErV67YnadkyZL6qx8+fNj5CpOTk20D
8YyMDAOrdVfTpk1dSe0jIiLk3tLfG3/++afeSPv27WWXAwAAAAAAAAAAAADm
5LvgfuPGjfqaJ0yYYHeeKlWq6PPs2rXL+QpPnz6tzxwZGWlgqR6Ii4tzJbif
OHGi3Dq9kZqaqj/LoE2bNrLLAQAAAAAAAAAAAABz8l1wn56ert8Jv1SpUqmp
qTnn6dixo/7qa9ascb7CXbt26TPXrVvXwFLdZbVaCxYsmGtq36JFC7m3BfCe
fkuERx55RHYtAAAAAAAAAAAAAGBOvgvuhYceekhf+datW3POkJiYqM8wa9Ys
52tbvXq1PvMzzzxjbKluuXTpUq6pfUxMjP/eJF+n78HWrVvLrgUAAAAAAAAA
AAAAzMmnwb3tF+rnz5+fc4bly5frMwwcOND52t566y195unTpxtbqlt++eUX
56l9WFjYTz/9JLFCo3Tr1k3rSOxK2bUAAAAAAAAAAAAAgBlcunQp2xQPgvt9
+/Z9//33f/75Z65z5hrcJycnh4SEaDPUr1/f+do6deqkr+3EiROulOoj33zz
jZPUvlChQmL7SCzPQJMmTdKaevrpp2XXAgAAAAAAAAAAAABm0Lx581GjRt25
c0ef4kFwHx8fL2YeNGhQrnPWq1dPX3lSUpLdedq2bavNEBIScuXKFUerSk9P
L168uDZnrVq1XKnTdxYsWOAotS9cuPCPP/4otzwDbd++XetrxIgRsmsBAAAA
AAAAAAAAADNo1KhRQEBApUqVNm/erE3xOLjPNT2/ceOG/m364ODgy5cv251t
7dq1egHz5s1ztLakpCTnX97PS59++qnd1L5q1aoHDhyQW5ux7ty5ExYWpsI2
BwAAAAAAAAAAAABzWL16dcmSJQMCAiwWy7PPPnvlyhWPg3th586dTmabNm2a
vuZOnTo5mbNZs2babJUrV7Zbg9VqbdKkiTZPlSpVMjIyXKnTd/7555/IyMhs
qX1CQsLt27flFuYL/fv3F90dPHhQdiEAAAAAAAAAAAAAYBJXrlzp27evxWIJ
CAgoUaKE9n1qz4L7atWqObq5/d69ewsVKqTNJl7i+PHjTlZ48OBBPQcfOXJk
zhlmz56t/bRAgQL6vQLk+vjjjwMDA/XtsHbtWtkV+crly5e7d++elZUluxAA
AAAAAAAAAAAAMJUtW7ZUrlw523fGXQzuH330UX2RuLi41atXp6en6z+9devW
+++/rwfxISEh69aty3WdSUlJQUFB2iIvvfTS1atX9bWNHz9ej8gXLFjgWb++
sHPnzvnz54stSagNAAAAAAAAAAAAAPDAnTt3Ro8erT+G3vXg/vLly2+++WaJ
EiX0BcPDw2vXrt26dWvx39DQUH16jRo19u7d62I9mzdvLlOmjO0K69Wrp38A
oFixYp9//rkX7QIAAAAAAAAAAAAAoKLDhw/36tWr211uPTtezLxhw4aBAwc+
+OCDwcHBtt/cL1u27JNPPpmUlOTuV9GTk5NnzJghVqh/xd5isdx///0TJkw4
f/68m50BAAAAAAAAAAAAAJBfpKam/v3337/99tvJkyevX7/u/QozMjLOnDkj
1ubiTQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AADw/9qDQwIAAAAAQf9fu8IGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACTAEJBEd8=
        "], {{0, 0}, {2707, 299}}, {
        0, 255},
        ColorFunction->RGBColor],
       ImageSize->Large,
       PlotRange->{{0, 2707}, {0, 299}}]},
     {
      GraphicsBox[RasterBox[CompressedData["
1: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
+/ZFRUV56/oWEh4eTs2lfQ7orVyzZs2NGzesLhQAINHx999/Uze7YMECcgqG
DRtGnRJ5KDQ8SBg9bYwNKkgfdyrAjBkzyOcaNWrUd999d+7cOa9c2a1wf+nS
pXnz5vXq1atp06aNGzfu0aMHDavI6fNK7jaH7u+hQ4fovmvu9tSpU5ctWwYd
wX9Zv369/LTXqVPH6hIZQSPkI0eO0OM3bty4gQMHfv311zTkO3/+vCWF+c9/
/kOtR2P1ESNGUC9E78Ivv/zi8cnv5E7SkHXWrFl0KXInqUPbsGGDrU4uIN82
ICBAPCopUqSIy6WoG6GuY9q0aeTpkCdCFf/xxx//+eefuJfz4sWLS5cunThx
InVQY8aMmTNnzoEDB+jJifuVEwDU8gcPHtTeIM3H3LFjh6kT6PwR8qDJj6a+
guqruYfUAtQO/vVUlCpVSnv1unXrZnVZAAAAAL/n1q1byZMnFyPb1atXKxrW
q1dPWBUsWDDuJbl79y4NXCtUqJA0aVKHM5IlS1a1atUlS5Z4d+hy/PjxAWbw
OHerKihz+fLlFi1apEqVSp973rx5586dK3QxcvEMGmHFihWusnAl3JOvWr9+
fVd1JysanT569CieKm4tERER5LNnzZrVad3p7+3atbtw4YKWmNxDg5a/ffs2
paGGUn9i165dq13ZMyvPUM+LXGDZcN68eYqG9IhqJufOnRunzJ9//um28PQW
7Nq1ixJ37969UaNGzZo169OnD/lNV65ckZPRvZDvo8FGJ1+2hlO+//77QoUK
OX38Xn311ZkzZ0ZHR7ttFpmff/5ZsWAa3377rcplIyMjp0yZUrlyZeoMnZY2
W7ZsrVq1IpdW5Wr0Tpkq5J07d0w1gjrUvPv37yfvu0ePHo0bN27atGmvXr2o
v7106ZKcjE00UW9pdqECpV+1ahV9nV966SWnDZg6depatWqFhobGRbDwTS6/
/PLLRx99JI9PBBkyZKB3U540Gzp0qKvbOmbMGI/L8M0335h6hHbu3On2mnSX
Q0JCaNSkr1eKFCmaNGkiPxXaOjeVJ/bHH39ULKQs2VBeilZLly71uBkBAAIa
Xchv/R9//KFomC9fPmHVsGHDuJfk6tWrX375ZbFixZx24wQ5C59++ummTZvM
jhCMMTV+mDBhgt9VUIb62xo1ajj1fd555x1qCpHy5MmTBu2we/dup9c3EO5p
pFSpUiVXdS9QoMCsWbPir+LWcvbsWXKsgoKCnNadHF5qUrFSzuDrOWzYMC2N
+reSOHjwYFysPEM9r4ULF8qGI0eOVLGiV0mYaC6SIiq7Ep4+fbphwwYqSefO
nalza9myJXnNy5Ytu3XrlpyMHmn5PlasWNEOraGHhnljx45l8yGCt956ix45
t23iLehd+OSTT5IkSaIvSWBgYJs2bYz9Rxnqo+gG5c6d22m9KIuSJUuOGjVK
/YKeQZ3qxIkTe/bsSQPmzz77jByr2bNni1kUQZo0aeTi3b9/31Qu1DdS/0xZ
ZMqUyVUvmidPHuoi2OSAIuvXr3/77bedXpZcXfJc/GvhHL2/im8cQc6+8dVu
375NPQD5evrGyZw5M3l8cq8yZMgQVxlNnjw5nuvtNeh2L168+OOPPyYP2ulT
QcOVZs2aHThwwOAi5IQq3gLZp6NPj6LViBEjFKszevRordjp06dPMDvvAAAA
AKtgh+rSAFjF6sGDB2xccerUKY/LQGPjWbNmOR2eOaVIkSIq0+OKLFmyRDFf
DQ+GH9ZWUPDTTz+5Gg0KPvjgg7t378bEiqEGyVq1auUqF6fCfWhoqNPVAoyC
BQvu37/f6xW3lrCwMFfylkyKFCm0+cl58+YZJNPak+3MNaZr165aSTyz8gwm
ahuQM2dO2bBKlSqKhmLbwooVK9TrtXXrVoNiP336dNSoUdmzZ3dlXrVqVeE0
kZMl/xQQEODKy/Zla+ghV8uteaNGjUzN3/bv31+xYBqVKlVye82FCxeSP654
werVq4eHhxtfcPPmzaYK+ddff6m3gCL0SNB7/eqrrxq0jNzbsy5aW6ijCD2Z
BgoFo0CBAsbvgoW5UK1btmzp9uIZM2Zcv369ZpI2bVpXyeh19qCaGvQtVqyp
xtdff218QRo71ahRw/giadKkEUsoP/30U4OU8hPbvXt3xUIuWLBAWLFpcAMU
B4cAAGN69uwpv1luOw2N48ePs14iLnOhjx8/HjhwIA07FV//9957z1s7xGPU
xiQC+oj4XQUFkydPlhfjOaVTp07a0HHZsmUGySZNmuQ0C6fCPQ3nBg8e7FSq
Y9AIJIGdaPb8+fPRo0e7WvwpQ175Dz/8QCbdunVzlUYshKBxmtsLCubOnRsX
K89Qz+ujjz6SDbNkyaJilTJlSmEyZMgQ9XoZy7g03uvSpUv69Omd2tJ9bNKk
iRjts/OkihYtaofWYLx48YKu6fYK5Gwa31CvQCN2t1MQwcHBbv0puonNmjVz
25tp0OeJvmte152pYadPny4vYGOULl2a/D6Rns1HqazbF5w6daps2bIqlXXE
KqojR458+vSp+vWnTp3qtjHpq+RHu8v79Omj2FwEfbYMLnX27NkcOXIYX6Fw
4cIXL17U0rMVGjJvvPGGT2ofV7Zt2+Z0ObceemzatGnjaqMBvXeKt0D26ebM
maNoRX63Yo3KlSsnrNjiKAAAAACYpVatWvIXmYb3KqPElStXsk+5WJRulgcP
HtSpU4eNScqUKTN27Ni1a9fu27fv119/Xbp0KbnV8oblJEmSzJ4927McGfEt
3FteQQ3y3ZxuXdRDYy2qoxeF+++//164J3ny5CHbwYMHf/HFFzRo1Ot0NPx2
ta/EH5k0aZK+9TJkyNCgQYMRI0ZMmzaNPPemTZuKiQJqFgj3ioZeF+4PHz6s
otMlTZpUm2mPjo5mP7nqPC0U7nfu3ClPDqRNm3bMmDG7du3au3fvzJkz5X0T
U6ZMUb+/3hXuqd3oLZDTUyPXqFHj22+/3bRpE3WSq1atGjRoEJO/06VL99NP
Pxlc1nLh/vTp02+99ZbbfKm3HzJkiLZwggnQ6vtWqDNhM9XFihUbN27cunXr
qPNfv379N998U7p0aTkBPRjDhw83VSMf5HLr1i2nCwPo3aThSsOGDStWrEi3
XvsjfdTWrFmjbzcZWwn3bMTlCnr+NUEBwj0ACQnq53PlyiW/WaVKlVIxpGEz
eyXVI6Qxrl69WqJECflS1JFWr159+vTp1IcfPHhw+/bt1Eu0bNlSng8PCgra
smWLZzky4lu4t7yCGmxhvAFUEnowvCjc9+vXT/ylePHiHTp0ICe9V69edevW
1a/fpgcywWj31IzkY+pbj4YB1MijR4+mMQw1xSeffKJtxqdP7eLFiyHcq1jF
h3C/du1aV9vSZehmad3diRMn5L8XKlTIDq3BoH5GTklu3axZs8iRoSLREyiW
KNDY2LPVs+pERUXlz59fLgwNKWm4Tt4ueVUff/yx+Pvbb79tsHib0jMhNWvW
rD169KAua8+ePVQL6usaNGgQGBgop3n//fdZwIS4cOHChTJlyri9L9Sq1NFp
wcrYInz14DaLFi1idQkODu7UqRP1FTt27CBnh3xPcqWZsk/1VdzUf/bsWXlR
Gf174MCB9FWih4RasmjRouKnvn37et5kvsVbwj11F64CVDLo/mqLMfxduB85
ciRbZUePFn3xabhy6NAher9mz55Nzq88i0v1cnoyhU2E+1OnTslW9OZ6rbEA
AACAxMe9e/fI9WAfZbGFzYDGjRszK4NlzwY8evSoYsWK8nUKFizoarP5kydP
Ro0aJY91aaThQaaMixcvzpFgU2r9+/ef87+YWkJshwrGxPpub775JrtlqVKl
qlu3rnai1vjx49u0aSNk9Hbt2jHhPlOmTHIjkOfiKi/mg9PjpLk/VPFt27ax
xE+fPp03bx4LZvjSSy8dP37cKxW3lo0bN7KheLJkyYYPH64PEfb48eOJEydq
LyMTrUqXLi23vOYVUrvJf/ziiy9kk5w5c8q/klut5eKZlWfQwyxfrWbNmnJe
H330kfhpyZIlsuGGDRvET82bN5etSpQoIV9TrDdmofLfe+892YpcaZVQ+fv3
79fvSkifPv2nn35KjvPQoUPppSBHSfw0evRodeHel63BqF+/vmzF4l2T7ywc
5GzZsqmv7T9w4ICcO9M3O3fuPOd/WbdunatLPXv2jO1BLly48LFjx/Qp9Rup
yI3V9E2nXL161VQh3cbuM8WJEyf08RXpGaM70rt372HDhnXo0EEOk0jfmhhP
hfuvvvpKtkqXLh17kATUIbNpyZ49eyrWyAe5UP/GBBeCnny2LoUe1BUrVmgL
OajFfv/9d9Zu1J2K27p48WLFCuqhXMR1Zs6cyQr27bffskeIbrrB1ZzqMq+9
9lqfPn2mTp06Y8aML7/8sly5ctpKmzRp0tDghAn3rVu3dvXE7t27V7GocmNG
RETIF2S73uhrJX7Sf74BAGY5ePAgezfpfVdZM6ZfROTZWhr6LObJk0e+Djkp
rjab3759u23btiIljVEVz6kxho0f2Dh52rRp8q/UbfpdBYnr16/rw6xlzJiR
PmcTJkygepG717BhQyGjU//PPhDkC8jt4CqunV64X7VqlfbvSpUqnTlzhqUn
x3/IkCEsdH/evHltdT61x5Azy9qcBl0LFizQe+63bt3q3r07vX00pJSVMoIG
aaLZxVZB9q1ka03Lli0r/yqeN8+sPIPlxbz+9u3bi5/IOZUNFy1aJH5iDlTt
2rXFT/PnzxcmLFQ+DWNkK6qmSqh8Gpvpj5DIkSMHvSODBg2i4VDLli3Fel1K
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
qJ9xT30Fy4scTFNfEBbLNF++fK7ygnDvisQj3OuXxJtd5K8IE+7/+ecf+iP1
Yyx36rXikov+nFNXw1Ex3iCPOC45AgAAAAkb8mTZAtT169c7TVmwYEEtwbFj
x+h/Bw4cKFtVqlTJqZWYaDIen7OrOUyuuNbLuytXrlQ3N4YJ955d2VYVtFa4
N3XWgF5INRuW2f7cuHHjl19+CQ0NnTVrlj5goz5UvsphAX4n3Ldr107Fij0P
XhfuxVS5gNpftUq6+VKHp8J9hw4dVKymTZtmtjXsLNxPmDCBtd6yZctMZfrO
O+/I5ilTpnz06JF6IePDTaaKs0oNGjRI3Vy/FMRAgKZPM0us+FoJBgwYwK6g
P9XXN7ns3LmTpenSpYt6Fvfu3VNvN4/xa+GeheZ2Rfr06WUrCPcAxJFr167J
R/0GBAQ4VU/u3r1LnzBKkCpVKm3LuVgIrdGtWzen1+/evbuWoH///gbFYFdL
kSKFYhQODb28e+HCBXVzY5hw79mVbVVBC4V7h8mQBa1bt2bmhw4dUjf3C+iN
27BhQ0hIyPTp0526XWx7vsp6S78T7vUnDjuFCeujRo3yIC8D4b5fv37sefvp
p59Uq6QTWD0W7hX3e7Zt21a2SjzCPcHCbGbOnNlU1myJBdG5c2dTV2ABQomu
XbuaugJbCG0g3F+6dInlZfbG6WOSu0oJ4d4ViUe437p1K3veBg4cGB8ZORXu
idmzZ4txV3BwsKtjHRRp1aqVnEvx4sVdpaRbLPI1u1kDAAAASDzs3btX/rbS
kN6V0jRo0CAtzZdffhkj6fgaroLl0mBJGyfTfw3Oytm4cSMbsZiKWqzfwff3
33+rmxvDhHuzgbk0bFVBa4V7U9ta9ZtwTW3YTxjMmzdPbgGVwwL8Trj/4IMP
VKxYMLHmzZt7kJeBcM+CLhJt2rRRrVJMzJkzZ5i5Z8J9rVq1VKyoL5KtmjZt
6tbEzsK9flZHcWuPgE1JVahQwVQhjWUOz9BP/jRo0EDd/K+//mLmBgL08+fP
06VLJyd2taDOFSI4swZ9tfUT/r7Jhf7CtJtq1aqpZyFiBKm0m8f4tXCvOEOi
nXYkMHXSDQBADxvPlypVylVKMdG9fPnyu3fvspdxx44dTq127dqlJTDY4keM
GzeO9QmXL19Wr0WHDh1k28yZM5va1m0M6/w3bdrkwUVsVUFrhXsamqoXtXz5
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
IyPZgiJvCffaxcVpTUFBQW4PEyH3XL54+vTpVWKSaIghK7mlfnS/AAAAgHhi
7ty5A2JhmkVwcPAAif379zs11wfvNdgwMmjQIHFBMVT47LPPtL+4Orx4/Pjx
slSRNWtWchXZ3mT637CwsOzZs8slId/T7RZmclJKSDg9NvHnn38eJ8Fy2bt3
rwgg4IidE+vYseOwYcP69Onz4YcfstPWnPpE8VpBV8yZM0fUiK1sNxDud+7c
KayogrKVgXBPecnPEhuC0qBUEyxSp049duzYa9euybYXLlzo1KkT06rIi2HJ
/BcWRapmzZpO36Dw8PAOHTrI7UBvkPqx2jYU7uldk18rNiM0ZMiQI0eOiM1o
JUuW7Nat26hRo7744gt67NlUgyPWHYiIiPA4L5XSMu8mZcqU5A3p53t3795N
DaWlYe+Iw1PhnkooVtdkzpyZephFixZt3Lhx9erVY8aMocZhuVC7GWigS5Ys
cfXu58uXb5xrTL10O3bskG3pnZUzatmypdMs9GufNKZMmSI//NSvDh8+XD/n
TE8sa438+fPrJ/YVC/njjz/K8+SFChVq37790KFD+/XrV7t2bbaM3JRwT1y+
fJlNS2qV0p8zfvDgwTJlymhpqABsS5GiAL1v3z721jRo0EB/qM2ff/7JNtml
SpXql19+UayUD3Ihr79ChQqO/4X6BLZhh17M7777Llu2bI5Yr5/ujmft5pb5
8+eL54eFQ3HEbvxx+pxrqyJPnz4t/5E9D66E+2fPnslWTO43EJWMi/rixQtq
Ru3fGTJkaNy48cCBA0eMGNGlSxeWhQZ1xV5pQAASG/RaaYNhMVTQKFasmDxU
dnWQ6PTp02WroKAgVyvTrl+/Lq7Wu3dv8Q3t2bOn9kenny1yK1q1aiVnUbhw
Yf1ZM9QVT5w4kfWrKtouXUp2u5yubgoJCZF7OSavPHjwQAQQoJ/oi0Djw5Ej
R1JnVbFiRXmo4FS4j+8KOoX122L2W8NAvFuxYoWwIn9ZtjIQ7mksIW49C8eU
Ll06GhRp2hl9dOhDycaxNOTQlp7KVKlSRXH4an9k4Z6eFhpR63XqmNgDF5i0
VKRIEZXTeTRsKNzv2rVLfgjZ8XP0pC1evFj7d7JkyapWrUodBQ0VyJH54IMP
5Fh/GkWLFjWIq+82L7el/fnnn9kUSqZMmUJDQ1mmz58/X7VqVY4cObQ0zO3y
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
CO6dQnAPmGL06NFpV0cnT57M9IFHjhyxs0IrWrTopUuXtDmXL1+uT+/bt6+z
Fb766qsZPUtgYOCDBw+c7tlt5s+frxXm7++vf/lhy5Yt2sRr167JlgeLIrgX
QXAviOBeCsG9FIJ7TyK49xIE9/AeBPcAAACAr7p+/Xq3bt3sJFn2Edw7heAe
SOWnn35asWLFcid17tw57eqof//+jjy2bNmydtZpZcqUWbJkiZqtbdu2+sTm
zZs7W+GiRYsiIiIyepY33njD2QW6T79+/fTC5s2bl2ri6NGjZcuDRU2ZMkV7
C0VGRkrXkoWoNY827Llz55auJcvJmzevNvhz586VriVr0b+E/PLLL0vXkrU0
atRIG/lBgwZJ1+L7QkJCtNFetmyZdC1Zmn6HqYIFC0rXgqzO9oi4UKFC0uXA
68yfP3/GjBnR0dFz5sxh2+ExCxcuVFsKNeyzZ89eunSpdDlZiDoQfuutt9TI
q/8uXrxYupwsRI22ererkZ85c6Z6FaTLyULUGkat3tXIq1W9WvNIl4OswnZl
qwUocLfhw4erXX07YZYtPz+/YsWKaf8/YMAA6dqtRL8ktYbgHlnc3bt3c+TI
4eCaBwAAAAAAAAAAAABM98UXX0gHp4CklJSUzp0753Wefr1QW35+fg4+PDAw
0P5nMyQkxHaeHDlyGChSCQoKSnf5oaGhxhboDjlz5tQLy5MnjzZR/2GX4d69
XHh4uHrDaD0GBATojcMsYWFh2vCqj5J0LVmIemM7uz6EWfz9/bXBV6+CdC1Z
i769VvsG0rVkLcHBwdrIqx0J6Vp8n77TIl1IVqf2GLUXQq3zpWtBVmf7BXh1
OCNdTob0gwJFHR2zm+Q+oaGh+sbCDrX6Um8eXgizqL0g/SjADvXShISEcNrB
RGrPX636HBl5tcvKyJtIrdUzPaeqr/PVzNL1+g71Ns7oJHMq6gXKlSuXdL3w
Eeq95OBmjpWtB6gRVjseao8i+/9HDbvaA1TbRH3XjhM1xuhH+pqdO3dKB6eA
JV25ciXdzcThw4cdefiXX36Z6RbH9hBg6dKlxuo8cOBAugufOHGisQW6w6ZN
m/TCjh8/rk1UFWpThg4dKluem5w4ccL2FSlZsuSff/4pXZRP4R73IrjHvSDu
cS+Fe9xL4R73nsQ97r0E97iH97DKPe4//vhj28OuBg0a3LlzR7ooX5OcnNyl
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
Yu6wR0RE+Pa5F7PMnj3b3JEPDg7myyqO+Pe//23uyPv5+W3atEm6LQs4ceKE
uSOvzJs3T7oteLvXXnvN3HddaGjor7/+Kt2W7yO4N4bgHjDR6dOn090QqH2/
M2fOOL6cxMTEmjVrGtjiFC5ceMKECb/88ku6i1XTGzVqlO4DAwICvOq8qzow
1wqbPHmyNmXZsmV6tefPn5ctz61Wrlxp+9KotbR0RT4iVXD/4MGD7du3z5gx
Y8CAAd27d2/ZsmWPHj1GjBixaNGiU6dOSRfrO1IF98nJyQcPHpw9e/bgwYPV
gKthV4M/ZMiQOXPmHDp0yKvWQj4gVXB/9OjRhQsXDh8+XI18mzZtunTpMnDg
wOnTp+/evTspKUm6WJ+SKrj/7bffVqxYMWbMGDXy7dq169SpU1RU1LRp077+
+msDN7uBHamC+8uXL69atWr8+PG9evXq0KFD+/bt+/btO2nSpPXr19++fVu6
WMuzDe4VtQ6fN2/e0KFD1fu8devWXbt2HTRo0MyZM9U6n1u1uhXBPbyHtYJ7
RW2a9YIjIiJYWZlIbYidPZWRKe66nqn//ve/pg+7OlKTbssC1LY4JCTE3JF/
8sknpduygPv37xctWtTckS9TpoxarHRnFlC3bl1zRz5PnjxWvNm9OqLfsmVL
dHS0OsZXR0CtWrVSR0MvvPDC8uXLf//9d+nqfM3Zs2fNvaSP0qFDB+m2fB/B
vTEE94C51D5euhuCadOmObWcY8eOBQcHG9vo+Pn51atXb/Lkyf/+97/Vh3r/
/v3vv/9+mzZt/P39M3qI2kFy04A4Iukh2yn6narU3o42RbWgV3v69GmJMj3E
9tAjKCiIe2yZRQ/ua9WqNXXq1Pz589v5EKkP8ujRo0+ePCldteXZBvcLFiwo
Xry4nWFX7/xBgwYdPHhQumofoQf37777bsWKFe2MfL58+fr06cPFMM2iB/cL
Fy5Um2M7I58zZ85OnTp9/PHHfHfCFHpwHx0d3a5dOzu7PdmzZ2/RosXSpUt9
+OY77qYH92oNU7ZsWTvvc7X+79+//7fffitdsm8iuIf3sFxw/8cff+infx9/
/HHpcnyK2rHRv4pvlsKFC5OmZapNmzbmDrvaZbpy5Yp0WxYwcuRIc0c+G6fo
HbNgwQLTR37NmjXSbVnA5s2bTR/5qVOnSrflhBs3bowbNy7V1XtSqVix4vjx
48+ePStdrO8YOHCg6W+848ePS7fl4wjujSG4B8w1fPjwdLcCBs5dREdHm74x
ykjp0qXdMRoOevrppyMiIvr06aN2j2/duqWmNGzYUCvsueee0+b54IMP9Gp9
fpM6ffp0vdm9e/dKl+Mj9ODe8S/D+/v7d+/e/ccff5Su3cL04N6pr8U2b958
+/bt0rVbnh7cO65GjRqfffYZvzhzkR7cO65s2bLvvPMOp6NdpAf3AQEBDo58
oUKFZs6cyQ/wDbB/kipd9erV+/LLL7m4irkI7uE9LBfcK+oIVCs4KCjo+vXr
0uX4lK1btzq7mcgUl7DO1MmTJw3/ACQj8+fPl27LAmJiYgoWLGjuyI8cOVK6
LQt48ODB448/bu7It2nTRrota+jQoYO5I68OiqV7ctTu3bsdP9+i9jH69+//
888/S1ftC65cuZI3b15z33gTJ06UbsvHEdwbQ3APmOvLL7/MaEPg7L1uExMT
n3jiCXM3Rhlp2bKlmwYkU/fv3w8NDdUrUYeZHTt2jIyM1P7Zq1cvbbbVq1fr
8xw6dEiqWs+4ceNGrly5tGa5Np1Z9ODegL59+167dk26A0vSg3sD1HqJa4u5
wkBwr6levTrfV3GFgeBeo7Z933zzjXT5FqYH986KiIj44IMPpMu3GAPBvaZe
vXonTpyQLt93ENzDe1gxuFfHlXrNixcvli7H1wwdOtTYliIjEyZMkO7JAt56
6y1zh7179+7SPVnDF1984efnZ+LIV6tWTbona1BrcnNvVZArVy6+yu6ICxcu
FChQwMSRV9SerXRbmfv111/Dw8Odbc3f33/YsGGxsbHS5Vvehx9+aO67rkGD
BtI9+TiCe2MI7gFz3bt3LywsLN0NgTpudXZprlww3ymCX+U9ffq0ncJatWql
zabW7frEHTt2SFXrMaNHj9aaDQ0NJTI2hSvBvZI3b97ly5dLN2E9rgT32vt/
xowZXEXcmIiICMMjHxgYOGHCBO7AbkydOnVcedv36NGDH/0ZM2DAAFdGvk2b
Nn/++ad0E5bhygnSoKAgtYbhEhOmILiH97BicP+3zdftypcvT1JjroSEBHNv
gtynTx/pniwgJSWle/fuJg672rOV7skyJk6caOLI58uXT7ohy3jvvffM/dYE
h2MO2rZtm9qxN3HkLXHnxF69ehlusEiRIhs2bJDuwPLMvTtJ8eLFpRvycQT3
xhDcA6bTL7iXSlhYWFxcnLNLGzVqlIkbo4ysXr3aHUPhiB07dtivbcSIETdu
3LC9cdX69eulqvWYs2fP6pcWnzZtmnQ5vsDF4F7Ts2dPbojsFBeDe03jxo35
+ooBthczMaZixYqnT5+W7sN6SpUq5eLIFy1a9MCBA9J9WE/Tpk1dHHm1q/b5
559L92ENTt0AJV01atQ4d+6cdB+WR3AP72HR4H7Tpk162ZxLN506kK9WrZqL
2wtdrVq1pBuyhoSEBBNvdq/2S6UbsoyUlJQhQ4aYNfJBQUHSDVmJudeauHDh
gnRDlvHpp5+6flyg27x5s3RDmYiLi3P9F3ZqRfHgwQPpViwsOTk5KirKlLdc
toe/GJJuyMcR3BtDcA+Y7vPPP89oW/Dee+85u7TJkyebtSXKiJ+fn+BPzL76
6qtMK1Q7gTly5ND/aWAYrah3795avxEREdx+13X79u0z5fNSu3btK1euSHdj
GaYE90rp0qVPnjwp3Y3FZM+e3fWRz5cv365du6RbsZhChQq5PvLBwcEfffSR
dCsWU6NGDddHXu0UTZkyRboVC/D393d9tIsUKfLDDz9It2JtBPfwHhYN7lNS
UipVqqSVXatWLfVP6Yp8zbVr1/QRdlFkZKR0N5ahjsKefPJJU4Y9V65c0t1Y
iVqHGL55Uypqp1S6G4uZNm2aKSOv/Pbbb9LdWMm6desCAgJMGflVq1ZJd5OJ
kydPmtJpixYtbt26Jd2NhSUlJWX0w0lnqXevdDc+juDeGIJ7wHTx8fE5c+ZM
d1tQr149Z5dm+o3h0qpRo4Y7xsFB69evd7bg2bNnCxbsMd9//73e8tSpU6XL
sbwtW7aY9ZGJjIz8+eefpRuyBrU+NGvY8+fPv3v3bumGrMSs772HhISsXbtW
uhsrUe9VU0be399/1qxZ0t1YiVm5gDJ8+HBu0mGfWdcjzZUr15dffindjYUR
3MN7WDS4V95//3298qxwbTfPu3z5cuXKlV3fZFStWlW6FSuJi4szJbuPiIiQ
bsVi1D5k//79XR95dSwg3Yr1TJkyxZR91D/++EO6FYtZuXKlKdfM37Jli3Qr
mdizZ4/rbWrUlpE7tbniwYMHPXr0cP2FyJ49u3QrPo7g3hiCe8Ad7NxT7OjR
o04tqkuXLvpj8+TJ4/r2KC3ZK7F/9tlnzhYcFhY2b968rHALwgYNGmgt58qV
66+//pIux9ouXrxo4qcmf/78J06ckO7JGkz53bcmJCRk+/bt0g1ZRokSJcwa
eT8/P3UkLt2QZTRq1MiskVcmTZok3ZBluHiP+1T69OmTFfY0DDPrCyrZHv7G
gTsUGEZwD+9h3eA+ISFBv1pOpUqV+OKWO9y+fbtz584ubi9atWol3YfFPHjw
YPjw4S4Oe+nSpaX7sJ6UlJQZM2a4+BvkwMBA6T4s6aOPPrK9YqcxBPcG7Nix
IyIiwsWR37p1q3Qfmfjpp59c7NFW8eLFye5doVa2rn9dhwvLuBvBvTEE94A7
rF27NqPNwciRI51alB7dKuPHj3/ttdfM+omTJjg4+NKlS24aB0cYCO41DRs2
9PlLZ9sOzujRo6XLsTa1O5cvXz6TPjf/88gjj8h+dqyiZs2aJg577ty51YGS
dE/WoN9uwxSBgYFfffWVdE/WMGnSJBNHXlmyZIl0T9awatUqc0d+zJgx0j15
LxNvnpvt4e7onj17pHuyJIJ7eA/rBvfKq6++qhefRe7L5nlalOnKnVY6dOgg
3YQlrVixwpWvUleqVEm6A6vasmVLeHi44ZHnR6CGHT58uFSpUoZHPhvBvVHn
z5938fyP9wf38fHxZl3bUFOhQgWume+iTZs2ufJTx7x580p34OMI7o0huAfc
4fbt2yEhIRltDu7evev4osqWLas/du7cuWrKmjVrMlq4AYMGDXLbMDhEbV4N
F6/GYfHixbL1u1VSUlJkZKTWrNozPHLkiHRF1tapUyeTPjf/V9OmTflJTqbG
jh1r7rCXL1/+zp070m1ZwNKlS80d+fz58/NtcEds3brV3JHPnj37d999J92W
BZw9e9bcLzcqn376qXRbXmr69OnmDnXRokWvXr0q3Zb1ENzDe1g6uFcfJT3Z
VDs8169fl67IZ23evLl48eLGthQE94b997//NXy3AoJ7V5w+fbpx48bGRp7g
3hV//fWXgWto64cSBPeGxcXFjRgxwtnvaOkj7/3BvVKvXj1n31r2devWTbon
y/v5558Nvy4E9+5GcG8MwT2Qyueffz7BDLaBeyrt27d3fDm2X43u2rWrNjEq
KipXrlzGtke2goODhw8fbkq/hvXt29fFLh599NEXXnhBtgtjhgwZ0qhRo/Ll
y5cqVapChQrVq1dv1qxZz549bV8UNUXvtHjx4oLV+oCOHTu6+GZLq3Xr1tJt
ebtnnnnG9GGvU6eOdFsWMHLkSBcvz5hWuXLlpNuygHHjxuXMmdPckS9YsOD4
8eOlO7OAYsWKmTvyoaGhFt3HcLehQ4ea/jWJKlWqSLdlPfppkLx580rXgqyu
SZMm+sc5X7580uX8/6jdUbX3qI7Q1WFXxYoVa9as2apVqz59+owaNUqfp1Kl
Snr9NWrUEKzW56kNa7169Ry/G7L+y1n1CkrXbmEvvfRSs2bNHL+EuH7XrYiI
COnaLe+pp54KCwtzcOSLFCmiHcSp/0oXbnndu3cvUKCAgyOvdqX0H+0OGzZM
unZri4qKcvw7WurYWb3ttf/v1auXdO2Za9GihYOtOa5Lly7SbVne+PHj27Rp
kzt3bgfHvGjRotr/hISESNfu49R+tTbUamsoXYuVpLrbEcE9srj4+HhXLt0G
AAAAAAAAAAAAAC5at26ddHAKCHvllVdamKFp06Z2vgNQr149RxZie4P7bA+v
y51qhkqVKhm+W1nZsmVN6VTTvHnzunXrqv8aeGDJkiWNtWCrTJkyJrbjbuXK
lTPWZnBwcNq3ARxXpUoV199sqahlSrfl7WrXrm36DzOt9ZGX0qhRI9N/dF+0
aFHptiygWbNmJt7URhMeHi7dljW4ci/RdKktr4Hdm6ygfv36pn/ftUSJEtJt
WYxaz2tDFxoaKl0LsjrbK855zxtS/xGfs/LkySNde1bRoEGDxx9/XB0gR0ZG
qndRhQoV1D/VJkbf+Op3TC5QoIBsqb5EbT6qVq2qD/ujjz5auXJl21M6DRs2
1IY9Z86csqX6mCZNmlSvXr18+fKlS5dWh7TqfypVqqSOl5988kl9Hm3/Sv1X
sE7fow7Q1MpEvdXLPKRGvmLFirVq1VLT9Xn0y6ap979gqT5GvbfVOKt1uxp2
9bZXq53HHntMvRbqs6DPo18YoUaNGoKlOk69kYztXdhhld6tItXKVr1kamVb
p04dfWWrtnfayAcFBcmW6vP062+ol0C6FivRj/Q1+/fvl05NAd/RtWvXjDbH
L774oiNLOHjwoP6QjG65EhMTM2LECKcCgtDQ0CVLlpja69/Lly9XS37++eeN
PXzbtm2G77mm+cc//mFuR+5z4cIFx69Ql9aYMWOkO7C2p556ypV3WloDBgyQ
7skCRo0aZe6wqx0Y6Z6sYeHCheaOfJEiRaR7soavvvrK3O+rBAQE3Lp1S7ot
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
ayG49xiCe2MI7gEPaNWqVUbb5YoVK9q5WXBERIQ+5507dzxZs7OCgoK0Ot98
8019ohYM9erVy/5j1b7N7du3bafoW88XXnjBdvrTTz+d0Ui+9957JrbjVitX
rjSyD5cBfoNpll27dtl+VSZTgYGBixYtkq7a8o4dO9awYUPHh93Pz2/cuHHS
VfuCc+fOdenSxam1Tc+ePdXKWbpwy7tx48bzzz9v5xt9aanPyK1bt6QLt7x7
9+5NmjQp0zvv2CpfvryBqwZBOXPmTOvWrZ1awzz33HN8O8UAgnt4Dy8M7seM
GePUisgOtQu6c+dO6YayKIJ7EQT3ggjupRDcS/GN4F6zadOm0qVLO76DERwc
rP0Pwb2HEdx7DMG9MQT3gAd8+OGHdrbRGe2WqC2IflfWXLlyebhmZ+XOnVsr
Vf+NfHx8vIP7HlOnTg0MDGzVqtVXX32lfY3h/v372mNT3epUv/5qz549U91H
1UIXjT979mxGbwbV1Msvv/zqq68+88wzZcuWzWT37qH8+fPfvHlTuicfkZSU
pPYiqlatan/M1QezdevWR48ela7Xd2zcuLFRo0aZvtvr1q3LKVNz7du3r337
9pneAbxChQqffvqpdLE+5cSJE/369dMP0jNSvHjxJUuWkGaa6Pz58yNGjNB3
WjKitq1q5+Tu3bvS9Vrb9u3b1d5dphe0UZvdzZs3SxdrVamCe/XP5cuXP/vs
s/Xr11er7tKlSz/22GNNmzZVu9Br165ljxFu5YXB/b///e90Vzvq2LNLly7q
mOuf//xnjx49ChcubH81palRo0ZycrJ0T1kRwb0IgntBBPdSCO6l+FJw//fD
c9qLFy8uX768/f0KtTfStWvXr7/+Wvsnwb2HEdx7DMG9MQT3gAfcvXs3T548
GW2pO3XqlO6jbD+e3v8jmgIFCmilvvTSS9qUq1evalMeeeQR+48dPny43mnl
ypWXL1/++++/a//s2bOn7Zz6jya0rwds2bJFu198RESE2i9yU2vuULNmzbTv
hIkTJ6aa7ejRo2PHjg0PD7e/szd+/HiRLnzY999/P3Xq1DZt2qiPXv78+YsW
Lap2uRs0aPD8888vXbpUfTalC/RNJ0+enDlzplolPvroo2qVUrhw4TJlyqjP
+IABA+bMmePNtwuxunPnzi1atEitbytWrFioUCE1+KVLl37iiSd69+49ffr0
H3/8UbpAn3Xt2rX3338/KiqqatWqaj2j1jZq5NX/d+vWTa2Cdu3aRUDgJrdv
3163bt3gwYPV+1ztpahD9cjIyCpVqrRv3/7ll1/+6quvuLiEiX777be5c+eq
d3WFChUKPqTe57Vr1+7Xr9+sWbOOHTsmXaC16cG9GlW1uQwMDLSzx6j+2qRJ
k48++oivA8EdvDC4v3fvXrrf1FKfAtvZ1NZ29+7d/fv3z/QLdWvWrJHqJSsj
uBdBcC+I4F4Kwb0UHwvuNSkpKfv27XvllVdatmxZpkwZdchZrFgxtYPUuHHj
YcOGvfvuu1evXlWz/fzzz1rvBPceRnDvMQT3xhDcA54xcODAjA7//f39f/vt
t7QP+f777/V51Gbd8zU7pUSJElqpw4cP16ZcvHhRP0loP3rQf0ev0886tmnT
xnbOyZMna9MnTJigT7xy5Yp6Lnc05T6257V0x48fT3fmuLi4GTNm2LkhdUhI
CNfyBQAAyGr04N6pG3CULVv2nXfesda3XuH9vDC4V3r37p3q/Z89e/bExMR0
Z75w4YI6MrXzBZhSpUolJCR4uAUQ3IsguBdEcC+F4F6KTwb3DiK4l0Jw7zEE
98YQ3AOesWfPHjtnz1588cW0D9m4caM+Q48ePTxfs1MqV66slfrss89qU86d
O6fXf+XKFTuPHTJkSEYjU6ZMGe3i+ZoZM2Zo08eMGePeftzs/PnzQUFBqZo9
deqUnYeoMVRbuozOIw0YMMBjxQMAAMAb6MG9AZUqVTp48KB0B/Ad3hncf/PN
N6ne+Tly5LD/rXJ1UNa1a9eMPjhvv/22x4qHhuBeBMG9IIJ7KQT3UgjusxHc
exzBvccQ3BtDcA94jL4HmFZ4eHhcXFyq+VesWKHPMHToUJGaHVe/fn2t1F69
emlTzp8/r9dv/0rLtpfKT6tFixb6FQkWLVqkTRw5cqTbW3KztL/++PLLLzN9
lFpLV6xYMe0oqWO6y5cve6BsAAAAeAlXgvtsDy/89fzzz9+5c0e6D/gC7wzu
U1JS0h6GO3KxsvXr1xcqVCjtp6ZkyZLcbMLDCO5FENwLIriXQnAvheA+G8G9
xxHcewzBvTEE94DHzJ071855s2XLlqWa/7XXXtP/OmnSJJGaHdemTRut1I4d
O2pTrly5ote/bds2O48dP368nZHJ9vBnEVOmTElISHj//fe1KT4Q3Kv1rZ+f
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
bwzBPWArJSWlb9++peUEBwdntPcSFBQkWFgqpUqVUgcRuXPnLlq0qD4xLCxM
KzUyMlKfWKxYMW2iv79/qrve58yZM9MnypEjh5pTLdl2ou1CSpYsaWJfAAAA
AABn5cuXzzsPXWF1dm4paEzBggWle7KAEiVKaMOVPXt26VqyHD8/v2wPL7wp
XUiWo31lItvDe4BK12INhQoVMnf9rPYlpHvytOLFi2u9BwcHS9eStURGRmoj
7+/vL12Lj9MDowIFCkjXYiX6nphm9+7d0sEpICk+Pt5OdA4AAAAAAAAAAAAA
buXn5/fTTz9JB6eAsIMHDy6X8/bbb/v7+2f0IW3WrJlgbbamTJmSqrawh7T/
f/PNN/U5Z86cqU0MDg7Wpixbtmz8+PF9+/adP39+pk+0aNGi1q1bp5ozb968
+vNOnTrV3NYAAAAAAIA36NGjh7knPwcPHizdkwXoN78oWrSodC1ZTmBgoBp5
9V/pQrIc9W5Pe1YTdgwZMsTc9XPXrl2le/K0qVOnar2XKlVKupasZcmSJdrI
h4aGStfi45o2baoN9YABA6RrsaqtW7dKR6YA/q5YsWJGOzAFChR48OCBdIH/
c+zYMTs7Wvv27dPn1G9Jb+L9uWyH6PvvvzdrsQAAAAAAwHtwj3sR3ONeEPe4
l8I97p3FPe5dxz3upXCPe4/hHvcAfIPtz8nT2rx5s3SB/3PixAk7RdarV+/M
mTPanElJSdpEPz8/s569Tp06+nPZfkkAAAAAAAD4DIJ7EQT3ggjupRDcO4vg
3nUE91II7j2G4B6AD7h165b9fZjhw4dL1/g/Z8+etV9njhw5pkyZkpCQoGYO
CQnRJpr17C1atNCfaPfu3WYtFgAAAAAAeA/Tg/tPPvlEuicLILgXRHAvheDe
WZ999pm56+dZs2ZJ9+RpBPdSCO49huAegA/48ccf7e/DREZGStf4PzExMY7s
cVWoUOHDDz/MnTu39k+znr1r1676U+zYscOsxQIAAAAAAO+xceNG7di/QIEC
LVzWvn37CxcuSPdkAQT3ggjupRDcO+vixYsdOnRwfc2sVu/ayK9fv166J08j
uJdCcO8xBPcAfMDnn3+uR9L6HmMqJ0+elC7z/23dnGLWsz/zzDP6Mrdt22bW
YgEAAAAAgPf49ttvtWP/Dh06SNeShRDcCyK4l0JwL6Vz587ayG/dulW6Fk8j
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
K3fv3m3ZsqWDYfT8+fPtpO0mLsrDfvvtN9tQftasWdr08+fPR0ZGpk3tlXfe
eUe25nTFxcWlG9zbdvHDDz8IVggAAAAAAAAAAAAAPsxYcK8kJCS0b9/ekcA9
07TdxEV50rfffmsbyvfp0+fevXufffaZ7ZCmsnPnTumq0xceHp42uK9atape
+bZt2wTLAwAAAAAAAAAAAAAfZji4V+7du9emTRvtsRMnTsxotuXLl+fNm7d6
9eqeWZTHrFy5MlUu7+/vn1Fkr7l06ZJ01emrUqWKVqHtPe4bN26sV/7JJ58I
lgcAAAAAAAAAAAAAPsyV4F5RD+nQoYP28JdeesmVSkxclGdMnTrVfkyfSp48
eaRLzlDbtm21Ik+dOqVP1F8OZdmyZYLlAQAAAAAAAAAAAIAPczG4//th4N6x
Y0dtCS+++KIrxZi4KA8YMGCAU8F9u3btpEvO0OjRo7Uif//9d31i37599eLf
eustwfIAAAAAAAAAAAAAwIe5Htz/nVWz+2bNmjkV3M+ZM0e65AytWrVKK/L2
7dv6xOHDh+vFv/baa4LlAQAAAAAAAAAAAIAPMyW4/ztLXjM/MjLSqeD+2LFj
0iVn6NKlS/7+/urNYDtx4sSJevHjx4+Xqg0AAAAAAAAAAAAAfJtZwf3fDwP3
Fi1aaIsaM2aMlyzKTZKTk7Nnz+54al+4cOGUlBTpqu0ZO3bsrFmzbKe8+eab
ev0jRoyQKgwAAAAAAAAAAAAAfJuJwb1y+/bt6tWra0uLjo72kkW5w/nz5536
uf0LL7wgXbLTFi5cqNc/cOBA6XIAAAAAAAAAAAAAwDeZG9wrly9f1q4h7+fn
t2LFCi9ZlOn27t3rVHB//Phx6ZKdpt/4XunTp490OQAAAAAAAAAAAADgm0wP
7pUDBw4EBASoBar/btu2zUsWZa41a9Y4nto3adJEul4j1q9fr7fQs2dP6XIA
AAAAAAAAAAAAwDe5I7hXxowZoy2zWLFiMTExXrIoE9ne/z1Ta9eula7XiK1b
t+otdOvWTbocAAAAAAAAAAAAAPBNbgru4+PjH3nkEVN+rG3iokz0/PPPO5ja
V6tWLTk5WbpeIw4ePKh30blzZ+lyAAAAAAAAAAAAAMA3uSm4V6ZPn64v+cCB
A16yKLO0bt3aweB+586d0sUadPLkSb2L9u3bS5cDAAAAAAAAAAAAAL7JfcH9
2bNn9SW7eKF1ExdllooVKzqS2ntJtcbcunVLb6Rt27bS5QAAAAAAAAAAAACA
b3JfcK8UL15cW7K/v//Fixe9ZFGmyJMnT6apfaFChS5cuCBdqUvCwsK0Xlq1
aiVdCwAAAAAAAAAAAAD4JrcG982bN9cXvm7dOi9ZlOvi4uIyTe0DAgK++eYb
2TpdV7lyZa0dNf7StQAAAAAAAAAAAACAb3JrcN+lSxd94QsXLvSSRbnul19+
yTS4nzVrlmyRpmjTpo3WTrt27aRrAQAAAAAAAAAAAABfsGLFitjYWNspBoL7
119/vUePHh9//HGmc7Zs2VJf+Jo1a9y6KE/avn27/dR+zJgxKSkpskWa4qWX
XtI66tmzp3QtAAAAAAAAAAAAAOAL6tevX6xYsfXr1+tTDAT3rVq1cjDJLVGi
hL7wAwcOuHVRnrR69Wo7qf2ECRNkyzOReqtoTY0aNUq6FgAAAAAAAAAAAADw
Ba1bt9Zy2M6dO1+4cOFvF4L78PDwe/fu2ZntyJEj+pILFiyYnJzs1kV50rJl
y9KN7AMCAnzjCvm6v/76y8/PT7U2e/Zs6VoAAAAAAAAAAAAAwBfExcW9+OKL
gYGB2bJlCwsLW7RoUeHChY0F90p0dHRG86SkpLRr105fckZxtomL8qSjR49q
cbatUqVK7dmzR7o08zVs2FB1t337dulCAAAAAAAAAAAAAMB3HDp0qGbNmml/
MO5scB8QELBy5cq0MyQmJo4YMUJfbKNGjTJasomL8rCoqCi9Kj8/v/79+9+6
dUu6KLfYv39//vz54+PjpQsBAAAAAAAAAAAAAJ+SlJT09ttv58yZ00BwHx0d
HRISYhumL168eO/evYcOHdqzZ49a7KOPPqr/tUWLFrGxsR5YlIepsRozZsyT
Tz45dOjQw4cPS5fjXjdu3JAuAQAAAAAAAAAAAAB809mzZ22vQu/4j9kvX748
derUxx57LO3P9nVly5Zdvnx5SkqKxxYFAAAAAAAAAAAAAIAV7d+/f+tDycnJ
zj725MmTK1euHD16dM+ePVu2bNm5c+cBAwbMnj173759zubsJi4KAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAID/0x4cEgAAAAAI+v/aEVYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAjm71U7A==
        "], {{0, 0}, {
        2707, 301}}, {0, 255},
        ColorFunction->RGBColor],
       ImageSize->Large,
       PlotRange->{{0, 2707}, {0, 301}}]},
     {
      GraphicsBox[RasterBox[CompressedData["
1:eJzs3QeY1FTbN/BdloVlkbqwsHSkS+8gRRCUptKVKkXQRToiRZAiVUAQkKb0
KiIgbaUK0kRAQKqANOnSyy6wbPnuZ/Ne+eLJTObMTIZzMvn/rut9L58l5Zzc
M8lJ/pkkb8eeTT5MFhAQ8EkI/b8mHfrX7NOnw8Cm6el/NO/xSZePenTuVK9H
384fde5TqWMQ/TGe/m9qaEDA//47EQDA4tq0aROg0bt3b+2/Tps2Tfl7u3bt
tH/funWrdq5UqVI9evRI/dfY2NgMGTIo/3Tq1CnjBqRJk0a7qCxZshz0zuXL
l83aOC+99JK2bbdu3fJgIVJ18Msvv9Q25sMPP+SZa82aNdq53nzzTZ65Hjx4
oJ0rRYoUbjV19uzZAf81ZswYt5Ygs/fff5/pXWRkZHR0tPFcTZo00c6yZMkS
lysaMmSIdpbPPvuMp3mezWUK5vvy77//8sxVvHhx7Vw7d+40d130tdVOmT59
et7+JJk0aZJ29o8++ohzxhe2NWrWrKmdZdWqVZwt9LXvv/9e27A6derwz9uv
X7+A/1q9erVba585cyazhLFjx7q1hKpVqzJL4CyiYv369dp5X3/9dYOJy5Yt
y6xrz5493hxrzp4962xddOzQroiOLG5sFK+dPHly4MCBefPmDTCUPHly2pUl
JCQ4XEi9evWY6Q3661D37t2ZJaxbt85gemaNPN+yv//+WztL9uzZeRpGAznt
XKNHj+ZsktIFbz4zVBqeFgLY0Llz55gdlPa0Ij4+Plu2bMo/0RdfO2P16tW1
MzJDsq+++kr5+7vvvmvcgIkTJzLf98GDB3vzfSdxcXGmbBy1F4qPP/7Yg4XI
1kHmLJLz9K1cuXLauXbt2sUzV9++fbVzjRgxwq2m5s6dWzu7u6dsMjt16lTK
lCm1vcuRI8eOHTuM5zp69Kh2lgIFCrhcEQ02mI/f06dPfTSXKTz70q1cuVI7
l/G41IN16QfedA7F26Uk6jUoxdWrV81toZYHW+PXX3/VzlKiRAmeFb0Yr7zy
irZtdBLBOeOTJ0+YqpUsWdLdtatHQAV9bd1dAunTpw/Tkg0bNvDPTudo2nlp
H24wcWRkJLOub7/91pvDzZEjR5yt67vvvtOuqFmzZm5sFDdRNZctW/bWW2/R
gSDAUJEiRZwN+3///Xdm4tatW7vVjNu3bzNLoIOjwfT79u3z4BPYtm1bpoIu
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
ufXDauYNrTxn1vyYSy6evWNdqg6KDe7dSgOLFCminZfz3b7+jbmZYffu3S5n
sXpwz/lmQzrB1M7F+a5q/uCezsSZD3NUVBRvlxIT69evr53X4+Ce80nvzJMZ
eN737ZfBPcmbN692duO7yFzOXr58ebdmT3T05N7Jkyfzz84838Y4uL9w4QKz
LmfZkEPMPWb02TO4q/9FBvf6q3l9+/b1JrJX0BGKeSMn53NiFY8ePWIiHpcJ
ERPct2vXzuVa9D9pp63hci7m9yMzZsxwNuXDhw+TJ0+unditK6VTpkzRzpss
WbL79+/zzw5gEzdu3NDubWjXcfHiRYdTxsbGKu/5pW/T1atXGzRooP2Kde3a
1dkqRo4cybMjqlq1qnaBZcuW5e+FPqQwcajApGbp0qVz6wq/SqoOCgzuixcv
zt/OFStWMB2fNWsW/+x+iQnua9Wq5XIWqwf34eHhPHNNmDBBO1fTpk09WJdB
cE8jT+aL49bYWz9i9Cy453zSO5N40nm6y1n8NbhfuHAhs+U3bNjAP7v+3mPP
HrT4zz//MMsxfoMMg3nQmXFwT1/eLFmyaKdv2bIl/7qYy2vk+PHjzib2aXDP
jDSyZ8/O+cBDY/p716k63sxucD05URfck/Pnz7tcC/OT9vr167uc5dy5c9pZ
6DNgMDHzBFE65+L/BRZ9wJg3UHzyySec8wIAAIDVxcfHMy/NMcih1PFJREQE
c2WgRo0aBmtRb2I0iLwfP37MhFM89zqq8uTJo53XrWcDusScOfKcjulJ1UGx
wf3gwYM520ln2UwmQp8lznn9WK1atbTb5OzZsy5nsXpw//7777uc5datW8wn
zfjMztm6DIL77du3M6tw68mNOXLk0M7rcXDfpUsXl7Pov3c8P3nw1+CeeYU3
nS/zv56PeUp5gPsvjSVXrlxhFuLWVR06wmrndfkQTuYtCe+88w7/umjHrp23
bt26BhO/yOCeeYVomTJleAKdJ0+eHExi8KQXJuLJnTs3f6v0F9yWLVtmPAsT
3PO8fvGnn35i1sLz+kXmY2P8mFDmh8CVKlVyuXwVc4dA6dKl+ecFsI+ZM2dq
vynGOVT79u2VyUaPHs38ftzgwV9//fWXMk3GjBljY2OdTTZixAjtAoOCgvhf
YsXkMjTvjRs3OOd1iUnNyOHDhz1YjlQdFBjcp0iRgj8dYO7kDzDMj2yCeUoz
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
qFEjOhEICgpy9iN62i8xt7xyvkPNv4N7GjoyY1fjW0Ho89+yZUvt9BUqVOB8
4Z2Bs2fPMk9QefXVV42/Wfoz6AC+4J5MnjxZO1fRokVv375tMD3zRLXMmTMb
PJhU4dPg/u+//9YeAV0+Q+zGjRt58uRRpzcI7hOTnjuqXvJSzJw502D66Ojo
smXLaqdv3749Ty+Y4L5kyZJ16tQJSBpOODxDoWYwT+MfPny48g41+vCsWbNG
P8u9e/foHFk7S4YMGXj22JcuXaIp1blox2J8febcuXPM3fv+9yQcAAAA0Dt6
9OjBJJ07d9aOBKpXr35Qw9lTVdVnMKqcPeyIxtvq0mgsp5xG0RCFTlWUPzo8
8/rnn38KFCigXX7Xrl0dDrQuXLjAnFPT2MzllXwalI7VcHhSQCd35zSYMT/9
q3o5pXLlyjRKp3PY06dP03nNjBkztO8f1wf3L6CDzmh7xFxsNwjuaUyuzsW8
cd4guP/zzz/V0jNnpilSpNi+fbvyYXjvvfcc3jW6fPly5qFz9D9dvgXYorRn
MfThcfb04+fPn9MnTfurbZqR55Z+hfzBPfOlYy4KXb58WQmq6IyydevWK1as
OHz4MHWfvnTjx49nvlABSZdNDH4kZbwul8F9XFwcc9847dZoWzlMOf/66y91
YuamHY+De/ouKOdxWbJkmThxovr8t9jY2B07dujvYcidO7ezX3bTDlC7KZj3
sNMO7ZwTnr3n3S3aMmkvtwYk3bTgrGHE4FIP7Wy1y6HN6OxKLO2FtCfX5Isv
vvC+U/pfUHbq1OnRo0f6Ka9fv96wYUOHnxzO4J4OFsy9/Y0aNXK4y719+zbT
sGzZsl26dEk/JX2ttJuaeZElHVmcFeXixYvubiu9a9euaZ8dTduBtpLDKekz
QPsr7aUYl8E9zcK8gbpYsWIOX3YfHx8/btw4OpapU9J+yeDFB3fu3NFuCmqJ
di2rVq1SBmN0WGzWrBl98GjnRiOKXbt20XCLeeUBoV0NLXP//v3K5bWsWbMO
GjSIjqq0W6DWUjP0r3alT7LL3Zq6EZh4sWbNmg4/CfTpYr5NtJZjx47xrAXA
Jm7duqWMhPfu3cs8unnhwoXqOJnGCQ5nj4mJYcYnBg/PoX2sukD1Le1t27ZV
/nLkyBGHc3355Zfa/WTOnDkd3kFEe/7Zs2drHzdEc82dO9flFliwYIF6wrVt
2zaHfdTuHpm3EX388cerV69WWpg2bdrIyMiffvqJ+nLy5Mm1a9fS/9QmdPrg
/gV00KG7d+9qO8WcRToL7pnxmDLoVTkL7tXPGFN6xYgRI2rXrh2Q9PgFOrjo
Z6dDg/6Q4fLtLRalHUlSfQcOHOgsajl79iwz7urWrRvnWuQP7l1+6ZYuXar8
N52Wjh49eufOnTQmoVN7Gq60a9eOeQRQgOFPTV2uy2VrN2zYwATxRYsWdbhD
o7Ozr7/+Whmb0fhN+4ymAE+De2qhmuQ2bdp08+bN6t2M9EX+5ptvmKe9kVmz
ZjlbuPaiyrJly7RzFS5c2OC8hueXNd5gysT88p1Oup01zOAXB7SXZp55Qh8e
h1exaCfG7IXovNXhyNMDTJgekHRLqsOF00bo16+fMg3z9ecM7ulbzFxcLVWq
1PHjx/VT0t6eTiq1H2waITgLvumTpm7wMWPGaJdfr149g4+Ny7uv9bSPpg8J
CaGBirPLKX/88Yd6i6DCOLhPTLo1jnkowdChQx02knY4TDJeuXJlZzcGM2em
zB2PJUuWpKUpQ6k8efLQZld3aPQd1L4dQJE+fXrlZxHvvPOO8hc6LVq8eDH1
98yZM7t37x45cqT+W097Ns4tTPsQ7biONjKNPRxuZBqr5MqVS7sWl29KAgAA
AP/A3LrsjLNHcKvPYFSULl3a2YouXLhgvApnTz6/efMm80OD7Nmz9+3bd82a
Nfv27fv1119pGNmqVSvmSkjFihV5Lk2vW7dOO5fDxKRq1aoGzabzi/Pnz1OT
XG5Dh8G9rzvoUHx8vEE7DYJ79R0HegbBfbZs2ZzNRSfUNAENm9VN1LBhQzoN
WbBgwbRp0+iMSXvngyJNmjQ8T8azKOb246CgIDpB+Oabb7Zt23bw4MFdu3b9
+OOPffr0Yd5qQacVDq89OiN/cF+tWjWDjyh98k+dOhUWFmYwjYrOBGnTebMu
l63V/ww2IOlnIIMHD1a+xdu3b587d26zZs3UU9SOHTsyz5akL5f2cqvBevXP
BNi6dav2EW303w5fhqsweEoq8yJsfpyPDPUGc3cEP4dhq4JOjQcMGKC9jE//
TTv8KVOmbNiw4cCBA7StJkyYwNzkT99K/jeiGnvy5Ily579WlixZevbsuXLl
yj179uzcuXPJkiXt27dXLznWrFmTedpJ+fLltZ8cg5/vxcTEMI9hpF3HRx99
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
Ni8EgntpIbgHS0BwDwYQ3AuBmFISKIQkUAhJILhHXiwJFAIsAcE9gFZcXFyZ
MmWcpdsAAAAAAAAAAAAAAAAAAL62detW0cEpgEhPnz7NmDGj6C8iAAAAAAAA
AAAAAAAAANjX+vXrRQenAIJdu3Zti/vUB7lrBQYGLl++nGf2Tp06GX83Q0ND
1adlkm7dunnQSPLpp586XH779u09W6AvDB8+XG3Y3LlzlT+qz3Ft2rSp2Ob5
yIIFC7QVqVWr1qZNm0Q3yp8NGzZM2dS1a9cW3RYbmTVrlrLZixYtKrottoZC
SAKFkITNC1GzZk2l+yNGjBDdFvgPGv8rpdm8ebPotgA4Va9ePfUUpkKFCqKb
4wKN/NXWvvTSS1OmTBHdIj+XP39+ZWvPnz9fdFtspFq1aspmHzNmjOi22BoK
IQkUQhJVq1ZVCjF27FjRbREjMjJS2QJt2rQR3RZbQyHAEpYtW6aNivCofADP
PH/+3OEb5BcuXMgz+8OHD8PCwvSzO0OnvZ6189mzZ9myZdMvsGPHjp4t0Be2
bdumNuzQoUPKH/v166f85b333hPbPB9RX7Cr6tKli+hG+TO8414Im79IWh4o
hCRQCEnYvBB4x7208I57sARrveNefdOxIn369KdOnRLdKH+Gd9wLgTd6SwKF
kAQKIQm84x6vVpcECgGWgHfcA5ilVKlS+kC8efPmnLN/9dVX+tmd4bwfwKG+
ffvqF/jmm296vEDTHThwQG3Ynj17lD+qwX316tXFNs9HLl68qK/L3LlzRbfL
byG4F8Lm6Zg8UAhJoBCSsHkhENxLC8E9WIK1gvsOHTowJ1yvvPLKo0ePRLfL
byG4FwIxpSRQCEmgEJJAcI+8WBIoBFgCgnsAs7Rr104fvKZOnTomJoZn9tjY
2FdeeUW/BIfoEONxO+lrrl8grdrjBZru9OnTasO2bNmi/HHQoEHKX4oWLSq2
eT6SkJAQHh7O1CUkJOTo0aOim+afENwLYfN0TB4ohCRQCEnYvBAI7qWF4B4s
wVrB/fTp0/Xnwq1atRLdLr+F4F4IxJSSQCEkgUJIAsE98mJJoBBgCQjuAcyi
7vYZq1ev5lzC5s2bHS5Bj85/nz175lk7Y2NjU6VKxSwwffr0ni3NF65fv642
TL2GPHToUOUvuXPnFto6H+revbu+1lWqVElISBDdND+E4F4Im6dj8kAhJIFC
SMLmhUBwLy0E92AJ1grub9y4ERwcrD/nioqKEt00/4TgXgjElJJAISSBQkgC
wT3yYkmgEGAJCO4BzPLbb7/prwC4Gws2btzY4UL0GjRocO/ePc+aWrx4cWZp
gYGBcXFxni3NdDExMWrDli9frvxx5MiRyl/CwsLENs93jh075rDWuJDuCwju
hbB5OiYPFEISKIQkbF4IBPfSQnAPlmCt4J40a9ZMf8JVpkwZ0e3yTwjuhUBM
KQkUQhIohCQQ3CMvlgQKAZaA4B7ALM+ePQsNDdVfBMiQIUNsbCznQi5fvpwu
XTqH6a1e7ty5d+7c6UFTa9SooV/anTt3PFiUj6RIkUJp1fz585W/jB07VvlL
ypQpxbbNp1599VV9afr37y+6XX4Iwb0QNk/H5IFCSAKFkITNC4HgXloI7sES
LBfcO3vMXXR0tOim+SEE90IgppQECiEJFEISCO6RF0sChQBLQHAPYKLXXnvN
4UWA9evX8y9k7ty5DhfiUFBQUNeuXa9fv+5WO6tXr65fFO0N3OyuD2XMmFFp
1fTp05W/aN9E4PFrAuQ3f/58fWnUxw6AiRDcC2HzdEweKIQkUAhJ2LwQCO6l
heAeLMFywX1CQkK+fPmYE67ChQuLbpd/QnAvBGJKSaAQkkAhJIHgHnmxJFAI
sAQE9wAmoh2+PnUlLVu2dGs59evXd7gcZ1KnTv3ZZ59xPjl/xYoVgYGB+oV4
/OB9X8iRI4fSqgkTJih/mTJlitpUqR4OYK6YmJgMGTJo61K1alW8494XENwL
YfN0TB4ohCRQCEnYvBAI7qWF4B4swXLBfaLmYW4q24YIvobgXgjElJJAISSB
QkgCwT3yYkmgEGAJCO4BTLRr1y59IE5CQ0MfPnzIvxz6YqZPn97hogykS5fu
448/PnTokLPFJiQkfP311ylTptTPK9U77kmBAgWUhg0bNkz5y4wZM9TWXrt2
TWzzfKp///7a0uzdu1d0i/yTPrh//vz5mTNnNmzY8MMPP8yfP//HH3+kY+KD
Bw/EttPP6NOx+Pj4Cxcu0Imbstnp/+/Zs+f27dti2+n3UAhJoBCScFiI8+fP
26QQ+uD+0aNHBw8epAPlkiT095MnT9JRUmw7bQjBPViCFYP7O3fupE6dWm32
G2+8IbpFfksf3N+9e5fOcFesWLFw4cLvv//+559//vvvv7GXM5c+pnz48OGB
AwfoyL548eKlS5euW7fu1KlTOLL7GgohCRRCEvrg3m6FQF4sCRQCLAHBPYCJ
aHTh7A31CxYscGtR8+bNc7gcHnR2PGnSpGPHjqm/1KaxEC2wbNmyzmYJDQ31
wfbwXMmSJZWGffrpp8pfZs+erbb2/PnzYpvnU1evXk2RIoXS0+DgYKluqPAn
2uB+7969LVq0cPjlDQoKqlKlyujRo+kLJbrJ/kCbjp04caJz587h4eH6zR4Y
GEj7sUGDBv3222+im+yfUAhJoBCSYArRqVMng0IMHjx43759optsJjW4X716
NQ23qlevTsc+fffpKNmsWTMaT966dUt0k+0CwT1YghWDe9KtWze12cOHDxfd
HL+lBveHDx8eN26c+j8ZWbJkad++/YoVKx49eiS6yf5AjSnXr18/a9asqlWr
Ojyyp0+f/t13312wYIG/3pooHFOIKlWqGBfCj58tKRYKIQk1uN+wYYM9C4G8
WBIoBFgCgnsAc6njEIYHt/E3aNDA4aL4pUqVKm/evLly5XI4FtKKiIjwxdbg
9O2333700Uc//fSTep5euXJlpWGRkZHKX2jMprb25MmT4hr7IrRr107t7Llz
50Q3xz+pwX2ePHk4v1C1atXatm2b6IZbm5qO0T4nWbJkPJu9bNmyK1euRGZh
LhRCEiiEJGxeCDW4z549O0/faXjZrVu3S5cuiW64/0NwD5Zg0eCeTrLUc2S8
Oct31KQ+LCyM5xCTMWPGYcOG+V9Y84KpMWW2bNl4NntoaGjPnj0vX74suuH+
xoNC9OrVC4UwHQohCfWCuW0LgbxYEigEWAKCewBzzZo1y+F4IygoyN0HvHv2
wHzPVKpUyUcbxKWEhIScOXMqzQgJCWnYsOHixYsrVKig/KV169bKZPRHtbWH
Dx8W1doX4+jRo4GBgUpnv/zyS9HN8U9qcO/BlwU/evWYmo6565VXXlm3bp3o
5vsPFEISKIQkvCnE+vXrRTffW2pw75bg4OBOnTrhN3o+heAeLMGiwT1p3ry5
0mw66X7y5Ino5vgnZz+xN5YmTZpBgwbFxMSIbr5VqTGlW1KkSBEZGXn37l3R
zfcfKIQkUAhJOPulm30KgbxYEigEWAKCewBzXbt2zdlvtcaNG+fu0ubPn+/B
qMYDAn9lQFvMoGENGzZUJtP+4n737t2iWvvC1KlTR+ls3rx5/fgFTwJ5HNwH
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
J6dSpUrmvwlt2rRRHpPVPllZWcop6D/+8Y/q1avne776xRdfyJ2Rvn3//ffj
xo0LDAw0v+eVJxTdu3dfvXo1r5nb3S+//DJ58uRcP+ZZtmzZDh06REdH3759
W3aZ+sdCOAkWwkmoCxEUFFQMFyI9PT0mJqZ3797m8Yqrq6tysjdixIh9+/bx
HjY7EsH90aNH+/bta/KeVcHd3T00NHThwoXiNBIoTE4b3K9YscL878XFxWXt
2rXikUp54rlx48awsDCNZ+uqhg0bKk/Q5M5Ixx49erR8+fKOHTuWLFnS5J73
8PBo1KhRREQE7wqzu7S0tPXr1/fq1cv8UwPqkV356z5w4ABHdkdTFmLdunUv
vfRSrgtRr169UaNGsRCFgIVwEjpeCIJ7JyEWIioqatGiRXXq1Mnr9K9q1aqj
R4/etWtXUfx9Q1FHcA8UDuVJaF5HAT8/v5SUFPNNjL+YLyQkpPBrtopyLFNL
nTBhgtpy+/ZttUU519LedsyYMcZ3iKenZ6dOndSflWeRxj2nT5+utis/qC1X
rlxZunSpclLniEk5Tnh4uPlvwqFDh8x7ZmVlbdmypWHDhnn9/ihq1aqlp0/2
Oa2kpKSjR4/u379fWakTJ07cuXNHdkXFQnJy8rFjx5S7PT4+XvmBVEIWFsJJ
sBBOojgvRE5OzqVLl7777jtl+sqTx19++SXX81gUnAjuLfzST+UUevTo0Zcv
X5ZdOIoXpw3ulXN18zheeVaea+dr16698cYbHh4eGn9in376aSFPoRjKzMw8
c+bMwYMHlUPMzz//fO7cuYyMDNlF6Z9yZL948aI4sitLwJFdCvOFePr0qeyi
iiMWwknobyEI7p2EWAh/f39LnmSV+OsNnBs2bOA9nChMBPdA4Vi/fr3G4/8n
n3xivolyZiI6mOTXTkh8+mzUqFFqy82bN0X9jx490th27Nixed0zLVq0MO45
Z84ctX3y5MkOnIzjHT582HyyV69ezat/dnb2mjVrND59r5x1FGL5AAAAcCwR
3FvFzc1NORvnWkAoNE4b3Cu6dOli8gcyfPhwjf6XL18eNGiQ+nVv5ipXrkya
CQAAbENw7yTEQlirdu3au3fvll0+iguCe6BwpKamaryPq1GjRuZfm7JhwwbR
YcSIEVLKtlxISIhaqri4/Y0bN0T9586d09hWI7j39PRcuXKluHOio6PV9okT
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
axfBwcFWBff79++XW7CG48ePKxV6eXkZDAbROHnyZFH8P/7xD4nlAQAAAAAA
AAAAAICO2Su4V5w9e7ZChQol/vrcfVxcnHZnZV9NmjRROlevXv3Ro0d5dXPm
77j39fW1PLX38vJKTU2VXXKeDAZD48aN+/XrZ9w4e/ZsUX9ERISs2gAAAAAA
AAAAAABA3+wY3Ct++umn0qVLK0N5e3sfOXJEu/OpU6c8PT2VziNHjsyrj9MG
9w8fPrTiw/YlSvTq1Ut2yfl48ODB48ePjVvE9fMVo0ePllUYAAAAAAAAAAAA
AOibfYN7xa5du9zd3ZXRKlSocPbsWe3O7777rrrrPXv25NrBaYP7EydOWBXc
K3eL7JKttnr1alH/kCFDZJcDAAAAAAAAAAAAAPpk9+BesXjxYnXAwMDA27dv
a/TMzMx87rnnlJ5Vq1ZNTk427+C0wf1XX31leWpfvXr17Oxs2SVbbfPmzWIK
AwcOlF0OAAAAAAAAAAAAAOiTI4L7nJyctm3bqmN27drVYDBodD5z5oyXl5fS
87XXXjO/1WmD++joaMuD+/fff192vbbYs2ePmMLLL78suxwAAAAAAAAAAAAA
0CdHBPeKc+fOlSxZUh12+fLl2p3nzp2r9ty5c6fJTU4b3E+aNMnC1N7f3//+
/fuy67XF4cOHxSz69u0ruxwAAAAAAAAAAAAA0CcHBfeK119/XR3W29tb+4L5
WVlZLVu2VHoqxTx8+ND4JqcN7vv162dhcL9kyRLZxdooISFBzEJZCNnlAAAA
AAAAAAAAAIA+OS64P3TokBj57bff1u589uxZ9YL5w4YNM2532uC+RYsWlqT2
QUFBmZmZsou10a1bt8REevbsKbscAAAAAAAAAAAAANAnxwX32dnZvr6+6sjl
ypVLTU3V7r9o0SK18/bt20Wj0wb3lSpVyje1d3V13bdvn+xKbZeTk+Pp6anO
pVu3brLLAQAAAAAAAAAAAAB9clxwr2jVqpUYfP/+/dqds7OzW7durfSsVKmS
+FJ45wzus7Ky3Nzc8g3u33nnHdmVFlStWrXUuXTu3Fl2LQAAAAAAAAAAAACg
Tw4N7nv37i0G//jjj/Ptf+HCBW9vb6Xz4MGD1RbnDO5v3LiRb2rfuXPn7Oxs
2ZUWVIcOHdTpdO3aVXYtAAAAAAAAAAAAAKAHV65cMWmxIbiPj4/fsmXLmTNn
8u3Zs2dPMfiqVassGTw6Olrtv23btj+cNbj/4YcftFP74OBgcdGAIm3EiBHq
jPr27Su7FgAAAAAAAAAAAADQgzZt2owePfrhw4eixYbgvmvXrkrncePG5duz
adOmYvA9e/ZYMnhOTk779u2V/hUrVrx3755zBvdbt27VSO2bN2+uVC67RvtY
uXKlOqmRI0fKrgUAAAAAAAAAAAAA9EB8ifzmzZvVFpuD+/r162t3e/Dggbu7
uzqyp6fn48ePLSzyypUrZcqUUbYaOHCgcwb3H330UV6pfZs2bR49eiS7QLs5
c+aMOq/Zs2fLrgUAAAAAAAAAAAAA9CAuLq5u3bpqFNuzZ8/r16/bHNwr9u3b
p9Ht3XffFSMPGjTIqjpFMl6uXDknDO737NljHtm7uLhERESkpaXJrs6eDAZD
tWrVlNlt2rRJdi0AAAAAAAAAAAAAoBOpqalRUVEeHh4lSpQoU6ZMyZIlbQ7u
a9SocePGjVz7xMXFeXp6qt38/Pzy6pYXg8HQqVMnk2TceYL7rKys+vXrG9dW
qVKlvXv3yq7LIaKjo5UJ3rp1S3YhAAAAAAAAAAAAAKArCQkJLVu2NEnGLQzu
e/XqJTZ55plnVqxY8eDBA3HrrVu3ZsyYIVJ7Hx+fI0eO2FDhtWvXlG2dM7hX
nD9/vkaNGkpV/v7+UVFRxveAzuTk5PBxewAAAAAAAAAAAABwhJycnH/961/G
4biFwX1qaurHH38cFBRkfJX4wMDAhg0bqpdVF0JDQy9fvmxzhStXrnTa4F6R
mZl5584d2VUAAAAAAAAAAAAAAIq2mzdvvvnmm2P+kpWVZdW2J0+enDVrVrdu
3QICAkS87unp+dxzz02YMKHgObvBYJgxY8aY/+fq1asFHBAAAAAAAAAAAAAA
AL3Kzs5++PBhamqq7EIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAc4v8ALj7+NA==
        "], {{0, 0}, {2707, 253}}, {0, 
        255},
        ColorFunction->RGBColor],
       ImageSize->Large,
       PlotRange->{{0, 2707}, {0, 253}}]},
     {
      GraphicsBox[RasterBox[CompressedData["
1:eJzs3Xd8FEX/B/BAAqGEhEAQQi+B0KX3Ir13MHSRIiBgABGko4KgVAHpKE1Q
inSRpoDSQUAQUOpDlw6hpJLf95f12WecvZubvVxudy+f9x/Pyyfs3M7u7e7N
7Gd3Jl/38NbvpPTy8no/Df1P67eH1Ro8+O3hbTLS/2n33vt9e7/Xq2ej94b0
6t1rcKXu3vTHEim8vGal8/L6//+OBwAAAFu++OILL2mHDx82ur4ALtO8eXOb
x7m3t3dgYGDu3LnTpUun/dfg4OB9+/YZXXewmDVr1tBxZfN48/f3z5kzZ6ZM
mbT/lDJlylGjRsXFxRldfQAAAAAdxowZI9/HvHTpktH1BQAAAAAAAAAwhcjI
yIeMHj16sHdRxo8fz/5rTEyM0fUFcJnKlSuzR3tAQMCHH354+PDhly9fqss8
evRo/fr1YWFhKVKkUJdMlSrVggULDKw5WM68efO4e9QtWrSgQ+vu3bvqMnSB
pcNv3LhxmTNnZpds2LDhixcvDKw8AAAAgC7UdGF7kS1btmTbNnPnzmX/Fc8o
AgAAAAAAAADY9O6777I3VaZOnWp0jQCSChvcV6xY8e+//xYsfPjw4eDgYHV5
b2/vnTt3uq2qYHVscJ8+ffqtW7cKFn706FGbNm3YS/Fbb73lrpoCAAAAuNib
b77JNmyWLl1qdI0AAAAAAAAAACwAwT0kH2pwHxwcfP/+fYfLX7x4MSAgQD07
goKCxFk/gIoN7r/55huHy8fGxnJTOXz11VduqCcAAACAyyG4BwAAAAAAAABw
AoJ7SD7U4H7GjBmSRWbPns2eIMOHD0/SGoLHUIP70qVLSxa5efOmv7+/erDl
zp07Ojo6SSsJAAAAkBQQ3AMAAAAAAAAAOAHBPSQfSnCfIkUK+RfnIyMjAwMD
1RPE39//8ePHSVpJ8AxqcD958mT5Un379mUvyF9//XWSVRAAAAAgqSC4BwAA
AAAAAABwAoJ7SD6WLVs2adKkWbNm6SrVvXt39hz5/vvvk6h64ElOnDgxKcHl
y5flS+3bt4892Jo3b550NQQAAABIIgjuAQAAAAAAAACcgOAeQGz+/PnsOTJw
4ECjawQe68WLF97e3urBlilTpri4OKMrBQAAAKAPgnsAAAAAAAAAACcguAcQ
O3jwIHuOVKpUyegagScrXLgwe7ydO3fO6BoBAAAA6IPgHgAAAAAAAJKPI0eO
rP6v33//XbLU3bt3VzOio6NdUpmXL19u3759yJAhYWFhNWvWLFmyZIUKFerV
q9erV6958+adPXvWJWsxkBk28MCBA+PGjWvevHmVKlWoAtWqVevTp8+GDRti
YmIS/+GC4P7Vq1c//vhj3759y5UrlzlzZm9v70yZMhUvXrxNmzYrV658/vx5
4tduUU+ePFm7dm14eHijRo0qVqz4+uuv0yHRuXPnadOm6RoWGyzh6tWr7DmS
P39+o2skcurUqU8++aRly5aVK1cuUaIEXa+aNWs2duzY48ePG101HSIjI9kL
L51idN1r3br1e++99/333z99+tToCiahN954gz3e9u7d68SH0NX72LFjdCTQ
dalBgwa0AytVqkRHQs+ePRcuXHjjxg2XVNUNa4mNjd2xYwd97/QLSL9EpUuX
pv3Tu3fv5cuXP3r0KPGfb05RUVE//PDD4MGDGzduTD8x9Ltfu3bt999//9df
fzW6agBgYXRFZTuD8i35gwcPqqUOHTrkqvpcv359wYIF9JNBPxz080HXuurV
q9N/jxgxgn7rqbHtqhUZxeQbGBcXt2fPnpEjRzZt2pQajVS9GjVq9O/ff9u2
bS4Z7UcQ3NOhuHHjxh49etDPOvUuU6ZMGRQURK3WDh060J6h3nfi156s0B6j
Pju1E2if05dI7TE60qjDTn3V9evXR0REGF1BCzh37tyUKVPeeustanqVKVOG
2pxNmjTp1q3bF198ceHCBaNr54y//vprxowZtAm0IbQ5pUqVoi5Vq1atPvro
o61bt+IsA6fRD8TRo0fpQKIOYP369dUOYK9evRYtWnTr1i2jK2gb9Vt/++23
CRMmdOnSpWHDhlRtOtOphxUWFvbZZ5/RryH9MBldRwAAALC8okWLql3gWrVq
SZai1gjbd96+fXsiq0G9G2rzpE+f3kuoQoUKK1asoGZSIlenioyMzK/Hhg0b
rLWBrEOHDlWuXNneqmnrtmzZoi5MzWZ7O6FkyZL2VmEvuN+/f3/x4sUFGx4Q
EDB37twk2nDTevLkyfvvv+/v7y/YM/SV/fLLL8rynTp1sveltG3bVllm+fLl
8sezGr86V8rl7t27J1mHN954gy1IXSTJgtevX1eK7N69u640hw810aF74MCB
8PBw6mnmyJHDx8cnQ4YMtLrmzZvPnj2btktd8v79+9yRb4a9ofXgwQOqvODI
pC6qC7vShw8flqyzSubO4Z9//tmtWzfxhTd16tS0pVQBmXqGhobK15BOq0Tv
GNtu3LgxY8aMevXqUX1o63x9fbNmzVqtWrWhQ4ceO3aMXbJZs2bsxn7//fe6
VvTo0aOxY8cGBwcLdiApV67cqlWrnL6Au2EtVGr+/PnZsmWz9+F+fn4ffvih
euORzmXBN/vHH384t6UCJ0+e1HsK0Enq8GNXr15NS9rb6ipVqpw6dUpZ8sWL
F4J1de7cmf3YEiVKSFaS/b7o+JQspf7qAYBp7dmzh72e0NVGsmC+fPnUUgUK
FEhkNeLi4qjrVLZsWfEvSLp06bp27frXX38lcnWsxYsXS17TCF02LbeB8n76
6adSpUrZq1vRokXpaFEXLl++vL29VLNmTXursBfcb9++nY4iwZ4JCgqiHZjU
e8DNqNMhf+wp6Ffe4ceeP3+ejiKHzeaWLVsePXpUpp4hISHyNaQ2XqJ3jMGo
GTl9+nTxAUkKFy48Z84cmTdfxowZI7n31q1bp5Y6ePCgZKnBgweLKxAZGTlr
1qxChQqJtygwMHDAgAG3b99O7B4EZ1FDXfJLpx6HWqpgwYIyReiUV4vQ5VRy
RRMnThTXmToyo0aNoj6s4NBKkSJFhQoVqIEh0wGU3wmE+nrO7Wrqt44bNy57
9uzikyJnzpzUvcWTTgAAAOC0s2fPsq0Lb2/vu3fvyhSk5hNb8J133nG6DrGx
sdRgS5Uqlba1kylTpuDgYOoecn+vUaPG1atXnV4ji7pX4hYXx4kgxtgNVG3a
tClNmjTiraOG8aRJk5Tl2Sc6OP7+/vbWYjO4X7x4MTvPskDt2rUfP37s2g03
rePHj+e3n6ewUqZMOX78eCpC+8feMlWqVFE+9ssvv5T5TMX+/fsTU8rl7ty5
I1kH7k5v9erVJQuqgxhQr1N+k/ft2yeo9tGjR0uXLi0oni5dujFjxij3Z7hr
Dp109vqh7twbHKqq9hZxUFAQ17MOCQl5+PCh/PcrsHfvXsk6q8Qvl8XFxX38
8cfaqytdiumq6+vry/2dvgj6IXN4V1P7gQJ0Wrlk57DoCtm3b1+6JgjWW69e
PfWbbd++PftPS5YskV/Xxo0bbSbd9Ec/Pz/t36tVq+bEICFuWMvff/9dq1Yt
B99WglKlStF5R0U6dOggWOy3337Tu5kOHTp0SKaGLIcNtgkTJjj8kPTp02/e
vJkWfvbsmWCxOnXqsJ+cIUMGyUqy17e3335bstSOHTtcvocBwLUGDBjAnrZh
YWEypaj1y53vibmiXrhwweYzyfRbnyNHjsDAQO7v9Ov/0Ucfueo54WnTpkle
0whdNi23gZKWLVvm4+Mj3nxaYP78+cryr732mr3F8tsfh8pmcD9lyhRqv8ns
/5YtW8ok11axe/duma1micfEiI2NHTt2rHyzmRqi1Bx1+J61uL3KUY8Qizpw
4EDBggW125U5c2btqUqKFSvm8GH4fv36Se49toX/008/SZbq0qWLYO2HDx/m
ptxS0PFA1x/tqwcBAQGLFi1yzd4EnaihLvmlswPdSN6jK1++vFpkzpw5kiv6
4IMPBBVet26dzd8Cex3AmjVr/uc//3HVTiDU13NiP9vrt6ZLl45OCu1TTzlz
5ty2bZsTKwIAAAD45JNPuKbFggULHJa6du0a10emRpdzYwE9e/asXr167EdR
R6B///579uxRe4JxcXG///77xx9/zLaRqF105swZJ9bISerg3vANVFy+fNnh
y/6quXPnxrsuuN+wYYPSZ0+TJk1YWNiKFSt+/fXXEydObNmyZcyYMXny5OE+
vGrVqsnhwdTz589TL57b9qCgoGHDhm3fvp3+9erVq0ePHp09e3bFihWVf6Wz
FcG9yjzB/fjx4+WfS3n69GlkZCT3dxMG9zNnzmQXo4OQjknln65fv04nsvpP
ffr0kf9+BVwb3L948aJp06bswgEBAaNHjz579qw6XuuVK1cmT55MvWl2sdKl
S//999+Cehob3B87dszh4/2KjBkzKgOhcwH0V199JbkuOrDZH3q6jHfr1o1O
BDqAlQUePnxIP4iVKlViP58ua7quD25Yy/3790uUKMHtH/qEvn370nG+evVq
+prCw8Nz586t/BMtTD/cHhDc04+s5OfQrzMdLQjuAUAendrcD6ifn59MMDpi
xAjufB85cqRzdaDOFP3YsR8VGho6Y8aMS5cuqVceaips27atXbt2bIDYpUsX
l8zyltTBveEbKOPkyZM2n07Xohp+99138a4L7hcvXqz8N3VyaZO//fZbahvQ
D/TmzZuHDh2qHcanUaNGUVFR7tktSc21wT39E+0cduHAwEDqp587d05tNlOX
4bPPPsuRIwe7WLly5cRNkeQT3NMByfURWrZsuXXrVvWqSK2s9evXN2zYkF0m
bdq07JvyWgYG99988w33wAb1BxcuXHjz5k11mXv37q1du5a72TVq1KhE707Q
zVrB/dixY9kOIFWjR48ev/zyi3qJfvDgAZ1TtF72A7NkySIeIi+pg/tPPvmE
uw1OV076XWPHQLt+/frXX39dpkwZdRkfHx9dT84DAAAAKLSD2jVo0MBhqRkz
ZmhbPtRB0Lv2mJgY7iW4119/nXqI9pZ/9OgR22fPmTMnOwC1c169evWQMXLk
SLY+/fv3f/hvuvr7ZthARatWrbjvKzg4mHrfR48epc4XNS9//fVXdaCqNGnS
nDlzhgvu9+zZo+4EwVzAXHA/dOhQ5Y5ThQoV1OCPRftz8ODBXAO4adOmLtlq
04qNjS1ZsiT3jbRv397eXNvUbaF+vVfCjSm2CHUT1C9FLRsZGckese+88w5b
ZNy4cey/0iGamFIuFxcXx66Ie5lrxIgR6j9xIzPQ5qv/NHnyZLZUu3bt2M9U
b0BFRERcYvTq1YstNWjQIPZf7b1RQr1O7ntMly5d586d1ZuHW7dupTNLff+C
OncvXrzgitgL7t25NzjcAALskHpKxdTfDl9f34eueOmeDiq2YpMmTWIr8NZb
bz3UEOy3xo0bs8XLlStnbwwT+hxuMPnixYsLnh3SVUk1fXaJ48ePa1/YqVy5
8syZM3ft2kXfEV2l586dS8eYckUNCAigq65zwT132AQFBe3evdvmknQ1++ij
j9iF/fz8uAPGwLXQTwx9+2zBlClTDh8+XPtTTofN7NmzlVc8evTowe03+if2
m02KWQu5U4DLg+gHQv4UUD4tb9683NFCLZD58+efPn36zp07dFnbsWMH/WQr
Q/HkyZPn1q1b7MLe3t7surifJ2oGSFaVLfXs2TP172vXrmVLlS1bli3ltsgJ
AJxz8OBBL43169c7LBgaGsqVKly4sBMVOHLkCLW42M8ZNmyY4Gd33759bOZI
zTwnVsqhxiF74eKSYvrVZv9V0HuyyQwbKEP7sGi+fPmmT59+4sQJ+ln5z3/+
s3fv3g8++EBpwFDLhP7CBfe///67upcEA69xwf2YMWOU3y/qa9ts4z1//px+
zbm6UVMtCfeFG3FthvHjx7ObSRsu32ag9k/9+vXZ4hUrVrT3Zuv9+/e5NjY1
LQSPBOiqpGubze60evVq9hEFOjIFw/4vWrSIfdbFx8fnhx9+sLcw7Vt1/3Dt
NGrts3uPbdlyh0eWLFnYgnRtUf+JGmY21/v999+zkS79N3U37HUbCTXq2Ec6
k2LMMRBju//cRDaFChVijwf2Tg77986dO7OlqJum/hPbC2DvGomPSXvP8nED
gmXNmpV+JmwuSVUdNWoUu7C/v7/g5Sb5nSA4+O3hOv50wAtmoKPr7YwZM9ST
iK4PeCYZAAAAdLl48aKXBvUjHM6aavN1zn79+umtAJeSFy5c2OG4r9RfYG+n
N2/eXO9KxbghCIYMGZKYTzPJBt6+fZsbwLBcuXI2b4zQV690xuvUqcMF95LT
mnPBvXLHqUyZMuJBrbVv33zzzTdObq0VLFmyhNveVq1aCfrCZPPmzdp3FrZu
3epwXe+99x5b5LPPPpOpoXOlXO6DDz5gq/Hxxx/LlJo9ezZbqlOnTkm0rkWL
FnHfSOXKlW2+w069zokTJyp9N/oPrpTkiKZu2xsRERHswRYYGKit4RdffKEu
sHbtWpma6MJ+vpfO2Vg+/fRTtmyePHnEL9FHRUXVrFmTLdKtW7ekrqRed+7c
CQoKYlcXEBDw7bff2lz4l19+UabhoGtvu3bt2FIywf3+/fvZn4zUqVOLp4qI
1xyc9GPn8GaIe9Yybtw4r3+bN2+eYPk9e/akSZMmRYoU3Gye8iMVuArVk62A
3qzhhx9+4Da8a9euNp+5+vPPP4sUKUILcI8G0fUqSav6448/sqUqVqwov3UA
YDjqInlpdO7cWVzq9OnT2lJE7yBj1IvhZpuSeW2fLnfqLyld5wVhmXO4l5Gp
o+30R5lzA7XOnTvHfZW1a9e2GdbcunVLuYEQFhbGBfcORz9WcMG90sek9pt4
tHbuUWRCvz5Obq2JTZ06ld1G6o/Ll6UOBVs2b9684vsVtMO5cZB69uyZ1JU0
MzrTqU2ubhedeg7vY8ydO5fdFVmyZGFfY7eHe/abViRZQ26mM5svU7CoM8uO
9UErkmkGU+9DfUOf2tJ0tZesHrjcb7/9xn7j1M6XKcU96TR79myHRZw4Jqmr
xT4TQsfMgQMHxEXCw8PZtRQvXlxmeB/ndoI91Etl+610hP/8888OSy1btkwt
Qqehq97JAgAAgOTgs88+87Ll66+/FpS6ffu2zUHPsmfPLk4eOdTUYT+Hmnns
qE0CERER7K0Me89nOseFwb15NpAbBZ2ayoL+GjWDlbHZudHenAvuvRIeBREM
MqCgI4e7A/Daa6958GT3devWZTc2bdq0t27dcliqe/fu3L5FcG+Te4L769ev
s3dpvBJmxxbHiErQz70/5WW+4P7w4cNskdDQUO0ybOjm9CC3Ak5n4keOHOGe
U9q1a5fDUpcvX+YGehW8KZP4SjqhTZs27LqotuLbBVevXlUGMeaON4d33p4+
faoOGq8YPny4w+rFxsYq4a9KfBfXPWuhnx5ukE+Z43/69OleGpYL7rlB6YOD
gwXRxrVr17Jmzcr96CO4BwCBfPnyaS+V1C4SD03GjZ2ior/rWjs3KEq5cuUk
O6HsWB/FixfX1XV1yIXBvTk3UIv7QtOkSSPo0VDPjn7EqUfMtbicC+69EgYi
cxh30gHJTdJNh67HDJivcjoTP3DgANds3rNnj8NSFy5c4EqtWbMm6SppZnSK
VahQgd2usLAwmYLcmPnchEQ2uSe4py1S5+nTtUXx/34l2eXv14A80wb39CvA
/VCOHTvW4VpiYmLU0Qvlrx4uDO6p2tzcQDLVVnTr1k0tNXToUKfrAAAAAMkN
1yZXp88WD1TOzWoUEhKi3n5XZtSVxL22T51x+bLsC8v16tWTL+iQC4N782wg
1wh3+IHHjx/XPpvhdHDfq1cvmYLa1wNlOgtW9PLlSy5Lat26tUzBM2fOcLsI
wb1N7gnutUHqhQsXHK6lbdu2XhpmC+65QK1ChQraZS5evFj2v+S7rvKczsSb
NGnCFqxRo4ZkQe46WahQIYe3u90W3G/evJk7ZsaNG+ewlM0pzh0G0NxtVX9/
//v378tUcuXKlWxBb29vQWbhnrVw81/QSXrp0iWHq4iKiuLec5TZby6XyOCe
m41lxIgR4uUXLFjAbTKCewCwhzoF7PmbPn16tVMpbppylya170l/l1/76dOn
uTm2ZF58U7GPCotnl9bLVcG9aTdQq0WLFmw9HU4ZvHPnTi8Np4N7mUf+4v/9
zqPC3oBF1uV0Jt6gQQPulJQsSL/1bMEiRYo4bDZ7ZHC/fv16dqNSpkx59uxZ
mYKHDh3iDkuH8066J7jfsGEDu7CPj8+VK1ckVxQZGaleBql6kjNngcuZNrjn
Bh7MmDGj5Ks63HiV1Kdz+MPhwuCeGySfTij5YfZv3Lih3vrz8/N76IoZBgEA
AMDjXbt2jb0n4O3tfeHCBWUebWpaCAY2r1OnDttuGTZs2MCBA5X/lp9NTzsx
oq7R/KKjozNlyqQUpP7R7du35cuKuSq4N9UGli9fnq3Jp59+6rAIN9WdVyKC
e4ejH6vy5MnDFtR1E89CqPPL7SL5WDxbtmxsQQT3NrkhuL969So7yJuX9AMq
dJnlbsZ6mS+4X7NmDVtE5h0Ql3MuEz937hz30JF4ABkWXam470Uwb11iKukE
boyOzJkziycfUWnntREH0PTTkytXLnZ5h+Meq6KiotjZLb3sT6DjnrU8ffpU
mbBe1bJlS8m1jB07Vtd+SwqJCe5pD3Ovz+/cuVNcJCYmhpsCFcE9ANjDTXHV
tm3bWbNmKf/dvXt3e6X++usvthQ1h86fP68OXvTnn39Krp1LDPPmzSvZjlKs
WLFCLdumTRv5gg65Krg37QZqcQMvLFiwwGGRMmXKeP2b08G9ZEJKv4ncGFny
8bRVOJeJ//7771yvZPny5ZJr/Omnn7ivY9OmTUlRSZOrUqUKu1H0f+XLcqNI
NWrUSLy8e4L7qlWrsgvr7Qayc1Th/WKjmDO4j4yMDA4OZpcXNBi0K+IGkRs4
cKC4iKuCe6p29uzZ2Y/SO0Vs+/bt1bLu71ECAACAFc2YMYNtfiivJaqPzdub
mev+/fvcwGiHDx/+9ddflf/OkyeP5I0FbhBXhyMraoWHh+f/r++++05XWQFX
Bfem2kAuItmwYYPDItqX75wL7jNlyiQ/SGPfvn25lXrk5GhHjx7lNnPRokWS
ZblnMBDc2+SG4J67ZU0kJ8IglStX5sqaLbj/9ttv2SINGjSQWZFrOZeJc1Pg
pUyZUjy7PSs2NjZz5sy6Ntw9wf358+e526p9+vSRLKu9kotvF2zatIlbXtdb
adwwFOnTp4+MjDRqLdyrGWThwoWSqzh16pSu/ZYUEhPc3759m6u/zNyp3AAF
CO4BwJ7Q0FD2/F21atWNGzeUB+folzQmJsZmKe5Vu7Jly9IfqVmi/F+Z54rj
Ex7K4h5MGjx4sK7KP3r0KCQkROlhFS9e3IWjprskuDfzBmopz/yrZAbfoy+a
+4VyLrinbZSvZ7t27diy1KyS+Vm0EOcy8X79+rGl6Hdfcvij+ITn/dhp0EmT
Jk2SopJmph0NT/I6puB6dnRYis8FNwT32i2aM2eO/BbFJzwNot7Cql+/vq6y
4CrmDO7ZmVwUDh+SZzVr1owt6+/vb6+xoXBVcK+t9u7du3V9wvr169WTQr4X
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
w4bJb4L2hny/fv3ki4txwb3eQYkVZttAA4P7/v37y9dTO7ix3qmvPMCrV6+o
hX/16tVLtlSuXJndPzt37nT4gZ4U3Pfq1Uum1MSJE9lSkq9/ygf3et/L5miv
D84F93369JEpRd8dW8qDg/u///6b61nT752ulQ4ZMoT7an799Vf5StarV0/X
6mTExcVxI3JIhrAq9TE8hTiAVoc4VtBvva51aWc7tXlquGctuXLlYpcJCgrS
tZaKFSvK77ekYN3gvlatWjKl1qxZw5aqVKmS5OoAwBA3b95kOxT0g3v9+nWb
S6o9CCWyadiwIXuyh4eH2yy1dOlSZYG6desKqsG1hQi1meW3Yvr06VzxM2fO
yBcX44J7mVa6lpk3kGNscC858JRi37593G6hno58cfNzIrjXvknatm1bXSsd
OHAg9wniIaC5SjZq1EjX6kyIu7FG7t69K1/8/PnzXHGbY1qqtMH9tWvXZFbE
dSUEg4G0atWKXdLX11fypX5Fv3792OI+Pj7UtpQvDq7CZdYZMmSQKUV9DbaU
zJM8T548YYuIfwUKFy7MLqx3MtCNGzdyx794bE9uJ6RNm1bylguHuylavHhx
XcXr1KnDFs+XL58TdQAAAIDkICIiglosbMvhxIkTNpe8ceOGcnOGGlQxMTFd
u3ZlSwkeblSXFA+2xt1R1xWvXLx4kWuzrVixQr64GBfcOz1Gvak20MDgXtcQ
WOvXr+c2POlGd7So2rVrs/uH+iMOi3hScF+jRg2ZUiNHjmRL9e7d24l1CbJ4
7Rkq+VK/Yu/evVxx54J78Z1tFTewv8zDDxYN7kmRIkXYUnons1Nf91PQz6U6
WYxMJSVfZ9CrWrVq7Fq8vb1fvnwpX5x7G0gcQPfv3587OG/duiW/Lm1esGfP
HqPW0rp1a24xyd8+RaZMmeT3W1KwbnCfPXt2mVJff/01W0rvXAYA4Gbc27WC
h21Gjx6tLDNs2LCHDx9yc7Tt27fPZqlHjx4pS/r4+Ny/f9/eh3ODdZAff/xR
fiu4J/QyZsyoK5YS44J7aiQ48SFm3kCOscG9rqe7tdPYufDugRk4N318wYIF
2VIlSpTQtdJGjRqxxf38/KKjo+UrmSdPHl2rMyFu9hAvR0/8cjZt2sQVF7c2
tcG9zNNBMTEx3L2gmzdv2ltY28bWNaw39yRDmTJl5MuCC3GZNbl9+7bDUu3a
tWOLyLzBRB/LFhE/IUDdea5W9+7dk9+ozz//nCu+f/9+wfLaneDcGPV9+vRh
PyRdunTiCx2He1whGb6XBAAAAJJWr17NNhvE93KrVKmiLLZ161b1PXrFmjVr
7JVSn4QsV66c4MM7d+7MfmBQUJD8A5DcVpBLly5JlnWIC+69vb0fP37sxOeY
agMNDO51jUmlHV3t4MGD8sWTA/WsVMjc6fKk4J4uRLGxsQ5LcQ8aSQ4pLx/c
kyxZsrALiycH4cyaNYs7zp0L7rNmzSpTqmfPnmyp999/32ER6wb3XM+aLuCC
m/+cuLg47k5y7dq1dVWS3LhxQ3J18rTjAEhejeMTpuHgRiEQ3xLkXoIma9eu
la9qWFgYWzZNmjQvXrwwai3a2zs//PCD5CquXbvGlUVwL19VIp6iWqFOhK2Q
HGAfAIxSq1Yt9pydPHmyvSVPnjypLBMSEqK+R6/Ili2boCGn5oCCGYgePXrE
zSo1cuRIp7fCtS0cLriXHPGJY+YN5Bgb3OtKmbnGMLlw4YJ8cfNzLrjndgsd
eHT4Sa6RTmRuAHaHj+tzlfSSay2YGTXIuS2ixqd88eHDh3PFxfd8tMG94Dqs
unr1KleKegf2Fj5x4gS38Ndffy2/RdyrKy4cFRN00WbW27dvd1iKeze8YMGC
Dov8/vvvbBHxs7vffPMNV6tNmzbJbxQ3HET69OnFD9hrd8KqVavkV6fSjrUo
f4uSzjXuTuysWbOcqAMAAAAkB9ztbnGepfatQkND2VLp0qUTjHn18uVLZX72
FClSXLlyxd5i2ndO5ecB5CLF8uXLSxaUwQX3XhKzV9MmKxMYsdMHmGoDDQzu
ycmTJyXrWaJECbYgdf1kUlrr2rVr186dO0+fPi1fJCQkRN0/mTJlknmJxpOC
e/LTTz85LMU93iB5C0VXcN+hQwd2YbrcSY5VGK95mt3L2eDeS+6qwvXBJ0yY
4LCIdYP7o0ePcrto+fLlkmukPjhX1uG0sNrgfvr06eIi9DOh/F7IvzWvnYSU
fqcky27dupUrKw6gqVZZs2Zll3/77bcl1xUdHc0949ejRw8D13LhwgXuoQX5
qVu0cwQjuJevqpejWW4V3BNWkuc4ABji7t27dE1gz1lxwKS+ycv1IsWz/Cxa
tEhZTDyGdvv27dnPlO8o0U+w0ktVOezl6cIF9wEBATafK2M9fvxYaRWwfzTt
BnKMDe7pJ16yIDWzua9G1wO3luBccH/o0CGvf5MPtn755Reu7OrVq3VV0ksi
w3Ki2exmpUuXZreoZs2a8mW5Wx8OHxjWBvfVq1d3uJZdu3axRRwOGF6uXDl2
efE04iw6H7nq7d27V7IsuJY2s5aZHCR37txcqfPnz4uLrFu3jl2+VKlSgoWf
P38eFBTELi85LmJ8wqXAz8+PLdu3b19xEe1OaN26tbhIbGyscsGJiIhQ/0jn
HffKxkcffSRZ7e3bt7MFU6VKlRQP+QMAAIAHoP4O19oRT0N29epV7qa3wuFb
UWqkRb0zwWLly5dnP1ZyvuaYmBjuhv+SJUtkCkrSBvfUHRPHx+Hh4cqSXGRj
ng00NriXfN9Z27TWNW+4FSnfS4UKFSSXv3fvHvtVSs6/4GHBvcPhxahL6Ovr
yxaRfM1WV3D/888/cxVzmNgqnj59ys1X4pWI4N7eRLEqup74+/uzRTZs2OBw
RdYN7uM175rJzztP3X+2YN68eWnv6aokKVSokPjhf3UAYfkuf1xcXP78+dm1
lCpVSvKY4cZ+8ZIIoMePH88uHxgY+OTJE5l1rV27li1IF6tz584ZuxbuqZVs
2bLR9UFmLTVr1tS731zO0sF9xYoVHR6i3CQOM2fOlFwdALjfggUL2BOWOkfi
5bWDaCl27NghKEUNXeVl89SpUwve/NU+pHfq1CmZrfjuu+/YUpkzZ3YYrOvC
pcNk7ty5guWpmaHOPc0+/m3aDeQYG9x7SXdPdu7cyRX88ssvJatqFc4F96R6
9epsQfl553v16sUWpJaGw+fttcF9kSJFxINOq++kyzx4bIiVK1eyW0RXMMnh
uLW3PrZt2yYuog3u6aT7448/xKXGjBnDFnH4IBDXDUyTJo3kvSP6jtiCnvd4
jIVojy7qBAnevYpPGG1Me+936NCh4hUNHDiQXb5Lly7i5bmjMSgoiI3IBbgT
jTopDk807U7w9fUVl6ImirIkdwNh3Lhx7OfkzZtXcg4a7inldu3ayZQCAACA
ZGjDhg1ssyFXrlwOb6ty0bPC4ZRw6oOXVapUESz2ww8/sI1DPz8/mW77V199
xTVBXfsAtja4J9OmTRMUqVq1qrIYl9yZZwONDe7Tp08vmElNxc2Jli5dOplS
lqZ8L/S/kh187nbHsmXLZEp5WHBP55R49kBuUFZaXnL6bF3BPV08uRMkODhY
5u4o1+9TOB3cU/dTPNQn95g3uXz5ssMVWTq437NnD3fFk5luki7O3PMeMkGt
Nrgn9BULiqjjAMsH94ROQG4t69evd1jqr7/+4mYWltmuhw8f0u8OW0SmqnFx
cdx7Q+Ihgt2zFq7ZQ6ZMmeJwLepNG73Hg2tZOrj3cvQLtX//fm75X375RXJ1
AOB+DRs2ZE/Y8ePHi5fXRs9eCUNFOZwZtm7dujLXkObNm7Of/OabbzrcBPoF
qVixIlvqww8/dFhKF21wT5ss6M6cOnVKXZIN7uPNuoEcw4P7LFmyyExpx2XT
9KVIPitoIU4H97t37+aazeI3OxTUm0iVKhVbSqZbqg3uvRxdTOrVq6csZtrg
PiYmpnjx4uwWSTbYmjVrxpaqWrWqw/6gNrj3SpihQJAhxsbGFipUiF2+V69e
DreoZMmSbJERI0Y43JyIiAhunPxFixY5LAVJRJtZk7FjxwqKTJo0iV3Y398/
Y8aMadOmFdw6oJ+tnDlzsqVmzJghrtjdu3e5t9cnTpzocHPoMOZmiu/evbvD
UjZ3Ap0vgkeMPv30U2UxLri/d+8e97Mlc8W7cuUK976GzE0JAAAASJ66dOnC
Nhtkhkvi2m9eCTmRww7y8+fP06dP75XQfxePBcSFgw0aNBA/qn3z5k1ueCWH
TxHoxQX31LTzTmCvbXb8+HG1t6t95dYkG2hgcK+MadywYUPxnbqvv/6aO9J0
zRBnUer3IvPwLXWa2JkECxQo4PB1YIUnBfd0PtL/Ur/J3ju2t2/fzpMnD1tE
/PiQYF0OB3zYvn0791z6gAEDxEVOnz6tvlrFci64V26qFC9enBthVRUVFVW5
cmW2CC0ssyJLB/dk5MiRbNnQ0FDxlJ10deLesA4LC3OikrVr106dOjUdFXPm
zLG5/Pnz59X7nLqCe/pVZafJIPny5bt37554o6g+2oNNJoDeuXMn+6uRNm3a
I0eOiIuoIwko6ALlsKngnrU0bdqULUKNE/HsLXfv3lV2NTcoNIJ7+arS2URt
RfpC9+zZY3N5Op6550KDg4M9e2YcAEujZgYX0gmGOlFQwyZv3rz//v3x6tat
m8N1qdeTFi1aCBaja3X27NnZD1+3bp34k2fMmMEunyNHDpent1xwrzztUKRI
EXvdYWrbqAtzwb05N5BjbHCv9DE7dOggfvNxypQp3HHo/h90N3A6uCfDhg1j
y9IRKz5yqH9RrVo1tkinTp2cqGSdOnXowkKHzfz5820u/8cffyhDcHiZOLiP
T6gn27+jLXI4vhl36yMwMPDq1asOV8QF99TjUB5soB6ovbNA++jvjz/+6HBF
Z8+eVe7mKehrOnr0qLgI1YFdS7ly5dCuMxCXWRdIQA37NWvW2Fz+woULmTJl
4k5q6qvSfxQtWtRel5MbWoeOfJmpA7mXm+hIO3HihLgId42irr3Me/rcTqD+
nTKJD3WpbN6ZpPNL7W5rh+zbtm0bW+2goCDxjW46/rknHuVnnQAAAIDkhnpY
3LSwMnNOUROOa+o3btxYZnXqJM7isU8jIyO5VwM6d+7M3bhQUaeee9JS5v4P
dTwf/pfM+7BccD9kyBB1/OTWrVvv27dP7YO8evVqx44d7FOm2uDeDRsow8Dg
ftSoUcqjCG3atLEXL1LXNU2aNGypsmXLSqbSlsZ+Lx988IGge3vmzBn2aXkq
uGXLFsm1eFJw//HHH7dt29YrYUCG8ePHs90lOrtXr17Njb3spedpf73BPenR
owe3OrqA2LtzcurUqeDgYK+EkUu5Us4F99SbVi4v1BOnviS33suXLzdo0IBb
keTzMFYP7unq8cYbb7DFa9Socfv2bZsLP336lLsVHBoaKnmvW1tJ9cZCo0aN
du/ezV7H9uzZw454ryu4J/STzV3Jq1SpYm+jnj17pv4Kc8eb5P3qsWPHsqWy
Z89u7w0sOnqnTJnC3sqg09Ph/T23reX69esBAQHsWuhX+8CBAzYXpjaPMldp
3rx5ubcdEdzrqqpyK8/Hx2fQoEF//vmnuiSdEdu3b+cmhPVK+tdCASAxuLGM
qIMgU2rw4MHcmb5582aHpe7cuaM8N0VdA/qBFiz5888/s0Pl0PJbt261t/Di
xYvZx7FSpUrlcJQPul49ZMiMi8sF9wcPHlQSavoZooY0m2hQM2PEiBHsj5q2
e5jUG5h4xgb3EyZMULLFt99+22aIQy0Haqdxj+HVqVNHstVtLYkJ7qOjo7lB
CWrVqkVnos2F6dClTj27MF0QxKeqoJLvv/++8t9NmzalA57tC//000/swz9m
Du7jEy6S7OmcIUMGQVd95cqV7KlNh+jGjRtl1qIN7k+ePKkMrlW1atUdO3aw
/Y6LFy/27t2be8g8d+7cknk6t0VBQUH27gXRtZEb/zwwMFA8IhwkNS6zLlKk
iDIKGX2nffr0YR+9o4NqxYoVyj0K9tA6fPgw9QuUIDtbtmzUD2JP80uXLmlv
gzRs2FCyeuoUGIpcuXLZ69PR0aW+Ba/w8/MTP4Mt2AnUCFGOarpqfffdd+wP
Bx2x6oA/Xnbm2qNfbfYDQ0ND7T2o8PLlS266uoIFC4rfIwAAAIBkaNmyZfkT
cENXeSXcl87/X4LZiF5//XW21OLFi+0t+d5776kfqD6xSd0W5S81atSwWYpa
gNwstNQEWr58OfsaHbUtx44dyz7365UwwbfD4RYJO3bZqFGjtAvs27evLIN7
u2HIkCHUmi1VqpT6F9qiwoUL08dqJ6q2Ocl1Um+gTV988QW7UVw97QX3Z86c
YUtxYbq9ztqSJUvyM7gJtamHrraQqUdA3bpjx47dvXs3MjLyypUrq1atUkfA
UxUoUED8/KrH4GK4cuXKUUeefbyB9tL+/fupe8UdbJMnT5Zfi7WC+x9++IE9
CLNmzcpW4+OPP753717u3LmV/0s7MEeOHKVLl6ZzSns+ejl62t/huhzWls5u
7pV2Ur169e+//569AUvHfHh4uPK2GtWZm6Tby9ngnmp4/vx56r0q/5d2RYsW
LXr16tWpU6fy5ctzR5dXwjVfMLddt27d1F3BzahOJ3VZ+1x1Z4Y61+zHcr9Z
QUFBNtdub+gY+mq4l+izZMkyadIktn9NF6LZs2dzG0sdecGotuJKvvPOO1FR
UVWqVFH/Qld1OjhLlCjBXd699Af38bbeGqONoqsBe8H8+++/586dq97qbNeu
XYcOHdgi8gH00KFD2YI+Pj79+/eng1ld4OXLl3Qwc/uZjpaffvpJfqPcsJY9
e/ZwI13QWrp27bp9+3b6rukru3379t69ewcMGKAsRqcq/V+n95vTTp8+zR5d
6oVOkTlzZpunAP1AKMV79+6t/rFIkSJsWUFwv3r1arUUl6cLgntxVd966y26
ALLv1GfLlo0ak3RycS0EhRteCwUAJzRo0EBp23OPP1HDg23525uXmZsRg05/
e48uU5+I/UD1HVu6OCh/mTdvns2C9EPAXlWou0HXdlqv2qyiNVJjT52kRpE6
dWqHb6/HJ/QQ2VI2+ybUumMvhty4BBcvXqQfGnVzqHrUzaSLYZ48ebSNNJs7
J0k30DnUelG3l7tLIAjuf/31V3ZHqftEYS+4p541e2BwTamlS5dSJ1T5b9ql
EyZMOHnyJHVyqdlAe57+VZ3MTlWyZEnJx9fN78iRI+wu5QaspvahzTbDoEGD
bH4a/Qpz2T11i6j3d/36dXUZamHOnDmTG0mDmrj2HiJ1WMl3332Xe8eBvmLl
Not2gDKTB/eE+hTsUyJ0tlKPjJqgalc0Jibmxx9/bNWqFXe2isdXbN26tb12
Gq0i/t+9A7o4UwuwVKlS3B0tFXVR5bdo+fLl7DWN/puOn1OnTqkLRERErFmz
pkKFCuwqMmbMKDPbArgW/Siw5xrXEaD/S8tQl0H9C7XM6Tihv9u8hdKjRw/l
Yw8fPqwuQMdqSEhImTJluBNZ/dezZ8/K13bgwIFscTq66PeUOtrqMspLGdx1
iY4u+mlOzE6gY5itM13Q6LTSvlVhM7iP10x6mCFDhvHjx7OzCdy7d2/x4sXc
QHm0litXrkjuHAAAAEg+Zs2apW1WadWtW9feJ3z88cfqYtTLFozN2759e8Eq
qLliryB12Xr27Mk9D0z/lzqMVEqbd1A1Ro8eLfm0sMPgfvPmzYJqDxkyJD6h
o8rdmrDJZnCf1BtoExeFcOzdsqCWuaCUveDe5izPqqlTp9Iyc+bM4TbfHmrl
yowU5xm0bx0q6MDInz9/cHCwdn5q6o9TJ1rXWqwV3K9YsUJweChh+rlz57Sz
iGrlypWLfdPTuXU59OTJk0qVKmmL0wFPPWKqA/sADP1x5syZdEHgFmZvSzZp
0sTeumyOCbBjxw7uGRub6DojHmVF+wSCpN9//11mRzlE1XNi7YJBYKKjo+kC
zr1p5ZXwpna+fPlsBohdunQRvzQkrqQyLMCjR4+4gVZsciK4j7c14qVCiVG4
cXWqV6/+/PlzLoDOkiULe7z98ccfgtXRORIYGMiti65LdGBzD7ooypUrd/78
eb0b5Ya1bN++XX3ERSxVqlQrV66kIu4P7g8dOiRTQ06dOnWU4rVq1bK3jCC4
nz17tr1SguBeXFVlcIC7d++WKFHCYf0DAgIwuz2AORUrVszhKUzWrl1rs3hc
XBzbWhMMEvvw4UPxKiZNmmSv7IkTJ7gZnL0SXk7PnTs3NaS5gNgrYaIZe4Ou
cGSCe2qzCap98eLF+IRRjNi3a+2x91RD0m2gc7p3725vEwTB/datWwXbbi+4
517j5SxdupSWGT9+vKNd+w/qy1OPPqn2i9vt3r1bcsNZzZs3t/eBUVFRgwYN
0jabqQehfTLfK6FTQz/34gGrxZVUhgV48OABN3uOTeYP7uMTOmXaTJNOUroS
0tmqfVwnJCTE4dkaGhpqb58owX28podoj3JfSxdqP1N/lvsc6knlzZuXmuja
2zulS5cW974hibx69Urw1SuZdUxMjDogmwD1LNhxSrds2aK9Xcmh64ZyQdZl
yZIlXNfV678dQG5UFgX1r8XvC8jsBGqZ9OrVy+FOsBfcxyeMb6PtVNIVkq6T
2gcAvBIGIqA+kd6dAwAAAMlB4oP7s2fPqovVrl1bsC6ng3vFvn37qBrieJca
cm+++ebp06fl94BLgvv4hGc+Bw8eLL7xYi+4T9INtMlswX18wrRQNp/OVVFn
Njw8XPBGsEf67bff3nvvvQIFCgj2jIJ6TO+++y77QK8kzwvu4xNGUm3durVg
yUaNGjkceNMlwX18whvBI0eO5F6z0sqaNavymoM2uGe9/vrr9lZkbzD/Y8eO
aW/qsujyu3//fvFWeF5wrzh58mTbtm21z8CwvL29qXtubz5u+Uqq4/lHRUWN
GDHC5isMKueC+/iEa6l2SggOXU779eunpABcAM1hX22w6e+//37//fe1wTqn
aNGiixcvdvp5Mzes5cqVK9rJIzghISFqiIzgPpHBfXzC2Pu9e/fWpgCqihUr
OpzXEgCMksjgPv7fsx7bm1o3PnHBfXxCM2zKlCkOH+mkBSZOnPj8+XPJzXdV
cB+f0Nq3+ZAny15wn3Qb6ByzBffxCUPHZMmSRbAkNdFHjRol2MNW5PLgXkHH
KvWwHDabqUEleO9VspLqeP701Xz44YfiZrMlgvv4hCG/PvnkE3svvKvy5Mkz
depUOrUdfqBMcE+++eYbmw+7KjJnzvzll186t0V0faZOjcMmOtVz/vz5yWGu
Q3OSyayVxT799FN75xpdKulMpG4s9+HUVi9Tpoy9D8+VK5fkXA9at2/fHjhw
oDa+55QoUWLJkiUOJ6yR3AnxCTNBcLMDcATBPbl27Rp1cMSXLFKhQgVdY1wA
AABAckP9oIcSxA9Lq4uJbwU8e/ZMsAp2ZHiBK1euzJo1q1u3bo0aNSpVqlSh
QoWqVKlCfcwBAwZs2rRJXE+bHAb3tFGX7Lt//z678M2bN6dNm9asWTOqGPVf
qH9UtGjRN954o1+/fgsWLGBHk3PbBtr04MEDwUbZa/TS0SIoZe92h/gYYzuk
9N+0l+rXr88OuZk6dWrah2PHjk3mj2f/9ddfX3311eDBgxs3bly+fHk6MKhz
UblyZTpOqANFx4bkGaRlreCeTgHBQcjOI0COHz8+aNCgihUrUs+LzseQkJBq
1aoNHz784MGDLl+XQ+fOnRsyZAg3ZLRXwm3McuXKTZkyRR0L2uXBfXxCUkwn
V40aNdi376k72aBBgzlz5mg74Fp0cVO3febMmeyKqlevLthRMh8ug64P7Mdy
d2vbt29vc+2C8TlZ9F1Tx/ndd9+lq3elSpUKFChAZxmdaz169Pjmm2+467x8
JTnciDR37tyhPdmyZcvQ0NBMmTK99tprdFLTd9SnT5958+Y58RCOin62vvzy
S/oo7cs7OXLk6N27N/s0RSKDe0VMTMy+fftGjBjRqlUrOssKFy5csmTJunXr
durU6YsvvnDVdAluWAt9ft++fXPmzMlN3ElfEx0J7P1G9wf33E8w9xZh69at
bR51t27dUorTf9g7Mu3NwBifMGaI4JCWrCqHe6+Eft2o9UWHKx2cdKHOmzcv
XbQHDhy4Y8cOj5xoGMBj0PVBphcpaAawfQTBM1d0KRCvQibeos/ftWsXXW3a
tWtH7Rb6BSlRokStWrWo/TBp0qQTJ07oveDIBPfUCBFcDLkpz/bu3RseHk5t
e+VimCtXrjJlytDvHXWCqInisHou30Dn0BXeiV8NcXfbXtj34sULyQOPmnnU
4qIuOfsipK+vL/W1J0yY4JFjFNPOYffhyJEj2cO1c+fONne1ZLP56dOn69at
o/ZS06ZN1WZzkyZNevbsuXLlSvnpBrhKcrhmM9WNGnstWrSgXrDSbC5atGjN
mjWpGvPnz7fWl0gn47Fjx6in9uabb9Im0IYUK1aMjk86WydOnMiONu8QNeEk
zzg6CxYvXkyXFOU+FfWOixcvThVYuHCh07cRVHQx37RpE3V1qcFctWpVWgX1
WOvXr9+xY0c69ZL5bRyTEBwnXEeAfs7o4KTfkezZs9Ohki9fvoYNG9KRKZit
kn6AtmzZ0rVrVzqYqd+ULVs2OrrCwsKWLl3Kvp7vHPoJ2LNnz/Dhw5UOIHWc
qQNYr1496gDOmjXrkv1fFi35nUDVXrVqFV0q6ZeUrjZ0zSlYsCD9QHfp0mXq
1KlHjhxxuC5qI9En9O/fv3nz5sp1sly5co0aNXrrrbfoTEwmU38CAAAAJIbD
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
d2zcw/3790uVKmXLfFUcm3/++ecOl1qiRAmLHYpDexvPDOAGSUlJamHLli1T
Fo4dO1ZZEhUVJbc811m1alXGsRZDc+LECdmlGR/BvRQE9zpEcK9PBPc6RHDv
TgT3HoHgHp7OE4N7ISYmJuNRZNOmTWXXZXy7du2y5dMbW/Tq1Ss1NVV2QwZR
v359TQYlOjr6wIEDsrsxiDVr1mgyKMIbb7zB1UA0R3APgyG4hwEQ3ANauXHj
hslkyjirLFOmjO07Wb9+faY7yVS/fv2Sk5MdKFX9/N/cnTt3HNiVK4hJuPqr
gfnz5ysL1dMRhISEyC3PddLS0goWLJhxaMaMGSO7NOMjuJeC4F6HCO71ieBe
hwju3Yng3iMQ3MPTeWhwv2LFioyHkCaT6erVq7JLMziLB4yTYmJi7t+/L7sn
I2jatKlWgxISEqJevRHO2LRpk1aDInTq1Onhw4eyezIUgnsYDME9DIDgHtBQ
+fLlM51V2nWeut69e9s+Xy1TpsyOHTvsrbN58+YZd6WrvDIsLEypavbs2cqS
yZMnK0tMJpOBv16rXhHA3AcffCC7LuMjuJeC4F6HCO71ieBehwju3Yng3iMQ
3MPTeWhwn5aWFh0dbXEI6efnd+PGDdmlGdy1a9ds/NzGRrGxsQb+rMNt7PpI
LVthYWEHDx6U3ZPHO336tIaDIrz88suyezIUgnsYDME9DIDgHtBQv379Mp1S
Dhs2zPad3Lp1q3DhwnZNWVu3bn348GEb93/u3Lnw8PCMOxFHnQ417RLqJw9T
p05VlkybNk0tNSkpSW55rvP777/7+vqaj0u+fPkSExNl12V8BPdSENzrEMG9
PhHc6xDBvTsR3HsEgnt4Og8N7oV3333X4uh+8ODBsovyCjZe69B24oVUdk8e
7/PPP9d2UIoVK3bz5k3ZbXm29PT0yMhIbcclPj5edlvGQXAPgyG4hwEQ3AMa
WrJkSabzySJFitj1xekNGzbYfsJ8hY+Pz/PPP799+3brl6o/c+ZMVqcF0NVp
2YoXL65UpX7uN3PmTLXUy5cvyy3PpZ599lnzcZk3b57siryCleCeqw26jpXg
Pi0tzfqrGVzEenDP00EWK8E9gyKL9eCecdGWleD+4cOH/D5RJwju4ek8N7i/
cOGCv7+/Wnm+fPlu3boluyiv8M4779j1uU22/Pz8jh49Krstz3bt2jXzp4Mm
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
5RftGv0/I0eOFHtu1aqVY5vfvXtXHCjZ/n6a0SuvvKJtR66zd+9eh9sUGjVq
JLsDwzp06JAzD8KM/P39k5OTZbeld3/++WdkZKSGd7ug+UucF3rzzTe1HZTu
3bvL7snjnTlzxsqFeBxz+fJl2W15vJ49e2o7KK+//rrsnnTq+vXrmn/FTszK
ZLdlHFzjHp5O59e4F1MpZ17uFi9eLLsDZOPEiRPKYHGNe1155plnlHHhGvf6
sXv3bmVQuMa9JrjGPQzGYkZnu8DAwHfeeefevXuyOwC4xj3gQgcOHMjqjcDf
3//KlSvZ7mHp0qXqJvXq1bO+8pEjR15//XUxy7LyBlSzZs2vv/764cOHGrX4
P2K2nOOf3+45s5Nz58517drVx8fHgffWfv36adWLqw0cONCBBs0tWrRIdhOG
9fnnnzs5OhZOnToluycPsGnTJj8/Pw3v9u+//152Tx4vNTW1fv36Gg7K008/
LbsnI1i+fLlj75JZ2b17t+yePF5ycnKVKlU0HJRnn31Wdk/6JR6x2n7FjjmV
hgju4en0HNzfv3/fxqs/Z6VQoUJ37tyR3QesIbjXJ4J7HSK41xbBPQzG4eBe
UaZMmZ07d8puAt6O4B5wqYoVK2b1LjBx4sRsN58xY4a6/ksvvWTjjZ46dWrB
ggUjRozo2bNnp06d+vbtO3z48EWLFp0/f965bqwpVKiQUuft27ed3NWRI0eq
Vatm77uqaFOTRtygevXq9nZnoWDBgs7fz8jKhAkTnBwgc0ePHpXdkGcQr1G+
vr5a3e0rV66U3ZARJCYmOnxdj4yeeuop2Q0ZxOzZszW8kMHWrVtlN2QEV65c
EUf3Wg1KTEyM7IZ0bfXq1QEBAVrd219++aXshoyD4B6eTs/B/b59+5x/xYuL
i5PdB6whuNcngnsdIrjXFsE9DMb5WZOPj8/QoUMfPXokuxV4L4J7wKUmTZqU
1VtAyZIl09PTrW/+3nvvqeuPHDnSPTU7Rj1579mzZ53fmzggsvct1YN+cZ8/
f357u8toyJAhsvswMvOnnpNsObcGFF999ZVWPyXetWuX7G4MIjExsWrVqpoM
Stu2bWV3YxyffPKJJoMiHD9+XHY3BiFe7UuXLq3JoHTr1k12N3q3YsUKrc7T
whlaNERwD0+n5+BevO45/4oXEBBw4sQJ2a0gSwT3+kRwr0ME99oiuIfBbNy4
0flZU45/ToXH9U8hC8E94FKXLl2y8hvSbKf9/fr1U1eeOXOme2p2QHp6utrm
vn37nN/huXPnlL3VrFmzSZMmtryZvvrqq87frnvkzZvX7rlCBn5+fvyU26WG
Dx/u/DBFRkby/Uy7zJkzx/nf3Ys9XL9+XXYrxnHlypXy5cs7/3QYNmyY7FYM
ZdKkSc7/7j44ODglJUV2K8bx+++/Fy9e3PknywcffCC7FQ+wcOFCf39/5+9t
l56QytsQ3MPT6Tm4X7x4sfOveELDhg2z/fkAZCG41yeCex0iuNcWwT0MZsmS
JZrMmpR35MuXL8tuCN6I4B5wtZiYmKxe/Nu3b299W7GCurKez/yckpKi1rl2
7Vp1+S+//DJ69GgHdqhOGpULCuzduzfbSy0PHjxYs35cTKtf5NWrV49PXVxq
7ty5gYGBzoxRz549ZTfhedatW5cnTx5n7vYGDRrIbsJokpKS2rZt68yg5OBa
6i6wbNmy0NBQZwalXbt2spswmuvXrzdu3NjJJ4uYPsnuwzNs27YtMjLSmbu6
cuXKspswFIJ7eDo9B/c//PCDMy935r755hvZ3SBzBPf6RHCvQwT32iK4h8Gc
PHlSq1mTULx48YsXL8ruCV6H4B5wtYULF2b1yu/r6/vbb79Z2bZOnTrqynv3
7nVbzfYyD+7nz5+vLn/55ZfFkh07dji8w/Hjx6sLxT0ZHh6e1Z2p80sJmLPx
HAK2mDdvnuxuDE4cD0ZHRzs2OgEBAWKuKLsDj3TmzJly5co5/LxYv3697A4M
KD09feLEiQ5fy6Bp06ayOzCmo0ePPv74444NihhNPU8tPNfDhw/j4uIcGxSh
U6dOsjvwJH/88Uf16tUdvrdXrFghuwNDIbiHp9NzcH/q1CmHX+ss5M+fPzEx
UXZDyATBvT4R3OsQwb22CO5hMKmpqTlz5tRq4iRUrFjx9u3bstuCdyG4B1zt
3r17Vn49OnToUCvblihRQl1TV58bWEhPT1dP2Dt16lR1uXLC2BEjRti7Q/EO
q+ztnXfeMV/eoUOHrO7JKVOmaNCJWwwbNsyZ2YK5iIiIa9euyW7I4MQbZcuW
Le0dGvGMmD59uuzaPVhSUlL37t0deFK88cYbsms3slWrVjnwVZaCBQuePXtW
du2GJd4FYmNjHXiyjBkzRnbtRrZgwQLxHm3voJQsWfLSpUuya/cwycnJAwYM
cODKEb169ZJdu9EQ3MPT6Tm4F0fcmlxwTTFw4EDZDSETBPf6RHCvQwT32iK4
h/E0atRIq1mT4vnnn5fdE7wLwT3gBn369MnqZT88PDw5OTmrDXPlyqWsZjKZ
Hjx44M6a7RUUFKSUOm7cOGVJenq6cprxVq1aWd/22LFjCxcuNL8mtRrcW3yk
0K1bN2V5xqtgL1myRPOmXCQhIUGLKcO/+vXrJ7shr7Bo0SLbr1wcFhY2d+5c
2SUbwebNm6tWrWrj3S5ecMaOHcv1I1zt5s2bgwcPtv0qEtWrV//1119lV218
q1evtv08FcHBwR9//LHsko3v6tWrffv29fPzs3Fc6tevLw7NZFftqXbu3Fmr
Vi0b72oxKHFxcY8ePZJdtdFkGtyLWf358+ePHj168ODBc+fO6fyIBl5Oz8G9
IA6rbXyVy5Y4mj5w4IDshmCJ4F6fCO51iOBeW1kF91euXDl58qR4cxT/vXHj
hqzyAAfEx8drNWtScbo2uBPBPeAG27dvt/KyP2fOnEy3Sk5OVtd57LHH3Fyz
vdSzCgwfPlxZkpiYqCypWLGi9W3ffvttsVpQUFDfvn2VU4vfu3dP2bZ79+7m
aw4YMEBZ/u67706bNi1fvnzqXeRBwVBSUlKmmVdERMQnn3wiXocPHTq0cuXK
IUOGlCxZMttpg6+v788//yy7J6/w4MGDr7/+uk6dOlZ+1le4cGHxeL58+bLs
Yo3j0aNH3333XYsWLayEX+IVUrw4nD59WnaxXuT333+Pi4uz8ut7Hx+fBg0a
fPnll0RjbvPw4cMlS5Y0atQo43fbVPnz5x80aND58+dlF+tFxPzkjTfeEC9T
Vt7HmzVrtnjxYr535CRxB65bt65NmzYBAQFZ3dvh4eG9e/c+duyY7GKNyTy4
P3PmzLBhwypVquTv72/xgC9XrpyY5f7www+pqamySwb+PzoP7qdOnZrpK5t4
61+9evXhw4f37Nkze/bs2NjYkJCQrF4GVQ0bNpTdECwR3OsTwb0OEdxryzy4
v3fv3meffdayZcuM1yqNjIx8/vnnv/rqK7G+7JKBbNy9e1c8YrOdDtmlVKlS
fMAFtyG4B9wgPT3d/KT3FsqXL5/pR7W//vqruk622bd0UVFRSqnqeaqvXLmi
LMn2Wwf9+vVTO/Xx8YmJifn000+Vf3bo0MF8TSXiz/FPcC/+efv27YkTJ9ap
U6dNmzae9XF327ZtMz4Svvnmm4xrbt++/bnnnrN+Athsz2kAbV2+fHnx4sXv
vfde//79+/btKx6Wo0eP/vbbb48fP84UznVu3ry5atWqsWPHvvLKK+Juf/PN
N8UQiGPGgwcPpqWlya7OS4kX3p9++ik+Pl4MhxgUMTRxcXEfffTRxo0bOZaX
6Nq1a8uWLROvSwMGDBDj8tZbb40aNWrBggVHjx59+PCh7Oq8lLjn9+zZM336
dDFNEoMycOBA8WT55JNPNm/ezK9XNJeUlJSQkPD++++/+uqr4t4W9/nIkSPn
zZsnXq/4ubdLqcH9U089Zcu5JiIjI8Uwca1t6IfOg/s//vgj41Fh/vz5M57B
786dOzNnzixVqpT15+Dq1aulNIKsENzrE8G9DhHca0sN7qOiomy5NJ6Pj89z
zz138OBB2YUD1ojD7WwfzPZat26d7LbgLQjuAfcYPXq0lZf9LVu2ZNxkx44d
6grNmzd3f812Uc8irp65XX15MZlM9+/ft7KteXBvweKHAOrd+Pbbb7uwGdeb
P39+xmatXAP6wIED4jFg70MIAAAAcA81uLdLWFjY8OHD79y5I7t8QO/BvVCn
Th2LZ1CLFi2yWjk1NTU+Pt5KBFOuXDm+0acrBPf6RHCvQwT32lKDe3u1bNmS
C69At8QkR7yfOvbYzsprr70muy14C4J7wD0uXLhg5dS17du3z7jJkiVL1BW6
dOni/prtUqVKFaXUbt26KUtEy2r91j/0sBLcR0REiP2oa06ePFlZPnjwYNf2
42L37t3LeMaebKe74jixdOnSmd5RtWrVck/lAAAAQEaOBfeKokWLrl+/XnYH
8Hb6D+4zfv27Zs2a1je5e/fuqFGjsrqGyFdffeWeymELgnt9IrjXIYJ7bTkc
3At+fn7Dhg27d++e7CaATJw9ezbjRR+cUb9+fdk9wVsQ3ANu07Jly6xe9n19
fX/77TeL9c3P6KL/nPrpp59WSn3uueeUJRcvXlTr37Nnj5VtX3vtNSvviXny
5ImPj1fOQC7+R1logG+4jRgxwqLTTE+VbyElJWXIkCGZfglk//79bigbAAAA
yGj48OFWpvS26NGjB2fOh0T6D+4fPHhg8Qt6cbBsy7W6jh49Wq1atYxPOgJi
XSG41yeCex0iuNeWM8G9onTp0rt27ZLdB5CJLVu25MyZ08lHuKpcuXKyG4K3
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
PXs2PT1ddmkAYBAE94B0W7dutR5wHzhwQHaNmbh9+3ZcXFy2pwuwzvrZL1u1
aqWs1qhRI3Xh2LFj1c1HjRrl8j4BAAAAAEZHcA+5CO71ieBehwjuAQDGRnAP
SJeenm79OkFHjx6VXWOWfv31106dOplMJseCe+tnthd7VlZr0qSJunDatGnq
5r1793Z9iwAAAAAAgyO4h1wE9/pEcK9DBPcAAGMjuAf0YOrUqVbS7Y8++kh2
gdnYv39/o0aNHAju79+/b2W3vXv3zjgV/+KLL9TNO3To4PrmAAAAAAAGR3AP
uQju9YngXocI7gEAxkZwD+hBYmJiSEhIVul2tWrVZBeYvdTU1AIFCtgb3D94
8MDKPt99992MU/Hly5erm5ufQh8AAAAAAMcQ3EMugnt9IrjXIYJ7AICxEdwD
OtGrVy8rAffx48dlF5i9mJgYUarJZCpZsqSNwf3Dhw+t7DA+Pj7jVFwcK6mb
V6lSxfVtAQAAAAAMjuAechHc6xPBvQ4R3AMAjI3gHtCJvXv3Wgm4R4wYIbvA
7MXGxopSCxQoIP5/27ZttWvXtp7am0wm6ztMSEhQ1mzatKm6cN++feoeihYt
6tKOAAAAAADegOAechHc6xPBvQ4R3AMAjI3gHtCPihUrZpVxFy1aND09XXaB
2ejRo4cotXDhwso/RcGLFy/Onz9/Vk2FhoZa3+Hhw4czBvenTp1S95ArVy4X
9gMAAAAA8A4E95CL4F6fCO51iOAeAGBsBPeAfkyaNCmrjFvYsWOH7AKz0b9/
f1Fnnjx5zBeuX78+q44KFSpkfYc3b95U1mzZsqW68PLly+oeTCaT9ZPtAwAA
AACQLYJ7yEVwr08E9zpEcA8AMDaCe8BCUlLST5Js3LjRz88vq5i7Q4cOsgrL
1IoVK/bt22e+pGPHjqJOX19f84Xz5s3LqqOyZctmeyvKD/abNGmiLtm1a5f5
TrZv365VRwAAAAAA7zR//nzzI801a9bIrgjeZenSpcpjr1y5crJrwf88/fTT
yrjMnDlTdi34l/pJ41NPPSW7FgAAtPf9998T3AOqBw8eREdHZxU0AwAAAAAA
AAAAAICrbdiwQXZwCsiUlpZWqlQp2U9EAAAAAAAAAAAAAF4qMjLy+vXrsoNT
QLK0tLSb8ly9ejV37txZPUlbt24tsTZzFuert7B//351zVOnTikLc+bMqS68
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
Fn9t2rSpRXAv2pFSp3XmJ/z/+eeflYXXrl1TFxYoUEBuhQAAAAAAAAAAAABg
JAEBATaevOjixYuZ7iEsLMzGPZgrXry49cKuX7/erVs3Hx+fTDcPCgoaOHDg
tWvXXHCXOK5q1apqhTNmzDD/06FDh0wmk0UXL774oqxSrTA/K/7x48eVhamp
qepC0ciDBw/kFgkAAAAAAAAAAAAAhhETE9PUTGBgoJrPNm7c2PxP169fz3QP
ERERmgf3x44di4qKUtYsVKjQpEmT9u3bd/bs2V27do0ePTo8PFz5U+HChcVy
19wxjsibN6/a4Jw5c9Tl6enpzZo1y3gn9OnTR2K1Wfnpp5/UCn/55Rd1ec6c
OdXlV65ckVghAAAAAAAAAAAAABhYgQIF1HDWxl9Vb9y4UY10w8PDi2dHCfqt
BPfnz58vWLCgssN69erdunXLYoVLly6VLVtWvcVTp0451bNGbt++bR7Kx8fH
q38S/5/ptxdGjx4tseCsiPs/0+Be/SqFoJP7HAAAAAAAAAAAAACMx4HgXti0
aZOS3UdHR5tHvZmaNm2a9eC+ZcuWSgF58+bN6mT4p06dUk/yX6lSpUePHtlY
quv8/PPP5qH8uHHjlOVLlizx8/PLNLhfuHCh3JozlZqaql6hwHw0n3jiCbXy
3bt3S6wQAAAAAAAAAAAAAAzMseBe2Lx5c3BwsC3ZvfXg/vvvv8+YfWeqd+/e
6prffPON7aW6yJo1a8xD+SeffPLbb7/t0qVLxkvbq3766SfZVWdODGLG4L56
9epq5WKYJJYHAAAAAAAAAAAAAAbmcHAv/PDDD0p2nz9//hMnTmS1mvXgPiYm
Ri3g9OnTVm5u48aN6ppNmjSxq1RXmDFjRlYBfVZu374tu+rM1axZU6nQfBzF
nayrb0oAAAAAAAAAAAAAgCE5E9wLW7duDQkJUbL748ePZ7rOzz//PHv27EWL
FmX807Vr1/z9/ZVbj4iIsH5biYmJ6o/ZAwMDU1JS7K1WW0OHDrUrtS9SpIjc
gq3o2LFjxu9OtG/fXi1+xowZEssDAAAAAAAAAAAAAANzMrgXfvzxRyW7j4qK
yiq7z8rXX3+t3nqtWrWyXT9v3rzq+idPnnSgWg116tTJruC+R48ecgu24r33
3lOKvHDhgrpQFKwWP3HiRInlAQAAAAAAAAAAAICBOR/cC9u2bQsNDVWy+2PH
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
vcqVK+fj42MerOfLl0/sc9myZQ78FD0lJWXRokUdO3a0uIh8YGBgmTJl+vbt
u2DBgosXL9q7WwAAAAAAAAAAAAAADCwlJeX8+fMHDx48derUX3/9pdVuk5KS
fvnllxMnTmR11XsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABvb/AG994/o=
        "], {{0, 0}, {2707, 
        301}}, {0, 255},
        ColorFunction->RGBColor],
       ImageSize->Large,
       PlotRange->{{0, 2707}, {0, 301}}]},
     {
      GraphicsBox[RasterBox[CompressedData["
1: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
LrWc6u/fv3/kyJHNmzdTzZcvX75lyxb6RVJ68PD4+PibN2/SD7Rhw4ZFyeg/
9u7d++DBA6vM/9WrV/v371+zZg3Nmf73zz//jIuLs8qcIUU9efKEWhHSD0e7
BO2Zjx8/TqFl0cylU7GLi8vdu3dTaCmgr7dv39IPLZ1nVq1aRaeFv/76S+9K
AQAAQJpA/Z3Dhw+vX79eunVDPcQrV65QPyh1LSKNGzduHHsPZ8yYMdadv3RP
ddu2bdKdhMWLFwcGBgYHB7948cJai3j06NHRo0eDgoKkuzr79u27evWq5lsu
juHBgwfyNlm2bNmWLVvOnj1r3RtHNlgEAECq89tvvy0SQFdDttT+/ftFSpEn
T55IRZ49exYo7P79+yKVpxM7XUanTp3q4+Pj5+c3efJkunxHRERwk6VLl05u
Njg7O6vcYLfZ1jDoxIkTjRs3Zj8JJCtfvrzVn1QMCwvLmTNnjn+dOXNGsGCr
Vq3kUl999ZXlNXn//v3SpUtptlmyZFGuO8mfP3+PHj1Onjxp+bJY1PoS/OHI
kiVLNC9IrxVkhYeH02GSN29ebtF0RNSrV+/QoUPylLSXqmwHlUoaC+7pcO7e
vbs8yi6nWrVqy5cvt3qSTp2vjRs31qlTx83NTblQDw+Pfv36Xb9+XZr45cuX
Kqt869YtaTI5MjOJWptyTbSVMol6E4Kz3bNnD1uQ2sAipWiPlYtcvnxZ/Owt
mGBSI5yOqbFjx0pn73nz5h05coTLCqnm7K/WsGFDe9gaSrT30rqULVtWuafR
+bxZs2biZ1cVDx8+7NmzZ6ZMmZRLyZcv3+jRo6Ojo8VnRR3q6tWrG7zc0GmK
Tla0yn///bfl1VaiK12TJk1cXV2Vi6Yr3YoVK5RFBC/NNBlb6sCBA4J7hUjW
ef78+QEDBpQuXdrgeYzOM59//jlVwIojjdDhEBwc7O/vX7Vq1Q8++MDgckmu
XLk6duy4a9cuDTcTaNel046np6fy56CdauTIkW/fvpUn3rp1q8o2ZO93iTeK
2Mbe7du3BUvRLmThtk3tXrx4MWHChBIlSij3B7qm06E9bdo0+bej84/KxhRf
KO0tH330kbSUYcOGpcyagT5iYmLo3EunArbHJCtWrNigQYPkkU7VL7jy6ZR6
GYJH9O7du9nKSA+/mWRJs1xGlQwICBCsJwAAaEY9YstP2qCvGzdumPWji9/A
PHjwYK9evT7++GODnR3q/1LnkXYhSzqn1l0ENbPFtwN7K+DYsWOCN1W2bdsm
l7py5YqGZUVFRQmW2rJli8haU3fv8OHDCxcuHDVqlI+PD3UHqPNLfWTuVt6s
WbPYbdu/f3+Rmat79+4ddUX79u1bpkwZg41VCf2+tLhz585pW0pISIifn1/5
8uUNzjx37tze3t7Ud7Y8wQ8PDxfffyTcrR7Bu1iSy5cva67qxYsXqRdg8E4X
SZ8+fc2aNWmXUKYwdrUIAIDUi8vajMmQIQNbivv0sIojR45IRegSL1iErF27
Vr3a1JKhs7ezs7PBE7uXlxd7bcqRIwc7gcorxjbbGkorVqxQaYFIqJ1gxcf8
5s6dy8588ODBIqVevXrFbiVXV9dnz55ZUo3Vq1fLt4JNatq06e3bty1ZHGv2
7NmCyyXu7u6pbgVl+/fvz5o1q/qif/zxRyk2pd6EymQDBw40thSDwf3GjRtN
LtopOZO14tevQkNDq1SpYnKhdMSNGDGCOiB0ulCZbP369dJsS5UqZXKekqpV
q8qV0VbKpL179wrOtlWrVmzBbNmyiZTKkiWLXIT6L4LLIuotaupxjB8/vmjR
ogbL5syZc8iQIS9fvpQmPnHiBPvXypUr28PW4FBHlc7M6sXp0KC+lervaQLt
osqnbjjlypUzeTZ++/btgAEDDD7NolSgQAGT12JzrVy50uSVrmPHjtyVTrDC
NBlbqkOHDiKlSHBwsEqd79+/36JFC8FZ5cmTx/Inkegq4O/v/+GHHwouVEIn
vVOnTokvhQ7G5s2bq8+zUKFC1JWWpv/iiy9UpmRvc7Vr106wztu3b5dLUbtO
sJSvr68lmze127Bhg8iJixoedGKk6ekypzKZ+HL/+usvudVNO2dKjzIBNnPh
wgVjjySxPvjggxkzZtDJTf2CS909abYHDx40OU8JnYjY+uTKlUuklOZmOWvY
sGGClQQAAAtZcaA/0MWSJUvM+sWp92pynpcuXapZs6bgDIsWLbpjxw5zq50S
i6Duofh2YJ93/frrrwVLUUteLvXrr79qWFZYWJhgqWrVqqmv74sXL3x8fPLl
y2ewuIeHx9SpU9+/fy9NzO0n1LU37wf7r9OnT3fv3j1z5syC6yJp3bq1WXcX
6exE9TT4UoNS2bJlqZVr4UqZtTokPDycnYPILVYZNeA1VPLRo0deXl4GMxcl
ar3/9ttv5qYVNlgEAEBql+qCe2p+NGvWzOQc3NzcZs2aJRXJkycP+yeVoWX1
Cu5v3brl7u4uT+bq6vr999+vWbNm8+bNY8eOZe/eU4tI8Jc1qW7dumzdihUr
JlJqxYoV3EoFBARoq0B0dLQyWClevPjAgQPnz59P605bYMqUKc2bN2dTmyxZ
suzfv1/bEjkpHdzrvoKSkydP0h4rso7UWE1MTLRicE8rKL/ImTNnzqZNm3bt
2tXb27tWrVrK8I4a/Hfu3LF8ff/8809lO5Zag+XKlaOlDx48uH///i1atJCD
j06dOl28eFFllRHcWyu4Dw4ONviKKId6qcePH09KflGU/ffy5cvbw9bgUPeB
nZL289GjR0tHd69eveRDm/6D9kyRX1YpPj6e9l52KXT2Xrx4MS1lzpw5//vf
/+R/b9Sokcp8bty4waUzdFpr164dXSs3bNiwcuXKn3/+2dPTk1t3OkDkbriF
6ErHjrxBJwc6JKUr3bhx49grHZ0Y2YI6Bvfbt2/Pnj07OzGtAu1F06dPX716
tTRg/g8//FC4cGF2GjqXWhJrVqxYkashbasvv/xy1KhRy5cvDwoKCgwMpOX6
+Phwpxc6rwq+20Kn+iZNmohsHDpGpOwewb09mDhxonKD0IFcr169vn370rma
TjufffaZdOWl/YF2UWsF93T1Zwtu2rQp5VYTbObgwYPKJqKLiwtdWbp160Z7
1I8//kjnCnmwlwEDBjhScP/48WPBEV0AAMASf/zxh+UnbdCX1YN72jG4Rgh1
u7y9valzum7dOmpqzp07l3qL3OPrw4YNE39GOoUWkaaC+/Xr15t8g8Ap+SUC
aaRK7o7xN998I/hjKVEHU7kgapR6eXlNnjyZOuNSv5i2D7VauecKqD15+vRp
kaUcOXKEK0s7Sffu3WfPnk17yNKlS4cPH869D+7s7Ew9LM3P6tt/cL9nz56c
OXOyM6GGd4sWLaZNm7Zq1SrqYAYEBPTr1497H4d+F/FhMWywCAAABzB16tTJ
/+Levapevbr8Jzp5sqWo4S3/6bvvvmNLFSlSZDJD/mrtX3/91ZNRo0YNtlSZ
MmXYvxobWPjBgwfKVzVdXFw8PT2//fZburbSKhQsWFD+08SJE5PMCe5ttjU4
3O3QcePGsX998uSJ/Mp2jhw5rDIS77Nnz5RD44rkSsqmpnpUZEx0dHS9evXY
+Xz88cdbt241OPHjx487deokT0ltb6tE2+fOnWN/HS6doR+F/ev06dNT3Qom
JX8Rm4v8nJJv5teqVat///6jRo2i/61fv74co9MhwAX3BQoUYLfDgQMHjC2L
C+5pPtLjKLTi1O7iYqynT58OHjyYe6iVjhfqX1iyvtSgVb6m2qBBg0uXLnFT
UnuPmuLSs7tcIJU7d252leUR9anpKP/jpEmTuKX8/PPP8l/Z4b61lTLp7t27
bCVLlizJzpZORPKfuBH4Z86cKf+JTmtsqSZNmsh/+uWXX+Qi9POx52f2HOuU
fAZg/2pswPbt27cr0wHa/g0bNuycjP5DjgboP44fPy4e3Ntya3DYThz14M6e
Pcv+defOnfIjxHTyVP9NjaGZsBWrW7cu+6RxXFwcm8Aay6CvXLnC9bjbtm0r
D27Aoo4k93zFl19+aZXsftCgQexsx44dy/6VrnR0tpH+xF3p6Jor/xbcNaha
tWryn7hLM51v5T/RDsaW4i7NxloF69evZx8xovNV3759DT6aEh8fv3r1ajp1
yBO3atVKc1+eC+6pf2qs8ZCUfGSxJz2qJDuyojHLly93UqCWRseOHYcNGzZ8
+HC6JMkNj0KFCtFac+fJ77//nt2G7FD5v//+u/zv/v7+bCk6tNlS8odICJ1p
2T9xVwe6Wsl/UrkMObbAwEDulQRqyNHv9erVK25K2qWl5qibm9tnn33GFqGW
CbudBRdNV0x293ZS/XYJpBahoaHKp9dat2598+ZNbsq3b99OmDBBuohzp4LC
hQsbPJ3ev3+f/XfusTFvb2/5T9xDIL/++qv8J27vpfaG/Cdzm+UAAABgiUuX
LrFXdu6OLtt3lsyePVtlbjQBW5zaGNQ3NBjJ0T9Sn519/Js6lSIVTrlFvHnz
hl3Tbt26sQviepps93zevHnsnRPuRfJ27drJfxoyZIhcSv2+JVXV4LKo8caW
olqxpah3LP9J5TYUtcqUL0TnyZPnq6++os4gNedq164tP2NPfdK7d++mXHBP
HZ+hQ4fSxjc4cVxc3Jw5c9g7TlmzZjU5nOnevXvZd+hoZX19fQ3e+vjjjz+4
ZIF+Jm39/cePH7M/DbW92dlWrlx5skJUVBQ7B/Yulsni5n63MSgoiH1vgrZJ
jx49lP1NkpCQsGHDBvaxh6ZNm4q8FG+DRQAAOB7uYzS9evUSKfX777+zpb74
4osUWlZ4eHjx4sXZUnR679ev36NHj9jJ6NJ55MgR6SVEFxeX3bt3iwf3FtYw
SevW4FISau1wE0yfPl3+6+bNm0XmqS4gIMBJYfjw4eqlIiMjlV/aTZ8+vcEr
rDq6LrMzKV26tMlBnmfMmCFPTxfuJ0+emLtQdYUKFWKrdOPGDUvmZicrSHsL
93vRoSEn0TJalvSOJDV0uZY2TS+4LC64l7KnKlWqqLyCvXXrVu4BEs3hpqRP
nz7c+lKHQqVdd+XKFeW7XXQ8mlwQnWe4UiJPfmorJaJRo0bsbOlEJFKKTmts
qcliIY6GZe3fv59L7akbtXDhQq4DEh0dvXTpUumMTf0+LrBWCe4tr2GSpq0R
GhrKFilbtqxyGvkBHjpAtD121bt3b3Ypyg/7XrhwQf5r3759lXOg5XJXGR8f
H5Ul0jHLPVVOl1oNNedwD1QoR9hgz4HG3ufl3jig/rLIoqmjzZb6/PPPTRa5
ePEie72j9obJ7x3cu3ePffWee5BAHBvcG/xBOX/99Zf80ItT8tNWJvc0LkSj
8zBtWDZ8T0ruJq9Zs0aKa+nUyqV13GepjaEWF1uKjm6RUoS7NLx48UKwoKOi
0yP30FS6dOnUH9KYOXOmk8KIESM0LJ32BG4+1MBmn7uA1KhVq1bczzp06FCV
6Y8ePcre05bUrl1bZFlfffUVW0pwxIYffviBLfXzzz8LrRgAAACksP79+7PX
aG7ANHXUgmXjYOpzmXwu99y5c3JgTWW5p/F1WYRsz5497KYQ6WlKPv74Y7Yg
9elSrhTVii0lMghGQEAAl9pTN1P5Ss7r168nTZokNRErV67MjcxgxeBe5OOD
9KuxRerXr68y8d27d7mnIObPn68y/Z07d7hwQf3pFEGLFi1i5/ndd9/Zsjgn
JCSEvbFAO8DChQvVizx69IhNasaPH6/7IgAAHJKdB/dt27Zli7i4uKxbt87Y
xPHx8VIQWaRIEe51EnsL7t++fcu+WZY+fXrlNCdPnpQnUA9cBHHBlqR06dLq
pWiDK0s5ibWgVOaTOXPm+/fvixRkAyxvb2+zFmqSFYN7+1lB7q5s3rx5nz9/
bmxiqfNVrFgxtojm4N4pOaMx+bjC1KlTuVKaB+ClLgNXh7Jly5ocsHr79u1c
BRDcW3dZ9LvIb1JL8ufPHxoaamz6sLAwqVnOvXdsh8H9xo0b2SItWrRQTjNq
1Ch5AurUC64Ci3vl0OA79XLfp1y5csq/duzYkZ1D7dq1uYhWifuAC/WntmzZ
oqHysnfv3rFXunTp0imnOXXqlDwBnY4Mzsc2wT1dl7lR6NmBB1VcuXJFfkaF
/kOwvcGR93xqwAieIgYMGMDWVv2izI1lob63U886V65c9Htx94gQ3NuYcnhS
kQieHcxHvJQSd69P4ufnp2FWYCe4B8+kE6PJ94YWL17MlUJwDwAAkAZpDu4f
PnzIvTqxdOlSkYLsWHb58uXjXgGw8SJYDhnc02zZuwFOyTdnDI7XJ7lw4UKO
HDmcFPdwrBXcG7zTYhA1TdkKXL161eBksbGx3G2Wrl27mpw59yko6u/Tipux
SobYT3AfHR3Njdc6YMAAkYI3btyQH+5Nly6dytPdNlgEAICjsufgXvni8OjR
o9WL0IW4SpUqTgr2FtxTi4gtQi1M5TTs94ksfCWZvHr1iss35Y/LXLlyRaWg
l5eXwVLNmjUTXzq1frkBV8Wfl3v79q1c1tXV1cKX4jnWCu7tagW5zwap3/NM
SEj49NNPuePFkuB+7ty5JkvFxcVx378oUaKEtiGnlJ9IFnykhGvbI7i37rK4
seNoxz5x4oR6kdDQUK6f6GSXwT33QmunTp2U07Axx4IFCwRXgeXh4cEuxWDf
sEyZMtJfM2XKxP3pwIED3JY8fvy4yHJ/+uknttSHH35oye568+ZNdm50alJO
8/jxY3kC7qvHMtsE99xnwQsUKPDu3TuRBZFhw4bJBfv06SNYiiXf7hBPqbZu
3cpWWP3OxrRp09iJ6aJj7AsXkvXr1zspILi3sTZt2rAbxM3N7fXr1yZL3b9/
n/3cg5Om4P7atWvKHcAp+VHAmJgYTWsD+ps9ezb3g+7atctkKWoocg81IbgH
AABIgzQH9+3bt2cLVqtWTfzmzzfffCMXVPlojg0WwXK84J7ae7Vq1WKnz5Ej
x71799QXsXfvXicFawX34m9AcB35CRMmGJxs/vz57GQffPABN5avMexnCkmN
GjVE18cI+wnuqaXNzor6esY+TKA0btw4uaDKIxA2WAQAgKOy5+CeeyirQIEC
Ip/cPX78uJOCvQX3586dY4sULVpUOQ01nPb9y9wv1ChxY6FXqFBB/vTwmDFj
jJWKiopiB7Qhy5cvl96gzJAhg/jVds6cOexMqKzKUOpK7Ourvr6+4gVNslZw
bz8ryCUm5OLFi+pFuMHJnSwI7rNkyaIeBsm4LUa0fcKY+5gyefz4sUhBLn5F
cG/FZd29e5f7VrXgUBLDhw/ntpUdBvds38HJyHjyz549k8/eysHhRXADuBmc
ydmzZ+WlcN+GaNy4MVu8Zs2agsulEwg3ON7ixYs11F9y/vx5dlZFihRRTkMH
iMkrnQ2C+3fv3nGPPBnr7xsUHh4uj7GfMWNG8cRfJgf3R48eFSxy6NAhtsJ0
WVeZmHsLu127duozp99F+UwXgnsb455wE78l6OnpyRbUENz7+Piwc/j444/l
L3Ju2LDB3LmBnejatSv7s1JjVaRjRfz8/NiCCO4BAADSIG3BPfVkuWdKzWpM
sj3KYsWK6bUIjuMF99TRc/ovwe4w9711JysF987OzoLNVEK7IluBbt26KaeJ
j4/nvsMrHgTv37+fW0fxPrtBdhLc0xZmPyVPRo4cKV781atXcl5g7AlzGywC
AMCB2W1wHxwczF0ZxZ/nVN5ttrfg/tixY2yRTz75RGRBlvj666/ZJY4ZM0Ye
il8lGuO+FpQjR47Y2Fj5Ocw1a9aILDoxMZG7+WzW2/rk+vXrctlChQppezXb
IKsE93a1gtw4Tu7u7ipfe5dQCzZv3rxsKc3Bffv27QULPnz4kMsHv/32W8Gy
rO7du7MzofoIbj2u7Y3g3orLGjp0KLfKly9fFlnKo0ePuMTfDoN77umCQYMG
CdbQLOyX1smTJ0/Ey4aEhHAHl1nfH6xcuTJbtmzZsuZX//9wz9FpnpUNgvu5
c+dyO63g/RAZG1Ft3LjRrLJJyS+J/C+Z4GP/SYoOe4ECBVQm5pLcGTNmmJz/
9OnTuW2C4N7GsmTJwm4Q8Y/p9OjRgy1obnAfHR3NPccyceJEOu6k/65Xr575
qwJ2gVqn7M/q4eEhWHD16tVsQQT3AAAAaZC24J4b0s3d3f3t27dmLZcd+cfg
SHQ2WATH8YL7Fi1acNswMjJSZCncHUgny4L7mJgYqVOs/ql6DjfeY8uWLZXT
bNmyhaun4C2jpOShfbkXK1q1aiVePSU7Ce6V38O6dOmSWXNgB4hbtWqVLosA
AHBgdhvcd+nShTu9i4eqkyZN4sqm8eCeWlxcDHTlypXExMSCBQtK/9dYw4/7
SnLnzp2TmK3UunVrkaWHhIRwP8evv/5q7ipQa1B+K9OKw7RaJbi3qxXk9sbS
pUuLlOJ+aM3BvVkrXr58ebZsvnz5xMvKuNfHqH8hWPDixYtsQQT31loWrS/3
SK3gU+sS7hMG9h/cDx48WLCGZrEkuOcGRXcSGHaDpRzFQtugAUmpKrjnhr/7
+OOPza3krVu35HN4aGioucXNRZcJ7mOC6g0J2vjsxEFBQSYXcfXqVW5PQHBv
Y/JH/STUMBYsyB3F5gb33BhNdKF/+vSp/C6Ss7OzuY+1gJ3gTnQGR0ExiHsJ
C8E9AABAGqQtuC9RogRbSsMjoFeuXJH7WQYfcrbBIjgOFtyHh4dzHTHxd5ES
EhK4+z+WBPcahIWFcU87G+w0ca/80PqaNUoeN7BApkyZYmNjNdfZToL7Vq1a
sfPJmzevuXO4c+eOfOAY3C1tsAgAAAdmt8F9sWLF2IkLFSoksgiJchybNB7c
r1u3jl2cnFHKDe9JkyYpS8XExOTIkYMtuHXr1iTmXWnBAYG5Dwk5aR0UPSVY
Jbi3qxVctWoVW5O6deuKlJo8eTJbSnNwb9aKd+jQgdtuJj+hpaR8uVuw+X35
8mWDB4UKBPciy6KDiFvf3r17i65SUtKAAQPYsgjuJWYF99w7ldQnFR9lLklx
DiErVqwwfw3+kVqC+/j4+GzZsrETf/XVV9qqahsREREtW7bkfiY6o6oU8fDw
YCc+ceKEyaXExsZmyJCBLYXg3sa4wXzEd0vuO4/mBvc1atRgi7dt21b696pV
q0r/MnDgQPPWBOwD91B0lixZBAcp4j5giuAeAAAgDdIQ3D9+/Njpv3x8fKxb
KxssQsnBgnvl2+hmvZLDPRpqy+D+1q1bFSpU4Co/a9Ys5ZQlS5ZkpzHr7RIy
cuRIbiknT57UXG17CO6pF5A7d252PmaNcmAniwAAcGz2Gdw/e/aMuyZSS0Bw
jcjTp0+54mk8uPfy8mIX5+/vL/37kSNHpH8xGNRu376dLZUlSxY5/ZEH3RUZ
ENjb25v7OcLCwqy4dpawSnBvVyvIjUQkeOAEBgaypTQH92Y9ADl69Ghuu2kY
X3rlypXcTPbt2ydSEMG9xOrBPfeqJpk9e7boKiUlLV26lC2L4F5iVnDPPXBl
bp/0zJkz3C/Yo0cPM6v/f1JLcP/nn39yqzxgwABtVU1pL168mD59OvdxE4n6
S/TcexAiI0AS7juACO5tjMs9c+fObfLbNxJLgnvu4kj2798v/UluYFBNrHUh
A1uaOnUq9+NeuXJFpCCCewAAANAQ3HM3msj8+fOtWysbLELJwYJ75eswgnfV
JIMHD2bL2ia4v3XrFvXZ3d3duZqnT5/+7t273MTh4eHcZE2bNjVrccq3G6hX
rrny9hDcX7t2jVujvn37apiPvosAAHBs9hncUyOBO72b9cxkQkIC94XftBzc
R0dHZ8qUiV3cuXPnpD/Rhvrwww+lf7x9+zZXkBuEvF27dvKf5Ft/It8lr1On
DvdrUpWsuIKWsEpwb1cryAX3gp9e2rVrF1tKc3Bv1hMLv/32G7fdNHxi4PXr
125ubuxMRPbJJAT3/7J6cO/r68utL/VqRVdJ8bwQgnuJeHAfFRXFbX/BhEX2
8OFDbg6aXz9PLcH9tm3buFUeP368tqqmkPj4+B07dnh5eXGvwMtq1Kih/uYs
F9xTJ1pkuZUrV2ZLIbi3MeU3Abds2SJS0JLgnotNixUrJu9adHqRnwtau3at
llUCXYWGhnJ7FF2yRQoiuAcAAAANwf3MmTO5tse6deusWysbLELJwYL7xo0b
c9tQ8Ba6hPtUX4oG9+/evVuxYsUXX3zB3fOX0V6qLCV/80vWrVs3s5Z74MAB
bg6CrWiD7CG4V8Yu5o7SZg+LAABwbPYZ3HNDuzuZf9+Gi6rTcnAfFBTELqtw
4cLs7f3evXtL/849LhgXF8eNaRMYGCj/9c6dO1IzKXPmzCYHYeZGLnJ1dbXu
ClrCKsG9Xa0gd5+/TZs2IqWOHj3KltIc3EdERIhXVXmYjxkzRry4rGfPnuxM
XFxcRD7fjOBeYvXgvlOnTtz6/vnnn6KrlJQUHBzMlkVwLxEP7rnMlFA33KxF
v379mpuDp6en+Wvwj9QS3C9fvpxb5ZkzZ2qrqnUlJCQcOnSoT58+efLkcTKu
ePHiDx8+VJ8VF9wLXuxq167NlkJwb2ORkZEFCxZktwk14UTOBpqD+3fv3nGf
jZg2bRo7gRyqit+fBLvy9ddfs79vhgwZ6LJrshSCewAAANAQ3CsHGN+2bZt1
a2WDRSg5WHBfpUoVbhua9a29hQsXsmVTIriPjo7evHkzzTljxoxOxjVs2NDg
3TZlgmww31dx6tQpbg6avyyfZB/B/fr167k1MvgJXUvYYBEAAI7NPoN75UfD
f/nlF8E1knB3udNycN+xY0d2WdwIwPv375f+nYtmuIaNu7v727dv2Qn+97//
SX8yGZAVKFCAnVWGDBkWWebw4cPW2jhWCe7tagW1BffcDqk5uI+MjBSv6tat
W53+66effhIvLnv16hX3E7i5uY0fP57bYzkI7iVWD+6bN2/Ora9ZhxU3TjuC
e4l4cH/x4kVu+wueBGSxsbHcHIoXL27+GvwjtQT31MDgVpmumxaexi08zENC
QgYOHCgPiaOiZcuWz549MzlDbcE9tWfYUgjubY92Y+51Emq37NixQ32ABc3B
/ZIlS9iC1J55/vw5O4F86aRaCY7bAHbl/v372bNnZ3/lTJkyzZ49W/32LIJ7
AAAA0BDc9+3b1+m/fH19LelkLV++3PaLUHKw4J77PpqLi4t6X4PDfS3RusH9
4cOHO3funCVLFidV1JGk7nNsbKzBmWzYsIGbftiwYWZV48qVK9wcNA9LmGQf
wb0ydmnXrp0lBw6Jioqy8SIAABybfQb31ALkTu8LFy4UXCMJgntJTEwM973j
48ePsxPEx8dL28rZ2ZndSvKb+JKWLVtyc54wYYL0J5ONBO59Mctpi3cNskpw
b1crmKqDe7O+iMG6efMm15ch1LZv1arVmDFjFixYsGbNmsD/mj59Ojsxgntr
LYtL+sj9+/dFVwnB/b+sGNy3bt3arEXTVYObQ8mSJc1fg3+k3uDeQnQ9NXbT
wCQ6m7Vo0cLY0H/cGgkm6UkI7lOzZcuWcVvGKXkE+27duk2bNi0gICBQgY56
dmLx4L5atWpswQ4dOiinqVGjhvRXKzbGwJbOnz/PjalFcubM+c0334wfP37R
okXr1q3j9ijuURAE9wAAAGmQhuCeu6xbrkiRIrZfhJKDBfd58+Zlp8yUKZPg
6khSKLg/dOhQ1apVTf5e1FFq167dpUuXVGZFrVmu1NChQ82qDPfiD2nevLnm
VbPP4N5y7969s/EiAAAcGxdVC94PT+ngfu7cudzJmcoKrpHEKsF9ym0NmwX3
3AejP/roo4SEBG6a7t27S3+VvzAeHx+fP39+tuCqVau4Ujdv3pT+lD179piY
GJU6VKxY0cDl1gJWvIlnleDerlZQ3+Bel6HyJU+ePOEGlzALgntrLatp06bc
+tK5QnSVENz/y4pD5dOWMWvRL1++5Obw2Wefmb8G/0ih4L5Hjx4ipcSD+5Ur
VzpZVY4cObSt6bJly9zd3dVnXqZMmREjRpj7srOOwX3u3LkFK4ng3pjg4GBq
KGreIQWD+z///JMraHAQdfl4yZkzZ3R0tLXXFWzh7t27zZo107xHIbgHAABI
g6wyVL6FqlatavtFKDlYcF+kSBF2ynTp0gmujsTqwX1CQsLAgQPVH2V3cXH5
7LPPZs6c+fjxY5MzlEealf34449mVenkyZPcHLp06aJ1/awc3Hfq1ElDHZQP
M1jI3d3d9osAAHBsXFQteMLfsmULW8rqwf3q1au58/OECRME10iSNWtWtri2
4L5z584ipew5uO/atSu7oB9++EE5za5du6S/yjfiuM9Mu7m5vX79WllQ/rb7
zp07VepQt25ddm6urq6TzeHt7c3tDOYOv6CCC+7N+hi3fa6gvsF9WFiY5qo6
mf98jtKZM2f69u2bK1cuJzM5QHC/bt06kVI9evRgS1k9uFc+PnHhwgXRVUpK
Onr0KFtWc3C/fv16kVI9e/Y0d2vYeXAfFRXFbf+aNWuatWhl9N+sWTPz1+Af
KRTcC3ZsxYN77gk3p+Tn5806jXMj22gbo4BaPsbuTtC/e3p60oK0PV2WpGtw
L/7KhouLC1sQwT0rNjZ27dq1TZs2TZcuncGdRIVgcM89yGTsgI2Ojs6ZM6c0
zcqVK626lmBThw8f7tKlC9djEqEtuKdTnEgpbsBbBPcAAAB2QkNwz91iJV27
dhXvZE2cOJErTo1h2y9CSd/gXvAGS61atdhSKsF95cqVuY1g1j2r3377jS1r
eXDv4+PjZISbm1uTJk0WLVokfockydDzybSTmFUl7mOyToqv0JrFusG9ud9G
lCgfZqANa9Y9EG6gBtpLbb8IAADHxjVyWrVqJVKKe1XW6sH9zp07udO7WeFI
YmIid/tXW3AvOMLw+vXrzd0atgnu4+LiuATz4MGDysnk4fRpo0mNH65B3rhx
Y4PzHzdunDRBt27dVKrBPTxARD7IK1PGu9RIFi+ujgvutX1c3q5WUN/gXrDf
IRk7diy34oGBgeLFVdAZIDQ0lOY2bdq0UaNG+fr69lTw8vJiFy0StNl5cB8Q
ECBSqlOnTmypydYO7vv168et76FDhwTXKElx8tcc3NOBIFKqc+fO5m4NOw/u
kxQDzpjbuzlx4gT3C/bt29fM6v+fFAruBRsq3JfsVG6nKL9Y5+fnZ1YNuW9G
f/nll2YVJ69fv86WLZuTQvHixelUeefOHXNnyNExuHd2dlYO9aOk/EYDgnuD
3r9/f/bsWTrF0flq6NChP/zwg/IC9+mnn7JbcuTIkSZnGxkZyX07Uh6FSYmu
qtI05j4XBHYoPj7+2rVr1LObOnXqiBEjfHx8lHsUF8EL3p3mSgk+lUp9CrYU
gnsAAAA7oSG45975Ir/99pv4Ep8/f84VV/ZMbbAIJX2D+6NHj4qUqlKlCltK
JbivX78+txHMuv8wY8YMtqyFwf2pU6ecDKlevfrcuXNfvnypYZ7Ur+SekG/Y
sKFZc1i2bBlXH5W+kknWDe7NXRdJaGgot0bmfrqUG6dXeRTYYBEAAI6Ni6rp
yi5SaunSpRouE+LB/f3797nTu/Ib6yrooswV1xbc16hRQ6TU8uXL2VINGjQw
WcQ2wT33TGCePHni4+MNTkntBGma+fPnJyYmenh4sAWNtXtDQkKkCXLlyhUX
F2esGkuWLOF+jpMnT4qvBfcErIuLi8HX/7XhgvsVK1ZomIldraC+wf2BAwfE
q6p8NdvycEoc940qkfHQ7Dy4HzVqlEgp7omFmTNnaliWSnC/YMECbn0FnyiQ
rFq1ii2rObgXvNVPnUq2FHU5TRax/+C+VatWbFk6pURFRYkXV/ZJBQdzUEqh
4F5w6H5uyL769esbmzIhIYF7yK1t27bi1aMjmttio0ePFi8umTdvHjcTujwF
BQXRCcTcWRmkY3BPqFFnslRERARX6u3btyKLAyXui+TTp083WWThwoVsEXd3
d5XbYtevX5fvfV25csWqdQd7tHfvXnb3EPymJxfcC34OqUOHDmwpkVAAAAAA
bEBDcP/8+XMuMPX39xdf4tWrV7kOgnK4JxssQknf4H7t2rUipbgvbal05bhf
lhw5ckRwjciwYcPYshYG9126dOEqQ93/06dPWzJPUrZsWXae1Nc2q/jQoUO5
Wp0/f15zZawb3Gsb7o98+OGH7HwEW/iShIQEbiA4g+8+2GARAAAOjIuqM2bM
KPJi1KRJk9hSguGgeHCfpDi9ly5dWnSVkpKojcFdUrUF99myZRO5Z849Xijy
MqBtgvvevXuzS+nevbuxKeUhhevXr8893+jq6qry/rjc+Nm3b5+xaZRP2c2e
PVt8LbiR5K27rbjg3tfXV8NM7GoF9Q3uzXrotGLFimzZvHnzipe13MWLF9ml
GxtWgmXnwb3gCCG1a9dmSy1ZskTDslSC+wsXLnDra9YYYtTLZstqDu6//fZb
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
Dx8+nI5l+nGXL1+unJh+lPHjx3PLovO/yIJSS3BPuxkdyOxMOnTooPL6PB0X
7Kh0hDaRZSuRUsE9dWylexd0aTbYkVdemhs2bCiyIGr2sPstnd/Uh9CZNGkS
u5T8+fObfDzAGPq9ihQpIs+qefPm6tfTGzduyAOVO9l3cE/1lMbZpjoYPHXQ
fpI3b162CP0K+Gy6TA7uRX7o9evXs88QVq1a1eTNqAoVKrAb36xvPcjPyvbp
00e8FOiLvYpRX0x9DwkJCcmVK5c8fdasWcXPclwKP2zYMOm6vGTJEuVC6V+4
M6qT8OhVAAAAYAOag/uk5A4am/Bmy5ZN5dYutQq4N+jLlStnsndgg0XI9A3u
58+f75R8I2vatGnKe1/37t2rVq0a16Y6efKkyaUcPXqUG72W2nIq99YePnyo
HMLUyeLg/tatW9J9Lcm4cePUp9+2bRt7g1EluCfPnj1jb+o6mRq5/ezZs9yN
BQvfOZJYN7jv1KmTNHhdgQIFlLcvaFcfMGCAPDEX3Ccl7zDsYx50EKl/LZF7
Dyt37twmAxcbLAIAwDHQdSqQ0aVLF/Z82KtXrwsXLkhvAadPn75x48bjx48P
CAiYM2cOneq5B/Cckt/IO3/+vOZlmawtNWO4BwXpojlv3rzY2FhuykePHsm5
c7Nmzdgb2k5ag3uqIbUBpCSXWkrDhw/ftWsXbR9q86xdu7Z9+/bKMflpAmMz
P3HihLwpuMzIw8Mj0DjxyGbTpk2LkrVs2ZKdf9myZRcxqCFksDj7+p7E2AN7
tP3ZGcqv6o8dO1b6F4MDulKTr3Pnzuz8qW1s8OOVO3fulB8IlFCLUfmjc2hv
acug3U85zbFjx9hty+0nN27ckDsj7u7uzZs3p1+KVoe6JLT3cg02ZWCU0ito
zO+//y6vUe/evdnZqgT3586dM7ZDqgT3GzduZH967vFaaiRL8VDBggVpttxA
0+Hh4X5+ftxRQ9tBc9QlY4N7p+SRgUNCQpSTUX2WL19OrT52YvHwWvfg/vLl
y+zeW7FiRXa2tBtQx036bzptUuN/+vTpdPamRi/9t/Jl9uLFi6s8z2NyWSZr
SxuWe8qLlmjwDW7qIX7yySfSNNxQ7ZqDe6ph3759pf/+7LPPfv3118OHD9PZ
+8iRI3Q5Y4dfk9Be8fLlS2MzDwoKkjcF9/n4r7/+WuXsLVj5pOT+KVuQeySG
fkdji7h06ZKxedKFr1ixYux8atWqpfyocXx8/Pr167njgs54It+mUaLro7ET
i3RaMEblPMAF9z179ty+fbtZl2Y65QrW/9ChQ9myZZMLUnOIrmvKY5bOZty+
miVLFgu/xUxrwdaczt4Gmy50paCDK2fOnOzSlXkuXc7YzcuulJPx4J6ua2wp
7ukyleCevQwtWLCALUXXWdqA8jmELot0IaDDkPbqMWPG1K1blztRkNGjR1uw
IR0NG9zTNXfo0KEGH4KiI4gaMOzGzJs3r8nPX9JOy218ahuI103+ylLWrFkx
pHlqwT1+Rlexu3fvKieLioqi4zRz5szs7kfnXvEFccE97S1yG5uuwtTnkq/L
c+fOVT68R2e558+fW221AQAAwEx37txhuwZNmjRhr9Te3t4Gu3XGPv9NHRa2
k0vdk4ULFyq7nNQvbtq0KbugAgUKGLuHaftFSMSDe+4OJNfpNhbcmyzVrVs3
ueZ9+/adOXMm9a2mTJnSunVr7oNxTuZ8kZMbYN8p+ZNYyntriYmJ1K6TEnDq
wHJ3QS0M7sm4cePkuVHvhro/Bt/9pz4RdSe5OyfqwX1S8o1Q7uZY27ZtlcOl
Ugf2119/5TbmhAkTtK3Ry5cv2R+0Z8+e3P5j8FCiprJI8e+++y40NJS6Y9L/
LVWqlK+vL7W058+fP2TIkMqVK7MTK4P7pOT9jd0mtElHjBihvFv44sULWjTb
38yYMaPgII02WAQAgAOgM7+TcVKYTq0d5X1vg4YPH27hskw6e/Zs9uzZubLU
bqG2wejRo6dNmzZw4MC6devKASJdpJ4/f84FspMnT5ajxhUrVhhblsExAbgb
XCo6dOigsiLUGBCcD0c8ceDCNWPWr19vsDi1hdjXPOn6bmxBNKX6In7++WeD
BamBpxwVoVKlSj/99NPUqVPHjx/fp08fLmlySm6HiGSd3P1ng/erW7RooVLt
GzduxMTENGvWzPRGNBTcp/QKGqPMZGUqwb3yW1QyleC+fPnyKtuEdgxqU8kP
clDFGjdu3KVLl44dO9aqVYt70d4pOXQzeLvYXFxw75TcvK9evbqPjw8d+9On
Tx85ciR1Ybj+DrUVBV+yluge3Cu7Uazff/+dltWpUyeVaWRubm6HDh2yZFki
FabNq4zkypYt269fv4kTJ9JZ4ocffihTpoz8J6r86dOn2YmpH8o+KKLy3S5l
cE+9AG7MFhWrVq1SWRHuoR1BtO4iW0nCZZ3iBg0apDLbx48fs6mf5LPPPpMO
DernUpefe+acrv50vGhL7Qn107WtyI4dO4zNUxnc0z9SR09wzoLfwpBduHBB
/na8hBohdH2Xmhx0aHz55ZfcB9doR6VdV9sWYy1btox9Gor+u3bt2v3796cf
a8aMGWPHjqVqSB/F4Ci/CkFXHJVtYiy4v3PnjkopleCefSeXQ+0xac7cnmYM
XTGtNSyJY1AewnSR/frrr+k4pasb7Ru+vr6ff/45t08WKlRIJYJfvHixdFKl
nZktRb8je8o1OBzNkydP5Anmzp0rX9mpeSP94969e1Nye4CllP0aOu3TLkRX
kylTptBZbtiwYc2bN+c6X7TXqV8olZTB/fv376UXgkSIP1cJAAAAKWHJkiWC
V22Wyjc0qTfBPhPolDxkGXVIx40bJ93arVmzJncvuly5cmZF6jZYRJI5wT01
2lW2lbHg3mSp6OhowTZVjhw5xNcuMTGRmvTKmXh6ekq3NKlD2r17d/bDrBMm
TOC+Hf+///2P7VAYfKvLZDW44R2oIdq0aVPqiUv94hEjRlBjlRvjUSKysiEh
IaVKlWJLUb+bukUDBgygdRw1alTHjh25u6wffPABdaDMXREZd5tLUL169USK
Sy/s0z7JDdtokMHgnly9erVgwYLslNmyZWvfvr10D2To0KGNGzdmR0JwSj6y
jh07Jr4RbLAIAIDUTjBMDwoK4t7P4jg7O9MJX318RasE9+T8+fNsuKOiatWq
0pNyXHDPypUrl7EFGQzuaR3HjBlj8kmGFi1avH//XmUt7D+4T/pv+1DlYULN
wb1kx44dJUuWFKlqoUKF1IfQYVkluE9KfrSSe23NIJVvLaXQChpjV8E9TXPk
yBGRgKZRo0bWGu/ozZs3AQEBn332mcmFyipVqiQyXBjL/oP7pORhHwYPHqy+
91IHR2VsEPFliaDOvvzorzrqIVLlz5w5ozJNp06djC3I4GD+r1+/5v5dibaV
yec3Um9wn5T8Qv3MmTNVclVWlSpVLOwZ2Sy4J2PHjjV5aaaLmvql2aBnz551
6dJF+cE+pXTp0nXv3v3FixfaN9l/HT9+vFy5coIbzd3dvWPHjgcOHFA+aGFv
wT25ffs29x1JpZo1a6qMfZE23bx509/fn/uShQraJ729vV+9eqUyT5G7OoTO
S8qyR48eVS/l5eWVYhsDrIDOV3RSFewySOjAvHr1qrkLUgb39I8RERHcO25K
dPXEIPkAAAC6s3pwn5TcIxB8UyZjxozUBtbw/SwbLEL34D4p+WuDJrveBQsW
vHz5slmrlpiYOHr0aO41doOos0xdTirCBfcczW+pr1mzhvvcm4rcuXP7+Pio
jEbIoR996NCh8jtH6ho1aiT4pTljbBDcJyXfSeC+qqBkLLhPSn6vv3v37sr3
rZTop+/SpYvy87Im2WARAACpGl3iexrHjrb69OlTuvBxw7E6JX8wvXXr1ioj
5GtYlkl///33uHHjuK+gsgoUKDBjxgx5sHErBveSY8eOKV96khQpUmTZsmUq
3w6WLFq0SF53rhmWI0cOlQ115coVwa1E9fcToNKYOXr0qDyZyqvQ9HOoL0Ll
xVgJba6goKA2bdoYvNtPzctu3bpt3rzZrNHjRYL7efPmqWxq2uflKWkPb9++
vcHAjupcv3599fg1JVbQmJ9++snYGi1cuNBYqZUrVxorpfLcxcyZM1V+d3mb
vHjxYvDgwcaeKPD09KSlW77iSrTT0irTCYqOSoPhdalSpbp27ar+srkxugf3
tMOo7L0XL16Upzxz5kzLli2VvS06T/r6+oq0fsWXZdKjR486dOigkhNVrVpV
fpDAusE9SUhICAgIMPjxNdpD6tSpIzK8+Y8//iivO5c8VqxY0dhWEn84LSn5
k3xsWS4y9vb2NraUjRs3isz/3bt3dNC1a9fO4FFZsmRJ2jG0HRcc9krHPSil
+UpnLLhPSu6cGnvXQPDSrOLWrVvUsS1Xrpzy8YAMGTLQVWDq1KkmhyLXgOq8
fft2+rEMZrXu7u5VqlTp37//zp07Ve4y7dmzR2Vrsxc71vPnz1VKGfwEiYT2
H2OlBg4cKE8WFxc3f/58+dMYMtrhq1WrtmrVKs1DPTg82itOnjw5ZsyYL774
wuBRTPtkjRo1hg8ffv/+fZNzQ3APScndNDq7NmvWjHv5RULnPTr79e7dW+X7
sOoMBvdJydflxYsXFy5c2OD+8/nnn9OJ3XprCQAAABodO3aMbdVzTxdXr17d
YONf5UUh2YULF6iLXbx4cWVLIHPmzM2bN583b57Bb1+KS9FFiAf34ncgtZXa
sWNHnTp1lN1V6uD//PPPKm8bqaO+eePGjY09x+7s7NyoUSM5FEih4D4p+SYG
zZyWZbD7kz17dtryI0aMoKajtl4/7QDUOaXGsDLBp3WsXLkyzVzDiAFKd+/e
ZX9B7g5GiRIlDP7QM2bMMFics3TpUnlBUVFR06ZN4z54J0mXLh0dwiZH0Lpz
587IkSMrVKig3Knc3Nzq1q07efLk27dvW7I1bLAIAIA0Ii4u7tKlS1u2bKHW
FzUJzp07Z5WoURu6Fu/bt4/O8N9//33Tpk1btGjRuXNnagYEBwdTPdkpx40b
ZyxbHDt2rLH5qwT3ktDQULomDh8+fODAgTSfhQsXiqfqLGoAswv65JNPNMzE
MSQmJoaHh9NmPHjw4JEjR65du6a58SwS3JuL9nZqp0n7/9atW2kRDx8+NGsO
VlzBVIe23uHDh+fMmUPHHR0yU6ZMoVaizRpgkZGRly9fPnr0KJ00qCUfEhJi
4Yucugf35qJuDq14YGAg7b20EUx+7StFvXnzZvXq1YMGDfL29m7YsKGXl1ef
Pn3mzp3LDcVMx5fKkyEqNwGMBfeShIQEOnh//fVXaVecNGnS2rVrnzx5omFF
uEGGBw8erGEmJnGxmraqGkTXysePH9OhceDAATo6bty48fr1a2vNnEO7H7sW
1H/UNh+V4F5irUuzMXQo0YmLdiE6juiK8ODBA5sdxXS9OH/+/KFDh2jRp0+f
vnXrliWPItgP2oY7d+6kI5oOVdoP8Za9uegopgY5tStoxzhz5gyd3s3aJ+lg
UX/8UnLq1Cll2bt376qXMuu5XLATdCGg7h41U2mPonMdXZojIiIsnKex4F5C
1+WTJ0/Onj1bui5PnDiRrsu0Y1u4UAAAAEgh3OjlU6ZMsXyekZGRf/31F3UH
qHNKTZGwsDCr33BOiUWIB/e28erVK+oXUN+KmlvUc7TWyJZPnz6lnvVPP/3U
vn37hg0btm3blv57yZIl3HPC1F1V6RqYfKtL0L1796j7sy8Z/Ye5N2bVxcTE
PHr06MKFC1JLODQ09O3bt1acP2fRokXs/iO/Mm9F1Kjeu3evdDOQfoLLly+b
ewcjKirqzp070j0Q2uC0U2kYyVD3RQAAgMMwGdxbC4L7lJASwT2ALNUF92mK
enBvRak9uLclmwX3AABgb9SDewAAAEhdUiK4T6XsLbiH1MUGwT0AAICDQXCf
qiG4hxSF4N6eIbi3QwjuAQDSLAT3AAAAjgTBvQzBPVgCwT0ApGUvX77csmXL
o0eP9K4IpDII7lM1BPeQohDc2zME93YIwT0AQJqF4B4AAMCRDBgwgL2yT548
We8a6QbBPVhi6dKl7P7j7e2td40AAGwkMjKyWLFidOrLkCFDWn4CEDRAcJ+q
IbiHFIXg3p4huLdDCO4BANIsBPcAAACOZOzYseyVffTo0XrXSDcI7sESmzdv
ZvcfLy8vvWsEAGAjkydPZk+As2bN0rtG8P/9/fffYWFhetfCKAT3qRqCe0hR
aTy4f/Xq1evXr/WuhVEI7u0QgnsAgDQLwT0AAIAjmT9/Pntl79+/v9410o0l
wX14ePi7d+9Srm5g/44cOcLuP/Xq1dO7RgAANlK9enX2BOjm5hYSEqJ3pSAp
ISHBz8+Pfg76UUqUKHHq1Cm9a2QAgvtUDcE9pKg0G9w/ffq0cePGUuW/+uqr
58+f610jAxDc2yEE9wAAaRaCewAAAEdy5swZ9srerFkzY1MmJCR88803bdu2
nTZtmi1raDPagvtr165VrlyZpnd1de3evXuquy8E1hIZGZkuXTp5/ylcuLDK
xL6+vnQopeXnZADAYcTGxnK3u0nDhg31rhckzZkzh/1R8ufPHxERoXeleAju
UzUE95Ci0mxw36RJE7b+bdq00btGBiC4t0MI7gEA0iwE9wAAAI4kLi4ue/bs
8pU9Z86c8fHxBqe8e/euNE3r1q1tXEnb0BDcx8TElCxZki01YsQIG1QV7BP3
zumDBw8MTkaHWNasWWkC2nlsXEMAAKu7ePGikyFXrlzRu2ppHbVkuB9l+/bt
eleKZ7Pg/tatWz0ZY8aMSaEFpSkI7iFFpc3gPjIy0sXFha2/m5ubHa6CzYJ7
mjN79k6hJOKHH35gl/LmzZuUWEpK4650mj+DiOAeACDVQXAPAADgYIYMGcJe
3Dds2GBwskmTJkkTILiXnT17lrsvVLp0aRtUFezTypUr2Z1h1KhRBifbtm2b
NAGCewBwAOvWrXMyBIOK6K5+/frcj7Jv3z69K8WzWXAPKQHBPaSotBncR0dH
s6N4EXd397i4OL3rxbNZcA+2h+AeACDVQXAPAADgYJ48eZI3b1754p47d+7T
p09z0+zbt8/d3V2aAMG9TPmaYYUKFWxQVbBPsbGxlSpVkncGNze3jRs3ctOE
hIQUKFBAmgDBPQA4AC54leXPn9/YGD5gG2vXrmV/kVKlSkVHR+tdqaTHjx8v
YrRr146tJIL71AXBPVjdhg0b5PPDwoULuSuLsQheWym75e3tzda/d+/eetfo
H6dOnWLP3mXLlmUrieA+VVO/NCO4BwCwQ2fOnGFP3eXLl2dP3QjuAQAAHMCh
Q4fYz7q5uLg0bNhw5MiR06dPHzNmTP369Z2dneW/Okxw//btW7aR4+PjwzZy
RIL7+Pj4atWqsaVmzZplg5qD3bp9+zb7GAypWrWqn58fHUoTJkygYyd9+vTy
nxDcA4AD8Pf3dzLi8OHDetcurZs9e3aePHlcXV2pVRMaGqp3df5Be4WxHcYJ
wX1qQ80edljmFy9e6F0jSPVKlSqlcoowFsFrK2W3IiMju3bt6u7unjFjRjor
RkVF6V2jf1CPRmUjI7hP1YKDg1V+XAT3AAB2aPjw4SqnbgT3AAAAjuHcuXNF
ixZVuejLvLy89K6sddy/f19lNUWCexIWFta0adP06dNnz5593LhxCQkJKV1t
sHMPHjzw9PQUOZTwYQUAcADff/+9sbPc8OHD9a4d/MOuQisE9wCgAsG9LC4u
zq4GrkFw78AQ3AMApDoI7gEAANKI2NjYFStWNGjQIHPmzNwVP126dJ988gl1
2f7444/379/rXVPrsEpwL4mJiUlMTEy5qkLqQjvDjh07WrZsmStXLm6/cnZ2
LlasmLe398qVKyMiIvSuKQCApehcZ+xKWqtWLb1rB3bnwYMHk43bvXu33hUE
AD0FBASonCKMBdnaSoFZDh06pLKRb968qXcFQTv1S/OuXbv0riAAAPCCg4NV
Tt03btzQu4IAAABgZXFxcbdv3z579uy+ffvOnTsXGhoaGxurd6Ws782bNyqN
nDVr1uhdQUj1EhMT79+/f+HChQMHDpw+fTokJMRhnnsBAJA0aNDAWHDv5uZm
JwP8AgAAAAAAAAAAAAAAAAAAOKrZs2erDF9z4MABvSsIAAAAAAAAAAAAAAAA
AADgyOLj4ytVqmQsuB85cqTeFQQAAAAAAAAAAAAAAAAAAHBwW7duNRbc161b
V+/aAQAAAAAAAAAAAAAAAAAAOL4qVaoYDO5z5sypd9UAAAAAAAAAAAAAAAAA
AAAcX1BQkLGX7h8/fqx37QAAAAAAAAAAAAAAAAAAABxcYmJihQoVDAb3u3fv
1rt2AAAAAAAAAAAAAAAAAAAAjm/BggUGg/t58+bpXTUAAAAAAAAAAAAAAAAA
AADHFxER4e7urgzuBw0apHfVAAAAAAAAAAAAAAAAAAAA0oRvvvlGGdy3atVK
73oBAAAAAAAAAAAAAAAAAACkCTt27FAG956ennrXCwAAAAAAAAAAAAAAAAAA
IE2Ii4vLly8fF9wXLVpU73qBGfbs2dMWAAAAoG3bXbt26d0wAQAAAAAAAAAA
AAAtOnXqxAX3WbJk0btSYIZ27doph00AAACANMjLy0vvhgkAAAAAAAAAAAAA
aLFmzRrlXd+YmBi96wWivvnmG9vnAgAAAGCH2rRpo3fDBAAAAAAAAAAAAAC0
CAsLU971ffPmjd71AlEI7gEAAECC4B4AAAAAAAAAAAAg9SpYsCB31/fZs2d6
VwpEIbgHAAAACYJ7AAAAAAAAAAAAgNSrdevW3F3fR48e6V0pEOXl5aVLNAAA
AAD2hhp1ejdMAAAAAAAAAAAAAEAjf39/7q7vy5cv9a4UiCpZsqQu0QAAAADY
m+LFi+vdMAEAAAAAAAAAAAAAjRYvXszd9f3777/1rhSI8vDw0CUaAAAAAHtT
oEABvRsmAAAAAAAAAAAAAKDRrl272Fu+6dOn17tGYAYE9wAAACBBcA8AAAAA
AAAAAACQeh07doy95ZsnTx69awRmQHAPAAAAEgT3AAAAAAAAAAAAAKnXhQsX
2Fu+lSpV0rtGYIaiRYvqlQ4AAACAXSlSpIjeDRMAAAAAAAAAAAAA0Oj06dPs
Ld9mzZrpXSMwQ6tWraQfbsKECfvAcf3yyy/SD12tWjW965KGrF27VtrsHh4e
etfFdmrXri2t9aRJk/SuiyNzd3eXtrPeFXEcxYsXlzbp8uXL9a6LrU2cOFFa
95YtW+rdMAEAAAAAAAAAAAAAjQ4fPswG971799a7RmCGtm3bSj/czp079a4L
pKDg4GDph27atKnedUlDHj58KG320qVL610X22nTpo201rt379a7Lo4sc+bM
0nbWuyKO49NPP5U26c2bN/Wui63t2rVLWncvLy+96wIAAAAAAAAAAAAAGgUF
BbHB/eTJk/WuEZgBwX0ageBeFwju9a6LI0Nwb3UI7hHcAwAAAAAAAAAAAKRq
U6dOZYP7LVu26F0jMAOC+zQCwb0uENzrXRdHhuDe6hDcI7gHAAAAAAAAAAAA
SNW6devGBvfXr1/Xu0ZgBgT3aQSCe10guNe7Lo4Mwb3VIbhHcA8AAAAAAAAA
AABgVxISEh48eBASEnLq1Km9e/cGBgauWrVqy5YtBw8evHjx4rt379iJExMT
P/74Yzm1T58+fWxsrF41Bw0Q3KcRCO51geBe77o4MgT3VofgHsE9AAAAAAAA
AAAAgL4SEhJOnz49Y8aMdu3alS1bNkOGDE7Gubi4FCtWrGXLlr6+vrNmzerX
rx/7108//VTvtQHzILhPIxDc6wLBvd51cWQI7q0OwT2CewAAAAAAAAAAAAC9
HDt2rEePHnnz5lVJ6s3Ss2dPvdcJzIPgPo2Qg/uaNWues1hISIjeK5Q6ILjX
uy6ODMG9LDEx8dKlS5af2UqVKoXgHsE9AAAAAAAAAAAAgC3Fx8evXbu2QoUK
1srrZXPnztV75cA8CO7TiBUrVlj3YN+7d6/e65QKILjXuy6ODMG9zOrnt5Mn
T+q9TraG4B4AAAAAAAAAAADA9o4ePVqpUiXr3uKWlStX7vbt23qvIpgBwX0a
MXv2bOse7GvWrNF7nVIBBPd618WRIbiXTZ8+3brntzT4YBKCewAAsGcRERGn
Tp36/fffA5MdPnz4/v37elcKAAAAAAAAwCKxsbGjR492cXGx7v1tTtasWYOC
gvReVxCF4D6NQHCvCwT3etfFkSG4lyG4txyCewvFxcUtXLhwxowZYWFhetcF
AMBxREZGTpkypXLlys7OzsrrtYeHR69evbZu3fr+/Xu9awoAAAAAAABgnvDw
cE9PT+ve2TaGutX+/v6xsbF6rzSYhuA+jUBwrwsE93rXxZEhuJchuLccgnsL
7dmzR9qAffr00bsuAAAOIigoKE+ePCIX7nz58k2ZMiUyMlLvKgMAAAAAAAAI
uXfvXtGiRa17W9ukKlWq3LhxQ+9VBxMQ3KcRCO51geBe77o4MgT3MgT3lkNw
b6HNmzdLG/C7777Tuy4AAI7gt99+M/fynSNHjgkTJuD1AQAAAIDULi4u7hXj
wYMHt/918+bNc4zg4OB9/9qzZ08gY8WKFYsYkxljxozxY/Tq1avnvzp37tyW
0ahRowb/+uKLL/7HKFmyZNGiRamI3lsLAFKlsLCwYsWKWfOOtrCMGTOuWrVK
7w0AahDcpxEI7nWB4F7vujgyBPcyBPeWQ3BvIQT3AABWdO/evQwZMmi7iFeo
UOHs2bN6rwEAAACArcXExLBhNzWo5LD7xo0bbNh96NAhOezevXs3G3YvW7ZM
TroXLFjAht2jRo2Sk+4hQ4b0ZHTq1IkNuxs2bCiH3bVr12bD7uLFixf9V8GC
BXMky57M1dXVOvd0bCt37tx6//IAkPq8f/++atWq+p6+fHx84uPj9d4SYBiC
+zQCwb0uENzrXRdHhuBehuDecgjuLYTgHgDAikaNGmXJdTxdunR+fn5xcXF6
rwcAAACkDtHR0WzkHRYWJkfeV69eZSPvo0ePypH31q1bVd7vnjVrlhx5jx49
mn2/u3///sYi72bNmsmRd82aNdnIu2zZsnLk/eGHH6b2yNs5md61sAIE9wCg
QY8ePfQ+e/2jY8eOyO7tE4L7NALBvS4Q3OtdF0eG4F6G4N5yCO4thOAeAMCK
GjdubPnVvGHDhhEREXqvCgAAgMOyetjNJt02CLtdXFwsb2/YmMOE3Y4EwT0A
mGv79u16n7r+v2+//TYhIUHvTQI8BPdpBIJ7XSC417sujgzBvQzBveUQ3FsI
wT0AgBVVqFDBKhd0ms+DBw/0XhsAAABbOH/+vL+/v5Rx+/r6ssOYt2/fXs64
W7Zs2YBRvXp1OeOuVKlSUUa+fPly/CtbtmxWuTTbmPO/9K4IODIE9wBglqio
KA8PD71PXf8xaNAgvbcK8BDcpxFz5syx7uG8du1avdcpFUBwr3ddHBmCe9mM
GTOse37bt2+f3utkawjuLYTgHgDAiipXrmyta/pHH310/fp1vVcIAAAgxTVq
1Mgql04k3QBmyZEjh95HPwCkJmPGjNH7vGXAb7/9pveGgf9AcJ9G0O8r/dC5
c+duYLFmzZrh7RURCO71rosjQ3Avu3r1auPGjS0/s2XJkkXapCEhIXqvk60h
uLcQgnsAACtq0aKFFW9BeHh4UJtc73UCAABIWfXr17fi1RMABLm6uup99ANA
qvHq1Sv5/rNdyZAhw/nz5/XePPD/IbhPI4KDg6UfumnTpnrXJQ1BcK93XRwZ
gnur+/TTT6VNevPmTb3rYmsI7i2E4B4AwIomTpxo3bsQ1atXj4mJ0Xu1AAAA
UhCCewBduLi46H30A4DtREZGnrNA79699T5pGeXh4XHkyBFL1g6sqEGDBtLv
Mnv2bL3rAikoICBA+qFr1qypd13SEHmgg8KFC+tdF9upV6+etNZz5szRuy6O
LGPGjNJ21rsijqNUqVLSJg0KCtK7LrZGbQBp3evXr693XVKlqVOnShvwq6++
0rsuAACp3qZNm6x+F6J79+56rxb8P/buOy6Kq20DsCwdBEFUbNhBwRK7KFaC
LWKBaMCuUTGa2LAQY8EWxRrUGMVYYi8p9hKjCRFbItFo7IkaNcZeUEEBge+8
mS/z7rsLs7OzM/vM7t7XH/mFcctzzu6eOWfvnRkAAFBQw4YNZd97AoBBdnZ2
1J9+M3n48CF1ZApALDMzs3Tp0tSjDgAAAAAAAAAAAAAAAADYKA8Pj7///ps6
OAWglJ2dXaVKFerPIgAAAAAAAAAAAAAAAADYrm+//ZY6OAUglpWVde3atauS
dOjQQfKnz97evnTp0n5+fl5eXnZ2djJ+rnWwpzh37py0BoKM3nrrLe4VWbVq
FXUtoKBNmzZxL3TLli2pa7EhR48e5bq9cuXK1LWYT7t27bhWr169mroWa8af
Kp+6EOsRFBTEdemhQ4eoazE39mnl2t6+fXvqWizSZ599xnVgREQEdS02Z9Cg
Qfz6ok6dOtTlAMjm999/79q1q1FL7MaNG2/YsIG6cNlERkYa+yWDsIoVK1K3
yfL88ccf3bt3N6qfGzVqtGbNGurCQQZDhw7lX9YaNWpQl2PB9u/fb9RZVd3d
3WNiYn7++WfqwsHCFClSxKjhGkCdChcu7PmvYsWK+WkJCgqq8S+29AvR0rp1
67f+FR4eHq3l3XffHfyvIUOGjNMSHx//sZbFWpYvX75Wy/bt23f8a9++fcnJ
yQcOHOAK9vb2pv70K+jYsWPar85PP/1EnZoCWKrs7GwvLy9pA2P9+vUzMjK0
H+3x48dnzpzZvHnzxIkT33777YCAAI1GY+r4+69p06ZR9RLwunXrxr0ce/fu
pa4FFPTjjz9yLzSbwFDXYkNu3brFdXu1atWoazEftrPgWr1//37qWqwZW8tw
/UxdiPVg6z6uS69cuUJdi7mxhSfX9q5du1LXYpG+/vprrgP79OlDXYvNGTNm
DL+4aNy4MXU5ALKZMWOGtFV2VFTUvXv3qMuXwZMnTypXriytEwry6NEj6mZZ
mLlz50rr6sjIyDt37lCXDyb56KOP+Be0Xr161OVYqmfPnkk7paq3t/eqVaty
c3OpWwAWo2jRotJGbNBh9w/qKqRwdnb28vLy/kepUqUqaQkKCqr3r5CQkDAt
4eHh3f7Vu3fvmJgYT09P7gEHDRoUpyU+Pj7hX4mJiUla1qxZs/VfO3fu/E5L
SkoKf5F0naM4b9++/fhfr169ov4MGefly5dcLxUrVoy6FgX99ddf2u8xBPcA
kiUnJxscxkuUKDF27Njz5887ODhobxcTLbE55+HDh/kDKk1RuHBhXBeDHIJ7
G4HgngSCe+parBmCe9khuC+E4F4qBPeEENyDVcrIyJD8a/xC/8Q9SUlJ1I2Q
wZkzZ0zpB33nz5+nbpMlyczMLF68uOTeZq8dex8idjSb169f371799y5c2zt
z2Ymn3322bRp04YPH96zZ89u3bq1bds2LCysefPmXGpTpUoVPs2pW7eudo7D
bty9e/dhw4axG/OvZlBQ0J07d7Kzs6lbaXmWLl1qyqjFXgUbXJuANAjuJXB3
d/f6R5kyZfhRsXLlyvW06MTcbMnMx9y9evWK0TJ27Fg+4540aVKCliVLlvAZ
98qVK7dq2bt3L59xf//996laLl68yGfc165de6zl5cuXyr2XWCdw/WMdvwVV
CIJ7ADDK+PHjBfZHfn5+n376KX9YPRtYdPZWIp9l5MiRsuwfhwwZolhPgCgI
7m0EgnsSCO6pa7FmCO5lh+C+EIJ7qRDcE0JwD1Zp165dpq+1+/btm5mZSd0U
U504ccLDw8P03uAcP36cukGWhD8HrCm6d+9uccfQqd+LFy/OnDnzzTffzJkz
Z/DgwWFhYRUrVrS3tzfqpZFwSKlGoylXrlxoaOigQYMSEhK+/PLL06dPP3v2
jLo/VK1NmzZGdbI+T09PrKxBDB8fHxPfbAY5ODhwMTd3TLefnx8fdlepUkU7
7G7WrBmfdLdu3bqbFrZi0g67tQ/onjx5snbYvXTpUj7sXr16tXbYzT4UfNid
nJysHXZfunSJD7v//PNP7bCbnxcNGDCAa9HmzZtpXzV1QnAvBoJ7ADAKm0IX
tHvt1atXWlqa9o39/f11bvPgwQMxzxIVFcXdns3bo6OjXVxcpO3x2R1x0D0t
BPc2AsE9CQT31LVYMwT3skNwXwjBvVQI7gkhuAertGTJEmnrax0hISEiF/hq
dvjwYXd3d1k6JCUlhbo1lmTFihWydDsbnO/fv0/dGst27969PXv2TJkyJTw8
vEyZMvqdTHtW55IlS7Zv337SpEk7duy4ffs2dW+pS7Vq1UzvYXt7e7ZfoG4K
qF1wcDD3hvnwww/1z17OHDhwgA+72b5VO+xmS2A+7L5586Z22G2Vp9pAcC8M
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
Ok2cTnDP5vkbN25ko0q/fv24UWXw4MHcqIKL/JpCJ7g/f/4820ONGjWqV69e
rJOjo6PZ22zx4sWW8sWgGugE93/++efq1avHjRvXp08f7q37/vvvs2HzyJEj
1ncGTp3gns0Av//++7lz57J9xDvvvMPtIz788MM1a9bcuXOHulg1QnBPyDzB
fXp6erFixSQsiwRUr16dzccUKtjWsIWMdt8eP36cuiLVkRzcX716le/YGTNm
KFSe0hDcq4QlBvf37993c3OTd/xv1qwZdbNEMU9w/+rVq5IlS8rbwwEBAVa8
0rT04J45cOAA/2LNnDmTuhzrgeBePAT3whDci4HgHgAk4C9Fp8PYtfbp06eN
OmG+No1G07Jly+nTp3/77be//fYbWyOvX7++S5cu9vb2Bd3F09NToQ4RIycn
R+dnA/zFtvjvN1auXMlXax1BGx/cL1q0qEOHDuxVK+jVKVy4cERExIYNG/Ad
oyXig/s2bdrEx8f7+PgU9ELb2dnVqVNn0qRJ1vHTFFp8cF+1atXExEQ/Pz+B
MTMgICA2NvbixYvUVZuKD+7ZqPLWW28ZHFU2bdqEUUUCPrhnw7LwxZfLli0b
ExODFMMgPrhftWpVSEiIQJeyIbRnz5579+5V1a8NTcEH9507d54wYYK3t3dB
bWf7iPr160+ZMkVV1zYih+CekHmCe2bWrFkCw4I07J2jXME2hY3GNWrU4Dv2
9u3b1BWpjuTgnq2R3d3dufuyOZ5C5SkNwb1KWGJwz4waNUr28T8lJYW6WYaZ
J7hnFixYIHsPb9y4UbmCaVl6cH/v3r21a9d6enpyrdBoNLt376YuykoguBcP
wb0wBPdiILgHAAnee++9fOeugYGBxj7UlClT5Jw9C6pYsaISvSFSnz59SpUq
1b9//y+//PLFixdsS9OmTbnCBg4cyN2GTS/5as+dO0dYrVz44F7gBxU62O57
2bJlOADfsvDBvfjjBZycnAYNGmShi0GV4IN7FxcXkd3O1q1du3Y9deoUde3S
8cG9QGSvo3LlyklJSRhVjMIH9+KFhoYePHiQunD14oN78WrXrr1161aDVwhS
Pz64F7+PYMPakCFDjDqVkxVDcE/IbMH9y5cvAwICjB0lhOGM7jJavXo137Fs
NUddjupIDu6Z+vXrc/f19/dXojYzQHCvEhYa3D958kT2Q8JjYmKom2WY2YL7
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
7gMTJkzYY3f/wgsvDBw4cPTo0bsfin84fY9vro/fmn7fffdtbNQWN3369MQ1
fR25ubm1tbVRp67fkCFDgpAbNmwIBwsKCsLwrXOTfwAAAAAAAIA00MziPiZ4
hX1MQUFBVVVVo85t165d+Onxm7TXK/5V7DEVFRVNSNuCxowZ06jifsiQIdEG
TqCoqCgI+fXXX4eDI0eODMMXFxdHGA8AAAAAAAAgjTW/uI+ZOnVq2E1XVlYm
f2JeXl746aWlpYknb9u2Lb4H37lzZ9PStpTTTjutUcV9a+6+H3300SDkL7/8
Eg5effXVYfjp06dHGA8AAAAAAAAgjbVIcR8zefLkYJEzzzwz+efujzrqqPDT
ly9fnnjye++9F07Oy8trctSW0r1790YV9x999FHUkRu0adOmjIyMLl26xA/e
fPPNYfibbropqmwAAAAAAAAA6a2livuYKVOmBOsMHTp0165dyZwSPqofM2HC
hMSTi4uLw8nDhw9vTtTmq6mpadu2bfKtfZcuXVrtC+4D48ePv+uuu+JHYn8N
81977bVRBQMAAAAAAABIby1Y3P/1d/kbLDV48OBkVisrK2vfvn1wyv77779t
27aGZu7atevQQw8No7788svNjNpMmzZtSr61jykqKoo2cBPMmTMnzH/FFVdE
HQcAAAAAAAAgPbVscf/nn3+ef/75wWojRoyoqanZ4ylLlizJysoKThk0aNBv
v/22+5zq6urYamHOwsLCZuZsvjfffLNRxX1paWnUkRtt0aJFYf7Y1z/qOAAA
AAAAAADpqWWL+5jKysr8/PxGPWa+bNmyAw44IDilX79+S5curaioCA5VVVWt
WLHi+OOPD0MOGzYsPBqhJ598MvnW/qSTToo6b1M899xz4SVceOGFUccBAAAA
AAAASE8tXtzHfPPNN+EG+AsWLEjmlJ9//rm4uLh///7Bi+NzcnIOOuigrl27
7rXXXmG8Hj16xFZL5in+/4C77747+eJ+8eLFUedtilWrVoWXcP7550cdBwAA
AAAAACA9paK4j3nggQeCNdu3b//FF18kc8qPP/547733hk/rxzv22GOXLl1a
W1vbUvGa76qrrkqyte/du3d1dXXUeZti3bp14VWcc845UccBAAAAAAAASE8p
Ku5ramqOOOKIYNn+/fvv8TH5Bx54IHhIPyMjY8SIESUlJZs3by4vL1+7du1V
V12VnZ0dGx88eHDreVP8kCFDkizuV65cGXXYJvr000/DqygoKIg6DgAAAAAA
AEB6SlFxH/PQQw+FK7/44osJZt56663hzPnz5+8+YdmyZVlZWbGje++99/PP
P9+CIZusT58+ybT2Z599dtRJm27Hjh3hhZx55plRxwEAAAAAAABIT6kr7rds
2ZKZmRmsnJ+f39C0t99+OyMjI5h23nnnNTTtmmuuCea0a9fus88+a8GcTbPf
fvvtsbXv1KnTd999F3XSZsnNzQ2uZdCgQVFnAQAAAAAAAEhPqSvuY3r16hUu
vmHDhnrnjBgxIpxTUlLS0FKlpaXhtEsuuaRlczZWRUXFHlv7zMzMFStWRJuz
+cKNBU4//fSoswAAAAAAAACkp5QW94MHDw4Xf+KJJxIHyMjIqKioaGip2tra
vLy8YGaHDh3+/PPPlo3aKJ9//vkei/s777wzwoQtJfwO2iofAAAAAAAAIEVS
Wtyfe+654eJz587dfUJNTU24nX779u0Tr9ajR49wtfLy8paN2iirV69O3Npf
ffXVtbW1ESZsKRMmTAiuqLCwMOosAAAAAAAAAOlg0qRJ69evjx9pQnF/6aWX
du/e/Z577tnjzFNPPTVc/Jlnnql3Trt27YIJe+21V+LVunXr1kqK+8WLFydo
7a+55pr0aO1jli5dGlxUUVFR1FkAAAAAAAAA0sGJJ57Ytm3bW2+9tbKyMhhp
QnE/aNCgZPZOr62t7dixY7h4nV8YCB122GHhnLKysoZWq6qqiiUPpsX+EO1W
+fPmzau3ss/MzJwxY0aEwVpceXl5cGn33Xdf1FkAAAAAAAAA0sHYsWODHrZX
r15r1qz5qxnF/d57771169YE01599dVw5Z49ezY0bfz48eG0RYsWNTRt5cqV
4bQzzjgjmZyp88EHH+ze2nft2vW1116LNlgqnHDCCbGrW7VqVdRBAAAAAAAA
ANLEk08+2blz5zZt2mRkZFxxxRXxD8U3qriPGTt2bENzKisrjzzyyHDlp59+
uqGZpaWl2dnZwbQ+ffqEWwHEq6mpGTBgQLja888/n0zOlLroooviW/sLL7zw
p59+ijpUSrz++usdOnSoqKiIOggAAAAAAABA+vjpp5/GjBmTkZFR55nxxhb3
bf5+9fmuXbvqTNi8eXP82+0T9PuBadOmhZPPPvvsX3/9Nf5oVVXVlVdeGU64
4IILGnWxKRJLNX78+BNOOCH2lXz77bejjpNaP/74Y9QRAAAAAAAAANLQ6tWr
e/bs2YTi/plnnol/MX2nTp3Gjh07Z86chQsXzp49e+TIkfvss09wKDMz88Yb
b6ypqdnjmlOmTIlNDs7q3LlzUVHRvHnzFixYMHHixH//+9/hZ1100UVVVVXN
vnQAAAAAAAAAaBUqKytvueWWnJycRhX3f/29d/1LL700cuTIvLy8NvWJrVlY
WLhu3brkw6xdu3bo0KFhfV/HiSee2Bp2yAcAAAAAAACAFrdz587tf2vCudXV
1R999NGiRYtmzpw5efLk6dOnz549e/Xq1XW2u0/eli1bli9ffv/990+bNm3q
1Kn33HPPkiVLvv/++6atBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAA0Ez/C0KIYOk=
        "], {{0, 0}, {2707, 300}}, {0, 255},
        ColorFunction->RGBColor],
       ImageSize->Large,
       PlotRange->{{0, 2707}, {0, 300}}]},
     {
      GraphicsBox[RasterBox[CompressedData["
1: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
yuLiJwYAAEDk4cOHLp155ZtRJExWr14da+eP0Uv06mD5yZMn8Xt6BwAAgLVc
uHBhxowZDRo0yJEjx3/+8x+t60yVKlX+/Pnbt2+/ZMkS9Vlo6rPuqSGOl7Vp
OhXc95rU47Icde+CXhC9prfffptemX56dtKkSXPmzEmvlV4uvWLFR0VGRiom
T3wX2mSdCo8ePVJJBoVctmxZp06dChQoEBwcrHt0adOmrVy5cr9+/bZv3+6R
HWqUC8WUi84Y5ULRSjeJiorybBH9888/CxYsaNWqVb58+ZInT66VT7JkyXLn
zt2sWbO5c+deuXLF44Vwz5VqaZfbt28vXry4bdu2oaGh4knv6dOnr169+sCB
A/ft2+fO801kSnyz6q/J2+JFdMxXcOrUKU0KtLsUZ8iQIeJ454svvnD0KMtL
4/Tp0x988EHx4sUTJ06sJ5jqaseOHbdt22a6iBzxww8/9Pgf33zzjaLV5cuX
ewh4REqjZurQoUMjR46sVKlS1qxZ9ewHBQXlzZu3TZs21D7TR+F+RIz79+8r
vjv20l3FqgyKUJs5derU+vXrp0uXTq9d1Bv27t2bvh0WUlIOjp4vEe7v3Lkz
atSoEiVKJEqUSAxD3Va3bt28Ubc19u/f379//7Jly+qNf5IkSbJly9akSROq
8KLPRt+mo/w+fPhQC+OSX6Q7b+asVFDvYcUVGlSNFa28vTaVPCL9CP1z587Z
1TGLFSsmVpjjx487epq1pUEf+MaNG6nLzpUrl35KQGBgINX5AQMGUO7cKSgd
aiLGjBlTtWrVFClS6GVCn3PDhg0XLVrkqfel3iqKPZo5KxNpmzx5co0aNUSP
l/5dt27dOXPmGB0A0y4lffWKhio+NjUCW7du/fDDD6lzz5gxoy7Fki9atGhR
agO///57j0930we1d+9e6nTIAS5UqJBYZ6gdzpQpU61atciZpDCmhwnU+3/+
+ec03NDd1ICAAMrjsGHDmGMgqR56A6uhXvLUgOhW6s4bvQtzmY2O8TapD23a
tGmWLFn0vozc8pIlS3766afUxeshtWUMjnBpzQa9Ji0iGuuZTrk69KamT59O
4yOWR3qt1KcfOHBAD6mtnHGE3pfJg4mwloGGUYqGnsq4YnQAAN8hFuYZvIe6
i6IjdnwSqFs/cuSI5jGGhITQ2EcfBJGbSl4B9WUu3TwYC1Got/nuv3Sf6pjI
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
0quXnAv0ww8/iO+CqcD0TvWfvvrqK93q1q1bohWTaPPmzav/1LlzZ0dRT5ky
hUkwHTp0MC42pkzNmDFDdLqKFCmiT8y6yuzZs8WUM19LrHvi6Qfdu3fX/54j
Rw72KYkP1M+NPHv2rPh3Jr4UKFBA/6lbt26OUkuvWLRKkiTJqFGj2LAuPDz8
yy+/ZK+AEixZsKFeCAQ5pa4WMvnw4gPp+T179jxx4gQLdvfuXarV4nlWFStW
lO/5kkA1X5KpYsWK6T999913utW5c+dEK7b0JX/+/PpPffr00a1oOJBagFXj
4OBg/SfJqoz9+/c72keWIkUKNkbo2rUrvVB14T42S0Pk+fPnonpLvYA4r3v7
9m1x2+mGDRvU3q0TRo8ezQqwf//+Tq2uXr3KXhyVkrk5Exo+syn6kJCQhQsX
Gq+Z+P3339966y0xRuqITcRopEqVKvrbyZ49u5iYtGnTlvo3To928cEMRscs
LLE7OUAVNWfOnLlz5xYFQUpGtEG4z5cvn1gOjpbcG4X7WbNmaf/Oli3b5MmT
z58/r51S/vTp0507d3bp0oV9YvTtuyNaaWzbts14uk7VqlXXrl0rylKnTp2i
FGpdQO3atdmOaSoWPb9t27bVTOjTE8uB7aLNnDmz+Cu9U3esVNDONtQIDQ0V
H5ssWTLxsf/97391K6qB+t+ZqpgoUSLRatmyZZoJ9S9i082Wu1CrK/46YsQI
RwmeNGmSowUkrFWnZ2qfm7pwH2ulwdi7d69oRZ+82B4eOHBAP+kiVapU2hSc
CZo3by7GMnLkSH0FF3mqffv21X8Sm/GxY8eKr4a1A1Qs4q+64v/mm2/quWY7
qliZfPDBB3pc5qzU6dGjh/jMfv366d4atSqff/65/hPVBN2K3rUYNTt1hNp8
/Sd2DnnLli31n5iAmCFDBvGZdi/oiY7RK5laXbp06Y0bN7L2k7xfaproJz0Y
We3Zs8dEEUXHCPe2f0PfwuLFi43n8FOhUVNJb00MXK5cOZUT++lbsNmDWgbq
LKibE2savZpog3BftGhRvQCpqMWHU1XXf6JhkWiVMmVKseTFEQ0NtfS/s0UX
1B2IVuvXr3epSKlAyMdmOaWKNGbMGG1zvca9e/doYFiiRAlbzJfFekPqaMQ0
qO8PpXouPoctcvAUkZGR+r5+HRqmUTvz119/6cHIdfnxxx9Lxcw/0OhM/Ohs
hmZW78uOHz8u/p019bly5dJ/6t27t5gqGjLoPzEFQew3y5Qp440yAQAAb0PD
IrF5ZOedkmNWyoDkWDbqE6lvFZ9AI4758+cbd+4cOnSoTZs2ejDyzKdMmaKS
YK9GQQ6/ns3ixYuLsdBoUSyEXr166VYTJ04UXVk2AGSOrr6tm4bG4gPZKfFi
xyTGRdSvX1+lYyKnzlE2w8PDS5YsabMHjcfZJBKVNpW5Z4V75qKTP0Ovxu6F
vzQk79ChgzhwIwfv0qVL8ufTqIQt7aDinT17Npv9uHr16ieffMIEFMl1lgAA
AIBdunfvLnY6hQoVoi7GUeDdu3czEXDx4sUqsfz3v/9lnb6KlXFyxs07teMl
bKcbvSDJbNiVK1fYbA9VAMWIxP0+xNmzZ1Ws2IZ0yYy0zpIlS0STJEmSrFu3
ThL+zp07ogRTq1YtxdOw5TCvUmUv/9dffy2atG/fXiUibRJMR1zH4gim0pI7
KjmQgd4UU+sGDx6skrBoU4UgYdq0aeLTUqRIsXPnTkn4a9euiW4/ecjuxK7D
Nn/ZdeONsGPAFTdum4jrwIEDbPqXhnKdO3fevn27NnlODePly5dpdKB/y59/
/rm6cO9+CqNNlcaGDRtEk6ZNm7IA1E3oEmfDhg0V0y+HfVy2mN2aTrfzs4qq
MWvWLFdjf/r0KSsoypd8/Ql1qfr4jv5Bfa6rkcphhx5IVk+p4DsZbNCgAXtf
lStXpk9GXy4VFRVFrY2+a3jBggVMuBdP/pHApIo2bdpojSS1To4y/uuvv7Il
c1mzZnXHmXn27Bnrjgn98A0j1AUUKFDAWKVVlv1/8sknoslnn32mkkJzVk6h
Nyg+1ultOxqXLl0Srah19V5crB22xczkUPZPnTqlSZn032PHjtFftEY+ceLE
+/btUxfu3U+hudLo3bu3aGVcckP9kf6ruJJTHfp8xKlIKje2rJQ+Yb0ap0yZ
0tGiU3YygEolv3XrlmhCD1dJsDkrCZRBsesPDAw07g3X9wtT4+moDenWrZuY
MMXXwQRKlYUH586dY0eLDBo0SFu2ZBdqjQcMGKAHzpAhg7lTQ9nYsHHjxnIh
nsL36tVLNJHcJaRBuQgJCbH9m3bt2h05ckRvZiMiItauXaspvPQ6Dh48yDy3
f/75RyU79L2LVmzjmyPYIUjUI6hYOcK4m69MmTKOpBMqnI8++shmgPpcE1HT
uzMeZLFr1y53smMX48Ej5B86mvGgUeSQIUOMeWRnVjiCrUFSXA/54Ycfilae
6jcBAMB3+O6778SGjq1qkxMZGVnq37u6atasKZ+bWrFihX7npr+/v9OxXixE
oUOPFSOi4aSiIdtz9/3333vPinX3w4YNc2pC+TKq9pUqVaKu8Pbt23qY1atX
N2rUSPu1SpUqzKvxoHBfuHBhp/4YjWvE2MkTk08W9ezZUwxPwxPJXQk00GOr
wRcsWGAyYwAAABIe7Fx6GjtfuHBBbrJ27VpxTVry5MnF1fiOgHDvJf766y9x
KQW9GnpBcpPz58+zSZIffvhBJa7YEe6pOjHfZtWqVU5jefLkieihmb6mWcRn
hfuDBw+K89uBgYFO57iOHTsm6rM0rFA8rNiDwv3hw4f1cY0tZnua5CZfnfDw
8Ny5c+tWiiuF5PiycE8lzDa+0deqn6jMeP78ef/+/W0xk8adOnUSrXxQuB8x
YoRoMnLkSGMYfUceNWu65Goa6s5s9qAvSG5o3JZlixm5u5oAdtBuxYoVVTb6
ffvtt7oJtbruXwcs4lnh3kcyeOPGDXbXT8OGDR3VH+2aV3JCxO2fNrPCveYO
1a1bV3J2TXSMds8OymC7G1zCeItNv3795CYXL140iiMQ7j0bFzXUbK992bJl
2dlHOlRptXtV8uXLZ2J9o7kURpstDcqIaGXcS3v79m39V+1EC1fZvXu3GEW1
atWMYcQ7KRx1OnFXuGe7jaiTNYaZOHGiHsCRtx87wr1xcrtnz54qEYmzneYu
FBDHhjlz5lTpdMhZEj1Jao3lZ3P98ssvtn/j6HYM6mi0cxLIbYijwv3Dhw/Z
sIv6R6dnl5HzwIrInHBv95qVt99+21RWHEKDRLYLXmXdSFhYGEsYhHsAAHAH
d4R78kxE25IlSz5+/Nip1fLly8WWXz6ZHAtR6MRX4V48Xs8WM1IeN26co01V
+rIH5rt6SrgPCgoSjyCToK8i0HA0+Rb979dti1lp7HRWfP369eIIMVmyZOKN
ZgAAAIAj/vnnH7ZXQlHubNq0qWilMoyFcO8NqHzYjYTNmjVTMZw8ebJoRdVA
5Xj52BHu2fwwOZkqsUTHHFSoazfp06d3dLCnOr4p3L98+ZJd7ql4ZgLbPJIp
UyaVkYinhHtKNjvX991331W0FeWJ3LlzywUyFXxZuO/SpYsYPjAwUDJw0KCS
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
PV++fE6fTx39lClT1N3XhCncR8ecpUPV2PR7VBfu2c1onTp1MobZvn279mtg
YKBkIt1VFi5cSN6d6TxCuAcAAHcwIdyvXLnSdKPtiIiIiFiOwkg8E+6bNm3K
SsBy4f7ixYtsItou5ElSh0vjI/nT7t69ywwrVarkUnpev35NA3/xCXny5HEj
fwAAAOIzxgtWSpcu7dITHj58yJ4gn3hhwr2i4AjhXkKFChVY4ahsJBFhW/+c
arhMuD99+rRKLJUrVxatJDPSLEfk2OR2Babd2NyWd5lmLV/VoMGE+9atW6tE
pC7csynKpEmTupCfGPRDwjWCg4Pl4VkhKM5DypMdEBDg0pul5oK9WaeXjMth
UvWNGzdUrLwt3GfOnFkMqagu6UycOFE0Ny3cK75inxXuqY9IkiSJGNGpU6dY
mKioKK25oEZPPwy2bdu2opVdRVsv5Hbt2knSsHHjRlZj06ZN61KdZ8cvZMqU
yTOlYxDu5RmJKxm0ULjv37+/S0llZ/S5eiOGEepSq1atynYRKhLXhXvqOlWs
vC3cHz16lBWsq59VjRo1RHNzwn2pUqVUrCDcG4nfwv20adNUrNTLnz5nVh+o
WVNv/HPmzMnMmzZtaiKbW7ZsYcsdRRIlSlS9evUpU6Y4Pe/diLXCveJCem8I
99ExeSfvkTomRwUrQVG4P3jwIDPct2+fMZh4K/2YMWM8kjsNei+9e/c2t6LY
nHC/aNEiFStyJ0QrCPcAgPiHCeGeubu2mH3KLo062cxAihQpYj8KI9YK999+
+62KFVtRJhHuu3btysrw999/V8wRcfLkSdHWfeH+77//zpQpk80xNIocMWLE
sWPHFB8YFRXFZPfixYu7lKSnT5+yNCg6FQAAABImbFSeM2dOl8wvXLjA+p1m
zZpJwjPhXtEzef78OYsFwr2Ocaud/IZ6I0zDdXpWDxPuFe8tIodEtJLMSLOF
mn5+fi5dZb548WJWICtXrlQ3N8I0a6rzTk2YcN+gQQOViNSFe3ZIAhWRS6s1
Xr9+zQ4Dd3pCKSsE8a5wdSpVqiQ+RGUsI8L2khM0vDKRDB0mVSueHZE3b17R
yuPCfaFChcSQru5BZnqiaeHe6Y2fGmzjsO8I9zR6FWMpUKCA3WA9e/bUAkya
NIn+NyIigt24areloo5MU0gpsGQh/aFDh1iNHTp0qEu5YAf/ujowlMCE+4YN
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
0yaVHLGI8uTJ4/6tCkyztjm7EfjFixdMeNVSIhfi2ddUrFgxeapOnjzJhGzF
uR3j3Qoqmz2NhTB27FhJeP0Q7GTJkol/pyrHkq14yRQ7QL5MmTIqVnKYVG1T
OB9+5MiRYnj1U0nVhXuib9++YmBqk8+ePasSC5PJbG4I9zaFzWtsUbribjtv
C/cRERFsQCQ/Cdx4xIeG0xNZ9cog3yzGlo4rLsOgZiRDhgyioeJ4XBGjcE9D
cvl54/pJHezwZN/JoLXCveKiR6Nmoa7t2kU7cod6VUXRivw0sRFWnCvzceE+
adKkkjNqNMqXLy+aKF757ZJwT68gNDRUDF+oUCFFJ6REiRIsU6aF+3Tp0snP
nSbq1KkjmkiuMteBcO9BKwneE+6d7mtmUrVNYbOYvoBNQ3H6kRpnsRWifys6
OQzxq1Hczvzs2TP9Jh0fF+7JM5EvciaohRFNRo0apZhIRwwdOlR7lOTEIUar
Vq3ENDidCtCnxDVKlSqlEsv06dO18NmzZzd3s4+O3sioex3t27cX0+x04kLD
KNx/9NFHcpMzZ84wE6dHogEAQJzDnHBP9O/fXzQsXry4ihW54uzWTsme8ViI
QsRy4Z46OLnJgQMHmIl8zKXvidAhz1YlbcZZSjeF+65du4pPUxy26L6lpEjZ
vaX+/v6K9z19/fXXomFgYKD6kQ4AAAASLDT+rVSpktiDqKzYf/r0KXNOPvnk
E6dWRuHeFiPESyacnzx5ki5dOjG8+/MS8Q/jFnWnu+AJKnnRqmrVqiozzEy4
DwgISJMmjWQSg14u2+LdtGlTp7GwzXElS5Z8+fKl3ISqCquT6ktkJTDNmvJb
oEAByanI5OOJ4f38/Khg5fWWiohN2qsc285mZYsVK+a0iCgiplIp3hfJCoGc
zKRJk0ruO9C9WSbcE2FhYeKjatas6VRvunPnjnYRuY76jKIEJlXTm82aNatk
ipW8fXYQPQ0HzMUlF+7/+usvSowYXmXq/saNG0ywtrkn3NNnKz+5i53W0qZN
G5WIvC3cr1u3Tnw+vVOnFaxjx442A05XcegHiVAPJfn0aDhGLaT4ZBU97ssv
vxRNaNyqfo6KCky415Z+NWnSRDIfrr84Jtz7TgatFe6JLVu2yK2oKtaqVUs0
SZ06tfqmP7vod+VITn4QYWK6ojrsy8K91lpSXyZxYI4ePcrWjK1YscJEXHLh
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
9fzEgBKEh4dr9s45gnv1KRfc5+bmBgcHS95Qa9SocezYMbolFUQluCe7ZIUK
FSS3tFq1ar/++iv1plGh6DgnPz+/Xr16hV7OoEt94crJzs4ODAyU/HHXqlWL
/32fI6hZs6bkviJnOvt+JHpKSoqrq6vk/mnduvWNGzdYN8ICBPcAtPTq1avg
cYBcXmVmZor5c3Lyqly5ssjDy6xZsyTXefTo0YILJEMdyQuk7sKFC3xhe/fu
5V7kv0alqVIpIoPVYsWKGX0uXl5eZ8+eZV2adNSD+xcvH2ZRrlw5kXuKRT16
9JBZT0hIiMwamjdv/ujRIyqdYw6Ce21CcK8yBPdAHYJ7JhDcg0IQ3KsMwb05
CO5lQnBvDr9pSVa0aNEdO3bQbZrKDh06JLMTdDrdtGnTWLfDBAT36lMuuE9M
TJS5obq6uioxD4AhKsH9r7/+KrOlZJecNGkS9dbJp/Q45/Dhw9xMBatXr1Zi
+UrYunWrzI/bzc1t3rx5rNuhhjNnzsjsK2dn5/Hjx+v1etZNUcTXX38ts398
fHw2btzIuh1CENwD0DJz5kyTxwEykhG5BHIFJPLYUq9ePclzEOXk5BR8PIqf
n5+0pSnh7t27fGHknM69GBcXx70SEhLCtDoFDRkypOBn3aRJE9s9ySoR3L94
md3Lj8s5kZGRciohexMZCMkvo0KFChcuXKDVPwUhuNcmBPcqQ3AP1CG4ZwLB
PSgEwb3KENybg+BeJgT35gwYMED+patOp5s7dy7d1qmJ9J78Tij08leuWru4
RnCvPuWC+2+//ZbKhkr2euWmzacS3H///fdUWtqnTx+tTZuvwjinW7duhV5+
perq1asKrYKu2bNnU/m4R4wYkZ+fz7o1yvrpp5+o9BU5NdjltPkffvih/M5x
cnKSPxOvchDcA9By+PBhkwcBMngQv5Do6GiRxxYy4n3+/Lm0UqtXr17wSKWd
J8Wkp6fzha1du5Z7cfLkydwrAQEBbMtTzqlTp0x+1tu3b2ddmkQKBfdEcnIy
lez+3XfflVPGvXv35NfACQwMPHLkCK3+MYLgXpsQ3KsMwT1Qh+CeCQT3oBAE
9ypDcG8OgnuZENyb06VLF1pXr6NHj7bR0GTWrFm0OiEqKurp06esG/Q3BPfq
Uy64nzp1Kq0NtV27dqmpqXTL41AJ7ufMmUOrpS1atHjy5An1Zkqmwjjn+vXr
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
OJq2bduau2oeNGiQxT8nV5r8+wcOHCh+vc+fPz927NjWrVvXrVu3Y8cOsmsr
/RvtEiVKcHXeu3dP5qLIYI/7/b5VmA/JxKtcubK1rTPi5uZ2/vx51u2wDMG9
tRDcOxT5v5oMCAg4ePAg63bYDCbBPTFhwgSZHzSPHFRVKxuslZyczI+F5Dt0
6BDrBtmGlJQUaV/4NEk7UYgwilOL16lTh3VrNCo9Pb1Zs2a0+nns2LGsG6R1
t27dEjl9nBj2NDFRRkZG8+bNafWMrXz9WyYE96pBcP8Cwb0ICO61AMG9+lQI
7l8YJNc8T09Pxwn4ENyLh+BeGIJ7AEcjMCm6r69vWlqa8J+TK2v+/VOmTFGn
Zmn4Z65RCZSPHz9urt/MEfNFCI0ICAiwtnUFNW3aVM7kBupAcG8tBPcOhcpz
S93d3e3mZ2VKYxXcv6A31e1bb72lZtlgrZMnT/LHW5kuX77MujU24+bNm+XK
laPS7bt372bdGrFozeXetm1b1k3RrufPnxd8eKg0X331FevW2ICrV68a/WpM
sv3797NuDU2pqamNGjWi0jOzZs1i3Ro1ILhXDYL7FwjuRUBwrwUI7tWndHB/
5syZ9u3bmzzdlyxZ8saNG0qsVGsQ3IuH4F4YgnsAR5OZmVm0aFFzF84WDwV9
+vTh37x06VJ1apYgPz+fT6Co/Ebs1q1b3NJID8yZM0fM/dhhw4bJX686aP0i
b/Xq1aybYgGCe2shuHcoVIL7Qi8nQ3O0B5lJwzC41+v1Y8eOlf+JT5o0Sc2y
QYJjx44FBQXJ/KDJEsjpgHVTbMnVq1erVKkis9tdXV2fPHnCuilikaOK4fd7
JdP4F4OZI5sEld/dkyMD66bYhosXL8qfM9/Dw0PpuebU9/TpUyq/u3eQO34I
7lWD4P4FgnsRENxrAYJ79SkX3JPxElm48BSOtWrVsvhrQTuA4F48BPfCENwD
OCD+Wqag8PBw4R9NG860r7WxtyEyGODrJCcC/vWNGzeSoUJ2dra1C3z8+DG3
tBkzZpD/m5WVRS66hX/FZkMP7KtRo4ZAQ8QrWbKkxu8wI7i3FoJ7hyI/3TP0
xRdfsG6Q1jEM7jmrV6/29PSU/BGTC/Nz586pXzZY6/bt2/Xr15ezOw8fPpx1
I2zPs2fPzP3kRCRb/O35qlWr5BxVdDpdcnIy60ZoHRk7DR06VM6mFRYWpv1p
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
xPWVv78/61q0qHjx4lz/hISEsK7FhF69euFp0QDM8aOpgsh+yrq6V86cOSMQ
xZ4+fZp/56NHj7gXPTw8aK29YsWK/LpOnTpFa7FAnaenp8B2IsDFxSU0NDQy
MvKDDz6Ij49ft27d8ePHnz17RqswPOMeAAAAAAAAQDI84/6Fus+4z8vLO378
eFxcnNFPaYxMmjRJ6UqAw0+VLyA0NJTsKWQ7uXHjBsNSlXjGvTap+Yx7fpes
+/+/wTHps88+U7oSh4Vn3IuHZ9wL0+Az7gFAa/hvi5l09uxZ1gX+j3Bw/+mn
n+r1eu6dWVlZ3IvOzs601m44Ijpy5AitxQJ1koN7c/z8/Min37Vr19jY2AUL
FiQmJl65coXf2MRDcA8AAAAAAAAgGYL7F6oE92lpaVu2bCG9zf8eUBiCe9WI
Ce4NhYaG9urVa8GCBX/++afKpSK4pyg9PZ3bJUuUKCHmc0dwrxwE9+IhuBeG
4B4AhGVnZwvPLj5lyhTWNf7PpUuXhIclUVFRFy9e5N7Mz2xPa+1NmzblV3Tw
4EFaiwXqfH19xQxixSs45RTh7u5e8Of5GRkZAoUhuAcAAAAAAACQDMH9CyWD
+2vXri1YsCA6OtrNzU3gfkhB//nPf+hWAuZERUVJvqMVFBTUtWvX2bNnHz9+
XMKvUayF4F6+69evS9slp02bRrcS4CG4Fw/BvTAE9wAg7OLFi8Kn+yZNmrCu
8X9SUlIsjkw8PDwmTpyYmppatGhR7hVaa2/fvj2/ln379tFaLFBXs2ZNMYNY
Jeh0OoHJ9hHcAwAAAAAAAEiG4P4F7eA+Pz+fn3lbZCZY0I4dO+RXAmKMHTtW
3o2rVwIDA6Ojo+Pj48mnT7YBJUpFcC8NlV1yy5Yt8isBkxDci4fgXhiCewAQ
tmfPHv7MbnKacRcXlydPnrAu83/zAokcn/j5+fFzCNBae8+ePfnlJyUl0Vos
UFerVi0rx7OK4ybbr1OnDvd/u3XrduXKFYWujCRAcA8AAAAAAADah+D+BaXg
PiMjg5t5OygoSP5Nj507d1JsIAj49NNP5X9ehf75w20fH5/IyMj4+PiDBw9m
Z2fTKhXBvVXILpmYmDhixIjg4GD5n+/WrVspNhAMIbgXD8G9MAT3ACBswYIF
/Jk9ISHB5LT569atY13m/7i7u1s7VqG16kGDBvHL3L17N63FAnUaDO5pTbav
EAT3AAAAAAAAoH0I7l/IC+7v3btH/rxr165eXl4C9yusheBeNbSCe3PIhhER
EREbG5uYmJiZmSmnVAT3YvC7pLe3N7cQKrskgnvlILgXD8G9MAT3ACBszJgx
/Jn90qVLhg9z5/Xt25d1mf9Tvnx5a8cqjRs3XrFiRV5ensxVx8XF8cvEJYmW
aTC4F0+n05GNnEvzp0+fvmHDht9//52fbF8hCO4BAAAAAABA+xDcv7A+uNfr
9ceOHfvss89q166t0K0M3CVTjdLBvSF3d/emTZuSLScxMTEtLc3aUhHcm0N2
SW4y/Dp16vAxPZW8nofgXjkI7sVDcC8MwT0ACOvWrRt3lHB1dc3Ly0tISCh4
xg8KCiLjCtaVvmjSpIm0EUv16tXJOFPOqhcvXswvbdu2bbRaBNTVq1dP2kai
ZYGBgQ0bNuzZsye5Rlu+fPmBAwdu375Nq8cQ3AMAAAAAAID2Ibh/ITq4z8jI
2Lp1K63J8IXhgZKq+eKLL5T+NE1ydXVt1KjRv//9723btj19+lRMqQjujZBd
kvTewIEDS5UqpfTnhalilYPgXjwE98IQ3AOAsPr163NHibCwMPJ/z507Z/Kk
f+rUKdaV/mO+egnICCo3N1faqhMTE/nlkPMO3XYBRceOHYuNjX3nnXfq1KlT
pEiRgpsB3W+xMuTh4REeHt6xY8dRo0bNnTt3586dFy5ckPA8MgT3AAAAAAAA
oH0I7l9YCu7v3r27aNGiDh06eHp6cm9T7h6Is7PzG2+8kZCQIPlWG1jr/v37
48ePb9y4sZubG/9BqHybS6fT1a5d+8MPP/zxxx9JPeZKRXDPSUlJWbx4cceO
Hek+n8Iksks2bNhw+vTpOTk56veDg0BwLx6Ce2EI7gFAWLFixbijRKtWrbhX
QkNDC57958+fz7ZOYuXKlTLHMF27dpU2dcD58+f5hWzfvp1600Ahjx8/Pn78
+Lp16+Lj48kQOjIykmzeZCgrc0PSMj8/v7p165JNPS4ujjScNP/JkycCXYTg
HgAAAAAAALQPwf0LM8H9n3/+GR8fHxERwd/uoB4O8gv09PSMjo5esGDBnTt3
GPaDg8vJyTl+/Dj50Mln4evrW/BjUk1oaGivXr3I9nDt2jXDCh08uL9y5crs
2bMNd0nq+M/aw8OD2yUpTs4J5iC4Fw/BvTAE9wAgIDU1lT/jDx48mHuRDP4L
jgf69OnDtlQiMzOz3P+1d/dBVtWF/8ATiFVTWE0ELBMWU1zDoZY0Nqedkocp
t5gNFqQkTeRhWkMeQiQz0ElDEUEUYzOC1TF0tYaFFI1ySmp0CMUNlHCg4klB
5FEXFnbv+jvzvTNn7o99cPeyd8/l8nr9BZ979+z7c849555733vP7dHjBE9s
5syZk8Svrq6uzsrKii/hr3/9a6tPjbZ09OjR4BR61apVwWnttGnTiouL8/Ly
wr99zUjZ2dnxNj+YbzDrYO7BGojFYh8p7gEAADgZKO4/Sijux48fv3r16uA1
/iWXXNIG7yqcf/75o0aNWr58eXV1ddTrgP9PTU3N2rVr582bV1xcfM4557TB
gyFR4p8KdO/ePchQWlq6YcOGU7C4HzNmTNvvkuXl5R988EHU6+AUorhvPsV9
0xT3QBP+9a9/hc/4999/f3xwxYoV9c8HLrvssmijxr3zzjuDBg06kRObiy66
KLlfnZ+fH1/Cxo0bW3VOpIVYLLZ169aXXnopeLqcPn368OHD8/LysrOz6z+E
Muli+7m5uYWFhfH/nnXWWVFvBAAAAGiY4j6wePHi+Er45Cc/Gf9H6t6jCJbc
r1+/u++++/XXX4963jRLbW3ta6+9Nm/evKKioi5duiRuyhQ9SBoTvp/24x//
OOq1klrh5WHbZpfMy8ubOXNmsJWTu6IsJ2jOnDnxbfHd7363nCZNnTo1vq6G
DRsW9XZLR4p7oAkVFRXhs/9TTz0VHzx48GD79u2POzdo167d4cOHo00bF5yZ
BAe0xPPPltqzZ08Sv/e2226L//iHH37Y6pMibe3du3fNmjVLly695557brrp
poKCggsvvDBjuvtEwaSiXtkAAADQMMV9YMKECal7TyD+D1fezgx1dXUbNmx4
9NFHR44cecEFF9Tf0G2jf//+Ua+J1JoyZUqKVl3iLnnttdcuXLhwx44dUU/3
VHfdddelaHNnsIsvvjjq7ZaOFPdAE8ILvARefvnlcDwvL6/+YbaysjLCqMfZ
v3//tGnTOnbsmMTzxT/+8Y8kfmOwfoKf7dWrV6vPhZNOdXX1W2+9tWLFioce
eih41RycP/fu3Tv8MoWTlOIeAACAtKW4/yhhJbS6rl273nzzzRUVFVVVVVHP
kta3efPm3/72tzfccENOTk6KHkIN6tevX9RTT62SkpIUrbpglxw9evSyZcvs
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
j4TFfVZW1gsvvNDY3dasWZPYv5eVlaU0VdvbvXt3Yik/f/78+HgsFhs5cmT9
1j7wwAMPRJu5QYkTSSzuP/OZz4Tj69evjzAhAAAAAAAAQAY7keL+vvvua/qe
zz77bLjw888//+DBg6lL1fbWrFmTWMrffvvtweChQ4dGjRrVYGsfWL58edSp
G1BXVxdeHiGxuM/NzQ2T/+1vf4swIQAAAAAAAEAGS7q4P/PMM5tz1fq+ffuG
y3/yySdTl6rtlZeXJ5by2dnZ1113Xbdu3Rpr7QP//ve/o07dsJycnPrF/Ve+
8pUweUVFRYTxAAAAAAAAADJY0sX9oEGDmnPnO+64I1z+DTfckLpUbW/27NlN
dPT1dejQ4dixY1GnblhBQUH94n7w4MFh+MWLF0eXDgAAAAAAACCTJVGRl5WV
jR079vHHH2/OnZcsWRIu/xvf+EbqUrW9W265pUXFfd++faOO3Kgf/OAH8ZCb
N28OB4cPHx6Gnzt3boTxAAAAAAAAADJYqivyxK+5z8vLS5NUraKwsLBFxf3U
qVOjjtyoBx98MB5y165d4eDNN98chr/nnnsijAcAAAAAAACQwVJdkS9atChc
/sCBA9MkVavo06dPi4r7F198MerIjfrnP/8ZJMzKyorFYuHglClTwvA//elP
I4wHAAAAAAAAkMFSXZFPnTo1XP6kSZPSJFWr6Ny5c/Nb+6ysrKqqqqgjN6qu
ru7yyy8fMmRI4uBdd90V5p84cWJU2QAAAAAAAAAyW6or8iuuuCJc/p///Oc0
SXXi9u/f3/zWPnDttddGHfljvPvuu/v27UscmTt3bph/zJgxUQUDAAAAAAAA
yGwprcife+65cOFXXnllmqRqFevWrWtRcV9RURF15Bb7zW9+E+b//ve/H3Uc
AAAAAAAAgMyUuor87bff7tq1a3zJnTp12rRpUzqkai3Lli1rfmvfvXv3mpqa
qCO32NNPPx1OYcSIEVHHAQAAAAAAAMhMqajIq6qqHnnkkezs7PhiP/vZz65b
ty7yVK3roYcean5xP2PGjKjzJuP5558PpzBs2LCo4wAAAAAAAABkplapyHft
2jX2/wwfPrx///5ZWVnxBXbr1u1nP/vZoUOHIkmVUpMnT25ma9+5c+fdu3dH
nTcZq1evDmdRVFQUdRwAAAAAAACAzNQqFfmmTZuOa6t79uz5q1/9Kunrw6d/
cT906NBmFvf3339/1GGTVFlZGc7iO9/5TtRxAAAAAAAAADJTq1Tkhw4dKi8v
X7Ro0ezZs0eNGnXeeefFF9i3b98VK1ZElSql+vXr15zWvlevXtXV1VGHTdLO
nTvDiXzrW9+KOg4AAAAAAABAZkpFRR4s58EHH+zYsWN8sSUlJbFYLPJUrat7
9+4f29qfdtppzz33XNRJkxdstXAjDh48OOo4AAAAAAAAAJkpdRX5k08+GS75
rrvuSpNUraKmpqZ9+/YfW9zffvvtUSc9UT169IjPZcCAAVFnAQAAAAAAAMhM
Ka3Ir7rqqviSs7KyduzYkSapTtz27ds/trX/+te/XlNTE3XSE/W1r30tPp2B
AwdGnQUAAAAAAAAgM6W0Ir/77rvDhT/88MNpkurEvfrqq0239r17937vvfei
jtkKbrzxxviMioqKos4CAAAAAAAAkAlWrlxZW1ubOJLSirysrCxceElJSZqk
OnG///3vm2jtc3Nzd+7cGXXG1lFaWhqf1OjRo6POAgAAAAAAAJAJ8vPzv/zl
L69bty4cSa4i/+EPf5iXl/fYY481fbdFixaFCx8/fnyqU7WZBQsWNNbaBxPZ
u3dv1AFbzfr16+PzmjlzZtRZAAAAAAAAADLB1Vdf/YlPfKJDhw633XZbVVXV
R8lW5Pn5+cH9hwwZ0vTdfvKTn4QLv/fee1Odqs388Y9/bLC1HzduXDx/xqir
q4tvi6VLl0adBQAAAAAAACATbNu27dvf/na8Zc7JyXnxxRdPpLjv2LHj5s2b
G7tPdXX1hRdeGC68srIy1anazLFjxz7/+c8nVvZdunSpqKiIOldKzJ49O5jg
9u3bow4CAAAAAAAAkDmeeeaZ7t27xxvndu3aJV3cB/Ly8t5///36d6ipqbnx
xhvDJQ8bNqwNUrWl9evXx/+64FOf+tTEiRN3794ddaJUicViS5YsiToFAAAA
AAAAQKbZv3//uHHjTjvttMSPjSdR3Ae6des2a9asN954I1jm4cOHt27d+sQT
T/Tr1y+8w5VXXtnMr30/wVRt7MiRI9u2bYvFYlEHAQAAAAAAAOBktXr16tzc
3CQq8ldeeaWkpCT8gHxjTj/99OnTp7f0a9+TTgUAAAAAAAAAJ52jR48+8cQT
pf8niQ+Pv/nmmwsXLhw/fnxBQcHll1+ek5Nz2WWX5efnjx07dvHixQcOHIgk
FQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQGv5fxvyYtg=
        "], {{0, 
        0}, {2707, 298}}, {0, 255},
        ColorFunction->RGBColor],
       ImageSize->Large,
       PlotRange->{{0, 2707}, {0, 298}}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.7716326714801407`*^9, 3.771632676486462*^9}, {
   3.7716327069093027`*^9, 3.771632802928604*^9}, 3.771632858166833*^9, 
   3.771664614897957*^9, 3.7716989181074247`*^9, 3.771754562938595*^9, 
   3.771765479523464*^9, 3.7717691255536346`*^9, 3.7717692550954227`*^9, 
   3.771838487881688*^9, 3.771853419913072*^9, 3.771864766777617*^9, 
   3.7718687671122227`*^9, 3.776172255308197*^9},
 CellLabel->
  "Out[67]//TableForm=",ExpressionUUID->"3e8e4571-849e-46ce-a9b9-\
5df8358d91cc"]
}, Open  ]],

Cell["Remove the staffs from each image:", "Text",
 CellChangeTimes->{{3.7718385017550087`*^9, 
  3.7718385064423323`*^9}},ExpressionUUID->"3364c239-1395-4e05-b39a-\
a617809ca863"],

Cell[BoxData[
 RowBox[{
  RowBox[{"nostaffs", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"removeStaffLines", "[", 
      RowBox[{"#", ",", "\[CapitalDelta]"}], "]"}], "&"}], "/@", "staffs"}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.77163286782292*^9, 3.7716329206879253`*^9}, {
  3.771633153681116*^9, 3.771633154844294*^9}, {3.7717654887709227`*^9, 
  3.771765493365991*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"d0d53082-01d4-4489-80ca-d24325852871"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Show", "[", 
     RowBox[{"#", ",", 
      RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], "&"}], "/@", 
   "nostaffs"}], "//", "TableForm"}]], "Input",
 CellChangeTimes->{{3.771632923556855*^9, 3.771632953259836*^9}, {
   3.771633160870743*^9, 3.771633161321293*^9}, 3.771765500763866*^9},
 CellLabel->"In[69]:=",ExpressionUUID->"66dcc800-83ba-4577-908a-84fc7c1b5761"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      GraphicsBox[RasterBox[CompressedData["
1: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
rXlm5spq2yZsPrpv5YBAg1eX3bp+ozZn1th62ZZq0Rt6Nlk7Y/tAvaw6DVl7
a89M0c/4v6kAAArwcXeV95Kgo90+a+r3dLxdK/24nAaf7w479GS7FWHA/lqt
z0pp731Fe7t3zoxqrzXivVqta6U0uD9w3kRr3ed8eP2VedstW57v2/xHZ221
131hfZMvun1rb7Wghaen6DfECxKcpxgAzPbTqZ2bOl/fdvjo5ftlN0VpoJXd
gBLa+0sT7S3lfL0TzTR4brFtfU1c3TP46ZPFbfHnheJhPtD5aXGbrPgu1YuQ
y9v8lVSbnBW/QuglXobpZTciNxcXyyHOBi3M4cyr3lfHyjfpI4eaXxeAAh0b
79vRDFz8v7/iFyrU3lR7yqDjxTf46aYaXMJpB4ObanCRLf2mfqR5yI5iNrm2
/kgnny5mk8JcxTPdwHs5bLKFX3eoiFehxS6MzOyk98DDpOYGHPt3gmddg0il
gDG+VaWRtgXdZbfL62LKXaXfj8U3eHN8qxoovr32rGbaO7TAhvb6Nz31hv5N
bvBv8nn9W3Sss1L5IYdNDk21xUE5bBFNES9DQV/MdFsYeHeNuZx9XR8F1tXR
R54joM+7ZEV5tKSzMFXeyH4Ub8T/ymjwiuDVQMmN+yZ+9fmbG561MqlHimzn
kODWH9T9a/qt0ANe8J/mTVYt6whtOtKIY7ls8uH4LdVM/TeXTaIJ4nX4sOxG
5OJA+A2W/cSQ8LqGMs0DYILIC24qBuicICa7+iz3v/jK/SdwltQ4aLU7+B6t
mKD3GvDxik0+q3WLYRudzU6slyyqteWInk1Wf/k8WC+hb7Wce+LVKOFXIA0G
KbpZW1e2db2s2pstzre9ADR4099tn+4Rhf+9O8Yt2FR2A1Wmuq3zz1+z3fdQ
SmobtKq9Ma22U7b9VTWYLdG5yfpbatxPtn3KmfOg/bDOTYbNd1pwp1ZQP4C6
UdMmnWHK6j/O360/Eb9r2iRSutB3PulUKTLrVHzqXxeG59xiALnzDY859O9a
+UW3V3e04s9CtdOOOr2l/hPhymobdKq/vtWL1h6VNwZe0bbFu8G3VI/TZ6Zq
26KSc7LvOPfmn/VWabvg2jluVZtRdmt9kwUOdoBGNvSZT7rw6TGOyVlWFrGu
jlt5txpAvqJTXO3szdkRi5bpXffMxzfrZf4Dvowf3SeF36ydzk1tlx3/VNui
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
k74r3eCc4vPlUO/FIfuzNaGr65ssC9r277117uxNI7dlW1dypnUj4xr8m2kN
fj9Jg903qpy9aeBjvfp/VvjP3aQ8zW/Esi15RtLbWV4kwyNp5RHfzm1lfYo4
k6oSSW07TSS1rCfKbrejy3Pt/IDHNrZuJFVQRVJxMb6+E9XzJJpbdhvS+K7S
3slFbazL884a9ezWhJHUM13ekPlv5BZJPe+vcSt0Zqwuz+97g5/anPA6RGUk
tS9m+8Vc9KmMkdSruEhqWjcyrsG/WYZdNSp+QUs88ks1kt4r8EwXLZHUSrC/
DDI8kprWkYrTjyPptor1y59+6uklL26q/NlUJBXr2vzi4qcWLlq+bus2ImnL
IZJaRNKkKpG0ffS05zZvI5IGmdZgImnOiKT5MK0jFWdpeIcw5tDnPRfe3fH8
6PBdNS0xNMrgQKOGZI6UQjORNCTYxc4H3oAno59aIqkOxUXSD4Mv6IwEkfTP
4PfAsblE0k3BtizMY61KwQcwOlEkbTBJR5ZG5BRJi2NaNzKuwX07kv789Tf3
bHmdYGGR9IeeW+K8OSJpk0zrSMXxDmDU5hwl9Yy6e33vvIgdRtFvB4Vp4VY9
1MTqtEZS8Tzv9d5+NnJXPCG3RuhkWo8qLpJm6ixDwwstaL4pP4bX2qZpzM8R
4U3NS7DYvchuYP2doRVEUt1Ma3DfjqRV9woeosImkjbNtI5UGM+UZCM/rB60
8Oe6sxF7jJIa7KFs1u7Mq9MbSTsrT7CvYE7UrnhAbo3QqTXeAskVFkm3qV7T
UT83Xuhz5RvhbLNtma9a7ZRm16pyXbWljg/jF/w4qhtY1zI0g0iqm2kNJpLq
QSRtkmkdqTCHaruPj8TNqfJPX40uS+25UtrroToJzUp2bEZJbyT9N/QOjJhB
ymrLrRE6mdajCoukD6tf1cYXlG5UL7SmybZEvMEuN7laBWUQt6yX45eM6MaB
ySUSIpLqZlqDiaR6EEmbZFpHKsxT1c//B7w3fTUqe8tRzmnUASW01md/xK4s
a/DQG0ntgZb1tr8kIryU/sQmYkxDqwqLpAMjXtWGk46ph7+2rPnNtSVirRr2
X1EDeyaY6e1ExKLvZ2gGkVQ30xpMJNWDSNok0zpSYaqXBg+u3uyUt657ayxx
DoiOD+0yyj6b9O2oHe7w+GVVNEfSF8KRSH0+KUdJdSgskgavuatZ1GCh56IW
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
wSHJ1pBfJF0Z3ZZQR1aLi6TnoreQ8gRyImkDGT5Dy2Vag4mkehBJm2RaRyqQ
O7ZNsPxkeF809Xz1vvNDqiWDU27sScs6a9s/6341VBOKVrb5c8OFNEbS2vhB
8YfTtA2V3xZ+PV27M6wuZY/a7RtXrP2J/fn17WQaRtLjTw8Tb+anGl+p1OAZ
THbRT45D5Uc3xbqcaLWxQ+UPit5CZ6oHQCRtIGU3Kp9pDSaS6kEkbZJpHalA
L1T3M/uDdzyq2hs9vOV418r67E5pB7Z8Vvadu7pfjYhI+l7DhfRF0odqz1f8
gtoi6Y7oiDEow+pS9ai9qjQ39WCGzWbWIJIu9zRqWIMza3dGP4MDE7Uhx0i6
OLotkxKtNjaSHo/eQroTwYmkDaTqRq3AtAYTSfUgkjbJtI5UoM+q+5mRoXui
T1irST7i/SJrUOdP4gfH/XKO++Ij6RTLerHhQtoi6dLa05XgoLK+Oe4fiH4Z
76ZfW5oe9VzUdkftSb/hjKIj6RB/mzqi57QarXwQ0m9J2pBjJA1O+uuVaLXx
06FOjd5CT5oHQCRtIE03agmmNZhIqgeRtEmmdaQiufuZf4N3KH66D0o+gpA8
TtYx1LLetO0/db8aqkha2bWPbbiQrki6t/50PRe/oL5I2uCH5wyfZyl61PuN
3kFzC/oFPzKShqcpGvRp1Eqin8F3k7Qhz0j6dfRTmijLxUfSBqlXOXlGFCJp
Aym6UWswrcFEUj2IpE0yrSMV6bHqfmZ16J4GV91WJb/4trbIEyX9cL89bqOa
IukZz9N1Nn5BjZH0k8iX8c30K0vRo4b6ttX+4lei8OIzbsFU5YS1eYuKpOdV
z8f8iJVcjXwG30jShjwjqb0vsi3nkqw2QST9MTKBB4ffaIhI2kCKbtQaTGsw
kVQPImmTTOtIRTpb3c+EzxCLzjCu5FupLzPt9sHK///L8RGEqCLpO3HN1RNJ
b6d8ujRG0uirqB9Lv64Ur37Upua5ZXPTbz61qEj6tPIJGfSnei3KACvMSdKG
XCNp9Kmtr6rr+yWIpPbNqC2kmkeYSNpAim7UGkxrMJFUDyJpk0zrSIVydzSh
Y3gfRe2SXCmGDwouqvXQmCqSnol7C2iJpL3eI03h03XDdEbSyFMxtEbSa94t
+a692eyWdnSnb0BKUZF0vPoZiZq6/lTEMzg7SRvyjaT26xFtSfRJnSSSRk5c
SiTNS/Ju1CJMazCRVA8iaZNM60iFmhm1o9kfsUeqeT35RoKLHs7zEQSpIqm4
jOt2o4V0RNLffJeIJZn3RmsktS+of4tdnn5NyXvUF94t+bt0/brxDelbkE5U
JI286Gufej2X1M/g80nakHMkjfrt/kiS1SaKpPa3HcotJDom7CKSNpC8G7UI
0xpMJNWDSNok0zpSoT509zTBO16tlC1tcJmxlWLQ89Cyy/J8CAGqSNpT2ebH
jRbSEEl/9w9akGSSH72R1LaHq17HtHNE2ml61F/eLQXuq+e7tJ/CaUVF0ujz
pfdHrEn5DG5M0oa8I6l9XZkYzyRZbbJIGjFnVYLL9OqIpA0k70YtwrQGE0n1
IJI2ybSOVCx3TxM8CU1cgXLZM6pm0CMZtlE36HKOD8FPFUm7rZiBSfOPpIFE
mugdqDuS2jMUL+Tm9KtJ0aM8GxoRuMszvGaia9azi4qk2yPf3WKeMaWZirqJ
fi/IPZLKVYbkGknF7BYhiY4Ju4ikDaToRq3BtAYTSfUgkjbJtI5ULDd0BsOQ
GJnwZ++4mgHfpdiGavn4Gd8zUkXSPZUN7mq0UP6RNHAMK9EZm9ojqf1eoFlt
uiPpmPq2gsNwXfI0I30b0oiKpH9EvbkbTJx5PPwMlhVJQ5F6QN6R1L4QnseJ
SJqXFN2oNZjWYCKpHkTSJpnWkYpVOw46xP/GFkUikg5660Zomc7K3i8qkn61
5mLEPc5Q+WJc0sY/ojdJEUnf6Yh7C+QcSQePDJ512CqRdNRAb6u2vK87kgrV
CUWjIumYL9O3IJ3GE4qG8+iSm/b0jsUR1Uf5UtrmU2VG0pG+4UM/+CL/SPqA
79GuukQkzY9xOybTGkwk1YNI2iTTOlKx6j/N9+FIGvsWyDuShlIOkdSwSGoR
SW0iqVbG7ZhMazCRVA8iaZNM60jF+ql2CVMokrZXImlvb++Ne0e6/DpHXOrt
jVifMpJeFEuJSFr5R2zKWU3+D0aIiqTXGi2kO5JOjHq6fPRH0l7pp2uff3VL
/lVAJO3qiouk4r3wd/pWJBcdSc9V35CBSNrVFRlJg89gmZHUacuP33z+zW35
V/6R1NlCb+XR3pR/EElzZNyOybQGE0n1IJI2ybSOVLDaDEP+C4crBQ/Xbmzy
/w7d2WB1Z61XFKU3w1M3WtaxfB5AgCKSbhNbW9looZwjaWiwoEuJFtQfSUP0
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
ld0KAAAAFOb/wOkHUQ==
        "], {{0, 0}, {2707, 390}}, {0, 255},
        ColorFunction->GrayLevel],
       ImageSize->{553., Automatic},
       PlotRange->{{0, 2707}, {0, 390}}]},
     {
      GraphicsBox[RasterBox[CompressedData["
1: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
JGlsIEk12YEk7QFAklYOE1RZFE+Slr6SK0uYJG3xcKuGGbMnDlTvNw8kqZ4e
LElliiZJZVJLUvtF0EhS9npECT6qRVhyVTpJeu/HLz6cvfTL+1bRJKkMJGlh
spekLzq+mjd74caLbGVwipwlJqoknSC+KZCkkKSVwvctLZqFtUxDQZKmQ+hh
chriBd65P/bPk/f79jlTykwXBpI0AJI0fgQmXhUO3VcJNCxVbgRi9pJ6lEqS
WpCkBcmll9SlvCXpUOVNGfAk76yVOZCklcIUYxsRbQ9fSFIT3K2ccMnZmE5c
xPG5/r6XueVwSNIASNK4GLej4vbZ6WPYEOl7XbD16fITAElaLCBJkxNNknbq
3pSluWeurMlLkr68debApra5rTMmTRrc0jywZeSkSXNaF3/y9ZGLf+aQWo/A
tHFZxFcOktTAz/59nEabcfbdKtq6MW2Qs7c0GY4IJGkAJGlslppqm299L3UG
K/BjtOGy2mARkrRYQJImJ5oknaN9U/rnnrvy4tnF/302b9KYFraAo5GOSjbv
O/8wq9iv7l8xtoa/vTXSf4feMz4/AW0aE61F7MjvabIXugfg9wd9zw6nqbd0
OyF1hzTbxjWUIruRgSQNgCSNz1y1wDO+8n3sNlQpGiONlF7/6jzHBpK0WECS
JieaJB2if1Pqeoo2+mPPXG9eXI16G+qnb7+UJvaLn40y1GFm6mfvr4gt6soE
dYqWQ6TAyV7oHoA3lfScc7iEHQi71Cxl68i2qDf+aCnyGxVI0gBI0gQYxu5P
Bz4aCPlIE9BU3ddeT50nC5K0eECSJieaJDXu0dKRewZLzi8LlZ2Qa3TKdPoP
CSK/snms6dYS0tzSMmZ4y8BGo4fG1kPPM7/e6kSdDE0iv6fJXugegHsTt7qH
zl7lX/E+phCyzv73r9JNPbD4uY0OJGkAJGkStHNCyeXAwwF9nWJcEEj+SJ8p
SNKiAUmanGiSdJzxTaluTfriE0UPNgxsmThpxpxJkzQyvWZOnI/ZV18PFoP3
f3/9gZ+vPjYGeHnn/I/fLJ0g7fw15VD66+wBfKgtvpGCJnuhewDOPRzgHf7I
DgWx2YuQPeyHsoN1NkOR+QBJGgBJmohuXUcCJ0kt+/xsNdhH2lqKtS0ZZAqS
tFhAkiYnmiT9zPimkO7cs1gytvYKLnPMyvauF8JZurxpgmW9vnVk7ZSgH7V2
mVlS8pydGxivq52y+XS8KRD/Xf/fMq7jqWkjOksLskNXeiOFTPZCVz93nHvo
f5X+6Rz/zXmxD392fq2T7vymImc2DpCkAZCkCZkvFfhaUZLu01YqF8wNbQbj
CpCkxQKSNDnRJOlD85vSlHsWS8Mlb/5s0+Lj/+k8SCvuz63xNGKvgjZbr8/y
7t6wT06mUJM39rR6H+O9tiWPpofwWp4R3QuSNBXHndsYODjHfOcPCSzfbBdv
fjmvjYQkDYAkTcqbqXx5//A7UZLS2aTL1UCG9U2U9DU8JGmxgCRNTkS7pCG7
BK7IMjt/dHz/89UsI0zIz856mOZN5t5LjRGo1/uGs2B1O8Pi/tIdeR/3zV9Z
ZPXCKncC0pgrWURXzZzmTbvX7J4NSZoKR2RODxxqZI1Kb53faSotcipiRuMC
SRoASZqCPSNZUa9//yDbUFSQpN9o34GvzQ1t+qF7SNJiAUmanIiS9Jj5Tcku
2+u88e+aueczizQJJ1jf48TDoZ4MdknPz6ENc80WUzBnPGfIngg7eUSnazn7
um78PstIq5FHa5wpwP0XXaQbikKSpmEtu5W7A4fpzuu7zne4Kdy5JUK1keAV
f5o8r7GAJA2AJM0IWZLSauVH1ZvJNgjJYN0GJGmxgCRNTtQNRYeZ35SMzF7/
T1jEXvdlNrEm4B/a1dn0bSFvZlP5P9ER4qYLulOt9NpGZblvscerz2jnawM2
eo0OJGk6HFM3XDt7UP5IPSbeuen8G/5J7PSGFOspQJIGQJJmhCJJp2vnh4bM
kVug+o4HJGmxgCRNTlRJarSYRsjETDLyjRxtjXZ7i/yh44vv3S/sL3T3ppVE
t6Byk+3aq6DWTcxD2uYMuJlb/NUGJGk65rH39AHn4r66/lj+FunO8RbP4i/X
IKRIU1MgSQMgSTNCkaS39NXKTmNDm3oTJ0jSYgFJmpzIkvS48U2pzSgjCoNe
ZhJzPEYTMvZFFI8FNhRdQEiTmP8HvQkZcy1N3grzdR0hc/JNonqAJE3HbPaW
3uNcvMV2d93jufKd4zdyip2eZ1AqdyBJAyBJM0KRpFaTflfR9aaGtjFtFiBJ
iwUkaXIiS1Jrl1GTZpEP/bfh+iyijsM/jWTwrWheC+5xbz9RfoR+ja11i7Dh
0t560utBYW8AkjQtzrRofk7oWve99ZbTDyOkjxDkLfdy/xMzub/5Waq5Akka
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
FSBJswWSND1lKUmtbyBJq4Ib3pPrF7itSHrTXCn7a4Pu1DX77y6/oJxOlECP
pdi9pIy33Q+6Lnb82P7Vtk8+bp09aUxLEzEgb9FR7Jw65C1JJwjX2BI9PCRp
RCBJFSBJswWSND3lKUmty/K2WZCkFUm99+ge+E7TU0hSapriQ3JDc4rZI13n
pXYtWW57KiWRpGG87r7ddbbju4PbtrQta50+afhA3phyTeHweZCzJJXsRuyI
Hh6SNCKQpAqQpNkCSZqeMpWkljUEkrQKWOs9uqm+0+CkN62BkKv2v35ku3KK
kKP039deas+T5banUnaSNIxSPdt8JelUqap7FT18D5Skb7q7E4TqThQqW4qW
h+7uNxF8QZJmCyRpespWklrfSh2lQyFJK4+36udEjTCMH4N+Tl+o0Hh21i6z
LL/XpJ2Qr9fiocSmoiRpqchTkv62RFKkvWKE74GSFGQEJGm2QJKmp3wlqWV9
2RjU0TOKOewCSZoZvsnQDZ6L/XtaoqiGOsajCBkduP2PdsDetd1Yz+kJJlpX
1BZpbKxqgCSNQJ6SdJU8HvRZjPCQpCApkKTZAkmannKWpJb1Ys/ciePfX7j7
D6uoM4EgSTPjoNfI+jMA7d/LE0U13jHuREh94HaIxV1LyBp6dC7GNowgAJI0
AnlK0npZksZJCZIUJAWSNFsgSdNT3pKUB5K0IvFb2aOBw7ZEMc0gZI8l2YI6
5MU+iR5dS1GYezKQpBHIU5LK9I0THpIUJAWSNFsgSdMDSaoBkjQ7PvCaWXcC
abf983+JYlrsrEMW7vn3fiu+1D56AIukiYAkjUAxJWmsrR4gSUFSIEmzBZI0
PZCkGiBJs+Oe387+yY4v2L/OJYrpU2eKnXDPTwXNeEOH9QKSNBGQpBEooiSN
Z+YKkhQkBZI0WyBJ0wNJqgGSNEOavYbWWdRkt+zkTqKIdhCy2pIk6WW+JR+3
EZI0EZCkESiiJN0VKzwkKUgKJGm2QJKmB5JUAyRphuz2W1p2+DlJ2rQfdKok
O3xgce+e3JpDkiYAkjQCxZOkA+KFhyQFSYEkzRZI0vRAkmqAJM0Sv6ndSI8W
JL5nJwmZ40T3SBO5S2sGGe5xQJJGoHiS9Fm88JCkICmQpNkCSZoeSFINkKRZ
4i9wYlPkxiW+ZxcIeddiN53bUVQZ9CTTM8hyDwOSNAJFk6SfxAwPSQqSAkma
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
        "], {{0, 0}, {2707, 
        301}}, {0, 255},
        ColorFunction->GrayLevel],
       ImageSize->Large,
       PlotRange->{{0, 2707}, {0, 301}}]},
     {
      GraphicsBox[RasterBox[CompressedData["
1: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
XLWdci29gqsmkv62qr9nm2mZPHf55i9PXvjLN+2DK6e/2v7Bmy8N8czRZ2H5
Y+mnjYXl9d1Y9sUBCEAkjYtIijqwLcpJrD7/y7qaii+99Wup6h41j3hqOyK1
PXF1RNLDk9y/D+Z/dCx66P7r9K4lE11zD9/xrIwVzY31fBKd5VwYgGBE0riq
JJLe2F3n98uhnDZFSaR587KuqFujv359T2RdqUCP/LWdmlLRVRBJjzgNNTTP
3XkpYSF/HVw6zC6mad1/qVbQ5VXfB9Gwr1zLAhCGSBpXtURSIXqyrgNq1f6I
iVSItqyrWnCpUKtJN59fWm4m1LHVek+pPwjlo9DeVIrOOpL+Pstan3Gf/FF6
aUfnWveiDjleemE6uu16fHkWBSAUkTSu6omkZ7KuA2rUvciJVIjGR1nX1rbX
qVN/c8Aq89WGbKsVRP92Tk+n6Cwj6TeD5JpM/vxRemWeWih/YDR8kF6Rjr36
T4LdK1B5RNK4iKSodQNiRFLReD/r6lp2OFXaZg25YD6iNSLTagUJeDuHpVJ0
dpH0mGw5rCP9o8rDjS1GyctTL/iDgE9ia+pLAlAEkTQuIilq3NI4iTSfSbOu
r+WgU6MH9qBfzddNN7KsV4Cgt7M1jaKziqS/GmdIp5arRdGHyxtcPzjSsizo
k3g35QUBKIZIGheRFDUuXiIVol/WFTYV7iUtDPvIGlKFO7nAt7MphaIziqSv
5H+gfFjWJRwbnA/tV1MtMrhxiXdSXQ6AooikcVVPJD2ddR1Qk6bFjaTZP99t
0kTSXIs16E5mtQoS3DVWyRE/o0/kbB/RuKPsS7kwXIj30izwYvCGzbV7oLKI
pHEljKRPblzqOdq1a+2ijpljQ/tpjK6Mveegfv2TYFMs75mxqMbY1XENs1uz
asmsVkHWBb+dr5RYdHki6cMjnxz+8Unw+A+EWFWGxfqdbRGj0iwvZMO+m+Zy
ABRDJI0rzbOkT270dB/dtXXtopntY5t8u8Ni3ecQSZG+5S1CDNiwadv3uTWn
XjulaepTa/isrOtt+l0+7e0a8Les3rTc8NZqvDPwxSzfO9m8Pr+PGXa4pGIT
RNL2vPApvhWet7Y67J0yetjggQMHDx87Nb8Ku5Lu8M/597ZTvst91Dgl1coG
aZ8wcsigAYOGjpyUX4eFPb0lCHfna/tm1pXIwtLJo9oGDxw0ZMR443tz0N8V
GQI9LbKrIZLGVTMX7osfhGpYft1XZF2H6rRcJImkouojaVU+rBIUSUXFI2nx
uFm1kdT15o1KO5KK0alWNkj7sMJiG3tRJM1Xt04jqWs7mUokjeOpcYAJGU8k
jatmImlVHmAqpa5XPpQdSbu61nS91tXLImlXl4ykNwtDrEjaVY2RdH9Xly6S
dnVVYSTtMmqV12U68DB57VJ1MI1Iej2/RppI2tVVmUh6uYtI2pu82E8kTY5I
mjYiaS2o65UPNdUfN83m2//99fMFA4MzacbVNlnNV/UtDPnbsxbV5GDAWymq
L5K2+WrYuKWECqblrq9akxOV41+9Cm7Xr3kX2bC7/AtNRX1G0sO+baQj6yr1
JkTStBFJa0Fdr3wo9672tavyLOnr7vHfv6Q/dE/LqsKKcWZlfnUG7HMqGLYb
zMhbgUFoXUnlph5J/3JVbebi8eYfrdm3QjdI89Ylekq+T+AnkXaVfX7RLHR0
yFNkVeSIqEQkvX/l9KEdH779avuktrYh7ndpcFvbpPZZi9fuOvLDtQqetdd8
Xk3dlVt8b0ckTRuRtBbU9cqH+c3ZzTasyb+Uh4DhyhTdAcfua9lU2MMMKW3O
6wkVDBfxvR4UhF4rqdjUI+meQs3ksf+Q+TBm1j9DnmrfuyTX2h8H3qGSeqW9
XtUudnvZlxvPze+/WLtgQou/ooM2HfrxQfH5Y7vx7fZFE5VnfrWP+yoDm6cs
3nHqVhkq43ZS+3m9Wual1g4iadqIpLWgrlc+jN22vHhJvpziPyx/lh8wzL9P
FmOzqK6feR7F6QvdVUHvlHd/6O7uPnPpUUWr5+G/l9Q0pqRSU4+kG52K2Xfk
TjcDwdGENUzHaf2b15zgHOODoPZNyn76ra9+uVVzQfzsx3P7Bbw3LiOX7LuS
zvLOfzynOXg5hY+pIaRFmn5v7LyYTm381usX2VZ8ThiIpGkjktaCul75MBOt
Pexb5sv5wvdOvS/E+Nyj4f6dcpXc5D9KVsa609Hd+KdnOueIlkIPnsnpz5GV
eP4x9Uj6sVMx58mxeebrTDs46gpIJA1n45d1O+A8afq19ghYBzG17Esu6ub2
iUG102qad/h5CYv76ePZIWFUDBzaNrK9vX12R8eCNzs6Xs//Oapt6OCQGVrn
fXohtffC8XbA0lr+SX9ZtYhImjYiaS2o65UPY+1f7ebB1shXJ9xTzBZieU53
sqBarl2ZYWmK0a99j7t+6lR/FkYMzqSaljXa49vCkspMPZIe0byJo80BkxPU
Ly3fBKaRJI+H6dNN6pX2ClyHYWVfdJjHG/t7K9Q4csaizpVbt+4y2lz4ZOum
zim6ak/4KsHSftsywV/S6Nmrdp/86Xqk2wLuX/vx212ds0b4S2nfcbP47DGs
DPq8Gv5MdTm1ikiaNiJpLajrlQ9j7V3tl3vly5fdUwwV4hPj/999ZzQqXdcg
9iNN/fqFVc81Zlsm1bRc0l2AXF5SkalH0seaN9EeNiFJDdPhf+DekeSopj1j
nXqlvaYErsO4si87yO33XHdxtr665rD+RnHjtvIF+f+f/fT5komus8xDd8VZ
2G9rlIY8GiYs33eupGaw/ji7Z8lY5Z1s25heLPU/cG9rTG0ZtYxImjYiaS2o
65UPcc/cuW6wX1/wH5fzL607CEd6dsmHKlvXEGOFhmcad1OQmVTSoaltlUXS
wl0OrmHTrEHz41cwLYHpINlHuqv4VpM+3UIt2dwV8XyZ/Wk3vrL9ctiU3kag
vls12q76gL3RFrbfdXZ0wrJ9oYuL68KeJWMKpU9LIVFIwZ9XppdbegsiadqI
pLWgrlc+xBnvcdh87T6NKAq7DM/FtirqDOyY5qY0zyT/c43al0klHV+rTzIv
rL5I2ql5E7+zh/0Qv4YpmRMcDyYnKnCeGjHmVWIvEbwOWbRicda6S3zguhtF
p9W2S3p6odWiVseLYvPvHGCtZ9Mbe8v2oPzVXbPtJr6GfplGgSGNM9MjYHFE
0rQRSWtBXa98CPOUzYjCAOuQkVOGOJfVPE8/VLCiRX2ltlnZz187V2odmEUN
3U4776TZoWi1RVInNz0qDPov+3fvSXA6EL8lK/JDZ7OQHYpWYJsOanUhb2j5
l6460iq/7ot6Ik0d2FT+AbPx4slh19+PWfd9jtz0a8hUKfl5ndWi6bjvSi5L
3wqUKYWq1joiadqIpLWgrlc+hPmE+obCAPP5ddcDTn8p75za7c3tCta0uIfr
7ZMwso973+e901Xzx1lUUPXg+yPdP5vH8CqMpCusN8p9c4bz7hU/n1YugQ27
lnLO/tLJ46fNQFuRSBp2mvTvCiy+4Kz8wrwd+aAZ1ntTt+xQ4ZWgWVfKmwP6
r7seu5KJXXpfXozos7HUgjStjdjWp1HR2kYkTRuRtBbU9cqHMJPH94UBVjul
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
mWWYeWI2zTXQIJIWm4VI6lezkTQ3MegbrGlyOFDRSGqENMMZZ0BhQWsT1jwN
KwJ3YCUVW7ZIGnw76ZYyLVBrYRpvW7FI+kmh1IX5ly+sDmDnl1j3Ut3QrvfL
MUvZpS0lwelWNyJpLajrlS/iVuB+5lzgLin+rqkwT+N78/P/Pk1xDTSIpMVm
IZL61W4kzY0L+Ab7WtoIUTySWs0cO2fRfi4saFrCiqdiWek7MI3yRdLATFrZ
p8Tmp/C2FYukhfMe9m7F/PnU/HMJFS/dCf2Kt8TrvGqlvpTS+i4kktaCul75
Yuy2A323Xh8L2iPZRkdfiHfW22mugR+RtNgsRFK/Go6kQR1rxllihEia+1CW
aj/2WLhuH/sEU7reCtiDlVRoGSNpUIeeJZ5gi+u10t+2YpF0jVOosxOcZ77+
IHm9S7cvYM0bY7VT9U5AKXF+CPoQSWtBXa98MW9b3xNfJ5/bA75QjgPRF+Kd
9a0018CPSFpsFiKpXy1H0lyH9iscp6P7KJE0d8Q85so70w+4FlTJroc0dur3
YCWVWc5Imhupre/W8i1Qy9tjSvy3rVgkPesUWnioybrNJMsT65f0Ky7itaD/
SVAhjSW0oE8krQV1vfLFXLW/J1c9I4yrcLuCfujFfEt98/brSXEVfIikxWYh
kvrVdCTNbdZ9hacUn88RKZLmHg2QBbcu+OhV94JWJ694Kn7Wtv1eUpFljaT6
1mQ/L+MCtU6WuuMvFkkLR4ZffcNKaxChNNr1lnqiF/I4sJDG5L1VEUlrQV2v
fFH2lfsZnuHGTvFCbmvg12pJjGVoZo/zsG9cRNJisxBJ/Wo7kuYuaDoymhpj
/miRNOAWxM1Ja50a3a0LJRVY3kiqPcVW8Uia+3eophox5i8aSZ1mY10nDjut
Qa8lrHQK+uk2YilO47CBhcRqtcBbJpG096vrlS9qpv018bR6Z+yMLuRyXQ3j
O/zyP/T+jrEMZy7zX/n/u6muhYJIWmwWIqlfjUdSb1gcsLg8kTT331LXbiLv
jY5qiKS5DeqJ0gUzqzuS5q6p7SS80plFJM3lPmhw16LxzdHpRtJN+UNBkyeS
mlFuWkdHwl6TUrDCOEL5c2ljfmiMvfU0oxT/fcH98kMT34NBJK0Fdb3yRTmR
VFxShgsnkuae55SO3n7/d3FYJJ0W9PBSofcmcbb0eocgkhabhUjqV2+RNFem
SFpg9t70Rq4aI+md3hZJH1dFJP0n9Uh6vjsgkiarbzpWiGO5nZpIGuvxpnwk
/T23VBNJS6kZkbQW1PXKF0UkzRaRtGRE0kiIpETS2IikRFINImlJ6nrli5sX
GElbrD+fv97mEZaidJG0e6QxlxDmv+b/bW3fpbYOqtqPpJe2T7Y/CiFGxF8k
kdSv5iOpf4lljaSX9q+ZO3fJzge56oikXtUeSb0yiqReKUfSXG5qmwxtY12D
hH2ImJWkhukY09amiaRyjxujlPzUmkgatxQ3ImktqOuVL85pLX+OMli4n3h6
ONf9nRoc1q7oPvGGbvD7vm+mEF+lUn+/mo6kN3bN9LyNsUMikVSHSBoqwVnS
woKIpKWr0UhqPwT0xDck08P2Hc3xynIieimHg0u5n6xeRNJaUNcrH4HzKK57
4DPhabql561WOdGApeGtqr0h+utH+B/F7Sqx4kFqNpIeXWR07NLgeRub4i+S
SOpHJA1FJFURSSOIEkm7zb1Y4YRIjxpJK/uQ06MH1h9fBobJnTGKey+wlIT9
UxFJa0Fdr3wEG+1vyR7XwCsi4VnMUYFv9jdEUo2IkfTS2hFBO7c4DZ5biySS
+hFJQxFJVUTSCKJEUrsjgzv26wVqJG1uOJKgngltKHwnAvpXEOLLOAUuDSrl
t2QVJJLWgrpe+Sjsb4l753FKyKeb4usX/GZ7v5Ux+n+KpcYi6ZOumdqWvm2x
25QmkuoQSUMRSVVE0ggiRdLc53I3Zj+5kHNdBZKvB1esP9oHI907U23vEnln
YpX5ZkAp/ySrIpG0FtT1ykcx3P6a3CkM251/+ShJYQ1hkfSrp+5uSQ4nKT+C
GoqkPZ3BrTYTSS1E0oRLJJImRySNIFoktXqJ6me2jF3o995uUb5diLXxaxrf
AiEWuV+n0w/tslRKsRFJa0Fdr3wUh+yvievX6Kqkb5o133NNIx6y27h7Y5xv
5beJFlBcbUTSSxvHFk2jRFIDkTThEomkyRFJI4gYSXPPzB/eMy7kcltce7aF
1ugvhWhYl6CysSwUouknddCVPprd7Zi4BR/SFCLeTlhLImktqOuVj0Tz0+2N
EiKp8TDhKvcjlM6oH43/5thLO59oAcX1+kj6oGuOsTP0PscUYHL8RRJJ/Yik
oYikKiJpBFEjaS43V7dnu+KMnpp/9XqcDgNjujhZv3m3+Sv1NHbh9/x9+TYm
rSiRtBbU9cpH8pr9TSn8FB2f9E3rI8+F5kZp7hS12s/YZi/tjm+KdPTqSHqm
c3C0JGprvxx/kURSPyJpKCKpikgaQfRImvuhxbdnG+Ya/cuA/IDWbXGqGtmT
940TAGMe68at91YqUWPaCz2F9HmUtK5E0lpQ1ysfyUX/j7f8D7vmRGX1F+Jc
/r9G4erE/ukq2XCU7L0pl9sjxJz+5fxQemskvbtrpnFiNOLJ0byBi44mWySR
1I9IGopIqiKSRhAjkuZy2zwPcTY8V0Z/N8gY2H/ToxjLj+BWZ1+j3LHXgyZY
4K7TuH+TLeWfl9ylzExaWSeSXus+3n01eSklsyLps3Pdx39I1sJqXaeyul75
aJx7Zr6xh4gEHVVK+Tx4Ss7vupn0aP4X72lj2A7r1dncgb7x29OMUYVyFZ0+
K5J2L2qNnESNzNpn5q4byRdJJPUjkoYikqqIpBHEiqS53AH3BaLme97RFyaZ
Y6Z9/ihGHULc3mY92DDnbthkX001p5qypZSFfTZaFtJnekkfoxFJV9iH66Z3
LxWfoyzykfTkL06XtyN3xS+hrlNZXa98NCvtjWuoPSTxAWi8EEfk/K4W87vM
7491Y8B35tWPuy9KqnKIXhZJ29eNipxGpTEbS9sTEUl1iKShiKQqImkEMSNp
3lfz5ElLMWqvdvSHdv+c4z+J19+8z/n19n2i/T8traSKEqKvcixoKVfj3uHy
kXSIUo9pcW/0retUVtcrH80/zqZld82U/3N9oqJeMdsSVt7z/XbpHcarX8r3
rL2pl0XSOFoXfVO8yCiLTDgrkbRciKSVRSRNpNyRtKhb7xSu77ct+erP+CVc
3bOgv1NE8+pn6davzPyHhKb9GVTjhr8eE+KVUNeprK5XPqJh9ob1qvn6iVA7
c4ruTfPyvPKeH7BL73s7JzfnRLdARtabIunjyGm04eVdKT0PRiTVIZKGIpKq
iKQRlCGS5t1bN0DZMY57a9u3N4vO9eLqsY0d6vWokb3p/KhJd2SIGQbToImk
QsS6r6GuU1ldr3xEx5ztynx9WZi3hMbXKcRHOU8kdXUl2pHfo5iX9sun9iLp
4EXdKS6TSKpDJA1FJFURSSMoTyQ1/PTeIM1+su+oVzqWd3Zu3Lp1d1fXZ1u3
buzsXN7x0jDdA6Oj1l4rS8XKTH98+KzS1fhOW41hxWd0lHAQ6v3qeuWjcr61
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
f+zcD2g=
        "], {{0, 0}, {2707, 375}}, {0, 255},
        ColorFunction->GrayLevel],
       ImageSize->Large,
       PlotRange->{{0, 2707}, {0, 375}}]},
     {
      GraphicsBox[RasterBox[CompressedData["
1:eJztnfeD1EQbx2evcvTe61GlFylSRKqAdOFFRQUBDxRBRREQpKogChZQigWx
gP9l3syTbDItu0k2m1k2388Pd5vZZPJsdnbySTJl0qEPd/e0MMY+6eX+2f3O
mTWnTr1z7tWB7sLek5+8d/Tku0c2n/z03aPvnlp2iK82q8TYnd6MOQDUE8ax
HUR+0Meddc9b+GcVXxpqNyIACsuUYtU+E/jHHfONv7TbPcezXlYDSsIuHnzf
z/yl9zvcpdIlmwEBAJqPAirph+Hi37xiHWEvHACKzPRi1T5cSbcLy4OfJSfl
SjpHWH6Of3ePrYUDAGhGiqek29QEtspSMAAUm+Ip6WwpodP9+OMtBZMUV0kH
SAnj3eC7LAUDAGhOCqekJTlhb7E+PwANRPGUVE64yD//93aCSYqrpOflFB78
W3aCAQA0J4VT0vlaCmOrbYQCQNEpnJL2VVLaeeNSK7EkZpf2TfGWwG1WYgEA
NCkFU9IbN9SUbvfzt9gIBYCiUzAl/eXGn0rKlmfoANy4qSRc4MHftRILAKA5
KZiS6uwr+gEAwBYFU1Kdy/wAaJfJzwo8+P/ZDgIA0EQUXkm/4gfgc9tRAFBA
Cq+kVP/ush1EWnjwE2wHAQDweOCiJ0Wvf+etl+dOW7zpk6e17zpBVo/ffnHW
zDWRzhUq6a1N49rYiPkf1B6dwqmNC6cs33kh83yz4Xd+AI6k2vTkS/MmL9pV
/R7Ho0MrZk1buv+XVDuJ5N+jK2dPXbzvx3Rb//DmxrnTlmw+XUsEj05vXT6n
e9HaQ3fM7995dfn0uVu/Mb8JauNJwtrnj0NbFk1etOH4o9p3nSSrY2vmTF/5
YdS7oZI+3NndyQbPPlB7dAoXNi+ZvHTbx5nnmxH8AKxIteWZjQu6F2y+mGCL
n95YNuO55Uf+1d+5sOfF5+ZtejtpDcWD721648Mdy6fOe/HNiI5bV3YsmjJ3
zanKed88uG7R1FkvbIs8c53etWLaoi2H/ogfbizO7l45fc7Kvc/snWtQYPQr
/HFuSrd55d9nsYBe+6Iz/a1bYl4NWXGu9CuvSZfiQb5Bs6Cykp7rFeS5qHKW
ybgyLMh3klsXXiwHsECMhnCMKWak1T7XUlbzHS8SWSZu/d+rz/Vnvab+76/g
COxKkrPP5PLnaq1s8U8HlVfs8xMl/E+K7HDKAzG8nGvnl7R8R9rivpbJ28K2
96aHJajrzYrRR/LuOCYwSz+bHWnz32vnPnBf/jBSaBe1lPXpYioSfJz1K1LK
Bl4YItZeXgq+qtZNFXKVy52x4MXNyuXhqPKaK6TMj5VXKCvpnYFhLVE5y2Tc
nxTkO/SW4/wlfjD5k35tTDEjrUYV8EvqUftL+o3LNerB2UNYx8StP9MCD21G
kpx9lgYfLO491q+CGl4ZiPn04PB3PO+vKrl8tHBkqWXUWu/gdPhfn8wbXUK9
cF97+39B+Yk80fywtkOoW7re0Nfo6Ru8XZKNfo12wKSE427CTSlF/MTv9w93
OzG6AADQiLzHy63ckoYZf6KchV4x7z1xZDudpSPvGX7HJAboa8TOymWHkNXo
coCcc0rIq8Sdtqe882ZggfRp3nCOl18OEqMhfjOmGPlXWq3HUbfkNdEhKaUj
3Pj3QBHZiH/8LdclydmjDx2piWTcuysdAtqudzdVdlTLzZZyXKl97F+NKQp8
ijfW2U2f5ROecFXa4oYW+YZw27leSu+JI8gaO69VCt/MND/XvuO7/ROaevEk
fsoljnMjWOBv/imFdlwLdnryiArGT/wwzZWSqDow3AJznM3eUe0cN4YPhMlK
ByOzlcudoS6Ln5WrL0JOfcXMA4vylXS/uM/SycqfPAGbpQ+zyrkjfjD5k35q
TDGj5OoIl6flzG9GHseJ4SG54ec1OknOHnxMUNYybgz/tyDWsbhGGQzo5mIq
dud8OoTeaB871NvFC5UyCUW4jV9WDFQ+G+c8FUPWMnKiZ43PK++vpdSR43nV
M8y4k9c7/V0M6x7rvey4JK/xQ29K7hzvX8lsFd6boh0wKWGPm3BWSgkf8dz1
PXdY9wD6P6XSoQCg0RhJ1YqY8hkV5POGdele5Rz/inF/q7vwWkSuVZU0flaO
87mU16hoJd3gWgDdcnnLu8L9qdIHT4BXP/T7iL9+sqvE9h0tB2BNSV+W0j/2
tlybJGdiK18il+KXCBUaUIx2326he4gjGGvl/7NQ0pk8mbxzIvMq3vhKSvX5
Aj/PfdxtK3mFkXOU5dJy/+FtfEk+v2yQdv4ClDRjVgfHsswjSjFdHZG4jPUf
jJzgX3/ko2K53OlKmiAr5y8pq97RSupe3I8mAfxgUFgeMsA7Rh1e6T7UwZZ9
LX4w+ZPmpKRHpeQdXl6jkuRMnOYLJGKvuC8uxTkY3BT78Rd/9BJ/q/RLbnuf
Xv+3gi8Mjszix3YxFvd6aJD02YiNPKnTb6lxi09XJU/Y/JS/T/MFfMjUaUvE
g9CnfGHy9Qi+eFhc4S2e0vssvf59Dl8QphtIr6Tv8KWWA97CQ15LYyIA8Cyh
VDZOufqYoa9Kj0wuh8v8mWelewEj9J96qqy8KmQnvd7fwtZRzIv1T3GVtXxV
TqD7msp48mnZSbkHvueMYmS84l05UnDpyYyeYmaudpC2SjUMZ5a2zksU0ni6
bjg5nLEvZSWNnTO/FvAHFOyi24BRBCcPevmBmCzt4xZPeL1yipzr8uBlsFJ/
LfLZWgpNTi00leIPV89Gx2+En8hKt8Ll/3hJm6YGyNrpVPfXGncHpKRHpUxm
aqFt4in6oz6g00oHWHy2SGXU1LSPbuQfCJf5NdTLFbJeFV37JMrKa7Kzgj+J
cI73YlOpTAyUVpnu1T5hwfDua2bT/Ngzj5nB8myv9pEGd+cJ8n08PcUITbEh
Xbmf4iknxBR6RiU1SjxIIQ2hWuB8N2NvKkoaN2d+gmj1Xk6oJJEh37DgZ/6d
8CO7LO//S76ojp1a5gcKvms/f31zEWMLDUq6nqcID0wOM+Va9eVwk80R5xm+
hjjJFVXZD8NlOojhWZaeVo6UcviHJ60TU+jqRLpxQKcBMeEITxkXLl8qPUOz
vQJAF3mMVyohXopem1OrO+np6PDK1jcq8qSQKCuaG4QFrfwGM/r1yk9mvGpG
HF1uKk/JZvhmptbvXsvW74SUX3jCO07FFDMLtYO0m6f8XnGdPRRAIIZvsVaq
lGUljZMzT9jjvdxRaWDT83xF/67SGOFZkFZS7vGEg5VTAm7zt854r+e457hy
+gAt8nlqCt3cvyWmDEo+MCtX0nNiAt2PF0yC5DK4yfBbaztV+HI3lzlasHS3
tVprNuBy36tqxNZ4nRG1zwtqNUWXKd9G5702svZJlNUTCuej8uJUr/YZJK0z
3at9hMbYa6SCUxNdakU2kSKSujLyBKmduSHFCLU1kB7j0C/9dMV1vqAAdgRb
lBg9TpeVNE7OPGGW9/Js1Jcls0P4UkthDC3K0aYHfYabKv5mQiuBP7rYKU1J
L/EE6dKU3xZeIyzzM0C5tmHmx3FaKeFNg8JLGXoaIN56pWH8VqtZMKmd83qt
TPOEicLyX2q2ZPHSZwGgkRnvnQGEJ+sXvBTxHiZBPrNcTgurFBORSposq+f4
2lvC5Ta6a2pQUvaKmERVTxYNut7XzpHfU4pFJWXKZ3vHu3OSWEnpEaD3uMs5
U+mkQDeKH3mv1wgraocmkZIeFg7jHiGj6kpKrijdQKB7Cgm7tJ3Tbs3wbIWm
jdRI9VKweIdR0YOSZoXfLkK4GC03OVGb8ZDPKFeYHerdSolIJU2W1S6+9tRw
eTAVAYOSygpEV60bo6OLjddw9LGYRCkWlZSOgKBK33i1Tzol9UWPG1qM4eqn
CF/qsEDG6ERzVVxvBk9515TDSOX7dNq984m4TivTbpDMlFfhWwwIXx92dBh/
diVyWNpNH+1rpdawX4kpynGOo6R9tWypEUJ23SoAqC+8BPd7QSznZIBuMZ5j
WFOt4l+opDHRSposqxZlbbpNYVRSKYkuqPtERxcb6gMj6zJVwfaUdIQW0QT6
/ImV9FOe4N8nfKp2qRVZLeR1QVhRO+yJlJTi8VuDfivkWl1JTSVoXsXCaMJV
0v1ySi85X6acm56n/UJJs6Ldr2vCn9JuP6WfsmYfoaiU4e2so/u0RSppsqzo
lyVM+OM99zUpqZR0xlRC00DVmNyOgWpoe0q6hC9LAu+1dk2spDRw3U5/wf35
x1DSIcJRfX3RoqX0gsZklq8t6Zm3aZbQY+pPutx7TUhZx5fVEQDkUw5fo/y8
3I3cNFiJ9vXfFOuOd/mCfPPyS+248oRkStrDl9UumiWx6xkADQ094XjtjihP
3m92gPqDep2nq533+C8/up92lJImzIqv3aImmJRUmfed0jIYRZM0RZZLei5n
TUl/1093XlJiJaUKOs4oIXpeHlokiZR0Q0SuVZWUztNzla0eMuVxbFVcJb0u
p7RJ+6E7VM8Jb1OvBihpVjzyTqCiPFGnNd4SXF6Ter1pTeKY2MZSJUpJE2ZV
UrOhhs4GJVW6cFJJyeAhDTWKl+WSHtvYU1L6ZNI9SS8psZL+yBPedpLQafpS
6cancqOSrjsMpkjla6eU1KVWYnr16ng94uRVZquryEjjo3Co4O31F+ikolwE
ldSzCl9OpqS91Cw4K80/BAAakMleGW8J2/FRs6ClvEaRVYVO1p+p20/p7o7+
ZUYpacKs+NrjxATyI4OSKuNIUVWzMjK62FDen0hJB9Rffq5K+rx+UnTSPbin
i+o4vTDmR3yVWu2dSEnXReRaVUnpxrnasoSP3Lcw6gPERP48dBKVrpOoyoeS
ZsRWT26GCreteMoQfsNI6r7jNT7XOjYvixhzlIhS0oRZaSX8Df3XR0q6R96O
Hh2bhwdKBLWsklokecM+WFNS6iiuPNamhvuJlfR2zCpSoE39NjjaV+T4LY30
Hk7fG9bdq6TRdbr2eO2sW0AeSbs0DbZdiReF2uRbU8xUyYqjdPDlREpqzNa5
54Z+RU0EoCHhJbiLnpqXU+h3cZO/o3fhTHitFaWkybKiZzDSGC1R3ZuUDV/0
P1yt0NPF96QkGpfUmpLSh1U685PdFUZJUxTGWMyVT7cn+aI0Yw5dDUBJM8Jv
JnEo7B/yuv+rUZt20hee7LQapaQJs+JrS91F6N6eQUmVW149GZVRGmviJSmJ
bt5bU1K6S6wMIvoBT7OlpMdNR/ob8+E3nRP+UFali4mllePgqyRUUm8wMX/E
AT7olaa9WqcFvphISV/RSisAzxTUlWkXDahRnoqk/LPoK5f90ylq2AglTZgV
9cqVbhPc5SnVlfRIRieFcVrN0AhKqnTypBZRRVFS40koA7w2geGphjokSPZC
t8ehpNlAXZl4e7qwp3F5+K9Z8iFVrSEOEUqaNCu+9mQtxaCkynbeyMxP4u8o
Ahohc4KUZFdJ6XPJV+jOA55mS0ln619IOUytaqPn+apuKiWCnp+bOiwpmyRT
0tMt4m5ocHx1coAf1aKpnXiqKSlluzpRXAA0EjSmIh9xr8SGeyl0dckbZe6T
nWtDipNChJImzIrc7lUpiadUV1LvQrl2NXibZyNf0VpV0k9MH5Z2VxQlpbGw
Mxp0NuD35cwj7PnyjnZ4qD8YlDQbqDjyoXUHigPqsP4ODTQpSsHJFLVPhJIm
zYqvPUtLqa6k3k8jcmrz2FzX47WqpL9RPD8o+fA0W0pKCrlYXZPC1IZDplS1
+apyhGmxym10vkoSJT3hz7VX7hJFC3vVtSj1nLycSEmNHw+AZwdegtv5i+fL
JZ26U1713hOtj/wm4biPEUqaMCuSLXlMGJ5SXUl/pcTvY+8oEr2Osqqku00f
lu44FUVJ6dFa1FDY6TjQh/kIE9OTkt4WV7vCU6Ck2dCnfOTeYuwepRwIPEIY
pdYpT9WZLPcIJU2aFV97gZYSV0mPqanJadXqP6tKet54/HiaLSWlgLTxtiqk
XlIS5SFdvGHIbjkV4avEVtLb88t1S6sUhzZIlZrKF5MraVazhgGQO9SViUb8
vFHunhh2MO0t3YeisVD6J8s+QkkTZvVLcJoK4CnVlfSJsf5JAd3Wbf1bSLGq
pGsiTwpFUVKaUGekulV6eoayAPEspisp9SyBkmYDP0zd/itvjNnBwbGcIR3T
TcYiX5kIJU2aFV87vZLui7+jKE5q1ZhVJdVHaS7vzqqSqmM2eanqqHbeLV61
R7o8WZw3EOyDynHwVeIp6Z2VLUHdEjZipcWP1HUp9VV5ObmSah2HAXhWmB8q
ij94NI265435vFsaYJcePLR2m7gUlX2EkibMKrWSeokfq6kpmEg5Cb10rSrp
/MgPWxQlpW4xbcYSdEPNqypfj2chg6XpVqGk9YS6MnlTsPfzx5DkKd4YnOel
O4xem4oJpi88ctivCCVNmhVfO72Sbo6KLgFLKacXwmapVpX09cjax6qSmh/R
T1USvR7p95RUefYmGuWUDTPWLlLucZR0Z7tQuWwIkv+j5XPq2pS6Xl5OoqRe
tgMrhw5A48ILsP8sYa5X1GliaJo5nfd0Xx2uKp63FS5FZR+hpAmzSq2k3iCS
yshQ6ZjnhdcybuYigm7T2VLS2aYPWyglFW5qqiRV0sdDhI3nKq08oKT1RLg5
tc8rllQc/WFyGBsRrvpy9Bf+v6jsI5Q0aVb8jfRKukdNTcMmP75RM7zah/pb
2lJSdcikcHcNeJdUHRPOa5j7UEmVlfROdAEJOxTwpepKulPcVpqUg5LMd0l3
y8vJ75KaqRosANah/j/+rIzXGDvlyM1qeoVNX/wRm83cUfMtE6GkCbNKraTe
U5oqjYJicmuEHqwtJV1lrGJ4WlGUdHp0CfpdzasyHwcblhbps/dASesJP0pj
g9f8fuJwnvSPlzJZPKhvRH/h70dlH6GkSbPib6RXUuOclol5MlkPNkMllR5S
V1NSmnYorpJK8ldXJd2grmlMpbpI614wUMq0PKWtgQlS7lWVdFyw4UBlyL4E
bUmlj5BeSbPuDApAHaCuTOXpjegHRx41yU/ZLj7ioB9Du5LBPWP1FBChpAmz
Sq2ktyjxj8jwEvL+8r7yr7xeSkpGU0FJt5k+LD2zqaak29WcnxklnSWlUI97
tXvT7cqF0civ5e9yyU+mt1MqKd3VgpJWgboy+cM0Or1pqhue0umnfCbOfXTC
+N1S4uWo/ElJ/9WSk2bF30ivpJm16/tk7SC59slQSaWrdprPr4KSfhZ5/AxK
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
6V/8INHF3m+8bXzLyNnjWr3Cu8O4joDXVsWvLt4s+YMlGCcUdX8W47Ye3OXP
t7Y0eHurmzFVSUPKP3/D4AgyfB36GueVtwi/NOoI0XaUXv9ND8iGRGXjzfI5
x7uA/MStd/+SJxQlqI3m+Pv0+kIf6aB8Wi4VXdUi5wduhH/Bf2u8VlXS4Na9
vYFa75P1hjer6cP695V5LMNnj/e/HD7WmPuyc8JMf+4EtecSNYkZ/C29vkm/
s2zajwBQR55jAkEqP9+GyhKuEPb5owZ7rHWU/7BDeTQiZLZZzL3LtLPKWfn0
KW8WKOmBckqgpNOFvF8SP1cpszbdB7wnU6zv+GF0mc7av1XWSKWkh6IO0uaI
dQR8wy+NpOM32Dv4Xfz8GAyR6d9b/Vo8JjPDHJhGRE81fcWtPHm2MbLYSqrn
Gt739sclPSK++5KWA50XWNtov2qepa0Qh4+9r3bgxKF+lT/ioRJfoKTBjyZQ
0rfEQ9BLCHabth8Qslv8XoMWDvyWeThk2/BghUNB2mq/mA73/HKEnKtQEk+J
38swYWcxs/JZVN4sUNLgtxQo6Q4h76BuIrIyUudap5dh7zEjvFcldRz3VEp6
M4j0N/kgzY1YR6D82x86gh+/Dr9/GK99ghqvfG+1XchZqGAmMI0qh8Ew97ww
0dFTunxkLaP6e2+tjM5ou791v9FUmV/1GitMcIMX3O2UVy/0G+O1cW4PrzF3
xY/cuzTpHDHOn/evRb5n8ANd6Ls1mPdf7DkfVj+b/IdJPnR8HwsHVb8Q/86r
iXqP9f6XDJNHAdBgmJX0hPTrClcQhqH4aWKY3K3OFSxkJimpPyu78uutmJVP
UiV1Toc/1knGHFNybXFLGG3nAe392pXUf7Ll0uuzyHUEXhO+QX7uCRZOldco
P+5/MiR4TxxOkGk0mpI6t3qX3yu9pWXgvh1OIs2m3jWsEIt1wjc7LHxqH6TF
VVK/O5lLV/TIRMCJUlL+gwmHmzcpqfNknlBYlYGNI5XUebVkKKkVs/JJqqTO
D+GUw4MfJz0qFfhpTUcYbYvheoen16SkYYXd8nbkOgIft4YBTXWEX0twNR08
7p8UvCcO65a1kjrOWUGrnzdOmVTmx37hmkP+8dvPcqQrk53hR+wlthtLoKTO
xZHhSi1LrmrvvzcgfFu+5g7Seevbs+Wz2oDyfeGgLjK2HjgQXh63qXM5AdBs
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
LEIxcw==
        "], {{0, 0}, {2707, 299}}, {0, 255},
        ColorFunction->GrayLevel],
       ImageSize->Large,
       PlotRange->{{0, 2707}, {0, 299}}]},
     {
      GraphicsBox[RasterBox[CompressedData["
1:eJztnfeD1EQfxucaHJ2Trqh0kKLAqQhK0wMRAaUKIkVfunSQopQTRI8iSPdE
BKTIf5k3Myk7dTfJZmd2b5/PD3ebyWS+3ySTyZOpY787tGZXIyHkWKv/Z823
JxcfPfrt6bWD/Y31B4/t3X1w547PDh7fuXvn0Q++o9FmNBByuy8hHgAVYBHh
Ge3anYpyczQRafrGtUsZ+GuMdBaNa127BEAW2oR8/LlrdyrKwTbpse1z0rVL
yXg2UXK8YYVrl6qbg/GV6u3aFQBqj26fgfT5+dX/8cy1NxVlISsnJrFXwaPt
w+jGBNc+pWclO4txx1/4v5/sGEU33nDtEwAZeOwXOVeZPKOlkGtvKkugSOdc
oL/vretHN+a79ikRm5njbxym74ane16nGyNd+1TVUEk6+eS1HX0IGeLaFwBq
kpG0nHHtROWhkrT/03jzXJO/PdyhP9mgkrT1r3jztxZ/e7BDfwAoB1r2DHLt
ROWhkvT1wuY2etoz3bmTHCpJW27Gmzdo624/h/5UPb4k/ZD9eIWQbx37AkBN
Uj+StInffkl7xrzvypus+JK0QQigmnS6I2cAKJP6kaRt/PYZet5bXXmTAipJ
X/ABrbXZumSNg/G7lJBmp54AUKPUjyTdJQTsoeddaw2GviTdKAScoGdx1ZE3
AJRH/UjS20LARzVS6PqSdLkQ8At1/Kwjb2qAk23Rt8cMQo44dQWA2qR+JKkU
0ss/7/FOfMnOSuUs+vtnMcqJLwCUS91I0lYphJ74Sie+pGKzUt4MJVKNL9Dz
lJBXXPsAQA1SJ5J0Z/tHUsjKGjzxw+1yX4PNNXgWAATUiSRd3L5NChlL5C44
VcmZ9nYpZC+9ZY+dOFNj+OL9aelYAACROpGkKn/QEz/n2oty+YeexWHXXgCQ
hTqRpCr/q9lSlzr+nWsnaoFDhMi1IACAktStJGWF6yLXTpQNPYvZrp0AIAt1
K0lv0jM/6NqLLNTo9HkOqNf3KqglHl85c/Vv60nd/6XznnEnJ0mfn9y6fv+l
HHzjeXL9zPXqnPKUTfGZ7dCnV378Ldt9fHL13O3SsVJAz2Kods/zP87eKH7l
S8a4f+7Xv4rtT8qz62eu5JEOKIOHv5y/nlOTa4qk7nRe/Me4k5OkD45s3ngo
74F6D6+cufky5zTzgZ75l9kOfdh1+nKKEvWPnztv6vfc6/zNfGtMNPiO99Lu
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
6BHxyk3ib96y1PaG95C7AEnqCEhSd0CSAgB6BEPMmtSOA5Cket5j9+B2IeBl
eFumRQFrpSs3krt36aeBIuTXMrytHiBJHQFJ6g5IUgBAz6AJkrQqmSlL0mCV
e5+74fZ78pXrX87NI+Tb7M5WEZCkjoAkdQckKQCgZ/Co0SRJ71uxD0mq5312
D85zIUvD+zI43B4hr3n/L3fz0r6fnxDyeRneVg+QpI6AJHUHJCkAoIfw0DQT
1Ekr5iFJ9cxn92AnF/JfdGMWBNv+fXtDPGZr4eadSWnuLiEflONu1QBJ6ghI
UndAkgIAego3DZr0uhXrkKR6PmX3QJBXr0R35je26f+YLR1UGOKUdrL8K4RM
oP8fZ3a4SoAkdQQkqTsgSQEAPYf+RIcddQJJqmczuwf9+KAD0Z3pxTb9H0vl
o3pHUabIe0pwmZA2loBDQZcLkKSOgCR1ByQpAKAHMRmStNo4FNwEISy+Na/6
G93+/83yUeeiGM0pzd0kpDEwkdnj6gCS1BGQpO6AJAUA9CTWQpJWG8FN2MoH
TSCvtK+avWvBrnfH3+v+TCdJ7wyN7t4vKc31YbfhKSGHynFapjvPxBIBSeoI
SFJ3QJLqsF/4UKM+N7suXf+zO8C68dtXLl2778I4s37n6qWrd51Yf+hbvHvt
0uU7TqzTk79//VLXbTfWK0F0O+85uqD7RvBqtG3e95CkjgnuRAMfFEjSiwsu
vTuetDZXSJLuKcdpGUhSi0CSugCStILUoCSdWXiNNvYZ/KNd48sKxhtaB+21
atzr3s1Z7z1oo13rD69yAqZloNKnrcJ0NxesN/d/z7L1StC9RbidW0ofka95
SNJqQydJm0tL0mj2UkhSB0CSugKStEcCSZrOOCQpJGleuJekbW2D+rX26tWr
d98BgyFJ3RNmBm0gha5xoJs6Ntx9Kr05/++pHCUp9eLNvBJLYRWS1AmQpO6A
JJVgE+Z9mLs7JVlNRAbZlKRHJOOtViXpXWmC8ya7krS3dPJ2JelgyXrtS9Ir
0jxMzbYlqQIkqWvCpV67hMB2MZ881Rz3QbDrq5TmgttwgpAvszqsSZGQGXml
ltwqJKkTIEndAUkq8YIVPqty96cEvxGF1+1ZV423/WPPerNivdXiEtWDFOuN
B+1ZH6Ne+rTv32pDXUGp7+9uPYIkdc3iICNIE9iL3y6PNMfdDnalrSIgUS3p
+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
        "], {{0, 0}, {2707, 
        301}}, {0, 255},
        ColorFunction->GrayLevel],
       ImageSize->Large,
       PlotRange->{{0, 2707}, {0, 301}}]},
     {
      GraphicsBox[RasterBox[CompressedData["
1:eJztnYf/08Tjh+/Dh71kyVSGIgjiYCgiigp8VURZiltxMcSBG1QEHCDKVBTF
xXL9k79Xf7lLm9xdLm2TZrV9ntdLaa7J3fuTpOnT5HKZ9+q+bbuGCCE+GOn9
b9sr+x98//1XPnligjex/Z0P3tj9zs7XN7zz4c7dO9+/+1U52/95/50bLUQN
KskL3vYR78lXPwmxQxXJklHq1URju42Tb0xLVv1YuUy0OGFV38rZdxlFsuSh
SMlwa8HfZaH4pu2G4nlJ1bRHK9kmC/7WCg7Jgk9rTUtiGBdZTbdGSsx5psmp
CVY1Z2Th7qQ1P+jeRs34Ty7ysFn2sXDV84sqPW6V3uucV5atDaaWO+cx2SVn
+batyJ/MEwFDDzVKNzgbedsq3RCZSRbM0gvekyXHmlcLJmpTqFcz6ytrTfCB
OSXEU+Gcp9X6PJio9lNykb2R4qRVRY9gKyIlH8qSr6wF57gOSKkYIWu6Ti+R
BTfZBdE9tJ090LGazM9hZB7/I33GqmdipL12apYFt7WRUmOx4w9TiW6355wp
S0dEKng/9uAzNpjao+b5tWmQ3+QsT7ZI++9jw8PjziIz8POuDGKFOW38VS9G
Upl/oqrg8RaRAKrMNeHHc4iYKP95Q5ZsViU7hPg6nFX7bNkcitRbJ0ZJE1aV
WkmvqCoPx6VLwlpV1ZS3g4KH5XRpSqq+pgwp8jgrC8tS0n3OI73/o+ALq3SJ
c15Zttaax8kzjXnaVtJ12tIDj9jl9tzvWaWJlVRvzuLBNtL2ByfC7f1mfSsO
hit6QBOE2vH49TkQV32MkiatKrWSzm+aLhHqwz5wf2iBcro0Jf1GVX3BqmdS
pL2ilXSZPedsWTokUsErzlUjy8I97tX4veSGxjxtKOmRydqCU7VTI6pghyuD
uNWcTq6kbprmBKgMcm+d7r+8199vZ8iiy413tc/5tPj9/Ye46mOUNGFVbSvp
MGvBn1WV9g/6dLw56EhbmpKqFWufZy5VSQ+rFfKfNef3qvScVXqH8ygpy8Iv
rPvi95G3GvO0qaQ7B8Jlr/9Qf+dJZ5BdVmliJd0en317y7T9wt1ydfzkvxZi
Za1+/m2uX7JCX+O/xK9P+0pBQIySJq0qtZKqc3Tj4tIl4yZH2tKUVE2J81Y9
pSqpOjQvtOdUkSZFKrA/3WGSUEk/iN9L7mrM01pJZ4dLDX3kst1adFlVer85
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
        "], {{0, 0}, {2707, 
        253}}, {0, 255},
        ColorFunction->GrayLevel],
       ImageSize->Large,
       PlotRange->{{0, 2707}, {0, 253}}]},
     {
      GraphicsBox[RasterBox[CompressedData["
1:eJztnYef1EQfh2evwlEPpPejg3SQIr0XQYoUBQQFDrChiIBIEyz4KlJEERQV
UfC/zJuZtKm7m57NfZ/PB24zm5n8NptMnk2mTHj3zO7uJkLIp73s/3a/c2HN
2bPvfL5noL2w96NPT5/86MTxLR+dO3HyxNkl79LVZlUI+amDEAuANLlHBPIO
J2t2uJ+7uXNsh/NqRN4hxaLZ/Tz9Rw9yXjRdzjskALLhas+uywAAoBQcozX4
V3lHkQdL6ScfcNFd2m//ECStj3ONKBa/smvx6+7S9cF0aXOuEQGQKTvpMf8w
7ygAAABE5D1ajd/OO4o8oEq6mFseQe+Y5hZNbKiS9uGW99Av9khe0QCQOfvo
If807ygAAABEpEcrqfikfoC9J17KKZj4UCX9l09gDRP+yCscALIGSgoAAA1N
j1bSu0LCA7orPs8pmtjYSjpPTOlvf5yx+QQDQPZASQEAoKHpyUpakVI6aeeg
XGJJAFtJvxdTTtOv9s9cggEge6CkAADQ0PRcJf371k9SyrsN3Vn31i05hX6c
HXmEAkAOQEkBAKCh6blKqvKI7ouP844iOeiwUIPyDgKAjICSAgBAQwMl5aD7
YkneQSTHtIa+6wtAOKCkAABQN+f2r5r9yoYTv2Zb1PUdy2YvP2V6l1PS0wsH
Nw96ec/zBMLTcGbL4jkbDv2YTuEJQfdFV6ScN3cunfXK9mtxNm5/pXOW7/4o
ThESq01KevPQpjlLth//zZy15hof7Vg4b/XJZ7FjDDi7dfHstZ8mWCBImsfH
ty+ZvWL7pdyK+uK1pbNXfmB6l1PSY/MGNb00681YIYbh030r56zYcyaLTf1w
ZOv8hduO3otXyt2j2xbOXbXry2RiypMvD220q6oTv0fK/PXhzXPmr93/XcIx
AZAHM+wKcI2Q8l2V21KH+wSTi7zyj7nULpE4RVGWeiuykjZ6xc723veV9GW/
yAHJjzb9aX+/9KX24kEvjDcs65nyedWUagjrrqYp+5Xs6wWE7GeWjGrp17Xj
AVtgnz5UyQ47/E9XZXB66YsVP9fR4CttE5t/ThVz1ZDAuxum9mkftvw8W9iu
PRyvjQiOnoUvdIXUXOPRcO/tvnSqgTP1fVdVd0CXV+IyYdVDdGmWku18mCME
mFCPjwl2ykT9yv8sCI6KjrfNhT4Rv+VZMYqSmOvlmUGXFnlbWOW97yvpRL/0
l2pUj/VS9dh9mzt5dwrvTBJzac+2UNwJPhqZ9gv/zlU1PiHlLLfuT1OCUjo/
jB1UPA4pgU/mE+gO/UdY5Vsu8+Vh/gepvFKl2C7dr4XrI4PdMPpaah8QgIyg
R7I4tvorNKlbt+7lVufIHzSijf1dWbVUDlVB6i/KpldQUuWWY9EMv2O5q6RP
mrltkrU1PnlYuvjCm76y1nqvbf/4Wfy8li6lGsK67Gq6Qs7+j7HAeX5ix1W3
rEqYkh2cC+xLrHacVF+gYhg3nG+ydUQ7+1vhD6E2MdfP1fbF6SZ/vQ324gH6
4i9pHdcmh/d1/i5XS6m5xho+oLmW9abuM4XaAV9zyX34VdfRd/sp2d4xFQRC
8CHdefuFJPP+dH/bto7qZH/bjffXfhS/5X4xihL4uyUotOWRZQ31Fnw/dJX0
hwq//Z3VyqybKsfuNfHkbTrNvdck5noUN4zJTjmDnR1HZnJvvS9s6S8l6MPB
qtOclPZRzo2CAdFuMCbFOmXHCteiRXbCL8IqnwV53WPAq6pWGYslmhvmbj3X
Mcr5RTE61U8JQOrcZAeyMAUlqwuHatbdwKoA94nTDXoujDIVK55JqpKGKMqy
+ghlPTQraRPptZ/eULg6jr39arUPHho2uSV56QJ9/WAxITcLoqRfyR4uvl1H
yYz7dIHNA7XffmFsIkEkgndeo4sDrrDX34+mC9wIoyGUdCS/4kBXFcXB8r+i
h2jTUfb62RL6/mCpkNprzGLlDz593/r5zFhCZiWgpEJ6LyhpNrBDrS+fcont
zy806w6kb0x1B/LdS1XrsGYtSk0lrb8ogVa+1Cazkj6xf9Uc/s9ePO/c7N9S
T+G1MB+7W+hi51X2+rtRdGFh8GaySvqU1QWuY2+mr3sHb9atpP8ydV7stslh
l5PL8eKKR3QlvUarquZj7PXTRfStIaZiVSW9WeEOjj/n269b5F/vADQUzmOk
TVzKXbm68mC3leYEy7TurPaj7Au6vr7JVKiidrF4RrCWMpeH2df6GUp8TEnP
DyT+U4+z7FR9rUp0YZnNojjgLT7tTfrIYXTThOvVU6rAbvcIzdK+pyl7+ZQT
NOUTPuUai6vjEL18XZ5Mqyf166un5HlBLvuYaK8W6C266hEpcStNDK5j7HH7
y7WzKTi3Tpbet18+3FIhAzRKyoIPZqj6ki4KTlLHGgtpUpM3pcCDvuQY286D
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
28vhYZZxWFDScgMlNeKeb2Pl9Ip0Qjbt59813FytRRe7Tv2S6Lexk8bxR3Ll
hQJKakFJJaCkFChp3bTm+JuaDn9iItMbt63mOI5kGMYpcxi9MwyDAiUtM1BS
I964+HL6CfWcnOo9Hf+un5vSFnJjM1lHqsfJfhtZV548TEm/Xj/G3oudi7K+
0cGU9O62CW2E9Jub2yQjrpKeXDiQkOaxm37ILQympN9vHtdCyID5p3MLw1HS
Y/P724flhG33MtwwU9Kfd0xsJ6TPbHXOtWyBktbNQaKbIi8rqrhgYqNH18Eh
cxiZNrNtMsdxIMs4oKTlBkpqZKl7vilKM1ZXObx89PJn2zv85bDj1y0i5APL
+jPZb2NJfn0DqJLu5iqxvpn2U7WVdG97sPH23VlunIOQV6ZzB8mkLDWMw1bS
N7jra+838wnD3h0r+SlgZmjH9U0DW0nfCM5N0prf+OsWlDRk9kOJxRKW98wO
lmm12m6OI0tff9McRsY3PqCkZSZmlVFmrrvn2wDlHfnRvYZZdW9mCem/54W1
kk2F8Szhb8Mu7r8kywvBVHmPNGXYM3Or8n1syG7jHEoYQ7NsheazTA6jsj2P
MNTdMerHbDasXk1XZrNhHVDS+llLyJDEYgnNcHP9/m2GYVw1hzEowzCsgeY4
fs0yDihpqYlZZZQa73xT3tA8upfZWfdWmN/27kvIHsv6O+FvY2JeLqbtHNB6
KauNq0pKKsey2jiH5sDIozJdqobR9FEOcWh2RzbzZOtu8OTUrBVKGjZ/UqFE
oFlz3DjsyjIM5SdlQJZhVLkVk+1YrVDSMpP5Yd1AeA8Ztyjv6B7di1ypeyt+
ltmW9VfC38ZP+X272jsMkzLa+BLdxnOY/E57aGQ/F+A0XRiZdtd10IVR6c5g
w1t0W+7MrN2ACJQ0BHMIeTWpWMJzR3sCU5ZmGscEYxyZhmG+XSsPO5MuUNIy
k/lh3UB86p5vTco714znZviqIsgz7e/3kv42BhNyONEC66afdrc0P8hk4xP1
X8r5TDbOoQ8jsTlj62WYNoxK1mL0SL87MpgacY5+y/n09IKShiDh1vVh+UF/
4GTenGC8KY5sw7hgCiPb37dQ0jKT/WHdQHgnnHLL03hqerSH34hHovduLtsW
mGR59dPLsGcyeWA80rDxPVlsPOBPQxiZtgCz/KFyFY5mG8Y3hjDSnxrRNMTk
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
AAAAAAAAAAAA0OD8H5cp288=
        "], {{0, 0}, {2707, 301}}, {0, 255},
        ColorFunction->GrayLevel],
       ImageSize->Large,
       PlotRange->{{0, 2707}, {0, 301}}]},
     {
      GraphicsBox[RasterBox[CompressedData["
1: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
2btjsTOfTtCUEkxJScOCE123Lm1h9UmLPMeTus80e5HRyWW/i9/SVn0cjtuO
ME3/8sfvv5hGaMNeujiGf0zw3q2+KxzMp5Wf+xEZqfnDn0oEvj86m2WEvHOi
68p+9uzdeMlS+VRNovKbq6QXhV+3yymwLk6DP7t8s/MD1vRIqfhd2IzxTe8d
7/r56mcjnbScFgs31JzVkMp8XMPdNwkeGX5ednZg3w8v3eo6uYRt24TKbw+6
uz+gIUP5A2r/+Zt9dh7pVuZlKRCnHmlccub6zfMbWfXT96kUxZ1Q9D3hQD8q
orAAcDxUKie/rRl9tiIj91+7eXoRuwfLr0DDI4hK+qFS6fAhwrUhT5d8xAle
+NWNqwdok7kfWJvQuUJdX4G99O27rrPr54sbB0i1HOU1GtL0wakb3+5gd8je
D9Q0+Bu4y3I+cLf78czFU1Knn8egbZdvfrOmF9s7crKhEUA5qRxrqpuDKksN
54PicEzjz6O33beNlEpbSe9z/xXOdrnmJQmVlF5f/uOWH4EbqX0qv+IEzTa7
f/JK6rw8UspRNSmXuEoqqIi+wTfl/jvizlGdRd1nmr3IEHTza39LBwTF4Xgo
TOJ4hNvnlVbC3uf+1X68Bs6fUyqp9aswr+o8S0cEJbWuciei5oXt3iZu5eYq
nY1mCtn08QZOia2kTrswh0xnSzo3RihxM/eqhq/xKwN4+iG61rRFcUeoEHS7
zJvjfp0fqQGf7UHhVFNS8W1IX3lg/CgRaHhEJeUrSvWD0uUWLqemG043JYbm
DefzEcIWDZNHR/ymL/9zwI1O2TGykrr9shi+lxzg50du0nw1C40ASskhD/bl
8QT7CEn6b6kSh+PaK94RH0On6QlWUu81DSETH3Hrd9tpsoulrZKFmMHtTg4/
WF5QIth87N75x+63ZNwrk/K7mPE2V52GruDjV0nK5SsvlcpUhk+8kIon/yqU
82vPYhdWn0r8ry0TXX18TZkx2Ir14V7c0o+cmmfMySpxOD6reMvblUwoipJa
993mRw18f27rmDeH5SwvB+nxhmXNhHCnvgxPtrp7bGpQs2B6Nm0KOJs8JfXf
EQgnos/5mY609lpxIyAbl62u4/WZx4+epuashpz0Qk7TpT9mOFXmfPl9n3Gu
LHX3YK93hfGya0hJbe5sGOuUq3Hm/zQ/e0pqPXjVLT/mEARlgF7x7El2gXv5
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
iUJJFepCSQdlOudmlBLImBt/oik4k98MJP8yOHnzw7sekh/6J8ROgq5lvFx1
x63KWdO6xXqWeJ99fdFOwP6/jZDP5d9oooedgdiaNKsCAFIzj04o2qbWzWhL
KvCl4XFutNhKOuUd+Q4GJQ2iJyqpZY2kJ0Xb3LGrClLSAUQYE8ej0WBbUmsE
eWnd1gijobakL1vsbdiqJt+cxfTih5YLzW+XH4qfBJQ0Cr6SkiEplZSuCSUF
oAigpJHIS0n7KQcCShoElLQIoKTxgJLmxK0NkpL2TpRMkJJ22zAldf5vosu5
jd8NQI/h0OLd3d06Jc3liqsdJU1wJ4mNTkmnQUmD6IlK2t3tKumhQwUp6YFh
3d1aJTVYXxya0N2tVVI7j3/TJ/9yb9/ubq2SZlDnHWJsW71s+eoPd9M/4ycB
JY2G326XKak8bF8odETEcScDlPTuAM0JmbZyBgAoLNFcai6Xs867ZpQ0F/7W
HILUiUJJFWpYSfs4Z0WbqSIkIWgMJZOtSTUPycauCEpwr86BRtI3irGtrnN+
rhzE/XTUknlx19/Mn2MDnXlFOQ6pQ3otN1RyAIDPyMDq2Uj/1mpASXk0Sjo5
daJQUoUaVtJV7i3XVBGScC9jXWQEO+NjE8mfymMbTFHOUpWQyhwIfXfY/6yM
u/rcyjmwhz38fSBHUIZPGG2k2AAAgcBXEpn3uYeS8miU9HbqRKGkCjWspL85
p0VBH+1dzuagc78HOqmJPveWtS2HbTBFOUtVQj4TDmTsGXan+OuOpm9M31Zi
yOeKuc8CAACfICfdnXXGUFIeVUkNzLsNJVWoYSW1BpRBmzRtSY3rnK4tKcOQ
jmvakhrfBkOUs1RlRDiQsT8ljJPOhKm69MVHJSOlBgBI9NfXzln0QBWAkvKo
SvogfaJQUoVaVtJvSnEnPKyvLxpN5hE0KL+p9Dfokx9kKn1zlOGI1wbCVLSn
4649WjoVeil93RroIFCnB5k/GQEAAhMzrf0DgZLyKEpqYuQpKKlCLSup0/Lb
VAkSc1s7mv0Co3m86KPLY4Sx9Du1dV4Bk7SGUYojXhPc4Y/ktbhry0qqVsB9
nf4Vfgc/M8UGAMis0NTOizPPFUrKIytpXxOJQkkValpJWccfUyVIwWBNhWG6
iet4TR5d5pJ/2ltN3uiLXkPAfSLDD6J3J+7KmtOt989CjFecPk9+RFPlBgBI
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAA0PB/BAlC4A==
        "], {{0, 0}, {2707, 300}}, {
        0, 255},
        ColorFunction->GrayLevel],
       ImageSize->Large,
       PlotRange->{{0, 2707}, {0, 300}}]},
     {
      GraphicsBox[RasterBox[CompressedData["
1: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
SbVX8RD1nCVIObZWVkxJWXnVOcYS4PVsiPwFqzkYNCSZkn5OiNyXVKukS4Lq
Jney4ThjKAmUtNFRlbRNCZGIjeBBY2VWUlbvpF/i7P1LEiXd7V1h/iTn3WqB
ggw+lENB34UttqksDkakhpd+rKeSrtUmz6Z85LqIxSmpPhUz1krKZiNW3qCw
LjPcwF2DkrKNB6jhJuyVVNeb0GtyClHS28E98ng49nNAsFmr2LVP19AlSX2P
Gm6Z1FhlR55VQpiSCrMKOf7bVdU8mAaIwwpKUFJ2kxInhfFn8rVOOfaaqZaS
fp+yIbobLIbEDfelH4UJ3TRP0C2U1DuUt5UgWUnDPeji57fVRfpZCYKSNjqq
khLDBZY8Qi1aViVly0Ery5LRsHgl3dDmXWFB68huM8oMHiwKOpOCEFYjnteG
So11PZX0OW3yi6TQOCVlqVgspWetpJNUVXDYQ0KhLTAoKdvYMB2VDnslZQov
P3hhd/RClJSNAGL31OBZNnsrM5b+tUJ8OcNO5Dcx6YlEKmnypFQlXa6EMCU9
4Yiw06WZj5XlLyyqXoKSskJskZJZqp6zBCnHXtjVUtKTqRqi7f4isOLLcOm6
dfxn4OKmNCShkrJOIpOUuJKSsunD2WvYy0rX0xqsv424WAMNgZI2OgYl/dIU
P0mEWrSsSqoZ/OkkUtLDo4IrLHxkwz4py4ix0HkxuwL6EKxGKMsZtUmVjn6s
p5JOpqkrb7FekDKNU1KWisVEvNZKyl6NKpMNzZWKaVDSIeoNKxJ7JWX6Ja+D
yaZ3LURJ+4VxJvr/s3skmznphjA9rDfy5ls1iQgMSmqblKqk6q4xJZUfvD5t
qPFsNaiWS1xIWUoqVFTHn1bTOuXYC7taSrrfviHaHa5cL80BTAPEe3i2qfI1
N2EaICkpm1DfW4Oxf8SesAe2woNwGgAlbXQUJWVzAwqTHUrERvBRq7O9ku7W
Xl40LEpJj06oXWEjhK3IC3JcNrveRDkU9F1YPXlNDmUvXMeIseqppGNo6soj
qXVSpnFKOoYY0S3EY6+kzNwny8kslIppUNI2c+m0NxF7JdVe7ekWFE2gpGwo
k/d09GN/qnPuIVMLPyr+Z/OuGzMxKKltUqmVdIEpSdaPkzxde+ValpLKk8Wm
W1A08iRQqqWkO8ynXzul0o1JXIyh4qMmGpSrkn7Lchm0T4wrKukdLtd3IroI
XmFOOnCPmBaUtNFRlPSeuUaTZBF81Opsr6SblVSDlI1K+mg+V55+e8WtlEkP
vSczI+VQ0Hdh9WSNNnSW+LmeSsqGUSuv3JdLmcYp6UzzpXtOl6u1krKJDJV3
7yxbbliDQUlHmkt3U42dRknZDwt5ZfbClJQNZfL7kPrPhmiI/yt5Kb/5A/Ou
G9emNyipbVKJlfQLaUN9laRs1mXOR6iTkh6QkukTSnrEfP6Xq6l5q635LL4u
fUkDc1VS5/dhmnKJSsp6FwXTvsl9WXnuj9CkBSVtdAwv7vUkjFCLllVJtyip
BimblHQVV5oZZ+Wt1Ona2Jh8Y38V0Pdg9USZQ4eFLhc/j1ZjFFaq57XJswdV
nOupSrpSCGGptHaJMCfRS59eSd/mQ0QlZTc4ZU5MNoSb66NmUFK2cbtUOm8t
Ie2cGPZKyhbekLu6skU/i1DSDi7KWHaa2JwCe8JsuTHsbC+fkPadPdQd5xhg
SioPg7dPKrGSHpM2ZO+i5F4QPqtbIu8NaZR0oRISq6TywXlJPWc0pFsJqbyS
CvO+ivmfZeWdIJ7+KSxQ7lvr+D/SKG0vyD7qWCjpGiXEoKSO82GnUjVEJRWO
9yxCLilJhBxRf8WqSvqADzkWWc9ABTAo6UipRWOt69CEEWrREinpX3wI+xUT
Kun72uaAhhmUdFxYNReel75i8rlAl5a0yAfo07AWc4ocyurJVvHzQDVGYaXS
vy9grsc941eVdIkQwn7iSbOweCsX6kuuV9LX+RBRSZfrMvBeV3NvDQ1KukJp
QxzdAukhqjhOV0LEOGzItfyskPlWnJLOlEPilfQfGiMYT3mILY44lN+ohd9X
tpdyb6hJ2iYrgCnpBjXcMqnESiotaOadRWk9sRp3D6+aN7XTo5+cYBolnaGE
xCrpJkdksXrOaMgsJaTySipo2hkh/1+05WWB6vKvbKU694pdcUdbBrWVMyip
avVGJXU5t6V7+livarC3lIKSsr6w4eiOa3HDRs5v7Z7hp8WuLlVJhSfKH0XW
M1ABDEoq/yKezTUKsRFq0RIpqfB8hlWZUEn1M9nTMH099TqtETL7O/U79rhF
6TXKom9UY4O+yiu0RijvI1k9+Vb6rMYorFTfaJNnz6K4fq+qkoprOX6rS+Wq
ueSKO7JVDpfxIeLEOp+a74fcousGJdVe7V9oTwdDFUd1Rk0xzmu6HFiZ45RU
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
UllJ2j/XCeZysqX24YT79bdxWyTBN9KDaUsrMoH8l09CAAAAAACgVDYR0qVV
0v61D08JXxu2SMIMKqSj0xVU5UqKEgAAAAAAgCoynpBWjZKS7uDvvfJq8tot
EjGBDP40VSG13M8vKQAAAAAAUCoHW4hOScm4y/Svh3TJpSXxWwAAAAAAAJCB
OapgHuFWWhpwKskWAAAAAAAAZODhnTtq4O1Da57pmr2896/EWwAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAICB/wOmdKbB
        "], {{0, 0}, {2707, 298}}, {0, 255},
        ColorFunction->GrayLevel],
       ImageSize->Large,
       PlotRange->{{0, 2707}, {0, 298}}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.771632969010521*^9, {3.771633158298691*^9, 3.77163316172313*^9}, 
   3.771661936229127*^9, 3.771664619121943*^9, 3.771698921892095*^9, 
   3.771754567420268*^9, 3.771765501190703*^9, 3.7718384973876257`*^9, 
   3.771853421735866*^9, 3.7718647713248568`*^9, 3.771868852844125*^9, 
   3.776172257253735*^9},
 CellLabel->
  "Out[69]//TableForm=",ExpressionUUID->"9ff27847-2767-41d2-88ba-\
701eb1711230"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Finding Bounding Boxes for the Musical Symbols", "Chapter",
 CellChangeTimes->{{3.771584948280904*^9, 
  3.771584963734334*^9}},ExpressionUUID->"4542faf4-5391-4679-9e07-\
ca150fa80708"],

Cell[CellGroupData[{

Cell["Creating the Neural Network", "Section",
 CellChangeTimes->{{3.771584967867975*^9, 
  3.7715849774578238`*^9}},ExpressionUUID->"ee076c53-509e-4ccb-afb5-\
6895d724ed6b"],

Cell["We use a SegNet to do this task:", "Text",
 CellChangeTimes->{{3.771584982071871*^9, 3.771584983870269*^9}, {
  3.7715902855477343`*^9, 3.771590306040617*^9}, {3.771765541414356*^9, 
  3.771765546103373*^9}, {3.771838514970914*^9, 
  3.771838521229117*^9}},ExpressionUUID->"a006051c-e82a-43a0-86c3-\
05adea0ce073"],

Cell[CellGroupData[{

Cell["Encoder", "Subsection",
 CellChangeTimes->{{3.771175096234025*^9, 
  3.771175096933556*^9}},ExpressionUUID->"bfc273fa-3add-438c-85c3-\
cfb35a3389e8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"segnetEncChain", "[", 
   RowBox[{"index_", ",", "nLayers_", ",", "nChannels_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tags", ",", "names", ",", "layers"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"tags", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ToString", "[", "index", "]"}], "<>", "\"\<_\>\"", "<>", 
         RowBox[{"ToString", "[", "j", "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "nLayers"}], "}"}]}], "]"}]}], ";", 
     RowBox[{"names", "=", 
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<conv\>\"", "<>", "#"}], ",", 
             RowBox[{"\"\<conv\>\"", "<>", "#", "<>", "\"\<bn\>\""}], ",", 
             RowBox[{"\"\<relu\>\"", "<>", "#"}]}], "}"}], "&"}], "/@", 
          "tags"}], "]"}], ",", 
        RowBox[{"\"\<pool\>\"", "<>", 
         RowBox[{"ToString", "[", "index", "]"}]}]}], "]"}]}], ";", 
     RowBox[{"layers", "=", 
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"Flatten", "@", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"ConvolutionLayer", "[", 
              RowBox[{"nChannels", ",", 
               RowBox[{"{", 
                RowBox[{"3", ",", "3"}], "}"}], ",", 
               RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}], ",", 
             RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
             RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}]}], "}"}], ",", 
           RowBox[{"{", "nLayers", "}"}]}], "]"}]}], ",", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "2"}], "}"}], ",", 
          RowBox[{"\"\<Stride\>\"", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}]}], "]"}]}], ";", 
     RowBox[{"AssociationThread", "[", 
      RowBox[{"names", "\[Rule]", "layers"}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.721497916260431*^9, 3.721497968860506*^9}, {
  3.721563904664818*^9, 3.721563905164624*^9}, {3.7715904374225073`*^9, 
  3.771590438385564*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"ead1ecb4-bd63-4e35-ad3e-f0382d42c5ca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"segnetEncoder", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"Join", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"segnetEncChain", "[", 
       RowBox[{"1", ",", "2", ",", "64"}], "]"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"segnetEncChain", "[", 
       RowBox[{"2", ",", "2", ",", "128"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"segnetEncChain", "[", 
       RowBox[{"3", ",", "3", ",", "256"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"segnetEncChain", "[", 
       RowBox[{"4", ",", "3", ",", "512"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"segnetEncChain", "[", 
       RowBox[{"5", ",", "3", ",", "512"}], "]"}]}], "]"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"512", ",", "128"}], "}"}], ",", "\"\<Grayscale\>\""}], 
       RowBox[{"(*", 
        RowBox[{",", 
         RowBox[{"\"\<MeanImage\>\"", "\[Rule]", 
          RowBox[{"ConstantImage", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0.698916", ",", "0.50909", ",", "0.656692"}], "}"}], 
            RowBox[{"(*", 
             RowBox[{
             "enter", " ", "the", " ", "mean", " ", "image", " ", "of", " ", 
              "the", " ", "dataset", " ", "here"}], "*)"}], ",", 
            RowBox[{"{", 
             RowBox[{"256", ",", "256"}], "}"}]}], "]"}]}]}], "*)"}], "}"}], 
      "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.721498029517342*^9, 3.721498059903802*^9}, {
   3.721563909769436*^9, 3.721563934250392*^9}, {3.721566640299596*^9, 
   3.721566653059474*^9}, {3.721566701870989*^9, 3.721566725824531*^9}, {
   3.72156676388837*^9, 3.7215667671655207`*^9}, {3.7215712028468733`*^9, 
   3.7215712040861926`*^9}, {3.7223502519008265`*^9, 
   3.7223502819963446`*^9}, {3.7226986284580536`*^9, 3.722698653778138*^9}, 
   3.724870188803772*^9, 3.726841920072914*^9, {3.7337720695480595`*^9, 
   3.7337720896240997`*^9}, {3.733772740900443*^9, 3.733772745771309*^9}, 
   3.733772849826202*^9, 3.733852089597876*^9, {3.77127052249399*^9, 
   3.7712705720647917`*^9}, {3.771271102092106*^9, 3.7712711059223824`*^9}, {
   3.771275462821862*^9, 3.771275465201446*^9}, {3.771275609295389*^9, 
   3.771275618152893*^9}, 3.7713398329785194`*^9, {3.771341757041346*^9, 
   3.7713417624085226`*^9}, {3.7713420641323395`*^9, 3.771342068439584*^9}, {
   3.771342594008535*^9, 3.771342596729306*^9}, {3.771590440406934*^9, 
   3.771590455933975*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"0ced5a47-b985-4a6c-87ba-024686e39afd"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"16\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["44", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 1, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {128, 512}, "$WeightsInputChannels" -> 
                    1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {128, 512}, "$WeightsInputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {64, 256}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {64, 256}, "$WeightsInputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {64, 256}, "$WeightsInputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {32, 128}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_3bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {16, 64}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_3bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {8, 32}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_3bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {4, 16}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {512, 128}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "Interleaving" -> False, 
                    "MeanImage" -> None, "VarianceImage" -> None, "$Version" -> 
                    "12.0.10"]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 16}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"128\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"128\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1bn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"128\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"128\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"128\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2bn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"128\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"128\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"64\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"64\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1bn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"64\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"64\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"64\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2bn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"64\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"64\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"32\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"32\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1bn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"32\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"32\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"32\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2bn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"32\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"32\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"32\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3bn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"32\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"32\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"16\"", "\"64\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"16\"", "\"64\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1bn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"16\"", "\"64\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"16\"", "\"64\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"16\"", "\"64\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2bn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"16\"", "\"64\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"16\"", "\"64\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"16\"", "\"64\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3bn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"16\"", "\"64\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"16\"", "\"64\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"8\"", "\"32\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"8\"", "\"32\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1bn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"8\"", "\"32\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"8\"", "\"32\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"8\"", "\"32\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2bn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"8\"", "\"32\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"8\"", "\"32\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"8\"", "\"32\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3bn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"8\"", "\"32\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"8\"", "\"32\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"16\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"16\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.77117503916768*^9, 3.7712753130385942`*^9, 3.7712753621184673`*^9, {
   3.7712754666815233`*^9, 3.7712754710363626`*^9}, 3.7712756284613523`*^9, 
   3.7712935747991867`*^9, 3.771294130880303*^9, 3.771322156228434*^9, 
   3.771326003780415*^9, 3.7713389824459705`*^9, 3.7713398343858395`*^9, 
   3.7713404310899363`*^9, 3.771340668300933*^9, 3.7713411156271734`*^9, {
   3.771341765061987*^9, 3.771341769824237*^9}, 3.7713420696293135`*^9, {
   3.771342598052684*^9, 3.771342603515626*^9}, 3.7713429711465135`*^9, 
   3.7713430321429963`*^9, 3.771765829498309*^9, 3.771853450007783*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"11d0b718-68b7-4783-ad2c-a7d14db49d26"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Decoder", "Subsection",
 CellChangeTimes->{{3.7711750993450003`*^9, 
  3.771175100596345*^9}},ExpressionUUID->"31206e9d-f90c-49a1-84c8-\
36fc41b2d505"],

Cell[BoxData[
 RowBox[{
  RowBox[{"segnetDecChain", "[", 
   RowBox[{
   "index_", ",", "nLayersmax_", ",", "nLayersmin_", ",", "nChannels_"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tags", ",", "names", ",", "layers", ",", "nlayers"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"nlayers", "=", 
      RowBox[{"nLayersmax", "-", "nLayersmin", "+", "1"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"tags", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ToString", "[", "index", "]"}], "<>", "\"\<_\>\"", "<>", 
         RowBox[{"ToString", "[", "j", "]"}], "<>", "\"\<_\>\"", "<>", 
         "\"\<D\>\""}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "nLayersmax", ",", "nLayersmin", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], "]"}]}], ";", 
     RowBox[{"names", "=", 
      RowBox[{"Flatten", "@", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<deconv\>\"", "<>", 
            RowBox[{"ToString", "[", "index", "]"}]}], ",", 
           RowBox[{"\"\<deconv\>\"", "<>", 
            RowBox[{"ToString", "[", "index", "]"}], "<>", "\"\<pad\>\""}]}], 
          "}"}], ",", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"\"\<conv\>\"", "<>", "#"}], ",", 
              RowBox[{"\"\<conv\>\"", "<>", "#", "<>", "\"\<bn\>\""}], ",", 
              RowBox[{"\"\<relu\>\"", "<>", "#"}]}], "}"}], "&"}], "/@", 
           "tags"}], "]"}]}], "]"}]}]}], ";", 
     RowBox[{"layers", "=", 
      RowBox[{"Flatten", "@", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"DeconvolutionLayer", "[", 
            RowBox[{"nChannels", ",", 
             RowBox[{"{", 
              RowBox[{"3", ",", "3"}], "}"}], ",", 
             RowBox[{"\"\<Stride\>\"", "\[Rule]", "2"}], ",", 
             RowBox[{"\"\<PaddingSize\>\"", "->", "1"}]}], "]"}], ",", 
           RowBox[{"PaddingLayer", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}]}], "}"}], "]"}]}], "}"}], ",", 
         RowBox[{"Flatten", "@", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"ConvolutionLayer", "[", 
               RowBox[{"nChannels", ",", 
                RowBox[{"{", 
                 RowBox[{"3", ",", "3"}], "}"}], ",", 
                RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}], ",", 
              RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
              RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}]}], "}"}], ",", 
            RowBox[{"{", "nlayers", "}"}]}], "]"}]}]}], "]"}]}]}], ";", 
     RowBox[{"AssociationThread", "[", 
      RowBox[{"names", "\[Rule]", "layers"}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.721567493834304*^9, 3.721567743970152*^9}, {
   3.721567781377912*^9, 3.7215677899054327`*^9}, {3.721568104637352*^9, 
   3.7215681894763064`*^9}, {3.7215682381564913`*^9, 
   3.7215682487255063`*^9}, {3.7215687645491095`*^9, 
   3.7215688078347015`*^9}, {3.721568867291238*^9, 3.721568923042187*^9}, {
   3.721568992316022*^9, 3.721569003674164*^9}, 3.7215693893035545`*^9, {
   3.7215694273515234`*^9, 3.721569431519585*^9}, {3.7215694901190643`*^9, 
   3.7215695260243707`*^9}, {3.7215695809501076`*^9, 3.721569581438403*^9}, {
   3.7215696245267477`*^9, 3.721569633350196*^9}, {3.721569688117502*^9, 
   3.721569697022133*^9}, {3.721569843721436*^9, 3.721569871293605*^9}, {
   3.721570059189232*^9, 3.721570077141873*^9}, {3.721570606746908*^9, 
   3.7215706580714054`*^9}, {3.7215707087381735`*^9, 3.7215707090937777`*^9}, 
   3.7215707793188596`*^9, {3.771590460072813*^9, 3.77159046135139*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"d44d1b63-4eef-468c-a853-9090d3991601"],

Cell[BoxData[
 RowBox[{
  RowBox[{"segnetDecChain2", "[", 
   RowBox[{
   "index_", ",", "nLayersmax_", ",", "nLayersmin_", ",", "nChannels_"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tags", ",", "names", ",", "layers", ",", "nlayers"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"nlayers", "=", 
      RowBox[{"nLayersmax", "-", "nLayersmin", "+", "1"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"tags", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ToString", "[", "index", "]"}], "<>", "\"\<_\>\"", "<>", 
         RowBox[{"ToString", "[", "j", "]"}], "<>", "\"\<_\>\"", "<>", 
         "\"\<D\>\""}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "nLayersmax", ",", "nLayersmin", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], "]"}]}], ";", 
     RowBox[{"names", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<conv\>\"", "<>", "#"}], ",", 
           RowBox[{"\"\<conv\>\"", "<>", "#", "<>", "\"\<bn\>\""}], ",", 
           RowBox[{"\"\<relu\>\"", "<>", "#"}]}], "}"}], "&"}], "/@", 
        "tags"}], "]"}]}], ";", 
     RowBox[{"layers", "=", 
      RowBox[{"Flatten", "@", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ConvolutionLayer", "[", 
            RowBox[{"nChannels", ",", 
             RowBox[{"{", 
              RowBox[{"3", ",", "3"}], "}"}], ",", 
             RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}], ",", 
           RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
           RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}]}], "}"}], ",", 
         RowBox[{"{", "nlayers", "}"}]}], "]"}]}]}], ";", 
     RowBox[{"AssociationThread", "[", 
      RowBox[{"names", "\[Rule]", "layers"}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.721567493834304*^9, 3.721567743970152*^9}, {
   3.721567781377912*^9, 3.7215677899054327`*^9}, {3.721568104637352*^9, 
   3.7215681894763064`*^9}, {3.7215682381564913`*^9, 
   3.7215682487255063`*^9}, {3.7215687645491095`*^9, 
   3.7215688078347015`*^9}, {3.721568867291238*^9, 3.721568923042187*^9}, {
   3.721568992316022*^9, 3.721569003674164*^9}, 3.7215693893035545`*^9, {
   3.7215694273515234`*^9, 3.721569431519585*^9}, {3.7215694901190643`*^9, 
   3.7215695260243707`*^9}, {3.7215695809501076`*^9, 3.721569581438403*^9}, {
   3.7215696245267477`*^9, 3.721569633350196*^9}, {3.721569688117502*^9, 
   3.721569697022133*^9}, {3.721569843721436*^9, 3.721569871293605*^9}, {
   3.721570059189232*^9, 3.721570077141873*^9}, {3.721570606746908*^9, 
   3.7215706580714054`*^9}, {3.7215707087381735`*^9, 3.7215707090937777`*^9}, 
   3.7215707793188596`*^9, {3.7215709597773314`*^9, 3.7215709926162667`*^9}, {
   3.771590463759609*^9, 3.771590465228756*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"2afb449d-c3fa-40db-9f53-ed45c2fa1791"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"segnetDecoder", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"Join", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"segnetDecChain", "[", 
      RowBox[{"5", ",", "3", ",", "1", ",", "512"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"segnetDecChain", "[", 
      RowBox[{"4", ",", "3", ",", "2", ",", "512"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"segnetDecChain2", "[", 
      RowBox[{"4", ",", "1", ",", "1", ",", "256"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"segnetDecChain", "[", 
      RowBox[{"3", ",", "3", ",", "2", ",", "256"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"segnetDecChain2", "[", 
      RowBox[{"3", ",", "1", ",", "1", ",", "128"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"segnetDecChain", "[", 
      RowBox[{"2", ",", "2", ",", "2", ",", "128"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"segnetDecChain2", "[", 
      RowBox[{"2", ",", "1", ",", "1", ",", "64"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"segnetDecChain", "[", 
      RowBox[{"1", ",", "2", ",", "2", ",", "64"}], "]"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.721571225565361*^9, 3.7215713394285345`*^9}, {
  3.771590469805398*^9, 3.771590496126485*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"b32f285d-a99c-485b-a299-cfbfbef1a8ec"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  InterpretationBox[
                  "\"rank-\\!\\(\\*RowBox[{\\\"3\\\"}]\\) array\"", 
                   StringForm["``-`` ``", "rank", 3, "array"], Editable -> 
                   False], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["46", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "deconv5" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> NeuralNetworks`SizeT, "$InputSize" -> 
                    NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
                    "$WeightsOutputChannels" -> 512], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT, 
                    NeuralNetworks`SizeT}, NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "deconv5pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, 
                    "$InputSize" -> {
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> {
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv5_3_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, 
                    "$InputSize" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> 512], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv5_3_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "relu5_3_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv5_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, 
                    "$InputSize" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> 512], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv5_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "relu5_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv5_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, 
                    "$InputSize" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> 512], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv5_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "relu5_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "deconv4" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 512, 
                    "$InputSize" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
                    "$WeightsOutputChannels" -> 512], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "deconv4pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, 
                    "$InputSize" -> {
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> {
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv4_3_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, 
                    "$InputSize" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> 512], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv4_3_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "relu4_3_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv4_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, 
                    "$InputSize" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> 512], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv4_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "relu4_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv4_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, 
                    "$InputSize" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> 512], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    512, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv4_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "relu4_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "deconv3" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 256, 
                    "$InputSize" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
                    "$WeightsOutputChannels" -> 256], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "deconv3pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, 
                    "$InputSize" -> {
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> {
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv3_3_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, 
                    "$InputSize" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> 256], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv3_3_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "relu3_3_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv3_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, 
                    "$InputSize" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> 256], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv3_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "relu3_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv3_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, 
                    "$InputSize" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> 256], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    256, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv3_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "relu3_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "deconv2" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
                    "$WeightsOutputChannels" -> 128], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "deconv2pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, 
                    "$InputSize" -> {
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> {
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv2_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv2_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "relu2_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv2_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    128, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv2_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "relu2_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "deconv1" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
                    "$WeightsOutputChannels" -> 64], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "deconv1pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, 
                    "$InputSize" -> {
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> {
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv1_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "conv1_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], "relu1_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2_D", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`SizeT, NeuralNetworks`SizeT, 
                    NeuralNetworks`SizeT}, NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{
                    64, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    InterpretationBox[
                    "\"rank-\\!\\(\\*RowBox[{\\\"3\\\"}]\\) array\"", 
                    StringForm["``-`` ``", "rank", 3, "array"], Editable -> 
                    False], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"deconv5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DeconvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "deconv5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"deconv5pad\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv5pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PaddingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv5pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "deconv5pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3_Dbn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2_Dbn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1_Dbn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"deconv4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DeconvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "deconv4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"deconv4pad\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv4pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PaddingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv4pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "deconv4pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3_Dbn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2_Dbn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1_Dbn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"deconv3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DeconvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "deconv3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"deconv3pad\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv3pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PaddingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv3pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "deconv3pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3_Dbn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2_Dbn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1_Dbn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"deconv2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DeconvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "deconv2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"deconv2pad\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv2pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PaddingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv2pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "deconv2pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2_Dbn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1_Dbn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"deconv1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DeconvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "deconv1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"deconv1pad\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv1pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PaddingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "deconv1pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "deconv1pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2_Dbn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2_Dbn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2_D\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2_D"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7711751273092957`*^9, 3.7712755167297487`*^9, 
  3.771294137059347*^9, 3.771322160462123*^9, 3.771326008264954*^9, 
  3.7713389873476763`*^9, 3.7713398392386346`*^9, 3.771340435936221*^9, 
  3.7713406711230583`*^9, 3.77134177986372*^9, 3.771342076200678*^9, 
  3.771342619671302*^9, 3.771342971427723*^9, 3.7713430324554224`*^9, 
  3.771765835703854*^9, 3.771853455358303*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"aacfaecc-2230-49f4-8a59-cd968093e864"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Final Layers", "Subsection",
 CellChangeTimes->{{3.771175132684853*^9, 
  3.7711751344659986`*^9}},ExpressionUUID->"607a76d4-ce2b-48ac-b993-\
f4660bfc3f40"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"segnet", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{"segnetEncoder", ",", "segnetDecoder", ",", 
     RowBox[{"ConvolutionLayer", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "3"}], "}"}], ",", 
       RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", "1"}], ",", 
       RowBox[{"\"\<Output\>\"", "\[Rule]", 
        RowBox[{"NetDecoder", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<Image\>\"", ",", 
           RowBox[{"ColorSpace", "\[Rule]", "\"\<Grayscale\>\""}]}], 
          RowBox[{"(*", 
           RowBox[{",", 
            RowBox[{"\"\<MeanImage\>\"", "\[Rule]", 
             RowBox[{"ConstantImage", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0.698916", ",", "0.50909", ",", "0.656692"}], "}"}], 
               ",", 
               RowBox[{"(*", 
                RowBox[{
                "enter", " ", "the", " ", "mean", " ", "image", " ", "of", 
                 " ", "the", " ", "dataset", " ", "here"}], "*)"}], 
               RowBox[{"{", 
                RowBox[{"256", ",", "256"}], "}"}]}], "]"}]}]}], "*)"}], 
          "}"}], "]"}]}]}], "]"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7215718943551025`*^9, 3.7215719013067493`*^9}, {
   3.721574294707744*^9, 3.7215742994970098`*^9}, {3.7216598039635916`*^9, 
   3.7216598058195057`*^9}, {3.722100274869273*^9, 3.7221002757806954`*^9}, 
   3.722176574383215*^9, {3.72217668368513*^9, 3.7221766841353254`*^9}, 
   3.7223503103207893`*^9, 3.7248702074109354`*^9, 3.7268419417120695`*^9, 
   3.7338521129734592`*^9, 3.7710901217278643`*^9, {3.771270859122033*^9, 
   3.771270867180415*^9}, {3.7712755301224747`*^9, 3.771275532533518*^9}, {
   3.771275645504376*^9, 3.771275700182865*^9}, {3.771275746931336*^9, 
   3.7712757477535133`*^9}, {3.77127582860653*^9, 3.771275836178793*^9}, {
   3.7712761396599703`*^9, 3.771276144210973*^9}, {3.771293726684273*^9, 
   3.771293728887555*^9}, {3.7712937861252728`*^9, 3.771293789487155*^9}, {
   3.771293936856813*^9, 3.771293991840129*^9}, {3.771294030921533*^9, 
   3.771294098571629*^9}, {3.771322145097522*^9, 3.771322187261524*^9}, {
   3.7715905002541037`*^9, 3.771590516219091*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"f314d736-8550-42f0-b03a-5f8ea4a9bd0d"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{64, 1, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {128, 512}, "$WeightsInputChannels" -> 
                    1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {128, 512}, "$WeightsInputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {64, 256}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {64, 256}, "$WeightsInputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, "Stride" -> 
                    {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {64, 256}, "$WeightsInputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {32, 128}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_3bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {16, 64}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_3bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {8, 32}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_3bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {4, 16}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 16}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "deconv5" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 512, "$InputSize" -> {4, 16}, 
                    "$OutputSize" -> {7, 31}, "$WeightsOutputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 4, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 31}, 
                    NeuralNetworks`RealT]]], "deconv5pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {512, 7, 31}, 
                    "$OutputSize" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 31}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_3_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_3_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_3_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "deconv4" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {15, 63}, "$WeightsOutputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 15, 63}, 
                    NeuralNetworks`RealT]]], "deconv4pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {512, 15, 63}, 
                    "$OutputSize" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 15, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_3_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_3_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_3_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{256, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]]], "deconv3" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 256, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {31, 127}, "$WeightsOutputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 31, 127}, 
                    NeuralNetworks`RealT]]], "deconv3pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {256, 31, 127}, 
                    "$OutputSize" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 31, 127}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_3_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_3_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_3_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{128, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]]], "deconv2" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 128, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {63, 255}, "$WeightsOutputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 63, 255}, 
                    NeuralNetworks`RealT]]], "deconv2pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {128, 63, 255}, 
                    "$OutputSize" -> {128, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 63, 255}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {64, 256}, "$WeightsInputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "relu2_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{64, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {64, 256}, "$WeightsInputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]]], "relu2_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]]], "deconv1" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 64, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {127, 511}, "$WeightsOutputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 127, 511}, 
                    NeuralNetworks`RealT]]], "deconv1pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {64, 127, 511}, 
                    "$OutputSize" -> {64, 128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 127, 511}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {128, 512}, "$WeightsInputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "relu1_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2_D", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {128, 512}, "$WeightsInputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {512, 128}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "Interleaving" -> False, 
                    "MeanImage" -> None, "VarianceImage" -> None, "$Version" -> 
                    "12.0.10"]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ColorSpace" -> 
                    "Grayscale", "Interleaving" -> False, "MeanImage" -> None,
                     "VarianceImage" -> None, "$Dimensions" -> {128, 512}, 
                    "$Channels" -> 1, "$Version" -> "12.0.10"]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"128\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "44", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"16\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "46", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"128\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"128\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"image\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.771175143500125*^9, {3.7712755258629503`*^9, 3.7712755334984293`*^9}, {
   3.771275665043206*^9, 3.771275682376388*^9}, 3.771275754141098*^9, {
   3.7712758306054792`*^9, 3.77127584338424*^9}, {3.771293734782176*^9, 
   3.771293750148242*^9}, 3.771293794760785*^9, 3.7712939930136547`*^9, {
   3.771294032435685*^9, 3.771294099320673*^9}, 3.771294141199378*^9, {
   3.771322150649383*^9, 3.771322188771858*^9}, 3.771326010439535*^9, 
   3.7713389895297194`*^9, 3.7713396075685444`*^9, 3.771339841636571*^9, 
   3.7713404374226084`*^9, 3.7713406731590605`*^9, 3.771341784198804*^9, 
   3.771342078567935*^9, 3.771342622847557*^9, 3.771342971647762*^9, 
   3.771343032658501*^9, 3.771765840427536*^9, 3.771853460658086*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"5ebcb8bc-f012-4e5a-bd65-8554fc7f1462"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Exporting It", "Subsection",
 CellChangeTimes->{{3.771838536771001*^9, 
  3.771838540697855*^9}},ExpressionUUID->"0d339269-2363-4e9f-8b01-\
e5299c4f2c92"],

Cell["Export the net:", "Text",
 CellChangeTimes->{{3.771590532082776*^9, 
  3.771590538107102*^9}},ExpressionUUID->"d3bea29e-bfa0-499b-9c27-\
6ddc0eac4df3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<segnet_model.wlnet\>\"", ",", " ", "segnet"}], "]"}]], "Input",\

 CellChangeTimes->{{3.7227879739494286`*^9, 3.7227879875864444`*^9}, {
   3.733852121418747*^9, 3.7338521232355456`*^9}, {3.771090126622767*^9, 
   3.771090127308317*^9}, 3.771294144447001*^9, 3.771341791472653*^9, {
   3.771590426874061*^9, 3.771590428305954*^9}, {3.771590523658284*^9, 
   3.771590524342284*^9}},ExpressionUUID->"2da3aac9-a8cb-4d20-8d8e-\
7308154cc03b"],

Cell[BoxData["\<\"segnet1.wlnet\"\>"], "Output",
 CellChangeTimes->{3.7711753350655622`*^9, 3.771294145535182*^9, 
  3.77132221991578*^9, 3.771338990799049*^9, 3.771339608711726*^9, 
  3.771339857337793*^9, 3.7713404478376846`*^9, 3.771340675915073*^9, 
  3.7713417922403154`*^9, 3.771342079991295*^9, 3.771342628054669*^9, 
  3.7713429718540277`*^9, 3.7713430327209873`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"e43f88ff-9f94-4462-bb8d-67bfd6fc5a15"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Preprocessing the Dataset", "Section",
 CellChangeTimes->{{3.771584986978698*^9, 
  3.7715849941216183`*^9}},ExpressionUUID->"ca67de10-a865-46ef-be8f-\
4c7525e712a5"],

Cell[TextData[{
 "Since we are doing out-of-core training, we need to ",
 StyleBox["Import", "Input"],
 ", process and then ",
 StyleBox["Export", "Input"],
 " the images."
}], "Text",
 CellChangeTimes->{{3.771175469511451*^9, 
  3.771175490423889*^9}},ExpressionUUID->"885b68d1-3579-4c4e-88cc-\
07208915eec8"],

Cell["\<\
For each page of sheet music, we split it into subimages of the staffs and \
resize them to to some constant dimensions. For the segmented images, we also \
brighten all the symbol colors.\
\>", "Text",
 CellChangeTimes->{{3.771631152900847*^9, 3.771631161384693*^9}, {
   3.771765559952533*^9, 3.7717656487949667`*^9}, 
   3.7717657066798677`*^9},ExpressionUUID->"13abc6d4-d62c-421d-896c-\
610b9598c4a2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"adjustDimensions", "[", "image_", "]"}], " ", ":=", " ", 
  RowBox[{"ImageResize", "[", 
   RowBox[{"image", ",", 
    RowBox[{"{", 
     RowBox[{"2058", ",", "512"}], "}"}], ",", 
    RowBox[{"Resampling", "\[Rule]", "\"\<Nearest\>\""}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.771584995950697*^9, 3.771584996275134*^9}, {
  3.771631101585466*^9, 3.771631114132618*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"e70921c3-797d-4228-8f94-940bd8e741d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PreprocessImage", "[", 
   RowBox[{"image_", ",", "segmentized_"}], "]"}], " ", ":=", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"imgs", ",", "segms", ",", "\[CapitalDelta]"}], "}"}], "=", 
     RowBox[{"detectStaffLineImages", "[", 
      RowBox[{"image", ",", "segmentized"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Thread", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#1", ",", "#2"}], "}"}], "&"}], ")"}], "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"adjustDimensions", "[", 
          RowBox[{"removeStaffLines", "[", 
           RowBox[{"#", ",", "\[CapitalDelta]"}], "]"}], "]"}], "&"}], "/@", 
        "imgs"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"adjustDimensions", "[", 
          RowBox[{"ImageApply", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"#", "\[Equal]", "0"}], ",", "0", ",", 
                RowBox[{"Abs", "[", 
                 RowBox[{"1", "-", "#"}], "]"}]}], "]"}], "&"}], ")"}], ",", 
            "#"}], "]"}], "]"}], "&"}], "/@", "segms"}]}], "]"}], "]"}]}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellLabel->"In[25]:=",ExpressionUUID->"73c496f4-db9e-40bb-88ac-1d66acaabd14"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PreprocessData", "[", 
   RowBox[{
    RowBox[{"inputPath_String", "?", "DirectoryQ"}], ",", 
    RowBox[{"outputPath_String", "?", "DirectoryQ"}]}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"pathImage", ",", "pathSegmentized"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"DirectoryQ", "[", "pathImage", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"PreprocessData", "[", 
          RowBox[{"pathImage", ",", 
           RowBox[{"FileNameJoin", "[", 
            RowBox[{"{", 
             RowBox[{"outputPath", ",", 
              RowBox[{"FileNameTake", "[", "pathImage", "]"}]}], "}"}], 
            "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"(", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"CreateDirectory", "[", 
             RowBox[{"FileNameJoin", "[", 
              RowBox[{"{", 
               RowBox[{"outputPath", ",", "\"\<images_png\>\"", ",", 
                RowBox[{"FileNameTake", "[", "pathImage", "]"}]}], "}"}], 
              "]"}], "]"}], "//", "Quiet"}], ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"CreateDirectory", "[", 
             RowBox[{"FileNameJoin", "[", 
              RowBox[{"{", 
               RowBox[{
               "outputPath", ",", "\"\<pix_annotations_png\>\"", ",", 
                RowBox[{"FileNameTake", "[", "pathSegmentized", "]"}]}], 
               "}"}], "]"}], "]"}], "//", "Quiet"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"MapIndexed", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"(", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Export", "[", 
                 RowBox[{
                  RowBox[{"FileNameJoin", "[", 
                   RowBox[{"{", 
                    RowBox[{"outputPath", ",", "\"\<images_png\>\"", ",", 
                    RowBox[{"FileNameTake", "[", "pathImage", "]"}], ",", 
                    RowBox[{
                    RowBox[{"ToString", "[", 
                    RowBox[{"First", "[", "#2", "]"}], "]"}], "<>", 
                    "\"\<.png\>\""}]}], "}"}], "]"}], ",", 
                  RowBox[{
                  "#1", "\[LeftDoubleBracket]", "1", 
                   "\[RightDoubleBracket]"}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"Export", "[", 
                 RowBox[{
                  RowBox[{"FileNameJoin", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    "outputPath", ",", "\"\<pix_annotations_png\>\"", ",", 
                    RowBox[{"FileNameTake", "[", "pathSegmentized", "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"ToString", "[", 
                    RowBox[{"First", "[", "#2", "]"}], "]"}], "<>", 
                    "\"\<.png\>\""}]}], "}"}], "]"}], ",", 
                  RowBox[{
                  "#1", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "]"}]}], 
               "\[IndentingNewLine]", ")"}], "&"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"PreprocessImage", "[", 
              RowBox[{
               RowBox[{"Import", "[", "pathImage", "]"}], ",", 
               RowBox[{"Import", "[", "pathSegmentized", "]"}]}], "]"}]}], 
            "]"}]}], "\[IndentingNewLine]", ")"}]}], "\[IndentingNewLine]", 
        "]"}]}], "\[IndentingNewLine]", "]"}], "@@", "#"}], "&"}], "/@", 
   RowBox[{"Thread", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"#1", ",", "#2"}], "}"}], "&"}], "[", 
     RowBox[{
      RowBox[{"FileNames", "[", 
       RowBox[{"All", ",", 
        RowBox[{"FileNameJoin", "[", 
         RowBox[{"{", 
          RowBox[{"inputPath", ",", "\"\<images_png\>\""}], "}"}], "]"}]}], 
       "]"}], ",", 
      RowBox[{"FileNames", "[", 
       RowBox[{"All", ",", 
        RowBox[{"FileNameJoin", "[", 
         RowBox[{"{", 
          RowBox[{"inputPath", ",", "\"\<pix_annotations_png\>\""}], "}"}], 
         "]"}]}], "]"}]}], "]"}], "]"}]}]}]], "Input",
 CellLabel->"In[26]:=",ExpressionUUID->"fcf33422-bb05-480a-96b6-7a34bdf983c7"]
}, Closed]],

Cell[CellGroupData[{

Cell["Training the Network", "Section",
 CellChangeTimes->{{3.7715850202391977`*^9, 
  3.771585022925477*^9}},ExpressionUUID->"d50e15f5-df63-49f1-9678-\
44aa4d53b2f4"],

Cell[CellGroupData[{

Cell["Import the Dataset", "Subsection",
 CellChangeTimes->{{3.771765884825921*^9, 
  3.7717658867663*^9}},ExpressionUUID->"7d2dc0ad-a113-41bc-ab37-6624d4318f6d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"segnetTrainingData", "=", 
   RowBox[{"loadDataOutOfCore", "[", "\"\<datasets/deepscoresWL\>\"", "]"}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.771765888903857*^9, 3.771765915622653*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"88a2e177-2a6b-42bc-a443-400317e7ccf7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"segnetValidationData", "=", 
   RowBox[{
   "loadDataOutOfCore", "[", "\"\<datasets/deepscoresWL_Validation\>\"", 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7717659210075827`*^9, 3.771765937555904*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"bfb5cbcb-7e2e-4068-a4d8-9cfd0ba02571"]
}, Closed]],

Cell[CellGroupData[{

Cell["Training", "Subsection",
 CellChangeTimes->{{3.7717659831620607`*^9, 
  3.771765985283494*^9}},ExpressionUUID->"448559d8-e0aa-41f7-b85d-\
cc3769bf36ff"],

Cell[BoxData[
 RowBox[{"trainedSegNet", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"segnet", ",", "segnetTrainingData", ",", 
    RowBox[{"BatchSize", "\[Rule]", "16"}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "200"}], ",", 
    RowBox[{"ValidationSet", "\[Rule]", "segnetValidationData"}], ",", 
    RowBox[{"TrainingStoppingCriterion", "\[Rule]", 
     RowBox[{"<|", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<Criterion\>\"", "\[Rule]", "\"\<Loss\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Patience\>\"", "\[Rule]", "15"}]}], "\[IndentingNewLine]",
       "|>"}]}], ",", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771765812294107*^9, 3.7717658181818657`*^9}, {
  3.7717658541012373`*^9, 3.771765855294568*^9}, {3.771765959614451*^9, 
  3.771765966043487*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"574390a4-2a2b-4bb2-9655-a6d710b4baaa"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Importing the Pre-trained Model", "Section",
 CellChangeTimes->{{3.771585049298028*^9, 
  3.771585054317539*^9}},ExpressionUUID->"06d81fea-af5f-4603-b8ed-\
a96d48658b7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedSegNet", "=", 
  RowBox[{
  "Import", "[", "\"\<post-training-0/trained0.wlnet\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.771585058493758*^9, 3.771585073010585*^9}, {
  3.771632073140753*^9, 3.771632112153941*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"f7989afe-cf97-480a-b9f6-c0c3644cafc0"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 1, 3, 
                    3}], "Biases" -> NeuralNetworks`Private`DummyArray[{64}]],
                     "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {128, 512}, "$WeightsInputChannels" -> 
                    1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {128, 512}, "$WeightsInputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {64, 256}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 64, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {64, 256}, "$WeightsInputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {64, 256}, "$WeightsInputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {32, 128}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_3bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {16, 64}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 256, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_3bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {8, 32}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_3bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {4, 16}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 16}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "deconv5" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 512, "$InputSize" -> {4, 16}, 
                    "$OutputSize" -> {7, 31}, "$WeightsOutputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 4, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 31}, 
                    NeuralNetworks`RealT]]], "deconv5pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {512, 7, 31}, 
                    "$OutputSize" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 31}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_3_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_3_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_3_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "deconv4" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {15, 63}, "$WeightsOutputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 15, 63}, 
                    NeuralNetworks`RealT]]], "deconv4pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {512, 15, 63}, 
                    "$OutputSize" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 15, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_3_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_3_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_3_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]]], "deconv3" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 256, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {31, 127}, "$WeightsOutputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 31, 127}, 
                    NeuralNetworks`RealT]]], "deconv3pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {256, 31, 127}, 
                    "$OutputSize" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 31, 127}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_3_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_3_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_3_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 256, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]]], "deconv2" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 128, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {63, 255}, "$WeightsOutputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 63, 255}, 
                    NeuralNetworks`RealT]]], "deconv2pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {128, 63, 255}, 
                    "$OutputSize" -> {128, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 63, 255}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {64, 256}, "$WeightsInputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "relu2_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {64, 256}, "$WeightsInputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]]], "relu2_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]]], "deconv1" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 64, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {127, 511}, "$WeightsOutputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 127, 511}, 
                    NeuralNetworks`RealT]]], "deconv1pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {64, 127, 511}, 
                    "$OutputSize" -> {64, 128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 127, 511}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {128, 512}, "$WeightsInputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "relu1_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2_D", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {128, 512}, "$WeightsInputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {512, 128}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "Interleaving" -> False, 
                    "MeanImage" -> None, "VarianceImage" -> None, "$Version" -> 
                    "12.0.11"]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ColorSpace" -> 
                    "Grayscale", "Interleaving" -> False, "MeanImage" -> None,
                     "VarianceImage" -> None, "$Dimensions" -> {128, 512}, 
                    "$Channels" -> 1, "$Version" -> "12.0.11"]]], 
                   NeuralNetworks`Private`NetChain`opart = {"Nodes", "1"}, 
                   NeuralNetworks`Private`NetChain`part = {"Nodes", "1"}, 
                   NeuralNetworks`Private`NetChain`selected = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {128, 512}, "$WeightsInputChannels" -> 
                    1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {128, 512}, "$WeightsInputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {64, 256}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {64, 256}, "$WeightsInputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {64, 256}, "$WeightsInputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {32, 128}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{256, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_3bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {16, 64}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_3bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {8, 32}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_3bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {4, 16}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 16}, 
                    NeuralNetworks`RealT]]]}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"128\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "44", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"16\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "46", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"128\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"128\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"image\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {331., {394., 400.}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7716312455180693`*^9, 3.771631302904282*^9, {3.7716320698200617`*^9, 
   3.771632079624569*^9}, 3.771632113797217*^9, 3.771633087135312*^9, 
   3.7716646343383417`*^9, 3.77169895743318*^9, 3.771754587286345*^9, 
   3.771766026051546*^9, 3.7718386518608294`*^9, 3.7718534949106827`*^9, 
   3.776172336440193*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"8b34ec87-0ace-4053-8117-2a89ba16c022"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData["trainedSegNet"], "Input",
 CellChangeTimes->{{3.771866836080784*^9, 3.771866836913816*^9}},
 CellLabel->
  "In[129]:=",ExpressionUUID->"a321be99-bbce-4d7c-a18d-51d142abab9a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 1, 3, 
                    3}], "Biases" -> NeuralNetworks`Private`DummyArray[{64}]],
                     "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {128, 512}, "$WeightsInputChannels" -> 
                    1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {128, 512}, "$WeightsInputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {64, 256}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 64, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {64, 256}, "$WeightsInputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {64, 256}, "$WeightsInputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {32, 128}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_3bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {16, 64}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 256, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_3bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {8, 32}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_1bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_2bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_3bn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {4, 16}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 16}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "deconv5" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 512, "$InputSize" -> {4, 16}, 
                    "$OutputSize" -> {7, 31}, "$WeightsOutputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 4, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 31}, 
                    NeuralNetworks`RealT]]], "deconv5pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {512, 7, 31}, 
                    "$OutputSize" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 31}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_3_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_3_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_3_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "deconv4" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {15, 63}, "$WeightsOutputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 15, 63}, 
                    NeuralNetworks`RealT]]], "deconv4pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {512, 15, 63}, 
                    "$OutputSize" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 15, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_3_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_3_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_3_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 512, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]]], "deconv3" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 256, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {31, 127}, "$WeightsOutputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 31, 127}, 
                    NeuralNetworks`RealT]]], "deconv3pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {256, 31, 127}, 
                    "$OutputSize" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 31, 127}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_3_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_3_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_3_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 256, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]]], "deconv2" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 128, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {63, 255}, "$WeightsOutputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 63, 255}, 
                    NeuralNetworks`RealT]]], "deconv2pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {128, 63, 255}, 
                    "$OutputSize" -> {128, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 63, 255}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {64, 256}, "$WeightsInputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "relu2_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {64, 256}, "$WeightsInputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]]], "relu2_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]]], "deconv1" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 64, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {127, 511}, "$WeightsOutputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 127, 511}, 
                    NeuralNetworks`RealT]]], "deconv1pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {64, 127, 511}, 
                    "$OutputSize" -> {64, 128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 127, 511}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {128, 512}, "$WeightsInputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "relu1_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2_D", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {128, 512}, "$WeightsInputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {512, 128}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "Interleaving" -> False, 
                    "MeanImage" -> None, "VarianceImage" -> None, "$Version" -> 
                    "12.0.10"]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1, 128, 512}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ColorSpace" -> 
                    "Grayscale", "Interleaving" -> False, "MeanImage" -> None,
                     "VarianceImage" -> None, "$Dimensions" -> {128, 512}, 
                    "$Channels" -> 1, "$Version" -> "12.0.10"]]], 
                   NeuralNetworks`Private`NetChain`opart = {"Nodes", "2"}, 
                   NeuralNetworks`Private`NetChain`part = {"Nodes", "2"}, 
                   NeuralNetworks`Private`NetChain`selected = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "deconv5" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 512, "$InputSize" -> {4, 16}, 
                    "$OutputSize" -> {7, 31}, "$WeightsOutputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 31}, 
                    NeuralNetworks`RealT]]], "deconv5pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {512, 7, 31}, 
                    "$OutputSize" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 31}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_3_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_3_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_3_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {8, 32}, "$WeightsInputChannels" -> 512],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "conv5_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "relu5_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]]], "deconv4" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 512, "$InputSize" -> {8, 32}, 
                    "$OutputSize" -> {15, 63}, "$WeightsOutputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 15, 63}, 
                    NeuralNetworks`RealT]]], "deconv4pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {512, 15, 63}, 
                    "$OutputSize" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 15, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_3_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_3_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_3_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{256, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {16, 64}, "$WeightsInputChannels" -> 
                    512], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]]], "conv4_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]]], "relu4_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]]], "deconv3" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 256, "$InputSize" -> {16, 64}, 
                    "$OutputSize" -> {31, 127}, "$WeightsOutputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 31, 127}, 
                    NeuralNetworks`RealT]]], "deconv3pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {256, 31, 127}, 
                    "$OutputSize" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 31, 127}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_3_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_3_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_3_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {32, 128}, "$WeightsInputChannels" -> 
                    256], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]]], "conv3_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]]], "relu3_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]]], "deconv2" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 128, "$InputSize" -> {32, 128}, 
                    "$OutputSize" -> {63, 255}, "$WeightsOutputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 63, 255}, 
                    NeuralNetworks`RealT]]], "deconv2pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {128, 63, 255}, 
                    "$OutputSize" -> {128, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 63, 255}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {64, 256}, "$WeightsInputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "relu2_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_1_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {64, 256}, "$WeightsInputChannels" -> 
                    128], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]]], "conv2_1_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]]], "relu2_1_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]]], "deconv1" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "$Dilation" -> {1, 1}, 
                    "$InputChannels" -> 64, "$InputSize" -> {64, 256}, 
                    "$OutputSize" -> {127, 511}, "$WeightsOutputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 127, 511}, 
                    NeuralNetworks`RealT]]], "deconv1pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    0., "$Rank" -> 3, "$InputSize" -> {64, 127, 511}, 
                    "$OutputSize" -> {64, 128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 127, 511}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_2_D" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {128, 512}, 
                    "$OutputSize" -> {128, 512}, "$WeightsInputChannels" -> 
                    64], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "conv1_2_Dbn" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]], "relu1_2_D" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 512}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv5pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv4pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv3pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv2pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv1pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_Dbn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_D", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2_D", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2_Dbn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2_D", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 512}, 
                    NeuralNetworks`RealT]]]}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox["\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"128\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "44", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"16\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "46", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"128\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"128\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"image\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {344., {409., 415.}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771866837419039*^9},
 CellLabel->
  "Out[129]=",ExpressionUUID->"c24bb1ae-eb3d-4cb3-9323-2ebd4cd45c83"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Testing It", "Section",
 CellChangeTimes->{{3.771585085277875*^9, 
  3.771585088545617*^9}},ExpressionUUID->"87c0347c-a2c0-4062-9297-\
8c69566236b5"],

Cell["Get the original image:", "Text",
 CellChangeTimes->{{3.771766372230521*^9, 
  3.7717663745994673`*^9}},ExpressionUUID->"0106c190-daf7-43c6-9512-\
3f983610b903"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nostaffs", "\[LeftDoubleBracket]", "8", 
  "\[RightDoubleBracket]"}]], "Input",
 CellChangeTimes->{{3.771631317708205*^9, 3.771631318979114*^9}, {
  3.771633094285488*^9, 3.771633136580586*^9}, {3.771633170761509*^9, 
  3.7716331719472103`*^9}, {3.771766006422287*^9, 3.771766009929532*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"9d8e475a-5033-45d5-a230-477721a4ccf5"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
uIF7UY0rqdVHOf99ulKWJ8IkUEOVXJvML+mbSkkHk2fmShIdKGkkoKR54FZN
bSC7U9j//RW83Zn42VnsKamBxRShpKGZQ0mTASVNQ5QFRSUnaTQ55jkGNO8R
2WahKOlwQialTbTWlfTfZukHSfoF0qIsKCrN0N/wSepcVdIo6QFCHpsrSXSg
pJGAkuaBe0fgg6Y2DXtv4zsXl116ewbpQ5uOL+SN/h3uzVoatx9OX3Ya/oWS
5pM5lDQZUNI0RFFSyzrPuUHLoIKUNAN+mNzaOqR/n5ZeLb379h/c+ppuqvzr
aTMpQEl/mlrZrz72fo1LpaSW8PK+offgfJTUsn4UrjoDSvpiW2tr66C+vXvZ
x6XfwNbW46meki7GU9KkQEnrBJ2SknAl9Wo1lLQ6UFITQEljZwUlLYofJvMP
4upJSYX9gpI6vNgmPHqFkgYBJZUTqwF/KQKnIh3igxwlbV/W/vaM/9jiTlko
qXYUfzygpKGZQ0mTASVNQzQlpTzufpzpbaoIZCX9VlLS9vb2P1NnUgIlPZpS
SSn2+TdQModoSurmau6qk5V0ewol/bx9MWlPMTVrYqCkkYCS5sBRpyIJYZXq
Nc7+cF+npN97MeIui3fbfSBrZE1hKGlo5lDSZEBJ0xBdSeuQw5pp4Hkl/dDI
ynX5K+mxJnW/UiupSaIrqVF0C5ElTOozZ+u8l9S1oKQRgZLmwBesEvTngw55
Fas3+2j/8bG8ldeTNPa8LVcJGUr/7fNBWMwIQElDM4eSJgNKmoaerKTzNYYi
KCkxsmhq7kr6kW6/oKQv++mOS8LE3B8zfYyWMBJQ0khASXPgY1YJhPvHEK9i
3WAf7T9mSxtNqtS9uPfYa+48cM8TF5gDShqaOZQ0GVDSNPRgJdUvS/WNH2EB
Ic0G8slbScdp9+srgzlMvJEygRhK+mBiyrw8Ohu0xyVZYse8zfN/dQ8ljQSU
NAecBS06uJBnXsVY5nxuUObt2+bXvQsxs/uDkPlpiisAJQ3NHEqaDChpGnqu
kqrTbTI+9WMYMo6clbSvfr9WGcxioPoyLh7RlXSTqQeRm/SHJeGpafU2j9sd
Lj1Q0khASXPAWdnvIhey3K0XQ93Po+SF3h5xdS/uNfaEkLUpSisCJQ3NHEqa
DChpGnqskgYYKVlUifEuIQNN5JSvkvYP2C9zjxcs+iC23y9pto+qpHcGm5qJ
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
WakNos+bJWtmSvp9Q4s7NsM5iwSv7kEZ0A5voo8pBvsf99M4M2NFsHRKOl5p
dFjIn6TFW8X0PfVewX6qcw9d3IEBeiWlDx+vcJ+bxdTYG6AL/uf+Sm4+2uFN
LHDnhxX/prO6ukpKhZP7NforjSk8AAmNAMoME8dR3BV9lAb0UeNwtwN2jyd/
czFWEPUKZ1v193scOgHikw0aUk1Jx8mpOv1TPuBCzggdcxrFGmxZ9EWl9J5Y
gNW70eS09/lZJcM4SUVXUr+vreVWFn1NveN0N/ShPxXEt83qxsHJWa44jiKX
KgGsT+QSNQ73eRX9LPzCdB6uapS0P3khBgidPpMq6WEaKrzUpm1fsxKPQeMG
KWl/7gHFbeVCnEtDLnMBzNd1PSnlUtLH9kmUtP/AVjGAPNfvVHoWSg9nTksl
+oN+HiBu01C62ZTsK2iKEEBLLf5CXOuc6KdiQIZdIgCIjE5JJ8gVn3Uv/y5G
BAoNiqSkoxr/qwSwhvwQF4O9IJ3Ab+N0rtcq6QX5vnBMyJDdN7iBI9ZLIt9N
fYKVdDT3CrXNU1L2PIzvUbuNBqzzP4dGAKWGeSLpy4U0KZezrKSvqlaieRnq
pMz/OlGtgwZUU1JWjXdyASxN0siFTOGTZCUTHot8S0PEFxQCzk9BbqiEV8RY
ScVQ0jt8EGsGpJfnDraSirMIfCJrVCIlJfP8gH/o5xY1jpygYJKORWuUVHja
S+TCJlXSBiWUvVSfpE2CfhOkpMKF2FdKtYt+fk3YSK0FjMNK8OhkSkoI1z+L
9fCqMqAqHQvl/Omh5udEYI8w/uRjnOZe4JUE+wr6TQh4V74rOgZK1nAhcmMB
QFFolJQ98xRlUrwbh0aoBEVSUl782Gv6af7n5ywC/5zJHROhVdJ5yk2A/xHL
+qCKzw2YJ+rHOAUrKf8E6ICrpEwrxghxW4S9DY0Ayo0jjvxcNuyJ0S9KHE5J
2SZit79Fqg05KV/kQj6iAZf4ODSg6rykNMIQ/6P9e4dJyu98DP8F62Oi3KYs
6cqWmSAXfL/T1zReUtGVVHwa9Zd62FyetEmdTFkdFWbiUrcNTI2yUvlW9T1J
STs0e8yqt05J+ZBmOSChkrIuqO+IYcE7Sb8IVFLuLZK1RLoy2dCmn4WNWM8v
6W225T49FUI2J1RS3oB/ogHvWhnxeZt0BJcS8afIPpr9LD7GCOnmVAJuyBXi
snJg1yqXhtLFDYCC0Cipps17Q4gVGoFBQyIpaYO8FffYgP0sljpes/qkVVLa
f2qaEDKey5C9f9uqSUuXVDUl5btItbez13AT5MbcbZQrD65CI4Byc0u5VNhQ
nS+VOL6SbtKIipqMJohVyt18CA2oqqTSLX4gaWZPyfzXzecJ8acoZAPbxXlV
nXmc5AkqfNgFPE0Nj5dUdCXdIm7YoAkLQHEk9ZAHV3vLFUehS43acElKynqS
zrbUKBolncCHTJZTTqik7OH7ZTFseqC/0S8ClZQPOSo2go81x401iWqn+BWa
mPxw1OhKelIOGWLlxf/kIsn7/1+epUkKG+kozL7AlFQY/MHu35n1iAAgOqqS
ntW0Mado2MSoERxoSCQlfV/eikgft1vqRlolpcM4pdGFXDvI0pJmt2evYrQr
2VdRUjXyf5pw9lC2d9QIoOTcUq76XxS9kpSUPVN6Q0pHvRDYVkL3kZs0ZIO8
VVUlZXdP/5UmIcukX3fTlWolvBm3rB3V82BKqhm0FC+p6Ep6W9yQDXF/xYoC
jblKKaJa6KDtmTgKks1+GD9S4kjpHReTOUPDNEoq9HNdRkMecAHJlPQ33Q4d
D9xLGh6kpMJIGOlCZLOBybNx6XP5Qnftc0RXUiUkvxfM39PsHnMBbDwrN4/B
R4Qczq00iZEK7SqpMDKTXZl/WQAUjqqkbKEMuScY3ziERvBDIimpsEqGOEfO
CyI32TZsxhutkrJnDut131juTVtuztYqOuARrKSaJnELDZcHnvKHJDQCKDlM
HIWRKH/TkBVKHF9J2fn9TEpHPelsK34gktN5cbm8VfUFRWmMyjifXbTL2zih
7vDjhR7prryfq9/umZI+UYJjJhVdSaUNt0evLDTiu3JAXCUVXmiw6Qt+U+JU
PjndCqSJmf6lYRolFRYDYdOE3uQCkinpBt0Bd55p/mep0PAgJRUeELBfzf4i
XWyy0HZpK5bLRTktNhQoaNEEK5WS5tdkshla+W7S92gA10GtfIObdNBC82/2
nLue0DGI/YLIZBFHAOKhKil7RSZPfc+agqcRI/ghkZRUWGF3hhDniK4JYr9d
tUq6hyiNqs90XRv5XWAbF6ykU9XIo5Vab7n9xDojRgAlh4mj8OSSPflerMSR
lFTWi0blgmNbCU/lXiop04DqSjqMT7eV+gmrPN7jwiuE+Ct97tVd9Q+r3+4n
6L+NmVRiJb0cJiPXL7hrUG5W6mhMs2HiKPglmzW/S4lT+fSNNj0aplFSYSbk
3XLKyZSU/ZBXFhNgpTokh1rVlXSDEnOR8ElpsNhs7B9bMu4iZ5MvK98wIitp
gxKStQU+7Prua+dSYqN2hVferIdG5QH+sYxXk0rDf9fOHXX2Yq14Ei1XSe/x
IayXrHblRADyRVVSVuulB5NC6xYawQ+JpKRCyFwhZJmuCWJvk/STQDnNIJn3
u+Y7ZtIrpEDnScJtTfRgJZXT8PKVO8+N4o5AaARQcpg4ij1/achiJU5FSZ+x
ky7PeztIuaKdeUmrp0wDqispc8OvK9E/dDfyRme8xWfKRq00dYmwt+3ijYon
QEljJpVYSR3LlddlcjkkrKRJEabBURuRqmbDxFF4uMhGVFZRUv0jXBqmUVKh
61CHnHIyJWX5K3bEQnVzetDwwHlJlZiSkn4inWw2SYr6M/2Ztxxrw3zd2snR
J4ESQtQfdGZ5sYZfYI8hLDt9QDh0Q6WnMKVhzyB5Lz7kv2ZKKowAPERDoKSg
BChK6gy22Cs2O+xNnDtrRGgEF7E1o0RR0oVCyGxdW/+AhumV9KhXA1tWK0s7
OcXWhh6XQ61qSrpJjcxSWS211Wxi5/ERI4CSwy77DiGIhixW4lSU9Hd20mWL
Cli9KSRlGlBdSVkUd0qH/c6vLPaT51/vW24chrQINk/gbSlASWMmlVhJnc7Y
lywN2zV5p1ZSIYSJSBUlXaNNj4bpVm+qmnIKJVVmDmGhundGNDxISb9SYlYa
8afB51pecs/mcV//62nn5G8jK6k4dXPAlFOmmKHZNbHo/Jl+WtIlj9Zp9kJV
UmGTr2kIlBSUAEVJzwe3O+9Gi+BCA+Ir6SIhhC4Bosz3zDo46ZXUOtFQKUzj
++L0bCxQ6YzOQvfIoVbVqfLVyMGHpG/ECKDkKCszhSrpVXZ+5WeFgQuKVk2Z
BoQoaauf8AjndSfrPe30Zf1JuJZfDb4cvw1KPkBJYyaVWEn17xkozkRyAzdc
+ssZMXyDfsxXSRdr06NheSrpRjkmC9V0M6qqpOpvo0oj/mvwudZO+bW+gYsh
vQ2KvnqTEJKpkj52pryetO+6222DTa0lKilbzMVdJOuDKtWlQNiSiGTo5z90
O4/6WY9YKCmoERQl/Tq43ZkYLYKL2g7FV1L2HFF8dVNdSZ2JgT2a+FljWMh3
cnQWKnfypAQrqRxoWX8GHxISLQIoO/GV1Dnpv0rpZKak7GHhcTf2/MpWzk+e
OUKebLHJ3t06ApMPUNKYSaVUUo0BsAK0/CDFzFdJP9GmR8PyVFLl7Q0L1a0v
QMMTK+n2GNfNidFcQycM9CujkjKDnsAFMJkTlZQN5+vtFa/acmdFwfr29ufn
wKABUFJQIyhKynqVkGO6ZuefaBFchNaMEV9J2RB6eSRpdSW1rN0D/Waw6YRQ
nsqC9GLoWjnUSqKkW4Lb6tAIoOzEV1LnXbPczquL2BpSUhbnNfrH/7xhwsMr
eTUIU8+zxbqblASqEqCkMZMy/uK+Q20haEi+SrpTmx4Ny1NJV8kxWahucSEa
nkBJ/2EJ/qZsV5WDIyqNMW/HqpJ+qO4XDclPSV+tVCAPjZI6w7bYAthfl3Ig
wKe0fOLUgjQESgpqhIAX91W2CI3gIrRmjPhKOleXF5uJo4qS2nzer9IOVgYj
sU9H5JgsVJXMeErKRkiLC/nEjADKTnwl1b9rVlcCMqWkFdkd7WXAhjzRNwXX
xOkwP4pYhXkClDRmUkxJ1UHd4UrKOpBrxiGyNZLUJe3zVdJj2vRoWJ5K+qEc
k4Xqfm7T8ARK6iT4g7xZKJt7u20xN9OZqqSz1f2iIbkpqWaaCJ2SMnlj67S2
SpPFlAO2F8eUICgpqBEUJXVmXdbNZhc1govYmlHiK+kqXVt/nYZVV1LLerLY
68jkWSj7sE+Op6nBDnGU1ElF6cIfJwIoOUmVdLWUjnpFm1JSNvvRGRbZUzwa
MtD+d76Y5Q6tQlUnQEljJvVQPSQ0JFxJL+rzeaoJpiH5Kil7byOvF8Cmrc1J
SVsrnsTDSqWu9ZlSSXVjQcO48QqRDrmqpMpCVjkrKfM0cTCVTkkr185DOXYp
uBZQIaCkoEYImATqzyqbhEbwo6VVUu20oWylqDAltTnuDPnsxRd7jRSHzWct
zIbsEV9JdTMARo4ASk4CJZ1EP06Q0lGvaFNK+p/rYkf85/HekKcGcd2pP6sq
mZ4AJY2ZFKtvS/iQLhoSrqRf6PPRNRDuYRADMlVSJ73/Cds4iyflpKRsjLXc
fcJp29TVDZIrKXtprXvsGg5b38QbF2QzTtmL3vozmZuStqk7p1XSD2hgOxu0
cMIqHXto6QaKYTQISgpqhAAlDV7rOkIEP1paJXXykl7XraZhEZTU7ejmTcPD
Ft6WnyQE90KIpaSs094yNTx6BFByEijpHs3F9YsaZkpJPVl51U+fDXnaTXMQ
h2PrqlUIAUoaNykaW1hnkhUxfEHRN2nYSCU51jVBmrSCBuWspCM1bQvrG5mT
kl7X7dCZwL2k4UmUlLW8CWetmyVewtOjnBMakpuSsr5ee4QgdgRlJWWPxHuV
dXATO0Xiyt5QUlBLqEo6hYYsrbJJaAQHsTWjJFBS1gRJsz2z9j+SkjqLbbjN
zH76t/wkgU3zIQ/pZ8RSUragX7UVuEMjgJKTQEmdu6y4TN876p3XmJKykQ2X
LF6EaEgrnez3uRCzTVOtWOQJgYkHKWnMpGhsQSHZK12Nkm4Vt2PdcMQ+o5T9
rh/IWeSspLqHtWxW92RKejKoaBSdkjqHR1oQknXO1JhnciX9XXvc1uqO5dY5
4jl1ms6xlY/z6Ud+JdUbmrRpSG5Kyu4VO4QgtkSC0t1qKA39uSPKPTB/2PPy
cUIQW7IDSgpqBFVJv1XuGpTX/Ys4NIKD2JpREijpek1erO3SKumcOdKDSLZO
mjf5iK49ZTNmbLA0xFJS/QqKm0hlpvLQCKDkJFHSmeJt2NsmoZK2hRWRPb95
6yQ/MJ0NefqnURqCa92lwVKYdYHoe1U7BClpzKSU3WcBGiUVXz7e1dYf7ZNA
1tc9ZyV1/FPwGeaW8ZX0Cg34JqholCG6srNO99LyTUxTH8oxKfSLiWpwqJI6
NiavR2Y7cj9LZpZ2CNZblU9skgJ+jj7Nb7UCXtyLNyzmzYqSsvVYxg/Iqhzp
2KtWx04aBCUFNYKqpM7S63I8wr2YCo3gBaRXUufmITSC7MGmXkmVdylstnJv
SBPrP79X3iKoiYulpM6T2/NSYH9/PcfwCKDcJFFS5/K6yAU4U0gkU9Jh/t+f
6svIXG4on/xmN0R+jMk6kvyghFWZzSlISWMmNVS69zkmolFSIiwKzHxB8EwX
FvUxH/KhElU95MHV3kqmpOy3r7DLTkf22ErKhNpdjIP+jv1LKR7fC3Na5RWP
ukfsycFo3Q6yyEP9v71pmcOVlHWuFH9jWd/bQQeVLGYphkM3XV/5xLoacMOD
XmoqRr5KSp8PSM0xu9Gpg1Kdopbzpdcd9TDSh0VQUlAraJR0Kw16T4z2OeEG
AYVGYEitmZVMSdkCo8JydU57EKCkUnPFmlBPaNlIjD7C96znzQeWjnhK+qOm
jaIPPPZGjgDKTSIlbacBjf7sFFvIxMHKJR8lZfoUjhunF9CTe6VTN7i+mv+5
t8/HUkwWPkAIoms97bACCVTSeElJPViOEDYGTKekvIvoxhFzcYWX0Cxq3krq
zNg/yv88mbDOk7GVlDe3C9pCvs8lYv+mnen8tV3xDurEAb0d6dXkrYlH/DlJ
wpXU0Rtxcufe6kNyiymp+Bz2uHQZEnHPhzWr94J8lZRNgi8I6E4lxGGRU6c6
sylHSoh8ypwXdFBSUCNolNQaRsP+FoIahLEFoREoctVIpqTO04ZZ/udWp60P
UtL1QoA4/TJrzPdKG+jaU0o8JXXe0Yrzo/QT1kINjQBKTSIldZ7MN3gvYueQ
xoSrN03xt7oRfFO+79wrz3JBrOeh3NvScrvJ8eOMbhLd8CGfQCWNmRQrj6eg
W0jvJ/xnB6aZs8hcP4SZiPbR8EGW3pd+AGub8ldSZ8D4IHf52L9HkNEsk2RK
6ir2Ut2Jc5aJfVSJ7E3jwa4Q7qcKGz8U0ANgql+Om1yJIigpu54aHnMBrxF3
5niRWUSaYYR2IeGfr75Bk25yB7E9H04OLlbPCQ3Jeap8rkF2ZjvUKOlzFi6v
4FIS2G8+fpVCZ4puKCmoEXRKynohCY8Th0g/uEMjWMaU9D7rEuU1Zr/0I7PZ
z9kgJRWfB9EArnsp64bFTV/F9ECaTtAjppKyJreBX9Cc2sgPcSKAsnKtq6uL
LRo5z/7Duf/af+yiIRPtP5hSdNiw+WGm0b8qm7Y5t6/52/Z/Qm95P0tKGiVl
ygkacoX9OUZ6a8DTpLgWG/JEVqpRl9Jwf/Q0fSIU8OOMFamL1Z0T9C9lyrQ4
STk/zUjzwiMXjixrJuQaq6Nj+X11J4HqW0nyFOupqen8SHGWrFzufrozgDC1
Ge4meN/+x5nk4Ef7ryfaEHlPmbDt8gr0m/3HPBqy2v6DrQ5Lzy/Tl5XCmXbm
gx+wYvfuFf3Z+3T68c1YKVOoSrpNaYNew+kmzjxaq/mTzcaJtXufmKF+rD9k
1kn65WX251j3arpul4FdK+/xF+Ju5UJ8SV9mN1Zk8xnttqHri8+eG2z2P4+W
Je4fdrjImO3fn905hg6GY+fty0pe9r+so3B/PqSLXQkX+IvFIOxO0+Q9A95F
WtgzjKVdSnasr8oKZftywF7DVGbY+Km3UyFe8/aC/st+Duzwduu2/Qfb05W6
yg1AftCr8wOvTezq8t2MzRXY+7L38Tf6Q0sYBRoSgaa2T2jN/qCt9wAatMX+
47QXid3nTvJtzkQaspu/Wdx25rwfsfbLHR+20N5RwQuKsibF/4F4l94lBvER
2MusyrgLZgfiUwG//KzL6mx2YPw7CBeobETXkWnwJ6amnUfXxIsASorzJtmF
2dY2PoRpgRDALeuyjgttuSWvcR8lZQa9cpu+fG5dpvf2a0EFXUK3Ebp0O7O4
39fEdWb6nHziT+v51U/otTlQE4lxR9w3ZWRjjKQsT91ctnMHrjLLo6Okz22/
Hrpm746FrEefNIqYYxD7umHm3lNH1g+m/TArCb50XzRXeNfShfAIXzLVGsyH
0P3qFI+Gv+0ULnSMJStphJQZbJmqoRet5wdaAnqaM6lf8tC6O4cIPzaYaPTd
cst6+iMbl+N1SdVA2+umvc+tK/RqYg8kWvjCsGy/CNhN1mb323DjmdX99Wv0
7+26HJiSkqaPL/xj/5A/yg5681Mhxmo++cHuGveVvLaouQshwePwkvOzk3Tf
pYc6D7zfRJqdfl/S7lNOqEElwqlgjXP2dR5e3Z++mRP2QjiKrBfxMD5ErdwA
5MUjIsL1dOxml/WQHbf+s37fy35+S4vDV48gpku/+VQIoQ32bSWOuJnfV/Xl
K1zwzGpr3DtR+m/uemanv4+NKBomxmBhQ/bfsf4+y95sNWhXVJIOjNP6DBLD
bipbsZEbfddf/9e6/w17OLY5bgRQTtIoqWUtcNcR68VOtzd7ffSUGU+a/cDg
Hp9slh5xVkuag36o0bMxQlbBP49ClTR6UhSuIh22gpVUrHFVnknN5aI1n7MK
U1LrhzY3bOhpL63ZcVJ22OEH9nqs3WGuPZzJhx8XvHJsldUun3JXk2OU0ZXU
mQWlwoh/9FmcGS0eJ74fhsMn/ncTrDIoqXhKxliBSkqfp+oHjpWCN7i96HPT
gpKCGqGKktr3UeErzfwz1SKI6aZVUss6OtINHHfNK7f2p7m1f4C0TxvlGNsb
+a+1s/YlVVJrcwMfYdiD+BFAKXnQzeFMq8OHdIdt/+za0U7vsTqVAb+PS4yU
V7lX7pviwyaRoa2t0lv9DXZI0II7f28Y6F6Lo3TrTlYQitT9KE1SlKOOUzUs
FROvfF9ZvWl/P68xCPAel49coRr3jZKgejSrnjn1y8d8yN9yfJlHl492/uH+
TUvkm3T0lB9Nd/amUZnt1aOjvxNj5EXpiyvz3Itk4IaQoq5ucq8m922UcCE+
CCixx3FPeloWVWvDzrzbp9LWadvr+U4hRp4X8wvIveqJM8RP7qPuhnnX1SL5
jFGe0ZSKJ/PdnxyT2KvLkArxhA/RVm4A8qFbRLrVHRjvNif95WW6QyOI6UbJ
PSDE596Fo9+7zR8bDnLECuDQtMoTgPHaSJ1vul8PD3zaJB0YzR0kYK9OuncT
0mvBvWQRQJ1DT/6g8GhaXnQ/NlkUh6fd/4VHMp7UI+2EmQ78gqI3O4/+XM3B
K8jNV/HQvdgaHk3Lk+5nITHu6zpjMB7q1hDVkPJq6q7+M8GPV1Ufn3c/r/Z1
ETwP993SDm7i6MaM16D+eBnW0IdGyAA2m/SlqlFedFe541FCW/wUhLb0WYgF
qBHoxTsrPFpPRrfGfe3BeiaeKboUIAN2ERLwmAYA0ONg45FL90wEgAg8pRfv
4aJLUW7qQ0m31cVeAA39cGIBAB5vo60HtcHXbZOkkC9w8YZSi0o6o22TFEKn
VtBMKwpqnj9LPbgJAJAlbW3yKhm0B3/AJIUAlIl2Ra3owJRXCylL7VCLStpf
mYqV7sTuIooCMuYtQi4UXQYAQDFI8yy669ZnMlUyAGZpF1ZqsNyVKW4VVJpa
oTaVVFpPmY5jLP8YGBCZ5sr0LVh0D4Cei3J3orN7Bi5fA0CJoGvc/8V9/pfO
eiPPhQkkalRJB/Cf99B9KOcq6CARzd4SgnMJ2VZsUQAAhWG37K/xnz+ibX3E
+UcAKBSqpI3+kvPHaZ+TEVXiA0qNKikZ7n9cTndheXB0UHM0E/IL/fcbPCQF
oAdD2/Yp/ke2UN2h4OgAlId2NgftoK3XXlhPrq5jE5xPK7pMpea3Ths23fsx
+48a6uHgTF4/4dAflvXwzHy2B1uKLhMwCZ3uev43HXT1r1PhsQEA9Ykzs/yb
x+9b1l/H2Cz3DXgfBmqEhcJ6XYT0Plh0icrNm8LRqqH5WyuLiXqM+iN8I1BD
+Guwriq6KACAwvj2Famtn1p0iQCIzt1N3mq4pGk2Zk4PoWaV1ObSR5XljPuv
+LPo0gDDfDbcObfDLhddEgBAoZx+r7fX1g/9tOjCABCfZ1ixKxp5LGSeKY+x
kGP98gwnFwDg8LD7RdFFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAkBH/B8MzQuA=
    "], {{0, 300}, {2707, 0}}, {0, 255},
    ColorFunction->GrayLevel],
   BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{2707, 300},
  PlotRange->{{0, 2707}, {0, 300}}]], "Output",
 CellChangeTimes->{{3.771633128696478*^9, 3.771633137271742*^9}, 
   3.771633172442485*^9, 3.7716646369853354`*^9, 3.771698962271686*^9, 
   3.771754600038076*^9, {3.771766007075066*^9, 3.771766010249135*^9}, 
   3.771838643169784*^9, 3.771853498980857*^9, 3.771864868912035*^9, 
   3.776172358032928*^9},
 CellLabel->"Out[71]=",ExpressionUUID->"6d729963-a6b1-4710-b05f-40916b0b4ebe"]
}, Closed]],

Cell["Segmented image:", "Text",
 CellChangeTimes->{{3.771766377978669*^9, 
  3.771766380891061*^9}},ExpressionUUID->"c1d85225-9c1e-473f-a5e8-\
48cb44967424"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"seg", "=", 
  RowBox[{"trainedSegNet", "@", 
   RowBox[{
   "nostaffs", "\[LeftDoubleBracket]", "8", 
    "\[RightDoubleBracket]"}]}]}]], "Input",
 CellChangeTimes->{{3.7716343990347013`*^9, 3.771634406446886*^9}, {
  3.7717660299928007`*^9, 3.771766043779872*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"021779f7-c64f-4733-b703-50d659f57621"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxUew9ci+sb/pAkYQhDWIRJMgl772uYJEMYwpDskIQcQzKERdI/GcIkDMkQ
JmFIhg4hjBNCnHFCCEOcDnF+79n7+zm/r88nn73v+zzv8+e+n+u+rvt5Xs9p
88ZE1ObxeAtd2P/G/LJ44IIFvywZ6/zvxYxfonr5Rf37UMv+8dgfsmdrGR6/
sI91qBH/3iq9cAYPX6+BcS2DqFfdoPddR953rqIp8x1aaUvYNZ0R2H8CxGt2
kba6DvNvHV5sE0azojkqLm6kovBNVDbBD4LYhgjZywNviVViiF2ErA5+kA0/
xghSdKS8d49knrPp36raBfOZ0jY9HG1bou4yvGtfqTSvJ/JjMh33HPenLWLK
lQMd15X/9EP6Z1eUf42AuZ0ANWOGICxnNcyvh8MiiGIk62/SAlkcnBS+sJ1Z
6WijtjIdslNjILGXkNylgKzKsY77/b1zkaOeDt2Gv0iWJgfvyk3HfZs8DKWB
QGm5zXEd/n4JypctQ+rORYiUHyNFh/tkyhmGy8HbUGxQwtY3GdX1qki7IAGi
5kdJF9kNLqpvxPvoS1q+mRFuUlJwvX4QHXRHbHo/xzg29jHBdLcJqgc/o6LL
roge6AZjw7NkSfnKuFxrAlG382S6NIQSbxwg3tI0Ru7ZFtX3tFTWpTkUfu8p
c5EGqrr/0LsEHQqDfKEcuYpkh8oYme0MKU4egt/H/TBNZSjz6HaIDw4hw/1V
ML9qimFj4mFxHk1q7wmoPvGVjKe4MWcVNkVNvz4I/egJjfk9iZeeJHVmGWej
uDJJYNeRKG30iQS3pKjO+E6pEbVRvTgCxv1BsPed7iinKRU7xlY9dzeptv1C
/89+0aNnOu6H9LiH+2Xt+m3dc1861jxXWu25Wmq7cYny9AHgHVzsKC/bW0OV
9toQXxxHgkU20sxfTbxmXSRFklD413UH//JcGNs3wZHzZ2FsZCLh2Xgyiy45
6jpNnYOyW62k0i5dpJZtrpjW6YqjXUlrG4lmDEf66t5Y0Hab415ovTmo9naB
cvA/VDSuDng9pWSb2g/Wti9IndCKhCczSRK+i4S1W5J7WF2krjCg9PxLunkg
BeK7d6gmbS7MW35QRdcdSN3TFUVNpVDty2V0RacoPGAS+DudYJjQmeIHhEFy
z0JVdle4zJuBglqboc26TNEtQmBtFwSBoamjP8L2L8jSO4DJCeyOwr98YJ/Z
GAq3A45xmcvspNWwdhvqTcofDSD70Y2RflsLTe4c/PjTAvvu7/RkeiIUd5Ng
O72LRE2/OOrlXGzBvVt/kRFdHQL9ME8onH25dT5MR4o7fzjKqfi7KDp7BoS/
HiZD146w2xqSU8uRMLQ7xlhuaBley65wutsVwvnryN68N8rD1HDXLYfLqgyK
L28EW2hbZHWNhurrF3pizkFF/W5Qx76gok5/kthvDcVOaIOcejpUpH0k6Y2+
0O3rRaH7ZkI9Kovc1wxCUUUzRPo0B59pCS07r6UXa4hv3Ey2EVNIlRFCik0z
kBCzFWVr6oEXfkRiiplI5Z9cYbz6FyncB8Jl5RVSu74n2ed9jvFYL/tC6Lmd
dMtZn2pfTaIfd0h7rhviI/tAtnsALENCSff8CdlPH3GUF354SNFWF2iVXow+
rwH4/7yjkIMDYLKdIHVMD6qWXCT9RwHUhuPk0uEpmT1aQLhSTeJRo8jYzB1Z
t1rBTdUcyvZCx9zK5oxgqpKbO37rfjBkPJ1JOtV08PppmZpIdq0OuksedddA
LHlH/Fu9oHaKIvuDNTBPKiThp1sU/zwJscP6/MQ//bmv5OS6DfHpYvDnLqcq
FisiSwbB1pD1k/xZVLHhM6nbTYAmaT25PHtB/B5XKXTdAg5Tv9Rh+N5epOzY
GrKKuYxX373Q33lE/LEmHIw1I3Rn45/t/PuvpO/sn9eiSd9JO60v6cd3At/6
kqIaC2CP+Y2iywfAZfZ7sghuOOZP93Ax8jJFqDkGR11blyLKetsKqeV1YTlq
ZaoPXKJEzTkSd5+D1AELYDldSaqCjlDEvSPbvAOOGCJY4wnxLQbC+z+o2OIB
3mV2vhNdf/ZFvLYdKrZ6IOqGGpnKNhD91g2VLuMhGWInSepdkjkJyT+hPXjf
vjB9LGsQKGXx4kUg5EFeyP99MHgRz6lDLXbNfIuC7OIFxjLYm3ymuyPENB+W
p9cYnz8VqIg4Sfzqas4nMA7VwlzSZ3WCCjJyqtqAih8Lcbm9AbKNs5j8lv6I
9AqHz4VdEPc3krbBUQnvLz6Kh86A1v8bBcZNgPDFG8Z2jBtDQME6WB4MB2+M
CrEDUpF1uQs055ujqllPlF7xRx4bWyQ728MraCuKLsugLWz4Ez+LUO74nbbo
Ekbq20iH5djxcNMxiC0vYT9wCGOm7ITx90Co8hvB2mcYCh6shn71dvAKi9m1
G4OK7Z4I+XMGeNEMfA6sREn0KoTvXOLoV8GbSdL/3/46Bai8+RHHM1XpNKre
4Ymy3h1h+VVPiouJHL4PqQf5+k3UdNBZ3KmdDGXj3qgekEvPliZCNn0uGSYx
4I3uRorEmzRpkQnxmfKfdpQfqiHD/FAkMkI82ZYNeYvbpN2fTSLP5tijNMHw
/A3JzolQ+HkEEmekU1WPblAeTaEydX/4LzjteE/U6iHgFRxiql0HwXDtLMOv
7OW473/Tg8N2peB/fFq2cBrz7OkmmGTdyaXSF9r0FZxNLucjlMXTkPCxjmvx
ocFUE+oPt5udwBu1gsrmtUOOdhDspQeQ160Bjmj3IydxFNqNykLZ/Icwrtjn
qBe5fiF4y14w1oMWKsrojczd7WAr60GaqUEQunqQaWEtEs3/h2zBzxn77BhI
+iaRQOkL9Z7j4OX8Sv1brUNsridM4mYwCCMg86yNLMUgpF6MgmHoMIftqxSd
EFrXA/7X1RA4jUT5nB44ds+O+JGLYfmWC5f4YRDoc8leU0CR7dsiao0LYn8r
QanGBT53BkCYM4MsVbMZXma8RB7GYmXRE8a+pC1pLv1DlhVjITw+ErJedxhr
iBfpR6xytGnIf8L8//OomeTHxZPga4ytn7+jDL+LgaLi6nHz/et2iVAthm2p
Gyn/5EHcdSblP3vyP7ZYcfqp9M1eT2nIfY//+F3UXCZ90kNEdagFsacMLua3
xD8aSZqkTaRa789i0BfGPLILeOtFpI3ZRUvzUmDEK3LbcBrqyRPgv4bDMJdO
wxDBctUJk1tJ0zuNAy/zD67/Pf6URO4bD8OuIaT9/W+JpaCaUT0Jp40tEiEc
5gRZ6gLHWNT3l0Gx/yFZzrjC/ZkYkswSqk5NIIv3QcbfRwy9/0lEBaZyGNdY
g5jRuVDOb4zSDRF4lhMH4+jLZLihQOZGD6hdF1Dqi4X/M/bUxb0gOZVA5iYt
UVTyD/Fn9STxuG9k6MGn9N21wR94kDTb6iC/bxOujTV9fmKAwXyHTOUDIbn9
gawLCco7HrDemwzdKyF9ObX/ZzvaLbUcdRLjujnuaf/5xlRPfUw1AQ1h2Wgk
2/T3TL77dPgMXAr/W8MRdSUAys0m8j8dycUL3+uMtUlzUoxsTqrfbaTbc4BM
9gqS0FUq6TbeUeZh1Q6UDRuP2mG6n+06PW4P/8/JODMzAfKvdaFt/5EsG74w
2vBBjMKtEYmvp8LsHQ/ZpQSSdNtL9owvpF7SFMoDC6HdVEWW7gmM7kUPCCac
ZjldXVj3bCbh7OFUdHI/qd92gKBDGfGznMATusKpkSvy36mQW70O2oyZFDvf
FaUP84nX2I+x7uKzNhjhmINM1+GQBU4h2dl7Dj+I3t2Ww4lIdn139STepfPE
35jLcaXNgaiK6QrZrGdM9NkkWBbJGe2wxSRrne947tKIxTTv82Q9qCX7PW/H
vbKH0+Gyozu8njSAxdrxp63+/ac6FvM/12KLO2m67eD4nHcHmLo9IKfn85BX
wK2d3ImbUfTsjuO58e5p0t6+LpH1qKLYpvUgK5lJgt9Pk6msv6Os5uhT4rWc
RfpzY+D2jeN4vA1GJtGymoQDShxj1c/OJP6a3sTzSHRcF53jofj7cGi6PCCT
z0RIXtXhuMq+iz/7WYb+cMrpA7cfTaCVHSHr7V7gdx1BgtAKCh4WBGXZKFTv
30TDXieA59ef6dAjDlG+/WFI9oNi5kRoHn8n95SeEGmXo+Z4AArMCSxfOU3q
ih6IDMiiwhbdIXxzhoIjd8BweT1U8cnEq5VB/GQFKlNbo+z+SNjCZpD4ShZZ
b3SDl6oVqh/VEG9ub4kDd9avo1ifMBSOHw9/gRPO7N0CyTI/uK9gdVjBSuiW
ySkveSi6VrxFyWgd1C0vQcPn1kHkt/1UFBcBi3trDuu7uSO6sQ/KvJajcrcG
+u8s9xxyQqL9pRmsOX+Q/Nt49P+Rwb6T8w/B7UYodsmDcEUNY/o6lkJ6xiDU
aTH4zdeTYIOB7IWhjnLBv2XBPSgAibNljna8m55CTZ0m0LWsTWKrB/lQexR8
yec4uJhbT0YByzDmPqayjDkoWX0KstXjmJqUDtAvmohSeTxcnu/itFHOKOZu
3kdMLe0kXbptHxbUvQ/bmqmUGHgcqoNptGdrQ6nhQ++f9nwiz0Cp6leUvs4n
yaGb/+OP4WPXOdqexKRC0a4u3IsXIv79QhgeNJAe79xVmtjoGKleKGHtcJFu
prG2Ej2gtBG3kDiwOxa43EHw5/kInitC3mcDygpd0ejpKfCufmQkwcnQD16I
rHGeHIZpWZ//coPJK8n5Hyzs9+0jrBJi9bII9of10WF9DjRTAzHtkgGi5CKW
U/0C95iGjjr6evfw7NtRvLucBfX4qYhNZHVdWxdG23wyI7vVmwmJm4rM6DWI
jhTBa1ZjBE23Qtm3AeI7NeDW1slUhCfugnxQKN6nN5JmpThLDZlbmbIDfRE/
j/WJsDoI6eKO6vmtILt2kXJHnULeqZaOui8ScxDauBnK+y5FpbcQsnqbSLKh
iiK7nSDrijSYvmmp9u7V4G/sC1FuA2g9QcXH2PVwsTUsD2cyhQ+XwLzNhEKt
L6oUgLtPF6h+CyfVUWdEn9NDtHgsbLfjkLhnG7xK4qEb0woGmY1KT3dGNf4m
3rJ2cPOdgrJWm0Hz16LmXibk+o7YMlCHEK0M4Q/HoPxzJLLG7oYt6SKFNGgK
85UkOKcmIfqmiV1vXRDrloGy0WOxYmwa+/5D1OFiAUz+LkhlNYbV4yRFFY6H
xdIchjesRlG1ZkQt6rJxhgeREzsHoQ0p/cRiCFkt4JyZjrJHTihaPAuxK3mO
+Rk/ZzeGJZU5fpvmB8Dy9Qfx38WSR820n/ZWtmqMC61seOrn5eCa/DKtwxcL
gzktfvqf3lJjURbkJwdDAhHCH2jhsasXzA1aoOyXUGR9IARfcELQ0wSUL3JC
6ZcNyH28Gi7dL5E9vgv5vO+EzucfImNCCpzy/KHL/UbR6sHIvzMI4g6+lNlQ
BN5OGzMtbSMX43K7s/izloRr3MHLrqbQ6l1IuHkWUSWsz40nR5mK6Gtk+CJA
pOgmrRq/Gd72fZjo+Rn6Nt/I1qI96YIUiH7jA0tsOYnb3oQ2dRdEm8cicu56
ko2zkPhsd8hO3KPqRXGUtS6ftcVCiJumoMSzM2qPjWPj3Heq2FZJyo/bKe3a
HtRIu6Li3C3Srqqhj5INiKqzFonlXcFvcoiyGu1GVbgrXvytg252a5ysSkAl
qzuLhh+iojpj4SNpiMT4HJJ3zgSvMoHSDqUjKicA6tkz4dw1DZE3WG5SKxjB
dwXQe8hRXBKNg6PXIt3VhcuPMHORN6YhFFFtYTl4holpGwcxpiNYzkNlek9o
TJMxTXMOlX9zmjSvU08oUk2IfTMB4pdeCNIcRvlbd1gPFED95yNS+h6ggwNT
YP3ahoRXXzLXrl9AdeFjUl1RkKzDE2qS8QSJSx5StUcSaUvrM5Jkf9aXhRDV
GwKNcz+oN7L65GUEeLfeUmZ8J4SvHAHzohLyPb4LJa9Yn61YhsSxXhCXpJBl
SjfEBK5CaJNWKDklRNTHfnB/wvJy+gWlT9ZQ5DRXCCamwuPycAizpsGwbREF
XkhD4kURtI8/UTTTHpLcTAjymiDS5ypZa66Ra0Mj5L8FwrikxuGnrl0LUVJn
Lq7ptkBenUvS8vewb8omXmJj8m3eQHq98x8QHHtNW1RJ4L2uzSzoZoZ/6ADO
/4/0QOL+SxB1OUbRyzdw9y4bwZsYQ/LSg6Rb+pVMxjhUH58A0Z1iikxuj94z
XyLvFavPzMslLv2HIfSXIIh6tEIUbx74P55Qyd5uSKza6uhbYOoi5L7LhO5d
feKf5MNGCZTXYgbMhd9IVnGU0d9/RvIrVpSO/BVjWn9A5Pwm8Dm/DYbiZLrY
a5WjP9eicuDVxQm2doEw7b5AweOjob44A4lZ+8hytilkY46jsnMKnv1zHdXz
hkLlvBzBha2hvv+I5Pe6oq3iLar9pjjepXiiJxVfx7h6xkHXKJZSHyqQbVkL
s9tQKIb/ArvvcSpcuAe6ph9JH3SUbMPOUdbkjdCLx0LrMhqB033hVtsTWf4j
oKk7H5FhV8j2fCg0W4dAUH8mdOtTqapeZ2RMSYFsGhijPIGs7Qciqm4lDO8n
Uc3IZeAtcWfkp1uhndEEybp0MhqlbHzNote7XiH2ZBBGu5RDe34eldwPheR5
PeS1mItGZSfhuzsHKn0HitQ6Y+S4fQjtngXruNHQX1gD96L6sPLs4O94S2cm
HmU1VwjszgegvXGNGTZRD97jdlAdHwxx394k+c0LIRXhKP09D9UX0yn89lwY
Fi2j10Py4SRMwVeP87BcH0O6p+4kKDpLUX8XwO3xaBS7toHkdRZlR53BmGNG
SPzPshxuHkm6zETOGTV4G/kkHd0H2oI0im96FKbuo+G+Zj7silRYH8TjGatN
7LwPKE9cB7V8NIVNLEFwLLuO5hfixdvTsB2yUvjOCfA5sAivc9cjq20vFK9d
g3Zpu2H4HuSwn6swBxFexx2/c6YHIHOWl+O39a6c1ILusNSKo8C1TSF83QyJ
13+jvOA0dC5djSJ/D1i86pLblI2wUEckNioi1aJjMKV4k/BpCMxTb1BSmbMD
/7MOEfS9DCR8cYURT91EYXMykN51JMo867GYkgHtZS4HVZg8D4Y6LUhhjYc0
fCQkLquJ37YNDetrcDzPnL0a/hvz8VFwFOItueT1lYfQ9ImgNyngfwhE5IfX
hDc1jrLSHgtgVF2n3+vzpdmTU5En43jzpJMZMM5keen7JRT6aSlC/eogqnog
dH0MpHNuSUUj2Dh28yLjc+sceG8mofLNZpjsNhLkrqGD2wzwSM6A+XNrVFU5
If0lG8+enaaoc12hFT6WiE48pS4TXiHnXgDyuiSh6MNNLG3O6Ud7/ekU8uwk
4l8vgOwvPaPKP0L9B+zm9ImgIYof9kaVidWE+rYQX3vlWOultBHSd+5wW9QK
9uhP5DSmI0KGxoHvPIssrA5f4b0H6pWpiLiaA/vyoRB32ktK2e/0a+8iVuM2
Z5Iv7Ie1yUgyF7M6++M5kl9LYbVkMFlf1JC9X11UjeazceQtqQobID9nGvj9
15Gix3CU9EyH1yMJrCHLYXI+QbzYSw4+bk0aSCV1h4AveuTo35bXOah4VhvW
9M6U6DkMtoUX6NXxl7AdWI8QYyPH2JzbDJDmDQyCYZyEtH/aHdpE3XwKMgM5
bWZr+oMpjeEhr8d0lI3piqY/DFCc+0CGJn2QaViA0sF/kIr1Ncn87ZBedUaI
bTQki+pAKWgH3oFpcEttBZ/4rvDwdoJh8xsmJ10K6687KVJNqBapYP+T66uJ
N5Eq78xHmbArCj1jYH3tTNFLguGyXEvVXmLIzJNZ+8eS4DcduY/XQLZcy0z6
excCE8fDvv4XiEdlkkt6EmLrj4Lpx3Yq/espFa2IgVLP5zTasu1kS3/PbGy6
Dqkz4mBLZ3A5LRu2w+1ItDqBihK6ojrCTO7720IrLSb3cQSPv8NYbdsFhcNn
4KM5GfYuDZD5fA5q3rsgq50YhpVKhNoXQsI/RMEuCvjETEJxsDfs2zNJPfEE
hTSbAuXVAlKXaikkezpKi2to5OK9eFFZCrfuwTCdSkHs/faQ77xHkv6zIRL7
wTjbTp0f66Dc8ZwOXktCaQGX/yxlsslpPB8ZZ9fiL+/3yJ+1FXlsnPap3QRL
Rew4dvoTr9Fp8n2lRVHoOjjV6QeP9Ho/OZ/hsIqEzwk1C9XQqANQVDsE4sZt
HM8Nk+Opz2+r2XkcR6V3RiL0Ihu3M9ugZnks1GzcEt2Np7KXM5B3IRrlriOg
Fs4kQ6yacvpPhvHWfPCOppC00zyohiUgceUYqL+Ng3byZwrbko7ai3QIbtEM
8dVtoDhWRakzVkLC+nvmcW9I09dAe9XA8lsGBv4eRv1+CKX/0xrx39tD96Mj
Ga0dUR1/BcITvZAZ3xsR9pMov7iBXbdf2L9NaHcqDWUBYbB/TUD4mp6OsZzJ
zkSfGwmQNY4k3eJfETqkO7Qxb39qLTf36ZAFDIXTvTUQ3NqNIrd9pL3/C5eb
YXYwsZlB0E5Ro7h2OKztIuDTYwdsknCyVt8nvnIFVfMGIPOXBNScHwmvh5Go
qLWbZKezGb5nCwpsymqcOj1QuG04VPubk3N+NkTDKyjRvIXVXH6S8s8uKOw6
GPIjC2FNAvVPT4XI5TdcPsD61uPbXB9d2ksUe0LI0nkQGcb3hqSc01z3Lu3D
s1F7YJ3vB9F2Bfpr90OuuUemkQZys63leHTaLUoc9pIMIxIR2UuImr3uKE9y
h2ynmXHf5gzN0EoK9c9G1frpWLHyCAIj+nKxZKwv9NPvkja7lInucRCW12NR
UjUI2uAwGJQ8yJ9vIpc3AdDMyoUqZCVZxA2YVQvWwHr7NHwqm7Ox1g+W3ABU
HNaixdBtKAq5yXLwr1RaT87qo24wVv63b2BP9YVy3Q10vpyIUN9MlHvEoZDX
GLy+lxhNu7ekmemJgklpjvKBn5UoNI+HrcpJqvV1Z2qm1Yeg7lS4PtnL6cgh
rM+2M4Jv7c3pUsyA/vUX8hkmgYvHN3ooXIfY2fugGd4RQt8F4HcpoCJs+9mX
EI8JyHcug0QRDu32DIl9rpTkSCC1uojU0vEofZT0028q29eCumlzx3Xk2TRS
3J8Be/g1zL5pgzjPTF4uE+CyuRNE115QWFgavBKioXnxmtovK4ch5SQT3Hkv
/LxYbW7g7Fnx9QTVifgG3p9zJDw9A8VHVwgFO0j79YIk4spZxKY4wXihBwwb
ZWSouMlUDl2AvIuusB2PhE/UXkjqsRy9YWvIVp8lW1UihT40ozg/DG62SfDK
qgfBzBbQah9RTuMUR3vxsUsh65xFwR8V0A7swpy45iS9uewqXOZ0hcUQxfBq
dZLInM+R850DkMw4QNf+Ogre9S9UeC+Zy0vFcHseip4LSD9q93+5i4HJjphh
WS1ibCs6YvYGA1xWbiR7yA4up9I/g0rv6imnRX8YZ5go9Vwa5PWPO+rLfb6x
PpfiiF3aQWFYceouInc+Jacdbpx+9YqkygncXoUq6i8KmpAO5WfW5gXD4bNo
EqLSt8ApeTrk949Q+tcjcO5ejHuTNsKmaESGq2KknpwP2X1nqMJiyHDrI1O0
eyUEtmPI5AnY2DkIhbXUMLZ5SDKdkklscpNKQxuionwy1O4h5IFVsEVNgrFh
FpVuuMKuqUZUfXIxSkYOg+xuGoXOmonyUXMQ1bETXGw5pBylgPd+E3T/xJBg
fB/Ee5uROGow3MIbw9x6PHhfVjD8wf1gv8aH7EMn+F/ygTJ+M4nX+MPSxY1U
U5ZQZCQfTj2HQbPuT7Is4jCpnLW58KGObBsuU7gsEjnPt8DAatPqKj9oPRaS
re8pLkcZY6M9A44gsWsSRUvksCg3kvrueorkDfzp77G945H2sKNUNW4PBa0+
gcT7j7HFUwdtvAcVHftKlpsr0e56EYR9Kkn9ZB3Z77/h3j2ch+q14/AiKw4t
ju+ALtaJy3/1q8vIw+Idv2Nv9kTFoN4o3D0GZmsXmH0Ww3qxBVTXp7Kx6RIV
/52Ae/HrUf1htaM/otStCG/am8X5T2TZ+oHhpTyRmFMWIHTfFFRVNkXOwcmw
nwmC+M8EKOds4fK0SyfBOnIfPEqXgQZvQ/KL0wie2ADqRkQ+SV6wXg9B5NA7
5LN/JoSX1KiO7fZz7CqnOSS60BKKkf/3Xa2mYAWTBGvhHBjacmcjLOfuk/mS
O/p83gLVgoOkYTIo3daO4w+XrlHqJim8PujgsSUC6e9UCHnnBmFaQ6h+m0Q2
t0+UsGUbwnVu8NrRFnaPpVD71EfpFW5+itboqPDcSiTsPYlMr+mImtkUmmat
IGyxiOXjJYxy9nQYWe1YsXsbTJskMBgvUrl3JuR1skk8hovjklft0fTyRQj+
ziQvmQmGwAK62OSG45n7mLmQNADOqNfD6rkemU+j4OEl+Tn+os6rSF+oRpas
N2KpOxf3G0WR5c45snh1YOLL2Zj0PQSyUyXk85XVcrUPspp9O+nWeFDFssMU
Of0PMn6ZiPAN/oh+XtdRXz41ANEWHnhe9yXTAragdWkcol90gVvzCIQc7Mjy
kAKquMT5kD2oFXSXBkKfMhGqvzqCd2wItI/ek2yty88+Fg4bgJLQEIRGZMBy
Uc3YG45F1bNWsDCdGLMtkbQlVkqsdwPVA7ohrFcC1G+IDINvMurt68jqbiLp
PzuhOdgN+Qf+y3VZLndnlJocbg/Z2gqFL/ew69+E4n+4fJmhHYdlus08cpk/
GdoVZvSP3Y0yM7fno2w0n8tXN+yAPq23QXOC7b+kHVz81nP1ZFx+t2p3ENIL
16FF3dXwacPAZ1sv2Gd35HLbCdccZfKuN0Kj6ToYDf9Qlm9ziKN9Ieu21IGf
/HF8Kt/cAsG5Q4D1b1H8/CTUpkGkCGO1xSo+TkY2kKbuMuGiogBF5t/oXlAc
LEY9qddw/Rg/Ohs5OxaBX7McivRB4EWN7qseOQjV/3A44jLoNOUPTIJp+0QY
mL50+d1qiGuNQGGcJyzNZMQblcIoPg+BqaQflGoziY7pHO8VreL2GIt3yBFe
mALDGi+yhNZnquLUsG0aAfGG58TfdJ20HXZJhCUxqNjAct5BLRCiZONX5mPK
SRsBS7sypn+rrVCxGlc5OROmbnFkfH6TTCdUFDZlL2xpOsccBNYfjbRGqajI
mQdeOyEjy+dBp5mFogfnuf3ANkOpfJIB2ifHJc6frIhoexZec1chs3ociprd
o3wXJWKX9IPxjwoqexME97IZMC3Xk72wA6dlUljO/SIUlqyFZBpVhKLEr2Qa
zsYCr/bEy7vR1/f2LgikVSQr5M5PTRvN7acZr5nI4nSeym19kPhwMCx54ZQe
rYY0aQuig8IcZcLkmbC/WU0WPssR+mTRxbTDyG4Uhxeq7eAfEFJl9ji4VLwj
/m2Wc/H9+t7pvhEhoa0gf/WYXMI2USyrLWRBGyhr3WXYN+f9579jZjHWFxJo
O7Axs+1JsmQNcsyV5swd8l0bBzfvjjDEGBneo9oM7wxPkhjH4Y28J7dPoq57
izxO9Yb50RtyqX+aZF2cYV5XH8KwemR65IP4wwkon+oMXXETDhdbfid+j0nQ
1gST8UQ0jEfVEFTOxpjOLA946s3Y2zdGqWYC7EkxVFlrJhQfPJB2ogjyDo3h
H8D5iqj2H2TVxFBi1Vfu/M/Cp5wv7egL4alIbp86+BE1OpQPfpsekJ09TgLn
fWQ57MntjT2zkqT9FhKGALaTtWiPfidc3GeCl7eBIvlvSJQzCqr82fB9sB/5
NxpDX/UritzXkvWY+icvyXGtA+EbH8TeYDWKm5VMmrkU2fcmZRzeCL6wDqoU
bpD5qiAYK2J50kcm/jFBFhtK4arGiMrui/DSflC07AF7UHsk3komTXcDFfTa
hUwnIYr8tlOmczwy/+4IS/zNn3vyih8Av+1mikYteAW0BukTYOmcAuMUFrsu
DKboVY1R/kGByhdq+H8dBmHfj1x/y+IkooarqeJ2HHkNaAtLz0NkWnaKxIEJ
7J8vVaYPh9BuY7Sy7oy8roWEx8q4/dMWByCIO+l4h/7ETYqf1gblNT1hP/If
pjp8oMdgFIWxOF8dyFi9c6HJ4M4ROl12wto6z+CWO9JRflGyizTiWQaC+01l
sTydxbm60C7sSBYRu35OdoH9QSqle26B7nYf2N9JUD7IDYY6tSELXU+GLx8c
73zYczWKMh6RNbwr+D3uUKIsAl/HJ3EYUurE6ayIrxLehfNkP3yXKuafJ5fw
BxTQm+XxDZaT+6wZkPWcwCjnD4AiZB75sDpbJB0O7e1i4qkmMDzJLrIeHESd
zYch35NK5pmHyPD+CSPNHAgn02LH+599Ww9+/B9U0TYKWfyu/53bunuOdBEz
4S71gnD2Ewr2cfufeUqs94rkzYHgfE4XFx7zAG/yXEn4LheolhPprq8i8zln
pDeoD1NAQxgvRUBydQzCJzaG6tRVKplXD0VxbJzUpcN82x+V8wLAe1YLZU29
kDE4HsYDe9Cx/x8Qjq4F3+o85N0LhbDuPlJkPHPMXcmwtojuxWJn83Hs+pxI
7x4Y4TZQjuqie5QWlwBxwgVSltWC/6op2Fi+GlWf5sJjfz+Ul42AqHIPFW06
TX5fk6C6/Se5yMtIknAVylEdcPHuHpg+/U7GU6UU302N+G6RED6XktvoLJTs
6YvYQdw5MfG6X0gxdDqsA8ZQaFkfRKGz435NTTfoOhwi8a7+pDz2hPhx06lo
nzcytsY5npunZFCNZztYbwxCsOtUWJ75kDijnKLfLoW9STjJd9RDTT2CVndV
UnqpyDFWadsmEHg+JJ7HQFI+q+BwQjOQIme0h6ot57+lXo3gX2cehIs6w9b4
CWPN64WQLy4QuhU6/F+04hanX1mfs9Tpxmj0l6hi6N80qdk1Ll+6pyXGmNln
zbszWakDkbuVnZsVHWB7KSHDUn/Sh3FnAq2tB0AYdYBR9XrAFPJ5P33C39od
2sFdED1fCNUr7uyHoOlUWI/rub3lb2NRUbGJKphdFDWqDthAQTWLWRy5858+
ElU/p8L5rL6dnEv2pc1RuNIP/Dl6yhbmQFfpJC09Ogi6NdyZ03rN36AkTMOd
6dp8mmrv5OJP0eZnJD7fApp4bp5kPbdR7rE4KG8dZvljAqNPCWK1+mbGLs2g
H8l5oLI1jnrRfnxUrmqGTF1r2L8Xksh6n8paKqD+pRno1SqYa85T0fP35Hcz
BeljOQwQUB8oN/5JvFuDYDt6gPIKAeGP9RScdQiqy+6wJM4hYVUv+hWrke8T
wM3Vqk0OexSOXgOZ82fG8nE/I5ubSPf8dBCnTKHERfdIdlLBiEe1IlHPJbCX
8LkYEDiB3FLqI2eJHFnWqTCM/k4bpyQhtQ7LHZe1hrqnDC4HziK9exan73t8
JPeBXF6yY+A7DN3wFOFJfGnU0BnIeJkMcadWML8+RDbjb0zW/trgf1hFpU1r
/bRn5ux7sH4rdLQdMiUGwU95UqcnMqgvBTrueTW5B3HDF2T7i8tFrypIgOHP
JMfYImM7INE5FbpzOtgE9aF9/EXSQbADlnFmjluWaSj6XQ/Y/M87ytvT52HL
7t+Rq9kG/dRTVLRwyf/lUXO4M1tNXnOxbjt3zl+7vpIRbi1hXDydUJS2hVSp
YeRFQyFov5r4RVdpQYIe7peyIX+RC166AvamfCodzq0/bWEHkjwaBZ8VHL5W
CCL/2+s9c5la38yAYcprRjvrBGmPTkDVH1zO29/zCMYX3UL/UQeR/Govvrf6
wJ0nmvIWvEcjGUXaGypS7UTmLzxo4x5T6nkvRM7pCe+QnVD5tCbJUTsVdxGD
v/kLVVRchLO16N/5IdPDuTBObQ++Wz/o2lWR+PMCkjSKxqoLa+BXaw0aPdkE
Y/08snx/Qaa5wdBOzpVIClne3vcYsv6Sw+lYHSjsi2BJDgDfvgEZ2XlQNOfW
iHlTOKK2zoXYJwM6dykSFxZS6aYWKDnlB32xB6zNWsMQUuqYW9tmTxLvZ33J
4yZVXAyAbEtTxjxGjKofXA5G1dFMbiXD/4sBmoeU/XoTvK6sheiTF+SX1VB7
HybevCCUZPaCpUEsI1j8BxXd2Ec2Okr9O+5n+VMEiu/2hOBSWwj41aTY9pTM
/wzAHlcdJCnLII/wxrSLcRC5TYbwZi0qd2F5cb+NSH3P8giZDkVN2DJz75B4
7AxYlpno4459UIfXRnTMMOS1z4RgOYvZ5xOg27YOtvpfGLXcTrLRS5lSgR+U
AzLIvC+dDDEGyozvAmHBQFoxnFsreXP7IsppHMdft42ENe4g8So8+/Kmh3L+
l7aLkc/yhZVxhz2YQfFvnWE+/oym+V2CLLMLeE3fMomRCSTf2wsH1WmwjR3j
qBc7fSws+QtIsak1iez/UGDEdCha1aHQ2BaornedDpoSIHq8ijQWZ2QaPSBZ
MB3mWVOhilnA6tWnTGZIXyj0taG2tqIjr1ehspMYwi4zSNPAEytmxsFpajp4
m85LymaEY4z3eqSKG4F3RI6QO2Mg3HeSJFIpZIPqQaZUIHwgd67U6a/12H2l
ufRM0W8ImMCTGnMDYcjmvn2oGdoBgTtCWd7eAalDgxDlMQQ+TbfDNCmTTL55
FFWzAEWBn8jNFAOeOo4R/S1F4PoGiI8UIv6KCPnBSgR+WwhVy1rQvWhOhX8P
QOB8DlOiyBvFmzwgO9qBFIgn2bZqau22HpoVZ8jSbDBcFiWQad9IhD7vieDj
YRC8+YPS90yBfTurnzfMIcuZzmQrn07mpINkaa1hws1LID7wliRLWqM4VwP9
0OekPkoo7f+eJH2UUOlfkeLHHNgzR8PUeTyidEFQSOvB+ugy6cIXQdgwidSD
5yPQ1xvqz3PgMkzk6Gfi1xKK9RsA7Rk9HZl7BorK0VBFTKeoEQKUrOyL1Hpd
kLhsHfUZl4IY0UloLFdoqetm8JxUCEztDa3GG8IPdnK6FQHjyiTwVZ2Q09wX
vBvbiLelNsmi51N16RnK+7MfvMU6aCdVMom6exSp8YD8eiKqXAQQ/1FFkbXj
YF85C9H5csgXslzm2Djws7qA388Z+Q86wG9NJqTL2Djkv4vlqQFwO8PZUDvb
mZS+lzneUJCHLc/SHfc9DjNYsWoDNL92Qp6M1VrHtyLi1wQY+9eDm0UOwauT
VLS18385kDGjoL2xHLoJnWCfQBCzPDUgcDVkTfxJu55d7zFPiR/bG+WNCaZd
air6nEv67b9TaA6LHeH1Ids9h/H9Jw7+/fzhsaEBrL/bSRX4ljG0O0GR3r1g
vHGfnk1LgVN1K0TuDkZFcjcIcy6SsNE6ilT8oMDsCKQf7Ibgve2g/GU13FYO
Br/3Quie5lCfprvxddI1JJw/gfCwTjCc9IPHwDoI+W0UyKMIqpcsn/XUkn/r
wTArekOxYgaE49Ng/K0vZCffUHkcq/1XD4PhVx10MRtJHe5G8hHzUTH8MHRf
knDGnIHCjV5Y9XEDlG8CYLgylyoHNUPWyDhELasH6QnuLKM2KB6CEWlkPdAR
sqlXyXhzLSz1npBP7yEInlAPebu1EGS5w9RgBKsBwlHzjssvKNCGKkb0Reny
bqisEwSneRugG9KaAhLjoDCwnGhKLFn+kKHdl0zI+1/ictKukxDsHg1Tdy8K
XBwFr/qesPG5veadtt+hmr4ApadSoG3nj/QbbVjeNI+UV6ZzueEreih9NsPw
aQViN/WCS0y7n3aWdu0KSagXLBfZ9Vz4K9xPrAevKAeaKtY3+x3gYt/4AERO
uEnaeURRB5qiQBEP8d8fKTYsg8XzEeA/qCJR8iPM7PMnDNs8yPp5Nxl+sVK7
C+mw3lkAXnl/0n90Q/WodT/bzUtNxwKPA3CeyvLPJw1x8dAWLnd4g+UmlsPk
JXSDW0QCzBc3cxjsWx8qeTTHR94ySHflsNm0rQGpez4k/Q+C4eVp0h1NQLBS
gFClD4L9BqLCnuGo47Zaj8z6XK5A0fIUlT3i8oRRWaxWMPuQtkctJrLlUTi9
moGabc1Q+WEePBqMQfkwbxjnvaQO1XtRxsZpbYiM4W8eQvdyMqFgkUxX1Bni
l0kkmNcGxjweKkcKULO/F0TFV4mf/IyCj4yFyuNPxhL0gmJPcPnl4uhjqBkZ
j+pjX0m2fADJFnfl8mKecoi+cZxfxfJlTQUbb81bHTn/ohNdoRobhKv96znO
Icgqwh3v0i1YD38vHyhuDGdjohuLQQ0wO+M+l69zLqFUljMn5hWS/Qpny8g7
dx3vfzLLCPX8VhRsdoZtUjaTcGUVqo9wcUvYiB3boV2wrG9EtuMLf/LzgojN
8HfhfFh0l9OwymWvyXQ4CLJLLZG5gNWK89tj0qe9kK1aC7uyP9xvtYW2oCvp
2i1CkWUPWZyeUu2N51DeaQIEe5Mo9EUPuDCH6GEPFmuHj0CfuTrE1mig9A5H
pZ7lJ26LSVl9lgz9fFmfY23Zo7vEMHgTcy+Ss6UpWUxulesR/aElJOGALJAP
ze99IPrjBVW3jyfhg1qk3LkStro3GLdJXRx1Nmalofp9EMTjOlOUiYdg7+kI
LfFG+pM8JD7lOK/sxQ3ijwuE9lQMqRvdpi0pKeC12sNo/uGhIm4j/G4e4+b/
SJajfIsj2/Hk2hpYsm+Sx6DuKPtrKcoCFfCI3AVVYRSqFk6E5kIR/IMJ/NMu
lOU8GYZbc2DYwOJoRCuUDGZj0v3mCHXjobRrb+S3mgBTGyFFqqrILa0J1BGb
qfxON0S2/osEhxui6QNub+BeYTx0O39Q8PZgWDou5/SQV0sIe1sgN3ynzDaR
EBRPQ2jaY27t7a8j+bVvL2l1l8YoPFVHyus4Gzmt96G4qTustqFkv+2Fmrub
oTVMgMeFbrD8MQ+RTz6S07t5P9eudsxbqnjZE7KbdX7mc1T1TpF2rhIZbhZ4
9IxASZOx4PkO5fbDjFwO3BzFR9l97nsH3Sp27kf4Qv36MSlap6IwfgDcE4Kh
/lIH4SEq6GeVkdOchvCp2xiyuHWMktXCku6sPZa7kpDVOxFzXaW25DRObzwz
Ur55F6qnH6LMc20QfLUbfE4dQN631tA8+EiqrqMR6LIGkSkzoTzWFvqjF0iw
pQNMrT0gEHZDUeUEaHLaQhTQGXzX/nj3Nh62u/GQVc5nDF2vkKynFJGn/6aC
afHQzr8jsb4ZDZ9rT2DvH05VC7ic5piZKTCWnqOiYWdIH6SGvuVSuA3lvpct
Ps3A8riISnf8TaVJIciby0dg9RCoZX2gHxYAn+4sX/prJAoSj0F7ewxZerWn
7Ou5CJ81CPxr20k2GbCy3EM3O9bxvpLXtVA2QPnTHhLTN7KqO5CPvx8Shxyn
wA5BcK1fgM0zakv10TvJ+uQgmVUjuJhVqiCz+CX4n6aS8m/+/+R09pR1+Pk9
Vd5pT/CKHzLmDWrUZLPY8td1CqmTASPuk1D5jin22sRp4EX7yWdKXdRucxxO
G2rDcGQZmav7wUfUEML65xlTu/qovXQnPCQpiFe1Z7lcL8ZpWF3Yr3LnhcR+
q0kQz4Mh7m9KTEiG8PV3Uk1yI8uShthTfhyKKQkkCe4H28ogaBLTUXYuCjWu
J9Hix24I5FGI2q7m8hL7BpPg2UpYBx8n3cAOyDylQxarc03BH2jkmmyoanP6
T7LDH+pHf5HmXhLsY8WkzWrGaLMP0w+PLSzvHYXMumNxJvYglDmp0Lir4Hdo
A0TVcyA4chCSL3xUDHBFqqkl7oQfAd95H5lL35M+eC2JfFnddc6TbDvfU3hv
PdQSIQz915P21UgHPlQ0Pg/rUgXkg1dT4OEBEH+TQTl1CVzqTULAhXOQ1Z0D
zajBEG05D/tWJwiPWRi5b2/YKpwgZ3FMV6cjeS2WQBK7jYTxgSj/YwQUnx6Q
/tNgRLbfyWF7U77U710BBP340pxO7jCkbkG48jSOxb/EzR45MA/ivpfItZSj
86o7/2N7WdMB4N9gueuqyQiRlaDi8i6op8dwNh7YHtbOwxy/7dERlGDTcvut
bxui1FYLK3aeQMGpNzCIHxIv5pOjDX9hPNyEh7h1P4HbUzIst3A+uOq5JGjK
RpgKWpCYnhDfaT0Mg5Zw3/4MYTWw1yCy1oCEDyOhz+G4lt5jEuRdT5Ht7/4U
2as+LK5tYcpuBuuCZqjynge3+TKWNz2n+OiuCDu3FvqTW2j2YXYd3+uGy+u2
YEzyNuTmrYX10BdyutwCLucSKOTRVGwZvQcmI4v5Z1PoWqURpeleSI3lsJUf
9JlYpovK7GXw6ZAEwXHWrye2+TlvrQ/thf+rOZDu7QGxl5bSv3ZE5unm8Ahb
j2t6VtO23E+WrTsYQ2cxKW46w6vuJJhdvpOm6AQljm2DihM1pNgVSWa7E/i5
8ylkoBtk83xRea4hop6tQKOqVFS4NYBhaAwsHqy20HWVmvyiUHdngDR4bV2p
PPsbGUNXwHwvAS7aMxQ+IBAB4dy5WF9pBpQntnNr430T5CwT/ey3b8UdqJ2n
k1UTCfOyx7CW8hFZtAjOl1ajsocSLrNcIN4+nng3orHl7T3IP30gdcgc6nsM
UmHqZ/BOLYF69RXK7bsPisvtUXm0FqQBfrAbx2NV+UZUFLK2CW5N2pkzsTEy
E5JNifBSroTq8AvKXNQOli6TGdvaTpT45B3xlj4i0QMuF116JhL5tj5wuX0S
5TuGwFx5FU7p42A/WpvCXupQNb0pVHPTyKcHp2UrB02CfyiXj82PG8Rigzuq
Y7ZR6LV5UPf9jV5f4Diluo4T6Ec2Cu0rkNWpF0qqBsO7bSaEZdmkS+LOQpXc
SIEsYApEzQrYcRmhmxYMUYt3VB0dDNOJOyTzi4UhdyUUi04jus1FVHz9jXiL
uTMuFdPFUJf/Saq0eRDEZ8A6zhv6Yz0gXeiEQpMG/l/mok+Xw9DW3+Lgcvrc
WxQ8PwryF6eo/HMfSPpeIWXianiM7YaKHxfIXytHDvVH8ooECJcNJNvmBWjm
+hGmHcXcuZI3QSiQpcIjpidEH59SVvYs2Ie/RKFyAGyNrHQmqxguW+si59VE
lAma42KyFpZ1Z0j2jwyhba7D9/JRjsPt9IbbrURY5huJd2SDxL5BCWmsFYrJ
yZDxk5jE5b2Qec8TLr6vKXzaGFR5OkEZdYj0gm0UeboXstetZm2lo9QlndF0
2XZY59ZB4RYV+D+mYmnSXkRF7WdtpydzzR4Kt3pAS/fhdWQNnBaroIkYisC5
m2CvkCCzeCTczo5DhYDbay9tKYK7oDMSn8VDdX3NT/55c8A7JLN6VmLdjKA3
p6BKq6GRqZcgb8zA/8YSKPgeKNQz4Fl29slxFaJ8jBiZgYsQeeQgybYrIY6Y
Bd7VCubdhmTUbr4TghUWSFeqUdmyGWI9LrPaaQHpv++m8m9yVOzaj9BFo6G7
m+xovzrvPARvO0GWc56E2a3xZPhFlN4QYlhqMnhhzri8YDOM+nKKbTcCwflT
kPU5FdIhA6CY1BiavUMR/6gpeLv6QLlsAs5cWw9lbg4MA87Q14NaqKZNJq8F
o+B+rBZSuw+A4EcE3AYGI7RaidieClTMYrE3k9M7xvDOCIzVIf7EULgFNUL5
hrnQ7hIhbM9ZeGWFIbHNJNhSx1Nk6U1YJrqh9Ek7RL/rhzTlTvi32gTVrLOM
6tZUaAc1IUPUCNgSOW7mfy0VE17MkT4R6/Cl7gkYaxth/dCPYsNzYBz1kjpv
2IYfa7dDtvdvKrYcgtWPiyWrOuWievF70vUbALcTmzHS9xAszbpDlOYOydnT
FJJXC5Ln26jo5iXSrozHzWbJGFOQjpKhrrB7DaDOggQuLjf+k12vRkhTVkI7
T0YlV8fDsjmMlEO5XPtsaSacFhxF1tIQtPh4CM4jkhAZ8oiKvnwhbXUq8+93
/MaiLNoy6CBM7gTdx6+kqG1BTVIazFvq4UmvBChbcntH3llnQGE6uFRMwp2U
EzAMDqFrYzbBq8AV+tShWHFlF+yKMcgtzGH5yA3SuWZRcccpMISmUEXtI+TN
FIKc42F1/ZXsTjxI7d2Q3T8dUZ3nIzArGO4XLsE4sBDKg/0guLaThs3UwcJy
4siTSZQ3YAGcyvSI/SOb4z+vr1Jm83jET1iCL9+y8bCWHomWE6RXc9+r/Pvt
QfXTYTDGXCV1TEcI226hM7+sZ331LknfDIR9/C2SXNhPpila6Lu7wLo1jXJK
fsG1H9cgmPOZZAHbyd65ikKDNYhcxp1hTJx1VCq73lVqiPtONcwQiE52QgkT
h/gOK5H+lwxe/duisj3rzzVcbrz6cWvU57tJnY72Q9ayaIRMGY47q5IRv80f
qzR7II3uiNvSV5CN3ezg48rs2ih5TChs3gyCTj6IHCwGf34oBUwawUaldtLW
tSsQ4rUeGpM3sj52Q+mVSci+EQfV8U3IbzIaXnPjIb49hxpd3weDtgleW/JQ
tDMZyrrj4OM8FsLn0TCtXfoTFzw8l6H6xFqEXugNy8yljCiA26viDYqQSOZv
QexfUlTvC4E5fxl44QZHHyVvZqPRqM2oniQHf8UJii7wxciGqXD/PBt83xgq
Z2OSx5BMFMRvhfmXMPiEd0fivWIyHbOST/M/OB2ZoYXmBaeLys6wnDFsGSS7
Skl3tT2U9f/bS7X5rWZKli+BpXdrsozJZBSl0WRdGUgaDeujRgvZvqynyPI2
bLtSVq+1Rf7XFgj7S4/+FbthLWoIbdwexjbXSvH1f4NY/Zbkx3xR+J07L6P5
oCWhkdvLVywzkmWXF9SzR1FCuxys6MJ922Y1ghIOboWlIJLFo0VwXzSTxfTp
qJ7C5RBUx16QV68jEOlGQy45gNirDeDVi8UvPss5TgXCIufyiSd7XIVy9z1O
H88MQfWf8ZTeIwPRW7l9QOvUKVDrr1BJciOUOolglX6k2O6+0KVe5J5nj4bL
BR70xzvC34mdO6aCLCczmB99WDtL/VG8eRSqFNy3RxfPnEO123B2nXRyXJ/5
fRWsn17AIvnEGDLYGDWwLv3azoDcyD0cF72i+z9UfX9Ai/v7/hBCMXQyhCEJ
YRL23NcwCUOYJEk0hBCGZAiTJElWwiSZJCFMhRBnEoYwhHHCOGEIO4Q4Hb7P
6Tkfvu/+SbZne57X6/5xXfevFyoWjIR63UfSvP+H9Dcf1txn28nR0Nzwgkf7
GJTm+kHdoZDJrquGWeUFntt4hvegV837wmeFwP+dCKLDyyl7DMtxMhZyfQEd
1YgTviW79XXR4dgBaLTvSDtuImez+rwj28s9lDjsGshuHYsxOY6Rs8kDxt2d
oMIarlauaSaj9tOJdclfSPNZjlzaiZK03gh74I/sPUO4WE2ZG0k7cvG6oR4b
wavzg7HYpTOKVG4OlGyIlSSD+qC4OhAeQ0bj8+ydSGnIh3YV16t6aSK7PjG/
+FyPqfEokYshvNkdDpYHMLttpnqRLK9/1hb2HgkUEcDxcMv0Q0xwwQ6U9jgP
u6NA/rcWcB3RCOJeTaF+bEfhi/7L/7w/REf6ZUEyKQKPfdYj8Fop2Waw+H/O
EDwc9Sf0nbpRQsxSaOe+pZxKljvw68Au2AEGq8/PGIHbhwKIr+u4NenRhOtl
sK5H7tG9kIyahUUtT8JrQivWd2wgffc8ihy6Hk7rJsCwuz7XF/7yCDbWqy3x
VTghUJtGHo36I5B3lPyPqeA+KhYjFq2DfP4KpA9Jhe7oLIRNvg1TL2+uLvP1
aFhrpcLrVh+4/5FIsj4GVvekLC4/iMy+Yhw5mIxql2HQ1V1O+Q+9oTZOZ6RJ
LSFP/M7JhzUcPuz32j/juIzyJYsJ90fBen8Oim+zMvLIRtK1LRDn9oW+1zqG
ytES6I8YqNCjDvQLGsHgv5JiQr1g6LeW9Ie4vKz2NKsbKzPJ4F+PsarMZJrs
h5SR7igrXgnVcGe47lnNxSurmlHUmv+vNkORicAP1WRR7iHpNwFpZaco53lP
WMpMjL4Fu+YnvxJv8R6m8MBYDv/yxpH/xsif14etbwRtHS8IQh9S4GcuB+aR
fRg3nnxH6NgJcLrdHGWqdlBMEkLZguu15w+QUH4vH5iERWTfbgtXp1nhDn//
Faj3YQ90f35k1JFtGHXmjJ/fk9C3BSpWr4GoZX1yGD8Yup0F0O2pS2Ftc4mX
OaAGCws2PiLbdQHd1qZAMzcA1gcqZKteEW9yE7IvrQ+e8nzff98X2SEBuY6J
UI06SsGfQxCey+VleWe19NmnGAVuY/BwWBIq37SCUdoGMcP64V56CWwqf4Tt
vU0VnfpC+YzlV9E51PX9SdhNk6HAASif0hujFyWhtD7LwfbkUYHBSh4vZ0Dg
2xrVxlGQNR2H7IW/02hnrs5eOD+Zvt/IwbaB0YiJDkTDCwdRrJ4OReebJOyg
gvFia5zIPAxl1ghohitJfdAXcWtPwCYIoYTGnlBW55C790TkTJXC/0wPSK91
YrT3L8JwexXpj7wm05PzpB/chewVCf/T815V3AzuM5JIN19D/J31oA+aR8pm
3aE77EG8vAji1/9I6q/jmZSvMyHwlsJwtS8yX8fBTXUW6npqpNY9+yte5Owk
ObL3DscBVI0gz6pNFulm+DdRIuxhPqcvS7eRsedcVDz2gWjRKaqdfRBVixbB
f1QnyGZmkHTrQtY/crGXmAlfan47kS/EpSFInJ6Gz546hH8AHBr9qimwvs2A
9MBjzn9EnSe16zwmjl9EhpHfmXtHEmHvJ8G0htehvzQcFk8lVbWoB/+/uJxz
8O4omO+NR/mHQTA7Hvu5NpK2nK+vJ4qGrlktira7BZ8WXF4ks/ZqhLdehW4f
H8NpzB/IL2JtSfPZ5HSmGdSsfMRdGQfLkEEInMdxSF7x70z4+jGQ/cX5nCMH
tsJSvY2GpkQjG3eJt7o+43UkExl3Odlz7T4A6oP+jOifXeTC4+KAunYbYIhM
r7m/ipS5UJxQo9g5DIFtG6CqWwD867kg+xir14/ukLSuN1UGsPphGUz+jq2h
LOgAaXEBk52cQbr4LxS4IgnGZl1QbJDiUvOjyDgXi5lXEqCVREKXXhspssGo
EreFMCWR7I53RPSW4yzWLqBC5wng159DFSkXwBvbkRSXJ8L95FLcHsz5Ssuu
HgjUd4bulYCM26Xw9ZqCzOxjSHsaD4PjPkbU5i+yj7pPAYtYjPZyO5Qb5+Pg
4Y3Qv2H1vrmyxhYXjHdGQu4G6McqUHbYDZF5+1EZzdVt5M/3RGA9K8kzpETT
tMjuzcrJuPNk+KsJhKFNKL/eWmjfGsl+VTa5shjKLrM/LHvj6MgzLRzSG8Dj
fQiE31uTehKrzzM6wudVfegPDEWCc2/InrEYdlC2WM+ukdfeKRLvPlfgdaYW
2uZdR/mnztBEzKXqmVpI9fEk/G0Q61P9MXPIVmwbcQ6WN90haBkKZXZDshxc
RZqkwSS79oWy/8jE5x/bkZPP5YQE57tA9TGXDKsCSdj/H5JOGMYoZwXBfs80
BN+eC3dpC4int4W6e5K4uFtfVIVdpYIGWrh0WQp+3fpkcI+G/CVne/ULteSU
1ghVnZ6TrdEuKlfPh4d5AbKdesP+rhC65U/JtGIPpfFGwpaRRe57YkgWZyXr
p82knrcDr+ckI+xQRxhOj0fUugAEf+Gj8iVX81W2byKEe6LJMjkIoTobZO//
m301bj4Vj2kNo3sPuM++T9W6eCgUFRQ/kNt/3rPWTERSLwg+i2EILSFT0Rfi
v3hNCR2XI2rw71AkDKDMF46oXvMbQrvPgi3tOkk75ZO9uzsUwU1hPHGfihc5
wH7z7xQmGYrMwk0QG9dAsJmLpZSM5fTPMCsC/HMLqWpKBqXpusK1kRPCAjaT
6GMSTZuvRai9GvL2LN6UNYDqkgwnHOOhyVtApipXFPuMQUTyAkT470d12QjI
qxIge8DaIz0XQ7Q+5GbbyC6+oagPv0Gti6HaDfZCHvWSLJuPkKF3dyb9/HHo
eR7QVbZm9SITUtc2qApOJq23A5QvpkA67xUpQxwocLQzBJt8YFPepbBb67n6
umN2sD/7hWz2XRBXaz7CHrO264WMKEYD05b9pMm/QIUNuDyqA4vDMv36w9Bz
IOUPagjjBn+u1mJxE9g8PpE6uQWmXY2HNsQOgq9jkTO8KUzhLcjQ1ZOx29Qe
TtLmiPkBiBcVk6lnFBkSNlLM9GEQiTk8Vzz/IdzfNKiJzRsUHRntOHuUl6rg
s531aZmjydJoB1kjLhJP8SvG938/QvMI5A+qhdx75+H/qAVyFGNgzDpI4rS5
yBgaA/n5s6h4twmRFx0lr5+e4OSqdWe4qjyhmDmGeMp7fa0jSujbpws/P1th
Gknux2PI9khJtsut4PSXDrpFI+HUPgqBd12Rgs4wDnQFL71MLNUHg3e+mDky
JRpq1g7IbvOh2FjEyGYqEFXXE7oLk1DyfDk0/echqIqLK3/+vP5XHcIgDek3
fiBx3QJYlfbwGDgVrzvFwn5CLxgLHpFPhhKBPYNgLvlA9r3GwtQzAKYAB5Iu
AlNeuA5Vs1gclsqDdIsHRIPqo3y+KxL441mMdIAcXs5m8b6GCo4SYnvuR/7l
MTAdSSXt5B1cndqsRXAVDIEhaiR0AR8ZYfgIEjRqhEyzCOoSIQ46p6MicSg0
PaaR1iEdaVvaI3C4P2QJ3aGqE0eqNC8Ov6XdoaiWErhPuEr+v7tAFLQSDrMG
stj4BQm9R5F40FPSDWR1PqYtvMaKkCMVIVOVB6UhAhUPXPE9ychhj77bKXhv
A/AWu5HgbhaVybqg9LYdKnvKEJUcAHEH1ud37gmH0B7QxRElzI2D/P1aJJzn
ZsRRegUqLs4Hb/8QseHZZnyecg4OC+QQ3t7GvG5+luWdp/Hu/XkYyrmcheB+
A6QMXo8Sz46oeDITTr/5IOFebxj86qK8kPXDG5xgq/OE9OJcCu82GqKBXP+t
+yOuD8S5z2HYtt+iMMFGxK8+j5TLi8AP/kEGpSPKpEIkDJ4InW43LLs3k39Y
Syx/1URiSd0C0Z256Fp7PR4f3AW+5wQId2nIdNHrF5+WjIFuxm0SvVmCQk9n
WMa+I17XYipdOwfWHhwX9Rl6BHOeH2XXPI74DT6Q4YADI/x0jMn2SCTbP8vg
cYerl/Go4w1Z0RHiNW5AccuryO37GkgtqaSfNwEeRdOhftIFYZ2+ks4o5nIY
kQcYzfgjP/GH4e03sn6cjLQGgYjLkf+8R0PwLcb1BjcbOI7lpLwqI+N8bzvC
qq6QS1OuJ9PlZj/YFFk/rxHa76OIxcEQmo4xKt8fVNl7PDSLz5G2fik5eBFs
Mw8g2JIF414W379ow+jf25FiFzeDMrBfLWjvN0bCP2Mgat6dql78SZaQ7eAx
T6nK5xtd1Ffj6pK3qPqtFQw3vzB2xQ24+NOujlQwjo+weBZv1nJkaiviITWe
Y0KPOaHoZBzUn+xJ0WkiqkacJ8V2T1y9z9UT8faViXn3fUiDQ2Qa2J98Nw2E
10IuJqE570YWtEG4pjcqWkmgTh7DiBvNQXXt2Yh5M/cXD5kdS+aJ+ZRT1gUf
ymNh3LMOM8ekg1ef6/ORXpwMof1i4m2uJv0TGWw/8uEQPPbn9cVnXsMj0Fzz
t8z+HJQDOyO1aiMMy9uT4SYPHt/7QHF0BoRD+RAG/kb2r5bBFH0DPOGKGk4h
D7Or6Z8xfTwNl07XYP+U1d2nTlCEW0nr5Abh2qkk5fUi0w8pFzesvQ7CyX+S
bMwNyr/VFtq8/3pet65C1BQWP5U0hcXJB/zLPiSwlhFvV7o4/lg8yz96/juf
hMy6abCteEXqNu2hiZpE4penWT1OIkOoAFY7DeS616RpyNUf2EsT6YMxBuYi
Lcy9NkDc/irZdW6FwIQnZIhsTbL8xhBtKSNt2B0qnzcYiQM+/o/tVyy4zISa
3aHe3JsRTN1Excv6gzfFExGHuVknhTc5rKOvz8WOiuZz8zF5b7g8n9TcrGYP
rH/Z/utfTCRexSkKdp3583t8X0tZO/hWLPd9z3HiaAkrJ2ZSnfmlH5nH78Eu
dyt4bwci6no72C+yR35oA+R+jP75OdHvtkB6KhbFbQSgXuuQ87QFlNdyqaKL
M0bP2guj/hlJug9EwosmEv1op/95zrhJ8VT5xQ2Kya+4WoA/9xKv7Caj9C2l
rpu3g5zyIOhSH1nT03FwzXukte+G7K3sWu5sAcGZH8RL3UvS4zIyTk0i47EG
KNzTE8a72cTrvQAqz8tktuNy7gWfQ6HWHhBbdR9JPOMyeawRwRK9nRRdMkm/
Io2cenGzl9Q3J0C5ZBDpji4mj0wlFC8mo+I0wZpRRpLt+Yjaw3Em/qZvxNu9
TSwuuUSGxYtJL2kCnnY2AldzuVzet0jGa9O4X9zpzB8kSp32c11tDDdXTfeu
LlcvdCKAEm/thXDO9Z/vaeuuwdBLyZBd/0QKu54I9/sNte9zs8zkeY6kvLmH
vA4QCqY2hKbJTgT6X4MiPxUFpUlQO00ji3oY+Ke4WZcFJSyPXt7u5/24rvGG
bqUjjK8v/7KFzvsZ78N7YXFbC9UWOSpqiyCYd4MMWS5UnuMCvtcr4uesJeFh
F0rrtwKWbRkMz7qDLAauLzeyQwZ0HVsTr0XjmtjA65V5kJ+sotJOMihLesMW
wsmoOfYN5dAaxLWKI3FJA8i/JZHtRDzkkXPJsI7LI0fcD4W14yWyeXJ9K+7O
7HoFL4f0dRQ3t2Mhu2/RLiSWlZF+uJneFWsQGusC85bDXK/iou4Q03qqeFQH
2U0PknFZHXg8ZHl18wkknfeIMS6ZDF3MAfCy8vv5fF0JeawvrDsmIOzvHjBM
ekl6tQiqFwep6p9XlK3hZjsrpxUi+KgH1H+nkci3jNSSdWJ1dDb5aJ2hHHqS
3Gd/o/wey8HbqBUHrd8Mnzc7YBkfhMB+f1F2xF1SzptE4SqWd2iv1KyPYfQp
Es6RwF50nPj23L4Liu0Q2IurebNv+5YcOnD+0GY8StXSlnCqH42Upj6Ys2U/
AmtzOYbspdHkepnzh98rD/3c44hb7pAETIZnVAKko2xkcF0Bjzf9Id3fldEz
LX/uO78OH6rc9xQnjkXyHq6fQjPclbK3/00xTiz39OmCtLNucLzyF5y+24H3
obNYWJxJoj4xv3Be5QsKSD4E11EJEEXUYTGXglI7/Fdj5VQE25YQDpf34cFm
86bP/ZJhijxMjTf8BX6bexTRvSm0SzzAi/hTrO4wjFGHTWB0dgNgrvuOXO4N
h2BsMYU3qoV6QZvgq2+GQk0ogtsvhC6rMwybiBT/5FLoo1EQn79K2kYLMc0l
F4EfZBCsSUHG2hyU6f2QPdcRbyOaS869PwHvWK4XQfy2CIIbU+DpkAQeKhn/
t9sRuMBG/AXcXF/17GzGvKgQgsVKSMfeZRxWL4BPSDF0em4+urLjIcrZ1xbS
JkGM8Ae3h7oGDPTbZtEy01sIG2cSb7w/U32sGWxjeqGga3v4fOuJqGtzoF3N
g/J5Poz1hCi7nIRpXrsQPz8a9Qafgj8yUBiiRkIyq6ezT9ClwmYS9x87YX3H
9cDqp7SC7nUjGnj0KRKyaqGrbiNkF5pA9/U+E7dWCP5gD5hdjfjW+gJebn0K
ecAV+MeKEXVcBbWa9Y3x9jANdUTEtkkIql4HS6CFpMMzGWH3O6w9XoBoQzSK
Gt5B5p2VsCbvJrsOnTDTLREpExvBqcMEeLqroSwSQ7pqFQq2N4VE7IYBPU8i
9tkaVLhLobpfTgWHhQi3ayTZtngPPo+IR+LHLJREC2AfkEcVoy+D37ucirUT
IW3Eo0rPGDS018F/2TDkV/eFbbWZMvU8CH3bUkHUVAijOkLdKwgWFwMJtnZE
zjZnmN3GoqLKDWVju8Nwai2iShZCcyeREoo94XBiBOyL9sLLWQTdsnjqsWQj
cg61hHJLADR/BiK4/DeMvrkWvMchSKsD2PRyODzmcqmx1zJRbliAd13Womwk
N7cvzD0LskuzOV6oliN+8E74Tx+MsmNC8JavxuM1O2Cey2K1oquUUuEFiWsW
YjsloWjPLeQPDEVJXhHkA4tg1ReTbXwYlS9NRWjQaMRo66A4LR4F7g9g/vSl
Zm/T2qYgZd8BFKYrwL+3CU6uXZBg3gPzkhRoXAeR9tpTUhhF0CSdJvecaJjW
mUj11Q9B10rgnJGK+cF7UftgHLIvD8KlyH2Qz96ErLk3UHF5I7JHO8IrXYSw
PCXCpnVkufFHkp07Q1Ous7ixs5zyvQQY/eguzpkOI/fyNvDKFExUlBLbVuWh
wPM9lQR1Rvm4VhBnV3L2Y3odyNom0b3e6+DquBWG2GWMdZAPlOPtcNWSAXnv
MLjUnYLjI36g+lAQIr4uh4eXC8IKUymisSMy9PGgN2uQ7wpI5zuSqscO0r+e
hJwZSUgrP4HXj3chzW08HKbeRL12HL8t6FlE8sB0snSIIWP0YtSmJPBzxyPB
jw/5SmfkNPeGT+VCpJ2IhStvAbquT8GHH3nQvouF1DUYirOuKA6yhwNfjhxt
D8jrpKPaqkBgRhw5te0AnkMfGD8L0faP9RDncnuS3UsOp32dYB/yhkLnuMDS
zURyxTW6qtgCRd0e8HVdjMDUBshO7YYTD3bAN+8gQlnMPNP+7L96RsmJtSXR
C9dC+nkbKU74UuXVBJRm2CE/U/rThl5YUlfif/Y0DipyMeJeHEx/O0gU/fVI
U3eXSEaUgfeiigy3ejNxKatgcuHsafbYbKi3ipmHb9ah8GI8AkNSKGysG7o2
5rj49IHPUDJwPCpz7iDmIjdX1NA+iXxapyB0zxGUZTREzFw/ZDXYA8XEbMoM
H4fMxrtguL0WgudjoE24RcYvd8haNhz8lu1QmemEgms86JVLqEPFbvh1j4b9
uAyyj+LBfNRMtnddSTNTj1bz1fh8SwePYX64NEGHgvnLEVC2FeI3J2j04u1I
e7YHPt0Oo3DJelRmTEbgNn8IDjeE755uUCmHQ9nVA6HnR0Gb0grWcUfJ7+/3
WDWBy3Uo3K+R/erNJF28FIKUeBjsAlFRrkJlrTCIeY9JWrc+Irx5UD/djHyF
Fv4qHzwL3g/93dnQFH0j/WwfiFLFEKZNgHtXILvZafLd2QOKWunEK3BkCpey
chRfQN7Nc2Bqx9WSNRwUDYWhEcm3z6TClyvx7JUa0rQDlJ/Cfme/TVTldQm8
vSKkXHWA3eEYREXGwTh3JipexKH22jU4fSkW8sDeOO3N5RiFLyM4//LoDMl7
rCDNlt5Q5dxF2teJUB0vhcavtkTdm8VmZpYrzkvF0FGFSG22CwWOXXBpwUEU
LrwKyau5rOzxJFkL9mMOkwl1hYYZ7boX6kEzkB23G+7XrpJ70WxU+61H2NB7
kEWk1ciMy0xCoI8H3BupkL2vGMaZF7Bt2hNI7/MY6aMqmlP7DgxNvWAd0B4x
36QQ33tJkflnYUmKIbP7ePh3i0fZVdaOu/ZGQf96COv6hIpvjEZAh0LErQhG
cvlB8B5tRszsljB596D8a6OQ8roZrAHTWUzXEOL3rVDewxkV/86vu+4Em7Mz
9Xh9F8KpL7le7WHcDKXwo9yZFrx5K8SnF/zbV91RbDh3jClp5QTTpUcU3pur
idWU1CLVJh0Z+zaD/vEpSovoC0vz64ww0wG2h6PI5L4Sxz9y/X4Ww28QzXwO
47XPNX+Hds0H/5iZ9F/Pczzp0HxGdmcifBr7IPvtYJi2t0RVt96oTuiMlFW/
ZowZtI1JPXS3+P/+zvTeCZNNRuGvW6K6byvYPjZFguNUlH3jYqnaL58ovc86
dLFWIO7WRORf7IsRQ45AktAFUQUjYBm0j1743kBV3ZdkbX+drNOeU8GxzbBY
T5J+hoXaBuYh8FAXhNVfAa1mAG5XJSOubxXxFtjDMDAMvICnYrF/GcXROBz5
ax9s9S6T6u5tEszaSikbRkAqmg6p8xzIIidwz+2lh63zfcps2hh6XRvkvs0C
L6wbY2l6hdF2OUbF1o0oxFr4bKqNgnGbSNzHA1FxtVGcOYzFf1fEPh10EE07
Cu+yAqhj5iCzzly49bmGxl0yINvnBtNVdr1MExHQ9T4yg3bgSM43lIxWQVf/
L9LP6gXWfMOqSCDdpA7QBrA66ZxAvG2s/ttYfJqxjFRZ8az+XuNyzW/sJA1f
/IFsx2jY/dURTm16wOyTSbrbFTWvi1wmk8OUJih9I0aOJBH81OmUox4C4VI9
JUzszPr/VhSTwOrpnPNkeJBLZkU8gm+Nhce5PvBd3wiCiXVR+WEF8h9Ogi6c
IM27RKqmL8jexPGl8uujEH6E68mwrCz4n3MJLKYEcr+4jzL794XP4EC4Oetg
3TsLA6K3I7NbL6TdiYRhQXtSqd6Q4R7LHcM3iDV8I0mbhpJ6eBC5szxEWb2I
9LJhVLXCC06rIjFz/QlM27ALFaeCYRrB4VCzL4sDF46CZnw8WvnHIsqWicLd
neBzbAVE0aycbA5Gefv9yPq6AR6lq1DycAmiu+5GYN8i6J9/JvlDA6ytj1J5
LXb/XI6LeSoVOT3ohIqmN6FaZSV7u1q4nZaDroWnWK6/Fda0a5S2cwh4x8Jh
rs3tg6qOiXStFeRv5WwY7/15Rj3CwtybuhYx65MQ5HUWlxbeQ2FZAMwj5qHr
8ytQhFwmXduDTPnKQdAvqqCCbotg6DCfSnbFsTxkLCn2e0HVVgnlH57QfY9h
hI1eM4HOG2u+L2XDcBhXs7y9ZRClxbXA/P1xUAR0p4LEIvLvM5jjPn/+TQUn
QlB9ZCz4H2vBuvQQQtu1ht6vGUK7TEZO8nKI+rTmagCVr8kjdB3EDVmOeONm
zT5mPwiBaFgWWd47QZNTTleXxiIs2ExaaQ+U/tEW/MT/Ztw3UkJcPL/m3/aJ
LlDZ3KC230KmjInIyef6JAyH+uKr8iXi4rdQ4PORCKuTRP53ODv/ZGs9yZys
LShcOgHFU8LgaReD2t2O/rQn6m9uVLLnKvQfPpL6YQSJqu9TYDKXh+DpZrF4
qYKsUUtgNHFce1GjeCiWicg0i8U6p3Nr3tez9o6f9f+FRdy5VwGF66ATLKJL
TbdC2ptlOM3CuXhbcAw5zRwIgSqbiz/sakT2l/eTj4yVM88xJE0uY/h1fs1t
d9YnoIjFwtEsLzGvYTni6zKx1GHKz9er8sTgqY+TjycX31G55ZJt2uqfrxfV
K0Lp4cUQvmhJSvU9qn4tQsVfPChu/XfehHw5FdR1RWEtD1iWdSDd48XkIluG
wh4tWV/1jRK35iBs6RIIvezB61LF5BTwWW4xF1HtwmB0KiPb8ubweDkP+X8s
gLtrKLI/WMjmdQQHe6bBtGc7ac+Uk/X+lZr7CStxguw5a9OEI2Fv/zdVNWmC
0Mss9m/1g+xXbICV5aFVqz9TyuFwaBzlCOvA7uXvnijwbw/39IYwd64kq+9e
kh8fR7rSmVC7t4PN8p1GG9fAni9ETv2hyHw0DeI6Xug7irVZgyTQt3AhYT0f
4hUO7xdol0qGDwZKGasGX58E0UEzmTzDyejfA8V7NsN7cwyCzxeh61MNasdn
QNFqMrQdB4G3bSgjMvuR5GsIZNY4Cr7ZAPeubsDrsqOIvcbKQP8qKh87ANIG
dcDzPc0ov7dG9sd2UIc4UFTKQeh8X3D9dxe6Q9XQB/zjj8nQ6TX5bjyKygGh
yPEcBDXLhdTHOiPs2k2SjcwjX0cuJ6Vo0gflF7laJZvzfKpniIO2fxN2P+pT
18PrWL43GVN8Wd5yIhrZg8eAl/U7dejK8q+WtVE2sylMbfNIfnAOCYs6s36/
ARSTJlCznA0InrAc5qHlpN/MULZ9EfEemri+tBdSWEbeJicfAbRVVaTe+4q0
53ZA92ciQr9Mx7nPeoR95c5eU74LJes2V5g2TyJDJdfv5vtmIIyOX0i7zESZ
5onQqyZQx09OEnEvdq07PiZbk3gKa9EMbfOOQLk0FMLE0QjvmonRh1JgOczl
r6pLxsAafKEmrmhtlUiK3snQSsx0SV8M66SxCN9ph9jamxE2+ANJx9SFhRQ1
16Ws8kbAhF2wVXlRyXgvyD5zPRXuA2pBN34sApcfpqIFGhQEjYf4cwb5/sHH
5ze1JNqtS8DzGUW+Q/2R9nwtTJsiqHRja6Tt84P0spmyT4+DU/+GqOrXBwGT
NyDuohqGG08pqlk9pPgugf7mFIhXvCZRmyUwsRwwbWF/mBYQzMOOwbqftclT
1Cz26o+IPYvhXjgG/Ef1IV71gJL73YcOU2DNdIT+YXuKKZ8P+/RmyJzdm8UG
Auqadw4Ph2chZtg2xEW2gF35iJqe/cByJwSy+KCquZXcM3rWzIP89znlJQ7k
OrIUur9SKO/eP8g3LkXaUQnCHRsj2PRrXlnN3pX2IeWpB+T+uRscPANQPH4D
nBwaoofqFM590uLgp13o0JeLSZX/MQZO/bohJ1HDch5uzmlCf64+xf7OAvSI
y0PpoU0oq5RAsHgUgo+sYDFSL/R9vQZprr+BX1BOonAjiY6/JNv6VIpROLB7
V0pxhwORf4rlZs1ZDHRsnNi8dQGqQqbAFv6BNJFSJDRNR6V6Elz/6AgPkytS
XLqhcqYn1H9spsxDU2Dn2wSpD+Phmss9m9G1D7zauEBkbkMzb5eAd/2u2GP4
eOjychmPhEY/n1+2yEi+a4Twt5PCNtcZ4Zv9wDvbFLYds5F/uyMS3rZH+Llm
CDt5kcJ6XaBg8Qq4TBCiYM03ij9ihPT2fRLoLrB2UopKfTJkzRJgq9wJ2fSl
eGFjn3n1BFhVkRga8juiYjSwPZ7HxS/WdIVw9BUK9AqEr3cH+HgNZjlFFgJN
XI26y7AwqD9NhcCST2Efc1AVuRXKeW3I97QUGWOPIe7MHJYfHyZLUzXRjk0w
Xs4gc519SE7eAkvqPhRecYexyWUKDViGmDUDEVY9GrIXdaA4wnLhv9rCNHkh
NC8iELjiDOU/OfdzPWzj2rF2czHyGzdCSawTwvY7wiFrGGJbcVw20J3LOZSm
AJVfZyPiridCo+rBp6Az4tpI4TtSCmnuV0bRoBZCvw5BxAkl3Jn6sF3oCP4e
N9R7mANR8j4Ke/aYIkbGIfDvErKdnIG0R85wz+8N8t0BW8UHOtdcB68VRXCY
VQde1n6sDv1J5oKGqLjQCVFgeV3BAMzpthPhfmEQbNpHprOsbHRbjrTG7SAo
/kKSpKksF+jK4X73p+S7bjnCeqdD/3UCFHE8Uh+YSylDWXu+aDEJweU9PKWp
LE9ticJ6MxG4rj/ioiLBL5lNYdQArvpaMMe3QuXuFHgmqRG8YyRyVhEavo2G
35KLNd9TEeKEkO+/S/5pM1RiszhLlt6bLzGmBWN+UCbqZV2CusV0eFjlkB+f
QPLJvSDTxKGHrxqCRg4QT2gFV6YnlH5toH/Hh+mGCskRBZC/DST1SA/y3cbZ
fXHXWcivMwLZ6y7Q2nN/Ii17FkJr8ZE9TQi1yz2mLGYKTHCnsLdbibd3KQwT
JyK8Q2sMOKqD7ukTkrfujMBoAxWGjUVx9kkW64yFRjMQhh7HaJVRg/A3vWDQ
rUVcyz1k44+E17HGUHZ+S5qZabDuaQrl7iSYTuQRb99lxnWwCO5FDNTXP5P4
8QdyeTAdRSu4fqmwm52h/+ROkiUShLJ+Tup4n2Lsu0CXcRBS+TDGNjKEDHuu
MaadXymwqC2ME6pIJv5Kti0cpgxkBsBwOoARbN9EMdO9kRO4FaFtN6Aocwtk
+Y0QvpsHZfQK8l/RFh28D6HHq1hsKz6G/GsOsLw9Ta6XoqHutReqwQeIN44B
b308MsouQeeaQsqGTeHUzRWWtD+Jf7QXSca2h2+IO2RJaUhYeRMbe9hQoW8M
y9cdjEa4CDNnsLL/9w6xsP+f5N73LBX2S4Eooh8pm0+mZq81aHwiGR7uw+Gx
ZCwMeYfBfyUhoWE+mQrbkHblY9KY18MjNhcPZx9H8ooY6FouJYm1K8wbFiAy
cgN8m3aEYnwQPjeNg+3cKgQe7IuE1nNhYTG2luX3qntXST7hPF2qPIIo1yXw
FyfCy2U23HZvgPnRehSudoOu3g0mR9Ee9u5+0EUNJ9Gt3SSXdCJJaSxiBHwU
houh/HyNFHXnU/6+aZhi2wDNxyEwhIvwrMlayDsJELqUgfLUr5pJ0SQbhcay
mHJcTxSpd8PvyTpYw7h87eMlWkjKdyCy1R9QbBBCWNeZ+KMnY873bTBN9+D8
QsIiCAfPIdchTeH+xEmi2+IMfv1jUNR5z3SoNsLrqFBy+EE1qu74Ssyr7GBK
4UO0pivJ/1wFv+n5MAha070+XOxXO5Wrs8+dvhHq5hJGYjkAw5eVjOqxCIJ6
XEzAcuENaV9z8wgVPfeQusVGccHqcVB93oSCNsFw2L8CTq2zkB/xEC7LAOt2
guD5RlgKuD6cqr/ToXD7NaPte6eNkPu8ItOMb2R+ZKXqEh60vsVkazmO9Q+r
yP3gdhQ+qAWnmL4oepOBnNU3YfzjHDfXcHkkvC4nwUcwDWltPeHLi0PJTi52
LXV/TXadUlFYEgDbypdk8jhAEUcbIeJMU2h5Gdz6Gwzi0LtpUN+/zfW7ueym
RaYEqMWtGMuqAsaibQjtCXb/unDYUPixgtFdK2A0E5ZCursHpXmLoFr4npTh
nsi80xvG6//V5emDENTmEhf3GvVS7J8yBlLDVNY3DIdmlpFCD3H1UovsWa4y
oowi1RoIU7maFNMerma/Mo2L+RTutJfYqoQojeNmJjsdrwPXdB3URaWM+cg2
qKNbM3G9WFux+3emZM1sqAc1rvmcEg8heN+tZN7bGwnFAvj+OQha505QvRyE
ATIOZ8i9RpJ4HZcf+u63GXHytpA27MJo3QrJpz2Lo63xVC5lYIk5RF75EvBZ
PMob85QMPKcaW95hRh4SWm6CetkhsbjnFcq+JoFTEVdbEa7rA/XCX2fzhS3Y
T/6hm+EkbgLpyuCa62vb1qHqektUZB1A4Rbu+eSR9chllyuCW/mCF/9R7HCG
/Rw3NZnib3K1Tr6hFDe8G3j1FsIS941RFdfjcPvzXiTbJ4O7/C1J3wYyasdR
sNEPivO1Q1q4BOKdQ8E7cpaE81aT+XMduHfcT+7t1uLB3L+gG7mB8ZHmQfjb
A3Lo3xIu72V4N3YTdGUFWH71JZSTFeSeNAA9YmJwAvcQvLcxvIb2RrE6CVHR
qeCPYfnNMVauzxb/l+Pmzl5qxo+GsXZLmHwGk76Iw+tVn+9SeSNHlhssxpzh
W2D36Sx8JvNgGZiK13labr3eljOGZjGMk+NG6HYOQUV0I1ind4TtjJIM5+SM
4biG9E9CyL7qBwkMi+DbYgRMZ6bBfjR3RqH9+B1kKYthDHFPyeNqHWS7ppJA
nUtx+fsoLlYK+bRl5JrbAWUNAjA66G/4t3Fl+YYrZPXzSJdezMl67lC4Gyop
WFAfTqmdIOCFoDgvEpobD0m+axxinvKR05w75/jx13SUTHGE6tVaCPdpSPn7
cG4djt9lim+0RvjyWrCb1xVl57i5FnF/cvUCijFXGXXGIYpnPqBF249Q4BLC
HrVG+VpvJOzMQF/hWohqe6LPP+9h/Ks2V/P3Wx6Ci45LSt7YUJ3c4Zd87TsP
w1sGulPPSL1nA+mGv2Y0zQWQDztEKkkFedWbAlkOy/vuD4DHjuYQP9hEtoMr
qSJwPYvVvSBceBkRzVpD3iDjf+rZg2+0gn5dwf/8n7dtN+c/HZNJ0XcsaZo5
w2OGH1QnZ4Fn/5A0w0PJNKYz+OdnksfUnuDf3E4Jn3gshgMiDnaH4d4XErow
ZOzyijK/s3rXrDdSLTvgsKkpLFPNVLKAs2Hi3zfD5fYQhLU5Sxb7f/MO60ll
OE6KY2U/72fAvjVQyP+h8uQmsMi6wa7Ah+V4LAblTSXhnv7IT+H0Uf/PXYqp
1xIeQ5tCZHlIFc6dUZa8EOI9N5H1icUb287UfKaTOAAJ9YZDWshhBP7qQKj3
fxJ7ORxg5SyFtV9xFMRigKol+2A5LiGnlYFwYXFzfnEHmN+lUsGwdBIfT6ET
G+Phs/u/OeUn+oB/MBTJxltcfV+vu+B5cT5EfT4SUs1uprDfmJrXopZz588q
5ksRNns1eN86Ec/7B2Mb3AnyGyLiCd4Rf+C5n88fejARqg1PSbV4HfSnEuAf
OgbK9GLy+nsIfF7sRPpANbJ/fKUbH5NQ0HsMi9f3krZuOxiWyyku1ROa6dGw
3AlAIWZBr+yFKmtbFExm7fSLIxS3SYhL/rkoGBMDo3w/Kd4rqWrFE+I9bsnF
wVS3SZXpivwAFdSDBYxnBctF/mmMQp/GkO6fRfLATiTY5QjZ83+IF7SYbqhT
a67LeadCwpwWMI5OAa+LC3Ss/md6Z+Lc2F3QHN5NU6XfYZ4ZioSXIagKGI4P
g7eh6ulo8LsIUb3gPrzbVoO/vT/pKzeSZsc1ZB3YjEvX7sAhajQyZt+CS/p0
WP4SoNnrU4jI+QPV8fUgvnsP8jNcXXVUu1CEyyIRs2Mwcku0SPvoBGF/rndO
Of8FCbq+/h95//H8C0oWDQOvWx6T/Ns9xHbXsLh/H1Xm9YLNoStpFW8p07AQ
JuMWFNg/pYp2N1D5WAHtiKWIkLB+aOU0qJ388K7XAUjrWKA78YlR93KizNHs
Ht/vB8sNKQqyxkMxrZxM0rM0bdYOpKQEQ/G8tUS6diEJJ38g996HMWcmV9Mn
elmbUnYHI+eVAvb2bhAu11GQYTNs8Q6kW3Gbsf/CQHBnGITb6pN5oQQ9XE/h
7DYuL2LzV5P6VRkpyxPJ2IT1Eem1KGF8a5Q+/oiEbwnwGrUQLnuc4fp3A6gT
m0L3TzPod8wi3hIdwi9wNWXWLJGkYFwdSd8mcYjaEoF85Rw0nPXvuXBhNTii
17AwyYAWLSTF5V5IGZwG3e75EItLUDrFHjf0GtSrioZzyhbo+pwnseod5YY8
hj6vgsSLH1OVgovJKBZ3Q4fn9hLLNyfw67VD1OVJyB85FT5tBqG6zQTUbrUO
5l2d8G7udhT/WAR+7UKyHFpKlhXV5L68G2QD1iJ0VSp8F7XCqqfp8I1JhvTV
Ycw/dwr2H1ZBl1AbomMNERkej7DAUHhOvgbBACOpglxhOPCAkwUfd/hrWW7b
5hAeTt+E/N134WC3CXL1FYpxFkO901MiDrqFRc6b8DKlkYTX9A3FzewD1bQL
xDuxmipTo1nd84byewSZlpSiVNUKfgPyoJTuIulVK1kP2SO7cQC7NhFYZUkB
v9VQlHQJRLZNAa8hofBYswYD3E5CExUMY+eOiMqYAeWeSzjy+CASz1yuWSdd
WRjJHWaQuvb4Gkzhspu9n2broIjqSMa+68no2R4d+sQg+XoR3FL3wmYNp7Ts
LjB20nM5witdIS98S/yCJJTIO6Nxg22olHGxY9v4oSTymE/Wqtawly2EjyQE
uglPGPMibxTvbobkTEdJmcc2tFIfQdUPF8jv8Chy0V6oLw1BaNPF0HfrS1L/
v+muE18S96yT5IPxGvzKDkIk0lLOq63wcpoExaunTP6CAtb++pHl8CDYlFtr
7ssyugUV31wG0bJRFHZkC4yH5kDYJho503ogf2FdVu/E8Fq1Hifqx8Ou+3pU
u/oh+MZiuD73Qcni36BufYXcHwyGbp8foizjYXq7CNnKJkicsx0+N5ZCUtQL
mlWjyPDlDYX111Jpk80wXroBn52BcJ+5gsUDpaSYxfJvFtuX7WwA69+sfQ7/
DUNNMRAXNED24P2kHlhIqtjbZB6aS8vHJYAu7sI9xU0UyIZAeaceqaf1Z/Kd
VyBLweL/FXsRlnCUdBuC4HGkCyryvGBqyIPXsAGIejYB3rlXIQrdB11ws5rn
N/t4QtUmFY07HcXnmLXQL9DQ81uM5Kh4oqRbTKxk8pyNklinNZBMbFiTC4j5
/T48xkggejYJbaXxEORtJrU1hPF64gx5bjcYUqNY/B0AN/V+aFsKoBzkAnHG
cvAPecMU7o8jQzQo6rIWpatcYNA6MhHmvqj9IwPZT6PBdwwi4ZD64M+upFBJ
D8zseg++J09DP6o/PsdthGD5AqiOp0EhG4QwwRrYDZXC4eY6lvvNxLY9t5G9
ez0SPsbD/E2MuFGtYEqYS5biLxQ+1hEOYxzhruiJtMw2aJvOnevCuzCKKbMR
FIogzic7+kPddTPmm7dCnj8HOWMGoEw+B36Be1DitBOVp3cg5u81UGVEIeLb
QNjaqaDd1wCL5DEw1M1lAnsMRfBXKTwWq1ERA1TkDsHV1WsQvZPlyR1f0MPL
+ai3zwwncLgs5+4CVIziw+dQexzh74Zo5FuasaUcKYkbEXdoO7vfraGVBcGW
VU3nNIfw4oQaV/0Pwf6QjPVXHggNDIbnezUM7y6wvoTl/VdDcHVZBmQB/WBd
fBEB8034nroDQsedjNTwGxU+cpQ4DGR52JM8erguEQ4BDNKG7sG2LdwZvvYd
kimKfQbX9UHQ/LMeusMt2GsHk+zCdbJrPBDyJSxPl++G3ag8uHeei9vCVJiu
sTYnbyMpZFcY91njWB8+C8IDvUmkciKNJo5iUrojMJrFzgHN4B/hh+VVu1G1
l8XBt0/jYVfuDEmJS38UJvqhuu5UmDNXQCx9RyqpGPxutUllb6ZmKSlY/rSA
1YuP/YS7K8gpNxYxd1SwFPkjztcH5h5jIejvCpeTo2Hp+YAME/5ghi6MQVzL
ShbDPaCY8x3R0Midb1+2oDEOvlwD35scb6z2XIg7B7ncvVRgRvbeANwIYX3n
9250++0DDA2tK/l2sqNENDkIXnVPYMDZGKTP0qAgYAMlTBhWc92z23uxatBV
aF4WkenTRRR79EXlNe48ZPmtZErPi0f2Wa7uw7w+hsWk3Pna0uRVjMMJLics
XvmUFBcAbSdvGPtuJbOPC3gPNkH1XvgTe3eYvwsuFTdRPKghqtvfRWOPY4i5
bwdp6CmK/692UjVOT4kjU+FavQ7qF2GMqH8b2OyTqPrEAbivuE+aYfNqvrts
UDdkLqgLw/NAJijrDAr/vd+RbRnLzPukXKginn8DEtqvhCx3PITfP1Orw9xZ
RrJ181D4mSfhlfqSdBh3/rQQ+0gY4gHTP6wftgSh+iNrF71WUPifngjcPB+i
7Q1IcCMeotafOSza9yzd6LYZ6o/cuZ/ZPc7Rh8XpEHTxRL7lV38o71MtfG92
ANllXWrm6xi0rP/9/ms9+PbXSNWIm6mmrm1kTPn/kKzhN2SHDAHP1g4JT7tA
9Tc391t5+xZlzo+Dk64/fDwX4Yy8n0Tdt4I8VdFIOGWCeb8e5gVTEJpYH1Jv
F8Z5xkHcELO2Za4D2cLPkf4cd/aCyv2/mcf0iNQpEcT/9JyMD7NJiDPE92tP
5jYPSFYnltQX3jBhc7ZTpYrr7fBXTEZC9e8QvhvD1SP3XIGqN1xuU/c2jMzp
3VBvewxqz4lF9kAFi6l/1YbYDu1DQtexcND2g0FeRZlrfRF2cwykG04ykhYc
1ysJrwfD+utMSdBBuG6bAKmzhHH/WkBOmv4/Pyfw0lsqKeT2TPaCq9M2HIpg
5gyIQ0GDppKSJbGQv8qB+oeEIlcdQuEWbv5jaNPmNb/bdP2Mb/t5NX5ANSzg
1z516kWP66aD/2QZBa48QorX3AwMXfh2fM6pK1GbtojVfIAXxsUzDE+PM5ah
gyBlOYb1/ikyOO/H0J7RaGveBJu6N1XrX0PQchRa7TuLutPr/8xB2/+dSPpG
98BfmE5amRtKE4ch1/EcRKnymmcp7e6NuJODYDi4FBmdt0HXL50xbPBg/eTx
mtfzd3B8ovyoE1ZFqf/TR+6cI/46ri6iash24u9SUEIRa5ssnfuql4xgDAui
mLINdqjwZyC87gHDp+4ML7Y1pFuiGVNwAp3Yk/FzLVxv+0LyXAqn080hb2gl
/p93SJScSIpWj8kWw9VhW9ISKc4xH4FdWd191gUxdVgOW78J8rtxsqIeMJIC
3Vnc1/bq/9SG1Oxb7d8QG8LKyOnOEBRPgGsTLv+jSzlJmh5DaKYXawdK/cTZ
lrpImHsbxZZUKHxFXI3vhv89s+HfH0XL3VQY4sbKfDsILwNVL7nY5Pc56+Av
uSRJ3O0rsb+9lwyyUioJbgiP/q2gcL1APk+aQ2r8i2zDB1ClBxczsAn3UKlu
HopL+2PVqSSk9QqB2q5ILPpQRaJZWeTvOAdxmt+J9z2Y3BqcgrCWjnjTbzBi
1rfZsbiIF/JKrJ8MLv5Ea0gTHsniaK6mQXrmOcNzjhC7GLl+H9fbrVGVsJzF
H/9Q1Gh/uH+ooAg+6zu2sxgm6zMZjsci4mFLRBmWoupOBKTfhaRmupOhOcu/
s56RquwJV1s9j4fsl52R/Skawhuf6cbKdTDRQZI8WgWPktHgPb7azzLgIznt
HwovTTeE3eX4etz7f0jQcz+p1sdydoHPzUEJkqTDNH0Tqbv9Sbzs4WTb4Mdi
imiq8tmLaqYzSpJYznWLm3FUvHYLzK1bQt0wBQWx27EoMh/uf2vgMykdJTFX
sGBtNRI6dIKU3aOsNcUwhG9lgv7aDWHpYAjnnPspG4JtO+kebysUPlbG45yk
5rM/3zoESeXW/9nvZV0bSOJePKLq9q1h147b59LPbeCpOAvBPjkrS/WhyR8L
p3dO0BfUg9HdDrIRnlB2ukCWyN6IUqyFSJpB/AaBCB4QiYI/dpE6soi+t+D4
Ni9gOtT8uTDl1sULawJMEhNVp3O5HoE8lfitIjk9LJmDMLd9P7lvwMVj4C0e
BfFhXzjE9Ies3QZSfhiG8JCFcN/K2ftpNy7CmjkX7q+4ebXBhfOhG/uI+BSE
MKcK0nqvJfnrRK7P4c1gyL7vINWBZJI0vgHX4y1R2WQThH4OOBLBxd34w7V4
/OoAXsZ8R3nlnZ/rpB/bQZIw6W/kJDaUZM70l/RdFCuxlx/GqKOONXYoNNcA
3pVmTEGTXzGx4tkMLA5hlNKL4zPSa/tJV7cnpB4xzCr7nUiuKoUp5AmJfV+T
smwhSp+GcHY10QFxHqOh8+sEu+i2MHYzU+K8XZB7zoEuIooMr8yMTpBC6o+v
mJhaByD0b4dpdrew4fvLmuubbUyA4doAyNPaQyW6SAVHh0IXEwLbjxQIjD+I
t+hijYwoKtvAUMWud594VIm2U2TvNKiCFoO3cR1JFjVA2C4Zgsv7Qbf9AZ34
sBXSdL+adczxkCM/oTtmup5F6ct7CPORIHJKKVJuD4c6Ionc7zaH9Y+GEjuG
OystrcMk8E4tRfbohQg9Uw8+7VMhk3E+RHfyLCPqvI1GPMlCgbsHKr+1QkrZ
byj0WIyCfTzwWvlQ5Xt3yHvZIezvBDIuuUK8f2uSOzeBOSQAPl3EyHJmZaq2
G3xW90A4sdjlhyujm8L1Yba6fg/GkVmofCtHaAMFwkLsMX83F3MXzW4NB/5a
SBvUovKP6+CTx8nA5zZJCMUySEr2QjhjAShqA4K7sfr6LRulxxfC5hUC4zWW
43pvZeSnllPBgXWkSY6F2qcuTAYD2W4HoeS8J7LD2qLg0AhYQwch89VwWPJ9
4ZPSF9JHi6nKK5+0YzfCKXktVPONJBFPRZWjF/zz1kOW7Av3yHsk55WQ78gp
0MzYRdWaCRCbtL/irVucYTq/m7WF8+lx0Xo43DsEZQUXQzww+yVavb2I8o8+
sLMPhi3RTH6DjsKrpRskbi1QfCEcCq8Sht/8LtndZfd7lAcFzlsKgxc3o1jd
uIwJHtYLoc21GJX8jrXNa5G5dy3SmurwbuVXJPh0h+mgL8s/uyBzWSc0XnFI
0m6TUCIKHUkeT59DUKcN1HNnks+CCFi/e0M4LgZ+KUdRHsvZHfcPYkl1Kz+4
vO0E3piTlDM6EdJmc8g1ZD0UZ88Sf8F84sVPQKs3G2B3og4G3MmBvSQS7zw5
rJyypYDLl8lSIDoejPzL7aG550uim6xO8Icw5vZR8O+/G9N6RONbh62omsjq
XfIBJrn/DnzbkYTR67j+MP2Z5ihpbwfR1Cnk0qQN5sc3lggGpUCZlIxAN2+Y
o+S49Gc+CmZ2gGKrC7SW3yTC95NgRSEFupwi3b3aVB7P8va/P5L2lDdEdWNI
HH6b/B8JcPXdTsTwpyOryTpkTztOYS/Pk21EI2Rbr5Brs3bwaNcOdjHeeLdc
DVHSNFKMXEwlvdZAfyaYoto1xZGl+yHmr0F5h23g/XWKrKbLpE6aQvYlVvI4
7wL1sXukrRgNiXEDhGfrw33pBPAG9YXtqZjkb9eQYVJjxDTuAMOQ0VB8GAdB
QGtkGZOgmvL/2Hr/uBb3N358kgxhCHHCJIRkSO2+nncZwhAmISRDyO8khDCp
TL8swhAmYUgmHSZhiDOEIXQIQ5yQzjgdJ8T53qf7/XE+5/H57h+zdv/Y/Xpd
1/V8Xj9bgF3cE7r690jcMJtsfSIQ7acj+Vc/tPjyCrG/8f2/h9d5DK/P81AS
eIm2CX/Gw/tf8OiIL3tJpYW1zaQfOrpIsIbniMfvk/GxPwLtkpDchUFEbgeK
cN+I8JYToSsNQPoSJUxfub3WfgXk7Z6SzOs4FfXtj/Zu26Gp8IPAMZWyPFdD
xNlga9kuavIuFZreS2EqvUIeZ/2h2dWHNLdfkPlsCOa3sIfC/TkZx/1BMY13
w/b1eO39VJk8YTt7j0ztW1PGH6Ph2GU4ap714WzHaLgP/Y0KbNx+zB4D09i/
mYC1vRCunguDE1N7LLvOEZN2Ctn8lgeh8K6m8d1LoRkxBrIDrym6eCIMjU9S
8yOH4JDP/abmH0j33UCyslWkHO+IzakbEdCnAywnDRjVPg0ex0OQMbs1ZLnu
KPw0Es6X6nH7dy1UIxagxmkyhC3VVHTOF+zEQfCwTYPipRLK7/0huDis1n85
4/ViNnyUCCLJGhz54wnEbY7TqRsX0PCyBreGX4ajfwFEnddAy/yMiP1RFP4+
FLpr25kXt9Phdn8K1G23kNpbQ6oF9WG9Ecck307icDyHoxqPQJA2E1kOfG1v
3NShkHk9oK3TG7BBM15DduQYhVgPQ3unAIkVBuw5mgbF80gYa3wRXGce/BdO
QjC7nruWidHG/lPr2B/ZE7NQLXCEsu4pEt3kdKRmBIRqvheUu0M/2K4kkEe6
GP/ME4m5HIjqh37Q9ymi8opqSh40GVnvf4b5nJn0T9djYMEpBE/7nfTHKsll
fB2Y3wRA3ySX1MsGo37/d8jvpEGctjkW+w1gVT2zpdKt2yl020NkRTliYbN9
yDvDc0RdDxFsDm9IaS9GhCafShoWkjw2g7Lf9/6hP0NUCdCUyuFykMO2pgFQ
2/H1Nws9d4LOr0dAcjHPAxbytSCR3Qpw7YO41tZXux5nBS//xfak4WvLo9qP
Qp6spva95iuoyTe/2u/rmg3l95h1JFSjHzGCdH6G3zDt3yjKEUHZuBXZ5taD
akVp7foneh2EyyQHiPfZQRk1nVwOLUZc7mY4ZxbXHuc1qSecpgCq8uHM9y8F
ENSYSBeRxVRe5PWaaVEv8heu5PN1/h4Fe45HCLt0gMhtEEXf5Gsla0Y3haFN
CGmW76SBqkzYb4xDaHUsbHsmcTJUQaKZ60h1ewLdKkiDv24qIhh+tr2210hk
7asH3bRAig6qC8vOFNLHWShjSzjyikIhOFzKCHIiSTYhFY4TAvhY+vB6sMbx
86xqJjWFNng7ubf4L+dQfOb02jCeg+qC+VnG5WsJesUahF/PINsXviel5pcI
2Fd2hKrNSEaw65XU7NMAlmn2CLvoCM8Vb1HUrBOypsWh5jyHw9Z/J+FwLRm2
yCniywdy71dEBX4TEex4m8xvfiZdTSwjmJ9Gdi+3wjF5EMfzgyD66y0VXHmA
iOLDEHXnZz/JbzaEtjPfy0z7O9/LxWlla4jLOkFpbgfxnVRUV+ko61dXyJK7
o+DSOBjitlH5NxZRhWsQ1DAekt9ek0VXSZIITia+9qGwDUOhIRGib1wjw+z+
CFjL9y8tv+6HUDrAYfZv/AxTtICu0g+6On8xeescUHx1OioW+cDxWwMoJK70
vdUO6HL43reqMjNpmtlR+LgPpGmlIlVkT1IdyyJZ9CvymBkNRdEmMsQqyDRF
QI76eZAP3Enqp+n8seM5bnKUeB/+vCFwSfOHsf4eOjJzD7Rv0sh29QB51QyB
Z/jv8N6iQdG3X3+s31RzN1Zynp/3axPwXFp4bCRE09L4/m9dUkgxYDgV+vM1
aKtv1GHvKn7+cbwp6jSqo3l/haDTd8a4+SXlbRsL9bJPZOzUC+7TusExrTeU
vmPoS1FTtrDjQBS+4PfK9XLeZ2sMKSP5Lr5OQ+E/kIynfyGRY1dqMvUspKP5
2ny9c13W6e58ZP80BsIO5WQZVk5x+Q1h8nXj8wVu5f64J5n0Ab3tvw3yinIy
D50DRfl4UtMAiJdF8/7xAz5w6eyAheZcuH/whGRyN3J/uonclk2CcuYOpjTH
Cel/BkI/TIPqNCmKS4Uwi4/yuSGmBhAybWAJcUG28xRY7n3jeOdsSG/V1P49
7vcJcNXug2VJLlkzxiPC9CfJii+R6oOFwpnJ6PJxL6p7MRCvySBBfp40VbwB
qh5qxuNJJC+jqvvkfHkYx3MbQRjiitKph/B2UTxKX7eDzboW3jWJcI7i+zpK
Gz2pvWbm48+8n3DgEBR3vALj4OvQrOH7badPaY2yPg0Q+sCMwAenUHIyHYIv
bUjXUUzWsE21e0aRsAySZaspPOkRRYxJp/BRP5PMqmXEo9tQtNNw6GwGRjGg
NZRDZpJkhi9VbR0Jx8trEJakgSyEw9NjdVTIYSxJUGeK0HUi5ywGuttljOis
B3R/JkIsWA9VgZURvOLlpKhDKyiGzCFlr4EwP9wG14YHEDe4HaxjbzKW7O8k
8Y+nwvHbIFvVD+x4P+Rdmwhb7FK8uMFj/1sivp+K1ZHPA5e9dELNsP7QH39N
ErtFZO59FaIePK4IiAqH3PyalNfukaAVXwsvfmkiwbRDJOhggKbzDLLJ+LjR
ts58/z/Z8ipyfN4O8vByUh6QwmUep4Nb8P4ma5CGMb8vIcVdLcn++EKWSvv/
xHtt7Hp2mKx1re0wzuFrKYX+/Fq8/fAYB8WHECT0g/97NYojON2SLCR1iBiK
X1aRtJDvJaN/wuM41YNdjOJZB0hTdlDV2WYoOP4NrcLiULKRP5/pPJgDH1uw
pYs5bvTtDRlH835n0xru/DfqQXMzCH4hSQhv0Rn+z5tClHufirq1gmxsO5JM
7EICsRyW+loOa6wn661l5J7+MykMo0nw23RK3ieHh5cObuUdYf9Lf6jkOVKx
rSVVm5yh6DAQ3iM3oM8dDawzvJDtxMLPJRfVC7xQ2GoTsvv6ocopC/r+u7l7
lsGUMRii4yOhnyiFqrItq0nhOPWowVLh8A9kazMP1deOklP8VZjn+4M96YCS
D/aQut8kc2vuuk0uMaVf9bA1HAH9mY1UHuCH8g+nYXRKgS4/ALPKeRsvuBTO
qMbPxW633xAQyPdJ+fXuElb+WMSGDZ3Cpp09wgr+f15dsgbXfm47sr32mGWx
W+A4dgQ8p81lTXPV/1lbYdJpuvsHP9NCY3FATLGt9r359mpUrCfkbeFzNmom
9IDOfy/T1vMurLaurH+KDI6Z+yDdHIPxddNha32SZM0GUuinQ3B5shLLHm/n
+GeltCjLD9ZdBhgm8VjIrcc8vOiVjuv9mrNNOA5m/VoO7aJrdKojh2P7noZM
dpDCTqWjy6pbsN6fgGCPq1AV/sSYTa9ItXQ7GTJLSJdVSQF13SE51ZLW7rKi
YCufGzdwQzwcO0Wiy6hbaFXC4fA1ZnKf/gprnPdDO+owVf0chYi4fpQ5NhEl
YTWkdl4K9Y2VMFaGYqU4Be7rPaEzfWKiZnig6Jf3SPi0DjmjklG+ltuD/Ucy
wr43yD1YCfe+CeS4ZTWGFT5F4YhlKP2wDF72Z1Ft7Asx+475ODUZD7j7qlCv
hHLpIxQFhsIZ78i5YQEeTfsFhlIlRTXdBGf301T9ZRXSS7Qw9m4DpYsKpibv
cHfSFqQ/OoKMd444L9dAdL0e9Dd5f5nyzmumJLgxBEGejGrmJmnhz23hkiuG
cLIPmnsUYMiBdEjbGsk1gpOpcdtIjli03ZMCtf9lkqmnomJ/H7iP/EqPLInY
eXILxKJlcImVofCfee3dRqE0twkWTkpC+bR8BB1NQuXW+8jffgbiYREUs7Qh
gvucp+AV7+iU1QLbkONU2tUbERdukO78A8Z61wBnc2vs6Z4Ef4sJZYeVOG9v
Qun8/82e+N1VanLqAHaLHzITNJBEKsn/+2k4TkuDNDCZzLN2QmfYgpIlFjKx
hXAfdZeyb8jxxzUHdpn4IWfbzqEwTQXPNZw8Sg6hz7sqFLoF4f6Sv2GueERf
3p5B9ZUq3nf+1sDb4Xdbac2qrdA+T0F19/qQrBwByfuTePt5PRRLW1LIof6Y
3iweiZn34FLZHcPV9diKCk+4vOI447kOKBzljEJGCVWRP/6pQysL3IHg9+uR
9/oOQs42Yk1PD2Pc+nLYWl4lWc86bJllEMSnU5AeHwN3aoPNp+IgWVJKcTfq
ILj/ZOgcheji9wBddr0GO1wLwbQvVPWB0zc5W/HxwC6Ibv0T22AQdpzPZ9AH
nibBukUkcB/n431NA6cG0+F5aT0W/q9/tPbdL2TYGQrj5ijkfM1ETNw6JPcL
RVCDEWh1MgnmfQthOSdBRbP10JJH7THhs2+Q+VsmzK4ByBixDnLPM5A+i4Be
vgZNsvQwHiPszE/CwGsvUPQmH9HiPWQrn4di8TioDFul+ivnSdGeYGamQ7TB
F0FjTqHwYhPssZxAcbInqi7JkDenEzS+WyFdnAR2DN9XTbvFDtKAEcgYNRQF
w/VwXq6ntsmHIX3yDBl+HBe/H8hYZQsh/JoO9+F8HZ/9X26wGt6RProndE6c
Xg8WwvOwFrKZZ+hqpgc77A931nPNa57fNTgJsR/fV/Xvl1bslKdDU/WBStad
JnnIazJfTaPEnodgt30Loo6kcnr7hjSrTQsoRzSBPOI1qWddJGX7DajOTEDE
r6ORdc8OUbHzIBhfQC5hS6A4EE+mrc9IF6tFnL2Sk5FF+CIwwO96Npo0MaHL
9Y3wnx4Cy1N35N2U4mPqIbzI/RkVBZ4QbawLl+0RKDK4Q8f4kmrcDMTMmgjB
q31UMn46JCRDurQddNuUVFZvC9otdqjV4S5ye9jSOnJ8YCLMDTVkeXmZBJO3
IWPvTEQ8jqesCccgsg/Czl9TEJTEz+q9atiG/AvboXsWTBZRLLx29kKyeSVK
F6+CfvoBKuwcDjscgnrlCWpYko/gAeshmOmLkuyvFH7IBdK+kfAyz4DN3I5U
z7zZZUcmsqYGndiivxdh2ZvTtdcIFhZA0voBZJuy4D/wPJTuuxGTUwJDqDtN
T8tFSNx+WKXxUAbOIMdvXRG0axDyvLtD03AjjFH9Ybxkodgp6zFE1JiVPepM
pkVLSNHTjHq/t2RVuUbSv7pOotW7oIvic4Y1+pWYdfg+1PGfSSZ2gk6hhNpj
Alz8S2Cav4HE5s1UfVYNcZe/qebNXsSmbUJ+8wQ0tON9dE6bpZjfIAm2Rr4U
UpXHydFWeCyYBvW3i2Sz/USWsJaYP28bJBxvM+Q2wHTRaegFPWHMKSXDKH8Y
zncl1cC/qPrJO9LeaAXTOlcKXi7HABcrPBo3Q8kCHktFQQT9oDBULxsG2WYn
RJ81kP0MTxh3nqQIhwGouMTvz1b9+LieKH8JxHMu8LHfIXwdgHyFhhxvh8Jk
GITEpwWwO1TB2ctDcPeIJ/Nr/9p9kTDhVzbl4rDa9+ZObaHOPP0fLBA8Io/8
l9348Zkp66fa91lfbRi/OA+VAx7+PzG2f14h8+ogrtVPkHkfRmkcnzdQPpjv
YRj2sRQ5R6/CVBDKCAY7SI3mY2Sq05TUz+/xsaW7pynmOCenqvb0Ivj7j/Ov
2NeIjcx4gNJDPKdy9x+MNYv4XsQPp7yH+F4ajZefQHqZOyfXDuhyLRMug3lc
bXm/HIqatbBOuEbmfRwuEj31Dt9zhmxtG6I8cC3Kfz+Bq3ZqCLx4flra0hkq
RUvcnbkTNQ4ShPeqi+6df8G3sw1Ytfka7REfQcnuR6Q4UQfOozPJ/ntzSK5z
OL3KHeL8plBuraw9j/PFUCS7ucPUex1jvsPHpqPGt4NzkjMKJiQifZwCed2b
ISysG4oeEZzOqJFbkgaVvgGqj6aR1WMgIhoJ4XiqJSLujcejqgSU3X8IY8uB
sM5xB3uzF4zDdGSoP4KyFkxBWNZkmFhPnru8DUJG9jhE1G1FQcWdEeA9FKXb
eZ5Q89Sf21tJFPO6NbxGOUE8ns93zzrngewmAsjK2jDKhMEULuR72xkiD5Js
eBkp7ylJ23scrFlzSGBZJ5XUf0BKDztU2ifA0G8jiRoGkFKxhQRn75K1/BIZ
9n0i51VLYD3gjoTieNztxPPaIvs2WNkiHtY0fubNfAuv28sC20Jfh6+LMGyp
pMy/tLD9NhvKZx8Zu00PYZuvQnpVE+g006ggkpPp424INvI5poIQhY9lbyrY
36dCuZDvMW++ZPiBUws0hSjP2E9VmR2hn7mL0pd6oajn5Nrv5Tw+Cmc53+v+
429mGEXnUHaiBP4ruf2z2k1avux30l64RNVNN/04n+WsHzy28HPXVYE7SVyY
g4jFf5OyGV8rYWvjAtPTWzzvqDMPtg2AQHZPWhY/APpHM1DUtAccONv2IqMQ
6me/4NMcLdzmHIT0ThRC1m+DIaYD6UMnoti7G7wGTcbCWA3E3UMRuOcorFs/
Me51c0lucUHexgmIZu9h84wECKb3g+ROyo97VB3j5wz803ey+FdvaEIkFGy9
BvfbG0k528Jc2svZ6UI+lnv3FPesR1aRrXIVtEJeDy2cngDZBD+mqoc9Sgp2
wrE193xjR3Hcfi6UnSchefkU2Cd3wPXwdRBcbSU1ueop+/g4mD4PZyzd3pBz
vRvQpa5EtGMWhF1EyMjhfU+jenC4bfU70p3l+yCFt+H2+ZuDpH8PKMeHoPwV
358zIHc5LKOWk3i7HZyEMSicFgTh7CQS+e4gfRU/40K0XgANM672/dVVCbDc
4fmtZNJVShaNhTboFc9PpbuZMmlPmFxTYDqUTIl//Q1BpY6p2NYWgttNpGqH
29BX3QB7mmEb7uBnATqv/Qn6VA29GLAb4ZItCNkmx9zx26FcpGbkvbLJGt4S
moGuJNv0lPz3toUhuu9/9KFWPhCqF+eZiL/ekFBUQbJfzGSodidZg+FM8Mz7
lNPbAsN2Edzzu0E4ZBjE8U1he7Dnx/rNfXAAAh0Lx8BmkMwdDcWrnSRou5lM
2oJaGU8cFAeZ3p4R3NhLGktzku89COHOvSTaXEhVpXVgWNcIISV1Yb17h8TN
chjVH/yMY9WhI0xJ0HNauqEMjrtmQndEW3u+5NfekO7g421F9YSInv2JFGf6
I+xXjof7D0NysjM8Dq2F8sRnJvhic/jlqyBSSqjkt1RyP5UM4ZjpsAS7/HgG
otny2nN9yn+Nq45DWHGzo4yHZQFY//7Iu837Ub0+L8fcrAMwXnbBY6+PvJ/h
RA6s22IZx9NdObzpDXNqPfh5FCKq9z+85BaNehyHSQP2QDGN7y8ha/QEuu/v
KChailynXFx9fQOfbmyEsuoj2TxcIds4DNVp7ygiJ4C+ZG5BqaAXzI3rQdkg
n6wDdIzbhiuIfbcO6mtesHYQIKr+EF5/LLlJ7k1iUf3LbpJOcICx9BAsS16S
44ljiH4rgWTMODjvUONgw1cQP54L5xEd4WZoA5OgN2Jc+Vwb6cxQWAYNgG7Y
XITv/rcnRFV9nssW9N2MspkSZK2/jkuvDkJd4Irgz/lUbhsMQbNWZD3M98pL
5jBk9kdOLk6fIF3dJErv3BSjzudDYC30KV7D+ycjWo6DMmoYupvjYKRFcEqd
jIh2a/7D1WvlZNQ2qKrTa/3yj/sfY8WlM31dV9z0LbT18P0/30me1Y91+9uN
ndt4PQyrOiCvc/aPdf17yG6W6AFbc6cv+1rwiPttff6fa+TL/0LQ6AmIuPaY
7qXVZ4UD9kFkrSKnPxZAqv+Op65bIOldDMkep9pjnUfUhTLXC6Ep6bCdcoCo
zTRSbLRnw8OCEbGAn6FT1boBK9oZTRnNusHOvzlb87w+5jdNgE11kSpWl0Ho
0Qhf5iXDtcUO/tm7lVGxzhFChQ9cvBZzHKaIbOlpmO8XiFZPuO8cvkdOz/fC
RO/JQJuhftoejjF94HxjM0zNg0nfNYFk52QMq2oE1U95VObUB8KF36nmCyer
l59SdYYKwV/+rr3/mvGbEdAtCF5/OcMy8zXJNwsRF8TpPfUV0lekUMBIvj+y
1kcI2ZshZBqmItUvCfSlfzrm32oOWc5IxHzn5HkkkTXWDgGufWC25ZB7s1JS
PnSGV9EUuFsSqVS0CLqmqyDp6I6wS50QvusUuQf0w7bWRogfzCa3zY7QJA6E
xDyJXH7bDrGLHMO7bIRk1yasOcbZwM/cc7hrpPK4WLjf4u1ZVHUDTjd3gLN0
DawFq2B81RWqV3MRcrT1jzXX7FgG594Wcu7YF7YuA6Ba7IIsxCFuyEDEzB0A
WeQW2Cank/7EEjg27QTTEQe4PF6K+VIx3Jw5vBLL8d9XR0j9ojVs/Q6T5cxc
6OJSGbHT34zrrZMImdIbbhHDEf7qPZUbfoLH1Q3QvF9JWTl2EF1Zh+B2C5Ae
yOHZY37MU/870Pbg+8lU7Z0KVfcsqbrHZ1I2lqKs1xKULB0C0YxAKERCCDrq
yTa6H8nuN4byly2k+NIGeXQWqmI+L7mA4/DSwk8krubsGa2CIyOE5Nc/SFbD
ImgcxzP6fSSTwRdOQwVsecwYDne1hPHBSAjqJlCYmsd04rHNKTj7Lomf+5PY
dzsp9/9dq0+rWAdExxRS8OgMsuuzHnqJD6znrQyr6I6QW5yuffyNwiIuIOuG
G87XS4WpWMmoenemsJ0cDmsYiJXWOISNngjXX48halESqhZxukzD4bMJSTBJ
CFUct5g1MZ77jgtk/7Pj1aN21/6b8EcSpOI3pAlVkKqbmpwk41Fy8hdii1fA
Y2pvOMm2QpeTz4hfv2WyW6UhKn0sVKLOSC+VIbmoAcQHeH9Y9eEjJLsbDdO5
B1B7nqeibUqUTpmMvFdTIPu8luQrpIi2TEGfn1JgbDgc8m+3SfmuCUT1usPy
dQKq28Vg85pMVLgHQ8HJTdjq8VDm3aXop36wlKdRutAZyowRtLJnLEouzIY0
ZTZKIkKhG+kJi+9IjgMPRV4H3u+bdVgK/xhAHGVgivrOg+Infr6RezsTSVIf
Ubr/JLxesB4qOytjmuDAPBh8nV8fn43I9nJAZdnN2v8HCcMQvCkIHke4fZLl
ie6mBxAvf062TJa67u7P7tlTCJmLAwrXZUDk2QGugzlukHOfiu2mQxa7DJrM
V/TpwmYIdmb7uAVy67iSO0dzTm9VridDen0+XmMnpluxKQgPOkWCIi8YPnAy
GS+HZsgLKhY3xSyP/RCs2E3tv2iQfsEJ8vacvPk0RMypNXBb0pDjoJNJ8OYV
mbxTSDq8moY0TIYu3x3ydUcofc14VO+Mg0H1neyNDSELr0uJiZug8vYi5eej
ZMosIXHXvqhZwsnLOg05lwRC1Z/TXb63yanuIpTvXYDNX7bBkhROWr91VN1k
JdSui1DNJKO6txHKaWZGbD5OqsLcWhvhyuG13HtHoXu6jsIpCCU96uGt2z64
FDSCs3YghNUHYQ0PQ3mhnkLuD4el3XTSbn9PB6/Ho6ROPLLmNvrBIat/Ok/z
x7gh6p/+dHNcGIVqKKy7ulPy6mVw6zUftnUyOPtdIPuGLjBOnQKRwzWa+8kM
64mfON1bRQ5z18F2QYCgLe6Yb41Axum6EDtcIrct26Hql0pZGT0gMvihNJ+P
hWgLrpI1h+Mgx41M8Nl4kn8ZCMeDOYiaNhxq96lw81uE/G1xsO82ifdryedC
03gIt8ccqerTGsgujqfsw5xNnpREwYKWOFJ1E0EbnkC98DSixnK6zIffm4E5
sVAd6ILwdXzed3Lb+XBhNAi/lsLplmQEV3dARL+GsCaGUIbGD4asSlJW2ZHb
0JUwJ9aFSHSDlJemkmUl30ekptwDeQ6ToGoVwQhE/LyP2OgEaE7PhvAK34cu
tMUJWJteJmXfS8TmeyHQQQWTXwzzT+83tz2cbRjRFf4ffeB4ZTr8H3uwLjNV
/+Xrn1viVAuxr+ienV92m1C/uDrnau3/bls8++rZVvZYzKnadZNJOvwnN3es
4CK71esyq7Hy+G7oQwfWmyJrv+tzfxg7XbsF6RH14e7hzYrq6snS3YjS7jqc
GteJVcgcWPcF/DwuTYN67OU4EauJ4udryJ8DblM5uVs7DittRZg1pznbrOtI
VrLvGUpX5EL+MhL6BfasbpaKapr/DqkD39PEcu0kifrUkMcXNyxbrEOTSH72
bfItPnegRr0DUXks1ErenuksaTC2fkHRISbSr7jO601lY3jcaQyFeQ7KXR79
eE5xRy6h2Fz8n+c2/8pu5C7ORWQLvuZdub0TbMU8nlP2ucKYB/mjBPfJ8Ii7
XuANH9Wn94ymeg50vtcYkdNMaHZrKHuUABbvDRTgzs8Ms57mbFSHf3M5pDXp
lG4LhfiugaIdLpJpynlGXniPhDvaIOEMn+9gMveBuOFShOxxhb7nRpScr6Tk
PgshPQQI558m+/48xhZ88ZGqb9aHt08W2ibHQTDkBNzzMpE/UAOljZ95JXk0
m5S75/C6ayHPG03bv/B+jIWbSPKMz98vqTlA1aNNPMedG8PjPq9MxvRyEZ+P
+l1N0ZsmwBb/nDTK9Xz+6lPO3jz6X4xx83kSBHz7gRfFv76tvUbcH30hbcL7
lsNy01EwyBVWq5mMIHgtXgj5/eckkURR+kpOdiYbkH6Dn5VYIZ6McLYHrN48
74vb1gDG149Jp9jHc8tU/vm6u/L9O03WMia8mhAwlT/e4x9fQQMF4z6/itQu
fD6I6nZfSndoCcHvOirL54/PXvkJsrV8HXfcUH4ut8w7gmSDH5F7u+EQPI4g
1S0rmYKdObzQAqp9+xnxsPpwCp0BkzyGdCtMjKLpDkpf5QzVkMlMZt8cpP/W
GtUHUyGzj2TymAkw2qvItAiIWRz2Yx8ER7eDbkIfclvcBnJNH0S0/wm65V9R
GkDQTugFwZLt0upmWqgmvqzV1ZZVI2B7mwn2Mve3WXk+clufH+dSNSyXhjzn
fT2hWm7vXuNzGbSVfO9t81/n+HXlMI5+YAKpX/K6LKYDxy/c+FmRlvppKLk5
D/5ML4ja8z6T7EtOKG7WApIuY/B61UYY5M/J4toE4tFeZAnaTONvZsOyRUzO
0U9JGXebtvmeQ+TB4yjP/9+sJJOeJPF1odh3mrSdZsBR1B6iBV8oWvCG3Pvs
ouIiZ6SH2aN6eSE5j79ERg7j2iVvR1SGHg0/neP41Rk+3+PBGEZy7QiVdEml
svEKTO7yJ8QZs0jQpjGV/toFn/pvgFxRQtXt8ul82UHoC0ykVqsQd6c9nHZx
slTsQwHf+iNiFo8NTTP5ORDn16ZDt56fZ1m+0glB3LGqaW0Y2ce3jDmsHkRz
ObuV3JCzeXfItHEeo7gVAPHcFBIt7g/p60IyhDYk8W4jo7r+p9SxpTfCWgg4
vW6T7qy3DpJMJ1hXnmfMfWMQnbSe8m6NQ8nIOig/fJUExmc+iXeToLJvUXtt
+7tjIIhOlLoETYG86jMZhg0jgX8io07i47Gy5fa19xvSZDUyzMMgEOf5hKcM
QsTn/STdZCaXl5ytXDGb5Af9IZvlBtmh8+TypSEEH78yJa/E2JbEx7vCmgcj
5nRHmCa2Z3TCG9RksRbKGXyelnrpNfIYw9nK5ZsZwdUbpDPNpArV7B97rDjK
F7F3NiFqgwsM4Uug2rgKL3xPQJm9kde9Q3uScGkuUjvwvtvNrQ7DJApE6Tlv
6JP5HmCR9Y6gyNceEb/8RuLiYCQvGgTL4e8cXzrK53gPu0Ji121MfrIOCn/e
R1kxvDWCk0bC7M3xEydOX3rxszuiB3RCqyW6f30S8qnEDvZD1d5usD42kOZi
/9rvBRW0wadByTBu+0i6IyMoOnUFDv58Aarn+6Vez0LgPvssSdICIRwfD5N1
MwXrn5H0NcfRR/jXyt3TVicglDSHZHRDMuVoYe3WCc7tMki3W8+YW/XjbN9J
BK/lOIpiIcp88iBc1ADh4ytJ4r2U5AscYAtP/KETozUn6cHX3Yj2spIxygfR
8WbSHztLsp1gFNnFdLXmEVw0uxHej5NFnRNU7F36OCuDxy9tk1CcY48L959D
GzEaHl04OS3owDoN+Q2me3dpzboShNxuzdb9Rc/qV+9gxWMu+fafsM7P/sEx
v5Qndn5+S6aw4aMtfHxGMfo/8YDf7JJY7W+7WKZVgu+DlWd8G90ezc6rv4N9
2/cgO1TygrX/poSi91426C2vY1xlhQjrP+c/tnPBuJU/zvlU8gsifDhs08OB
PejD16g/KM3ApCk38cXvKsYtacNaOvG69u6Rn6HrOJ4sYdPIefJgFN8cAMGq
dEbUIYmq3g2BYrc/+rw7B92CqWQ47wlt1wHIqtMbdvs4fhQkhjftgnvdK2Q0
TUb2X9yePzobS85VogpL0DY9ETrbBBQ6NsTKRhr4db4O4+etFL61jHYYu7HG
awmkWgVU3Y2EUiYn24EvNH6cgJV1UsLZZQwi5j+kkr4s/MYdRJR4NjwKm0PY
IQxmWR/op12i6pwtpFpOqD43FH1i4uH4cS8CzrWEYXMzBDyeA+furWCQlVCI
J98LVTuK8MmWAMHPTvBefgDBc8TQe/I1aDT6GiKixdD9Whdl8/vBedj/5oJs
n4dQeSLU29cjvPsJ8u86Hk753khwzYUgvKlU5fQbOWX1hbjBVsgUHSD4fgJh
T+xQvvYaiXrsJ7ZxXwx/ooZ5KD+jMn3HQChDhsHkc5Icaxog0ZyMEl9f6J+l
oKLjERiXLMDAzIsQTGhPogshUJe/J8Gqh+Surya/j2pMuv4rKvftQU2/jkjO
4uzHAT9SPn1HzhnHEbJuMlr5FiOzTw4Us/yhr8lCbuxmRLz7SLLeHswDrRa6
1DQmSGbCXXkGNEH/zn+t3PwMkk6ZpEqsZCzxgRwvegZn91UQ9Qqhosh+qLnX
FHFPh0NyKR6eW1MhWrUd4Ss31R4v8epPzsbPVPzHQShG59H89Ryf6l1G7gHX
aOHqTEg181BxLAmankKIXyzE5hQNii6mQaBb5v10Ug9WariMCjfOvt7bg4FT
TLD1eIwghywICkbQ8MWZMG7vhaxhg6DrG00RlQIknriKZRVpUN2qQzqISGh6
Qaa7GxDRMRYuy4xw9+sFXbojFIN3kHvfSIRwfCQmtSvyKk5AdLAlvgzfhdSh
erDlrSA4MZE0LIc/vPQwpMSTaACgXzIS7j2PQbT9Kinz9pJxAbfn73I8s3IG
ibUzEfzXLYQU+EBwuBdjdhFBOWIkLDmtYezP6Qh3KapUK2Bc3h4JmecQlM/n
6NhuLcP07echtZsM9a7DlP6Y49R7TsGkfEeWxrcpISsVc0seIit+M6b7JMOw
eCi8bk5E8rARkD49jqADO6E4Zya5ZyaKX8UgvBuDUOyBy/7B0DQdjarlexE2
xw9DdD8j6iOn57ePhu5iIlN9mOO8wd6QTfaioocbYJnBYWF2PwIWdkTQSQ7L
LGvOuBnt4Czh9aQl+grE9v1QZLwGy96HpFrQggrqDUPmUQ1qonOgdX1Chlf+
pMyeQsKsT+RWNY3HbOvCSbC7L6maz+LjZE8KyL/ONERk6X/o349n+Xw3w6Uw
ujVqByzX56D4uhqiOiNJv7sR8ma6Iuavlog5tARSy1HIfesi+5oAWXMaQfn3
Isi7XSTPsWkoGr4BIY+aQJZlB9nRpeQV3Ybjbtk4P1uP9pM53d0tgaJdlqAg
wxOSoiRSUmtkv2+KcP/eGLJhC5YFXYXixjSY8t5SdQFfk1wUOQfZvQmGvivJ
ePIrSSdPg1gXycmWGpaUWSj0DEXBdxeEWwls9zREb1wH2dflTMXKxcjLS0WY
sxDaehxXXbUDWeVxMLQYgrJlgSg8XgDVztao6jwWNa83QRO6GK3uX0PyWBmU
Sm+YR/P9W3QbE1A9YQSK/u4I64OfyL/5cnhZg2Hb0I2q7Buj+uEBFN72RslH
OZyuJCN2axJEnPJ00g2C1JgCv/kcP6ubghfdf4XHUm5t+/jDkHAMwkNZUH+Z
BUXsbsoYG4PNnbdhGbMDYX9wnLYbpysXXafEKfFwGrIPQeIxCJhwAK1epcB5
8WrcehWHca0qkTx7ClQZqxjn7udJ1Osl2TJdcbyxJ/vRfzNkt0IpN28b9Ica
w/z8Nu1MToV0E4cVWgtgPysahV2HwsVhHMxhEYj66ofcCxuhig9lQr1SoH4Y
BcPNSI5X1JB4VH9Ev/ZDYZ9+sF36X9273yVIp5fDOWA7qj0L4aGfCd3e84zD
vmyQ/R5ULZqAIrME8vY98Kj6OorqOiJ55kJIxnaj9NGHYI2YC/1JL+jv2kOb
t4dU+x0R/scpKn19Dp63jkO4dBU0YR2RtW8Bss+zMMzj+7qpll7Bl+w8hPXb
/6+NfXyN0Uzi41CSy8XkmNwQ2oNGBJzmazmzHPna+Xuyzuxu2wQ279d1vu2X
JfpN/5Dm16HuA997uz5i6U8ubITza1rbY0+trf6ytx9vs9d5+PZswWGCmFu+
o/1D/RoJ7vrG7b8N68QpvjGRk3yHOF1nc/d09BVHLWLHNmnBuv+5CEkr42qP
1S+chzN+CazBqYxK54ejacOFtZ93v8rPd1T7d2DLRXyOgNn5GmW9WoCa5S1Y
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
wxeMJ5u/orPFT5hdsjKGDG0cYfBDBfXuIHHZvV6wIwuU+KVBeXYSabadoIqr
TRFWbINC7gHZfRdCazIDvn1iUWhtxKkdt1O/MGY7yZ40+MXrHBiu9uzluwil
q/R4/XOU97gKt4o/kGQ5kysq2Q3nd63gCw8oTm4g4T+1p0u6QNHivMi8+CWS
p7rDtklbBO+IhUeHtTAr7o6yiFi4rlsMz+0OpDx+idSiYCh3dkFS64EIentZ
/2wmnRTEPfOEwC+VPBuNoyFLohg/2bEUvLzlIjvDvVBuZ5h8RQrE8V5TkJtX
pa9pmj9ZgZDMkeCSWU1Zx/kFCGz0qx6afh/5mkJxbhNpmruS3PYFmfS4T9qa
qxTWPQr8BZtJFaXjqTYCZMSKYbBrF1Q9jlKV93jwDjWk50kr4WO1iSJv3AJv
6fT6XPthi+7BfKZZ/T5vcaUGRgmG+u9S3wPINdpDbhey0Dt9LUoqxbA7ItTZ
du7kPGkyhDwN2e7dhJFhOlt4zwOx0iyHwvceIrlQt9/9hpLTWIbJDx+ok1t7
Msi2G4tLkI8eSrItxUhodB4Bx3tD3m0VWb7lEL6gHVre7shVnAxCalVx/bP7
TFyIiYJ+krrtXSXqhhKJm/0LLljcnUue1vU/OvvsA2O5zz1YrZIg1xgSrFgt
LipMhXKmKy1sdR3KJozGNU2Xk5OPzv7nrxLxW4YQN5HFsPCzWkO5MQaey6OY
rH4yVkxb2ToKvMIowKoX1E2WiPkT4rHZPAqCAx/I/+9yBE3ohB+briCozgzy
95/EJcNPU9SRfaj9UU1JxnuhssuF+YzDqPNmOEzFwS/izF2s5qTXos5wq7lB
CRnr4WbeCVX22VTkoNu77eNJ/SOO+NsZZqriz0QIPkUiaPA+Ul3bJfacMlsn
W0+J4++yeBVNWzbfYQ/cody3Q39vp/9/fsthnigLHI/QmZXkO/kWsstZftYi
r9L6NqrJkzD64Cq4NWcYw1WRQi760L91AF6bi3jrW5IskgeTa5PgU7aeYr/e
IH5/dlam/nyR+JLg37A6+nuu3Ar5wI6ICAmFs6cNzv64jFy5ITJzDBBkavHb
GprOePvb9/iRM3DjsIDJpakKuv/8J6yepCA2+FdtAqfWE+o/p+9wh2joGVL1
/SkWZOXC8J0NNAnBiN3+lBTXWF5Vw2nTELCN4U0UaX+L7M4eQngjNo6MvftQ
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
t6dElhQ+6ynVtXeG9eNDJDveBprDM8npWQB+6OS7/KMJF2sUC6/bOruiQ1uE
LllBJvcHoqa2C+d47RAqq2R4NPMcatpZYXXyGzh43MeOOVuhtu0PlTYZIbbD
dfZDQ5SuS0Plns1wd9qK2k4VpNj1hNzGOuj0nBaIaMDBw24OSgy6EK+rOzTr
v4gDtsaiZGQgJjw5A/W2Q+LMdocoeZgr7AITIZNxYg9lQ8jen4WwwUo8un8Q
b5vvgZtbC6hmj4PJkl4ILWKxiXZRzRC7vgnkY5gsa9dGATvVdajPm1PJj6WI
b2SFnLNKBL9bCVXFCJon2o7QNrEIvs1i+2T2nyn+mg/4lQkImNcJPtevoixh
CVTjXIn8j4N3oY3eh+17nNV+dXZvA4FFGaKNf+HZDs5szsnHWnORcy7XX4u3
nMeZrUrA20f/1au1cxx1Nt30+uvq9l3raVZTWyS23tcHNhYK0PXDqPT8AS6s
CcKWjUboJg3VrstA+OXe8BjXAKHrkxH0z5mNZyF98f0Ld76fh6tDLnh36ih9
3FcS7G+OwvazUD1kJiKCvVBTlQzhSWafC8ckkufFOgp9+RdlrjJAYc5w+BQo
kb1vGcIsG8LWwB7S02vg8PQQqTxGwnNGKZKLJyPQJR2iGVYwa3oVtWMuwzKa
Yb00j+9QrmYC16L5d+TtceQONWjKrXrty0l/cpx3702o2PZL/32aMEGy7tkP
OOj0FetXOXqaVb99+yvWXDKIyj/OhXDoAyrJs4dH/wng3ygg31uToayJIK/Z
qxF6rpgEw6Ip/WgiqafsxuqMzXA2HAhel84oNHCEa8JIlI/7t+bHoXOomL8e
HoEsb5343VNYX5+HO7OUsBQeR96s7biY/h68T3FYorPphw2eyy2PZLZm9Mtm
XGB3hj0bvOcNkjRtuVv+67nr4hiYjd6pH3vc26OIVZ2m1NezfumUn+chKZV9
N0sTotxtIJyuT0Py9SJSbuMjlneS4v3D0bHJbYgW7aDVE9agcLM/ol1uIVd6
AFX8HMpc0wPCwfZwuHiI3NTy3+goKTwNmnAtWX44BROPr+Tkn4mFj64iaMoR
yspaC4EsGkmPGkDRcAvxu57Wz+0j72hc+HkXQS0+U9HDPxE+9g9YR16n8QN+
IPPVe9I6tKPdN9eh0PMqYp+oKfbcRor96gS3ZRco9MQSqhwSDVXgDP29Ptjd
hDbxJ5UfW4b82gVIc5uJEnsbrsZXDJO/4zD7hgZJ41pBzrGYv+jQC5hgfoUz
Wr2Juz82jhNfqkT0pJ1c/PmI/+yPr8mdOK7ZAvCCj9efH+3u1oZTdo3ggu9V
/af9MoMV+nXIeTWCS1Pdx8HrCTDqfRiauw2QOWor0oOXI/189K/8YlXb4fb9
BYXXxHO71vhzTaUxnE7hqP899GY0HqVM1d9TM2/H/9QZ1JtakUNoKNRJWWLL
P0fiw5nDsKu0RUbDSKS/a4OEHzugmmhKPj8suIIhQGQ7HV/j3SG5ktl5dx6f
hso2mc62zkBxg1nQvN8JNb8FDKavRa5HYxTv4qNyQxO4CibBxC0DmnejUBfb
BoVnX9DZhQkQzHoj5p01hE+xM54P0+lbfJ29mKjsX9HEDurhU8XWPSdDnj4V
vDUBGNiD4XMzp5yFYtgvu5KftAq2tinwWbn6Nz3LaNfJejmyOnAos9E3BdRf
mzz7O/clahRn22EiLl6Zz0W+YDkzCy8qaAJdRvvW+7jGijiOj8bciwtrJa5W
X6XysQNd8pcUSeNnfJX8MOQk1T1bSZ5HDJZEzmwv+Vwo/y0eoI1UJf2ztZPL
ggUOLuPUPVwuDGrs8qDVBumUNgel2rWTpU8MdtXL/9xWq1GTb/W7Pei+B/wp
E1G1ygjllQfp0S525i5b++6350yd7wFZ1wLanbMG0klb4fBtJJw2rwFvyRNx
9Xemm9f6vqdoY2ZvdixRQrEtmo6c3Y/0ZqxmelV/EdTXH5NsKDsHK2ljQFUt
GHZEm8fiuNWH54uF8/pQVsxVKFds1v8W4bUMbjyWq0j+2L5+XOpVZSS/W0uV
7j4Q2TqBnzGBKg9Ew/PwGyobPBVJL4fAZO1OSj/H6gn6xsysf3bb6S9RIGS5
9QyHmYIrs4Cs8prYc8NSyl2p030X5vQvecji9YO+C+CZtptqKwWwjUnHq+OH
4WljBnXYJ8ov6YD0VSsR/u4W5WuNkJSbg15LnqDuy2JoxFX1+nz+TlZjUW0f
g8ykUVSrsxGqUg0hOONA6kh7Ci9uBMGFo2LBjQdizUpPFGzuprMXe5J6npgU
4QP146h+5YK8gTexJK0Cav+OUNg1Flu3v0aKjUlioXMRafq/pPAnLnA90uO3
NZbHddH3L37eGOWro2HddRZCeA9/a+P5dAIEz8aQtpkNeNfN9OMWLs0mQekp
Me+Ml8hjTDA0Z27UP09ZewPIj68Sy7ash8hkMwW32ae/X/LqgbDfvgZOi+Kh
MujCJXnvqf8f34V+CDxnyFnfmMH1jZuo3yObvaScdmUTbuHWOLhNmIfQ6en1
6yvv/10cOGY3AnkFyJg9ClX3GzP5eZf5noQvJyLXyBwqfnsKtTeGbMJkqp3x
ndwe76Xcjj9/0W/0EjHPhWH76t65YmTzI9AWDKOQPe0Ruq4ZZNOmkuCOFwR3
3JB2bTPSmgkRVmj22/yIsoIQcIVQFcxiSSr+HAp1h26ofXSNZHd4CJ69Copl
E6BJWEQmTgzPpkmdSWrlXPJYbIXkC8wfFZtwlmL7fiW3+KbwURtzj7ra6udh
uOwz/M32I+LwbE5x+z12S2fq93lPFy3n05D5SGQZLcRnLRjNnjT8gPQAC7h6
/xu/sLKO4vuFQvPjDGn8/qDKnU0hbD6I+I2YTJENai/O9hsO/pFhZCl5CO6D
OZSLNjBfZ6OT+DDUgPMatAhpmr5QFc4i2aXt4oC7IrT+1pKrSW7NBd+qhk98
I3CpzRHe8gj5bz+DgBIe5J8s9GNTNWrDJaRM4Gj0eajVGeKEUyuh1BaRwi4U
QSc7cr7dWO7AZNs62PXpxslmONXT0qv009ix4Si4SAJvrJ/IsmcbfVvPPgUU
UdAWiuQretkma9iD+Pk29esaP6YNokN6w2T3VggtQmG9ahre3HuMzKnfSdNz
DaKbBulskRf6e41+mAGl1xo4P+qMIdWpsA58Sel1fzL8UP8PxG/zt/5zecJO
KHocILPGk5CZsAgW0hsIcdgO/giWw9ws3xTJt2RIWzm1nj6Ke1zH0XFPoOi0
Xj/OUocDsKS2SBtoCQ8nKRImx/xGSz4zWJ4kM519NWTy4N/s+1ifOATYNcd6
J3/u/rdsBE235M77NeBS7kbr24kGMRnrPZph5Je2sOO0pd9+49X/93r9eVf9
vYtGJ/32P0k17KxAuvPGb9cFs/7F6N/tw0W+EnMn7N7ov6+xSuG2FoVyHk3W
/9be90oR5tfs4DQxOWLVnJWIr2a5u1X8IgrIDkCuYytkfcuC3WZj5K/V6ZS3
WMxOGLcW+R+OQ7NqDVXamcKX1xAdMmqhvnuRjMZexaPy1yhZ5IHCw/kk2NIF
DuvY+oR07IjwVWxvp2b3RVLHhVCQbi4W8BDr1xqeKgGVNxgIweJl5JrBA3Xc
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
nw3+2RaoDc6Dr1932Mxm+vlGlIK2cYfm01BIVKIV707qz3xB/pEsv0X9uZNI
6JUtzbi5FjXvRzOMa0td5N63I7K1LK/xIkdmt5xl7qCks1KzLpTmsxrplQNb
I2llK0E/erQQ+NJOeFz8ld/t/UFBz0lVP1EobrQDWYlVpFmDRfCOHASXy+2g
IWf1FivLmY0tz8gXqYaBoLu2ImTKWqJjaIjqcBeoWzE91d8/kiSsAgnRfE1u
5CyGjld/FOkT4mFgQ+o8V8PuCtPJyh+NQGzLUGI8opxU9i0hRW86IaRgF6n2
zoZvLItViesjwMf2CNn4Scris/g5UP/JcOvlNlHIixMj7GZfZd/XfJEjc2Uc
0uetIxYO9tAxZzW1Ap4TND/fgmZt7IYq3Vhs7jCZRk8sVj6n1orpRAa3THl7
367Chsf2wu2brYRt46I5ata+yd6NO+GM8Lg4vF2lrvzefe1rfFLJh+jTU6nO
BXusjt2H3FEcijQoqfYdAFnmOuIwxAH1HsHEseMlYhXXW1qvcg7RvTbDLJHF
Y1hMuYADui+gk+gK/8RNkPScSXQcXBHS1QTiEcnMZ5o6CiUDQkiUcBJWmZ1g
ciIfsteVUplHHIZ7XIdEZ6CS5lrXvMXaqh/YdOwpXIwfkJ1TWP7H3OxF0n3X
elO/kSwOTrKQ7ZHyCS2hfiuL2GhsQdj4zjDNaIM8FQ84D+gOSXajLVa22w5e
e08Qma+l1GpoNAmz7aH8bZT3N1TenMnodvAVhLyegVtzVKjR9oEQabsOTeh/
hviML4bvm4GwPu2C769OQZRlAZ0DgajcqQvjMCZnJahfIvaniprw61ddSujG
V11pgfkJxbxnem+gT2p70HEtHZXroP79MTnZldW2LTrbk0qGTSZaCw6jrOYA
FkUw+XbmLsYDHNx3Q9X9uPId87YyHXrFPCPaNW8jn52oKjh47eXXLDyu2CfL
TLPpNfsDdPbCAkiGrif3zwY16Z+xwHA1smN5Sh01PL2KGxj9mpe10BU2dlYR
nrl35v1DwxX37SjqwyX2i6d1Wf6omxpEF2V1oflebo2xGpU+dNHrx4rPJXdm
8VsriDBh2VjB8fg4IX9PMW+xrKeiX7lbG86jCarUp+hmk/6Ude9BU7xZLg6V
yYHYYDKBvowNo2XSR7BrLaaboaJoO/Eg8y/43Fms+JuaYwZ5ayavyXrqYaYx
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
zaKNfoA5szdx844ZCWkPvITQD56ChuoCIclRVylHhGw/TJPjxzfpE+kQi0pb
hvsOGtGYJ/fzlCd/9N04msnF9RBo7PoXSjq//K1B/tgXpfBlBH8MhKp8G24s
uAun6lx4awmoq3ZFSIOOX1NwnBj9swz63fWg8k/DXn2zFcbVf8FOFE8cZ3fG
akcmX3vsmkNcZHVE7nZEWiLaAslXFeLpPxUmwWGIjv+t35i3JhZHslHzehEM
R7J4L5XsQvh6rkZY9G6YNWfySaZD58b5vulHaFlP5edKc2bX3je+VZOxWu23
aiIT9Z9oyIm3+HPRVfX0+84VnNb8N/zjoKHC9k4Wgl8ox2dvK4D9rr/ovl76
ChqbJbzmXMc95jpvGcTw/IWJ/Lj9REi8MFcoc3USBnaM4++MUeX1TkfzqaZX
+KubOgg2WtP+qAFAj2yHn04nuuKWapP+VSW/x9kaZzpl9juYpxPadvccahVk
8EdeKl/Dw3Bs3qrJeZZ+IADVnoPgE3iJmOmy2l+aK5mvXEulAqaDBiMouwVq
vv2ZW+zfq9yG6awRP/PpjqFPqe7gDzj3Yfrv7wLQ4wg7L4u7sdiKgtWbSdC+
xjlP+DYVHp0dsC3jlfK7Ij93kjunq6L/QbHGKFsxosl4fZdpUP+FBkjdo0Wt
X3nCa00BsZ7QpvGeDn6NumCeI1YvPk+TrRtrOf5KmaD833djD3ge16H6GbOR
tVuAfP9vbFPRcHKjawukdHP7z3Fv2MxsH+1/7kGCJ8tbpzOCxf68LbnUpL/G
I8KVbdS90EFlaSw2OpYov7v7wpEGpjpQuxspTd9V/Pw/Y4T/vaqctja512ZN
KWKT1rMcDbkVir8/ZaCSjhFN2sg6fR29nu5FwfwuVFbgjLv3tyv66rpLnYb3
ZXLK/FP9FXQ6x4fnV4iGCZo7JgmX7lkJvZbOExyymyv5h8M8FtN6v+6poo24
4QwvaPelmMhHPSfpHRYRUY4JqYp7jOQX6fB4tpHVUze50pgv4HqDLL5jFwo+
XCIefb4R0fXGGByvOk3Ud7ZF6YMdaNXrM+qrVqB9nytNxi27kErEot4I6X0E
8o4XpLLDucRpZzL8B+xDkMsRxO6YrLzfWDwX5X27Q8N6kaK/fkhWrlOcfhSt
7XaW+TPTGP1KwkYQ2V8yUrWD2f71RJuQ8wH0rc2JBtlua5N53bnTk7c4rieI
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
HrG8qGMfbMC0wu9NxlegaY2Ss7p/jDmlbAwmDl9Fh3bZRx0azqLRn5hf4KnE
lxpf2UrfzA9QfK74uBmJ6l9p9ZBE9KiIUPY74huTo3fd+4BTriyO1ZUGo9Oa
UPi1GddkfGPPmFNLg5vK/r752RgD4GOryZt0Xct3utlTub7pliZc5Ag5Db4Q
SZ3ze6C4+wWkB38lQbZtqPOaNBSZNtVP554JpIeOFyrbdEqo4tZcbmg3cECj
3NKT0HzxS+QMu02te72iDoYsZqeduRE1831L9e6EIvYty2H/LD6FRpSlc7c/
bmwi9zgFXKfqOvfpuPDpyncV/niA1GsxTcZ7RtBVfJ59mudk26L5PBMjYcHx
wUIHnUye3zGU6zXzFL0Yeb3hvNEmKZ9ekbErChEQWof6tYyuUj6fJD4mWsTM
9ref/29W/8FB1liTsHTmB4icTkn9qi/DYpUvAi75wrHbPRbbE+WFlP2NuYk9
bFi8hIPJ5aZ0sJm1t6fnQGX/nbeZQGMiO4es6xhvd/VlOdW1prJa30LfEM6x
9TP+YFZ/If9Xe2H12jq+vJUpbxdzkDp6NOIYC6YzP33Jtw+QucqlYe8PYGDl
cPqo/VHGH5y20oIdDLMmeLbla/Y/5Re9quQTQofyrpXTudqYO3RuOzNqQ7/C
uP96eD8Zh6gjBpD0noj6yLvEZVs5sYrviyDD+UgQFiPpKzvbRGtMpEaO7Hy3
2G8D+fvFxOXLWMhnFhO/Bp5ZMLoEk25kwF+3H6jtLFit7q6YH+9QHv5DjSA3
HQ7/mbtJRHw4w3QP/qHYf+a3ruBG6VzIb+awHK/pFtLqNX/Br3gd2v9ojGf3
u7oBOu0bsbonS86gXDYWbu8b4+WjlzTjwlN6KD47lDfmBNF/0A0hxxOIbw07
44ZYvMLCTOandxjXT3nfpPBoXD/H8q17DAwjG4/8wqLkBXTuQUdaFNiN0cGI
86hf/ISYdbxAEtrYQb3zeGR3OQfxnTHKvah5biw0dJkeZB7D8Cc3Wnj8wS/O
6YfyLtM6CwY7VYWDe67xMxwy/tCB/70klUvhtmQ5fBzWEU31iRAX9SOuvbX+
OAcsejvQeeWNNszviYv5J/p9hPI7E4W+h0cKKpZnefPolcp3VB7+3zZKRZ9n
bFG2VTM+jL+0lgqSsV7CgvLRguzYez42IlzR1k3tgazNxy6W4g0j/rAjps/t
Rw64bGJ2q5oB/PO1esKcKY7CK+lkoWJlN2Fi6z78hgQ9qjmP+TNlmbsJb+5H
K89t+Z82yX+vDp/n8ZFlY4RxhR7CosoJwhV9dyGt8IuCz6s/LsIhh9v01NWm
uYWjJ2+G5HInUj9xG7IODISb/0W47f4bopKHRGTixeSrTT+I1zN/yI2KSM3g
jg10Mwrle5ndRTWV6WHV444h4RwlktuRCrpNmTAaHkPHwkXtK9HxDlX2W9yV
6UXiJB/ErtxFHj0+ip+hutS/a4zynmv/zFH08U0q03d6L15EA0Y3yEBvapV9
3/ZLjbPsyuKGyxd2pzo1p6hdR2tOZ0Qg+ZQ2hlbcs+Fm9XnK5UaFcKVbIvnp
O/sL/bp0E2aeV1Oc//FtbnPd3OO4z/0sGd/p4MM5X6zkfM+YcpIrOfT+DQN+
gegC/0qL8mnxdzj798b8vcocvnJBXyFAy0jY+OMK/z3dTUk7YZqq9LvdGWqU
aUfTfx1pQttWF1hOsOQxK7kDtav5TWoqgm6cjnD60UzF2tx9PpDuyUumPle2
4dPl33Eixn9LzbIGwaq4Bam5nkss/bOIxWwV1KhtQg/VBHhcngGPYXlSl3Vh
MCtmMespY7cqnjXLY3XpRDtY3Joo5qZ05TQPmukRwvtmaAp9AiyEJRI1AWds
aOokbwxJ9KN2XZkcVH+h0Y9QJ4xGzU8D5VheXtekjuejSexRJo/azGX4tn9W
9lF8Nrrpxdmeuc2Jzqkr56VwUgvF/6bGW2n9QxNE8IYwXtpfcb9qZBLzs5WF
0OOevXnbdif4DjrJfPPme5TPr2l/gC7vNk/ZJ/WRz1HUbgFZPawb9RrdH2uW
TVP+lj6R1QGdXstiZ7zW1hH9fv35Tye0hB4dLQTDf67z6/kz3ONrW2kdZ8C1
DnhDh96ugG/747Rgj5yIZe3IndLryvG+W9+I1+l7XEztc26ydlWM+WM2L/ik
irbCD5NUPqDNakV/K0kh/GdNpTG3WM69BPv4Jv4JK4HlaIh+057zeenO2y/6
zI+vfso/PNyBP9Ptl+KZkcHduO0ZLA7C7vgISN60RlA6kydftVqlHOvq963o
1rwfKPkwg8bfbMN7DSrg3/ld4If8MuFDhrXhnL9VNNnnZhp/Q197PbI2BRLx
3OGwGvdLWtJ3GawqQjH7+1bkug2Evtp2BPvrU4eVEngPYrUG1a/tIsZ7Gs+E
1U4bqXqPK8RSoxXVM2D9FH1VldZrrSfd46sR8oHJKfXHL6PG7Sw9/4GjKp6N
dotydxdExBwh8pd9EHKpHRJWtyUeS56xedqQp7xv+jxDftbs9kKvdobCrQNd
hTTrTsKj0esV+6XiQCOuMjA7BXZ3jhBnfSvYDV0Dx/1jIZH+Iu2l1xDbsht9
3rKxPovD1V7cGxUf/tmu9Xy/4L6888LtinUr77CUxizYR9sHlCPRLAxJ8yRI
7/6JpOqGoeaAFG6FbeFSWUeSNG3houeB0h0jkDmmHeTiOmlpoQQrniRi0bCX
SB/0ACLNFPJzUhT23v8Oj5jJv30BYiK6u8GyRq2QVIXthPXCaTDSHAjZiJk4
Z70Olt8lCJvhjbrP/nAQt6GOj/4ijuOZDl/YMhD1D/ug8s5xIjIXSR1dzJVj
z17J6tD5OjD/mOeyzYh0SGHz79OHbhzej+vlc5zSBr4h8jvPbLM+wSjNd2a+
Db6fgh67T2NnpG+7NkjabYqI40yONvuSDg+D7iS5nsUqOvzYhEI7pgckm+1F
SU8BmkYN/FweTQr22kJiPBthz44h5EQzpNtrwCwijOQlstiDn5sim/BEj8c/
m+yNDWb7af9dZ/mBg/SEiKfdhXZrmgshw4hivXPPPqAuemxcb1S92d64RZFQ
O4kkz9qAiI4sv0ysEzuffXOT4Z72WfF/8KQIqr+T2YuHdCzmjo1vJYy5Zi3U
7lAXXvp95/a886EBLa9S2axLZMntXyh2P0993rB83R/6MZ/SlSVM9+B03yD5
EaPRuW9/cF1LNITskUOFx+rNhYsthvAhQ47h/u3WNGHyTyXN3VDdphy3xqsH
8PpQpuirwT/Mnz1vdQr3yPQe7yMYCvU+3YQH6/fwGhv0/5B7ov1N6ObAYFp5
rZYMWGfUZG9LzrJcT2tPPOD7tfYS1N3tBdvjVAh+6CWkbrynmMOy1cVU5rCM
k6xomMcIhpFM0JQgaHYGXLL6QHZ1p9R5jD9UWhRiSO9tCA7bgxXfChCnPgOq
t2bD528n4hK7ntgZ5pCarWMRe2sr/FafQnrNWMRl+CLq+WoU5X0ksWnesLt8
nqRPOUPE62xIiOc1YjZJhqyZPTH8zm10c1Wjlp598VxXTD3v6CjH4RXWkp1h
m5viqd3e+jShm/+/V0Fbhgu10fDkysSveIdDfYXX3WbzYWZagqWkK3/+fGfe
OK1E8f7nk/twV53V+epXC7hFVyMUc7+pbQb38/xW3ilnIz/8VC/edpoe36Z8
Iz/5jqaAb3f5w12W/aH7D1mjTrU7fvuf/S3SNOT7O7QTIvpMELYZzhPMz1Tx
RvuZrOMw5COdnr6dyvctbPK867kMWEXOkBYFvyF+SVthNT6IWN5eiZJBneD5
zA7VA5j8pbE9WfmcpmcADRCzuIxHlQzztv1jEKe9u7kQP8xeGOXpIUjWdBYm
nmJ2KkP3v+n3V1tQn+GgbMNtMMPL629hMX+ityuUv+382TS2QTHf/oXc7Z65
/Nb1n/jpzVL5YU7PuKyVF2nRkDbUWGcnsei6949n/s/ls3sI9/6bihB0yl44
VzJKeN9pj3JuS01f0YSjLK4le84BvP1Yj7xPU3CscON/tpe7ZR8tNNFT7p87
P9/zuq8nCRcv+wpyC0HIk0Ur2iYXGT+Z7shsEN5Z3n+sW8jhZsp3hH1neZX8
fszmyubV8Yn5Y4QuIeOEFSOHCAWaLsr+rg/dQy0ezaUVKQxj40g6/iGzL/Iq
55ZsFQu919kLN2X2wtQzT3nrL28VfT7Up5KqV7Pac9v8daks/JfCRhvdtx3N
fHdG2ccI0ot41jIsdHyfTXTT2UOcSavp3NiKSloyfBBiQxmP0PFo9EPs7BsF
n+XMRyfpYgydTHvUnWR5a6snO6LgjBvSX85s0t8id5bTO2kgk0FkmdmWniti
aJGsEZsQy20m6kksV+iLF3GK9+rq7KTDe7DcoxEXdBlm/XMMXMKfEatl40j+
2n5N1q/b1FHUsntzer3NeJo72pDU5ZnyVktaCrF7DIXWCXqCn51EiFk8XjHP
TguMqGxlJ6rT8QLUbxwl1ldlSBWvglWPz1Iz7UMkYEOmsm8la+OpddhJlJ4Y
gOFL9tOkTxO507vV+JL7zfknLhGcVdtOynMoyKU79fZnerLVq2konTYM5ZfZ
PpCnRUjDwtjZ6xNjRpwTmE/Of2g8MU0cggKVUmJVVE4S7r1TtGc3wQhOaxrz
NvtO4EA7m+CiezzspK//P8a+PSCm7v13JLpIkiRJUqlUElLNetbeKyRJkm5S
0SAJIYSk6EqSJJUkhJBKklRIRkKSREkISZKEJEnC6TvrPTO/jvd7ztn/zG3v
Neu+nsvn+TzIY0SvnLLSEcm4aoPt2bWwYcghSPYJAK+7NOeG3Pfb6MtSisVJ
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
WW4/jReXSzM7b9P9KWruTsy3WSfoj98/qY3EhssK7+8eaI/tltzD8h40J5j3
6Do4gHcxWhFbcXcnxfdX7hPNixi3LOTh1Q6Sj6nvUs3uLbdtSDWoDZTCbjr9
hPeR2aPxgtIDmISK44Qjp3DLzsu4tuMi4O4bYGyVhu9spvwxESoluC0xET1r
zIF6CcpB5ZznBXZnj4LvbBofFHSX/V98vXtcTF37Pz4ISTJShGQQQghhZr3X
3nuQJGEQimQohBBCzlOSkSRJQhhJklAkIQySEEJIQjdx5zxIQvj2zLo/9fS6
n99v/9Nh9qy91+Fa6zq8r/cFizsDq9tWlNvp10jKi6H08d/fac/3t+iwkZuo
/MIfRM32ov5zP0F5/Q7sfjGexCC+BqvDX2eYh6y3uZg/fT+dd/Ea1Ros4lZH
1a/xH0ydB9PPzLaNPH8LLqUBuHQ5troNeSeWg5Q9ax1UZixf17DrCmgChiHA
mnEauB4aDc0qY9ztFY/xFzag7GF7uB0eiaxfK1E5TwzNybfEf+x2JLYJJ6IX
3tKYdU9IgJstKlsZwu38ebJgXCMq9j+C3i0m/eu8kgYP1T/zk91pbpVXG2HO
/hFCo8vDhd0zOKHj1dl62z+iX9v/qaf7dJ4B6Z8nyMm1R2jZAeSH9keeF6t7
v3DvZajJC4ax/FSTg9dmWwHNej+fu/HAiffttIH/3DGfe7p0K5e8G1j96kyt
54wZ06H6b62mHxJv1azNwuM1ut3pB6yGs3y+Db1pPp667wugnume+v8VRRlT
n4r5/9qLVpg2piXbWuvv0Z45UW3b8/HrIaovIoU9HkB5oxUxUVTZoD8vkbwe
t+C3tSOZGPypui3DnkVEWnaxen/47dGS8zdlmOH4E5uq73vayIB74sp867nR
zvRwd/5/jqdD0TluRDux4FUXgniHixA31VxocbYjyykut6rxMVR80e8nPnEB
OK40pX4x+Wi3tTb2TTrCv1afHZ/d43d5jRJevXcSlhtJhIUPD/NXOzI+rw++
u/Q/F9gI1OvizFrtpC3qgV3X8rnhVit5ZaoNP2hfR07buow23Hu9+r7e1h2r
f9+/hMUK593dgluNltJVvTdzC3dv4KdMfcD3n/2IV5t/0cvb8Z5NaB37rXTY
pAZUYqRBcudZUDnIZbHKv1F6Xk1UC38Su9kFhOYwXUIaPBbyxvVl/tIeUEzp
TmLesX3Et3tTiM4/JQVTQsiSpSq8KWc5P0reoJZfWdGU5XeMNGL+3JEWDH+p
GOev/3/+X51hFsxw1z71rhPb+owbS9HEmORt34SUV76Q3DpGRM85lKZ3xK17
t6EIe0pyr7/S32fxaiQq0v6Jp3J/SGvfzSg1eUf+3vEceS3/JitfqSAlk0EH
sfiE3YJ5ON74IUR9NiLDPQaXos8jebwh8mb8B5tlBcMFNT7+nGID+KhCa/VH
vvYua6fPEZCENOiE7sT+5z/+zrX+JOX5VWLcfAjeHWP7i7bvKCLNf0kCtnTC
8RfhcHvRG25Gv0mKe19Suj2GOB34Raw/urPvt2oqNe0dAZU7y88uuWgI1dG7
UvuOntXvtNo2Cpp0b1J8+hJ+Bx6D2dp/6sn4va72i7y/H0j39K2p+7t6pBVt
eG43/ZLHeGa3uM+hj9f8hc/3rlTf82qvP20xyly/Rs52bsz5X2hOxx8cxZ2/
s5sbF0gE0acRAsau5QfwvPBnyRJhW9h4obdpY6HB9ze8R9/9/JsLz/hWul7C
yCd+gu04xhGUEsf4H5RGGzF3dRHtPLAf7fkxnx5dW4ffvzCIv3r9LZfZcCY3
r7SG50+71k4/3qmfzWnF0Pa1ZOlbSSF1+Mlh/zU1l/i1F1eZuJt26daJS7po
QvN9anPYuHxgMRGTwbGQfPpOMuoWE7v3S4nhkGRi86Bc/wxv4/ZUtXI6VL8r
iHYkw711GKrF6qr9L9lwNga+m69v82Qqy+d79cOZ2/5jMM02bcRt+7aNMw5q
zY158+8aU/+5Yspr/AjSk6PgFrkbl7omwTJnKvbeYNy4ru3M9T8zJrFx+hX8
FNdPDKUR/QOR1G41fTstkto2iYRP3m9i5roRP1qxXJ/j6gL8iN4IUTjjMtW0
/a7vj0Vdc+6C8T56q48JN9bjCzXssIaN/+1u1JE2oXb7pkL79LesOPsaCdiQ
jrJvE7H6SjI+j6pHNUHm1COjC40Z/53EHqypUTBt+D764QjLpRgf6UvD1v2g
oYaJiP4VRk22uFJ5PcZf4/ec+dB6KgPhcc+ASk/Oht86c/JgkCVtuOYZXtCO
VHXTE4dOhlFlho5ktEuB57tNCIz8SOPbt+LKh1twbza14eSr6urHM2KojEgs
x+v7NftFTd61dfuqfWteY6qwb0s6hGXQukYcZyd7Qp8nsdprEtEb2deAVrQ8
xIQW2zTGzqLfiPq6E56zD8K+YCzsjk8kyk1Mx7HbfQXJ6pNY6cd4dDxODKRj
RouoZVhvWExjuoLvhJZo0fgCYoJ7gG4dA2XgQJQan4FZ8hCYTU9Dcr+5iPSP
hu+dzihfmwBNr/XEdyJrX/tLTURnVkkXrtmN/GXtsfnVB0jbxiDtkoP+88Gf
XlJ1s7fUwn8rX3juD+/Q31Dg/z7BixszPvcQWU71mm46Tk1LbtlSS9syGG75
RHzXSandyvuwv+OCnLfL9O1N65cN1dW5+L0yCnX3GNNEz4HIXMpi7ffMDtOV
dvU5ZcoP7sm41rzO4goXNIPlR199kF79nJAuUSi+WZOTlaFJhfP4F8xncaSG
c7Xkn5x19TIveuvDfeRKjOjENw242Jty6tzyFa43ja5uo8I2EOv5dFpn82M6
88Aa2md/F6ocfBjafmL9/OoiGZY7uUwLqw/rq/RSgnydH7z5eHi/eobrv1je
w63TfeirLbUxuv+5/vrVnLP/OIEOvvQd24fa8j6DHPheH/dTlzEitHjrQ3tc
Sqa5LzpzHUoZHsdm5yH981Q919GeQjZexRXRXvt28CXl3/k6qU2FWQ6b+BJF
23/J9YDRgdRWtJ0m/tUDhq7dqMWI0yz3WuwH3baNjCtv7TxaN6LGD5vtbMg3
1YmEEmlzoVPCT152iOP90h5T8fEmnKJlArP/m7Wj0vCKWufMO2df7ke/znz0
m8P8HZsNfPvDXfl7jRfQHy+LadGFOhi9PE3/Xe9se1imvMfKm0thKsuiyZ1u
UEW6PV60PsGNWpzCp65rJJzd30h4sdT6X1igyOWMiyeizx5oF/aG8bhWKK23
mxTrpiJiaxh8fFyg9vyLaA4XkbBvwyG50x9+Aw4gXKuBrssw0rnsICSRrih+
/0OmGDgMvgMCoLTeBL9fRkj8uAIpn8U07zvzx0mb9UZJ8wkoPrmLONHHJML8
L2J08jgkiqMomjsfud4+KNnqQns3fI+o/TtQ3G8bHH/HQfPEi83VeGNyLeUt
whovg531TmJvtg47fn6CX8wOVB7oh7KJoSh44wK//onIbTsTEc+Pk7CUfRBt
fyp1GdEY2u1JxH/QbJSY2iOlvxKuYxZhnvQBDCx4OB0dh9lZSah0mw2nJXWR
rLgAt9KdxMXoL2g80oixyRzERW9B/oViOGxeBp9zp7HQ5Riye2yC94FBSHwR
AbVLW7SQb8C8sDhIyrOI8lYQiW0iQ55jJ4RZj4JF/DaiFl6RzMlWsH4zCeqI
MhLR8BfxKJ4Ey3dNEfUgEGVtI7Ey1A7ihSfgljQbscoLqOjtifKdESjvvAPp
nTYg3pHF+MX7dhK/3Fhy/MszFEzN1o/RwUuetc5Av+u1a9r8r6trRu1YwIbM
n7X+LmpmhS1quRD1ZLCQWXczV2dwEV8c1l1Qa7/zfSu8eYvMJH5ntyi+x7O/
+IaeXfQ4Jsd1DLeulZYSFX0vnT5SSg2asFhX1otAaN5P4SSLG/P9ihK5/k/L
af5iVmtHFXRGxqV60GAyDSVdnmL13rWIuR1QLe+Hg77RQv9EavC2gKpOPKdn
GvyhnX7GcvkvmtWS1bLE9XCyYBwM/lGdqIUxw3rGvKiyXc/tgXxER6KM7Qmz
2TrkjCr/n2OUYryOyD8a1RqLeeUJaDGkkC7sUJ+65q7m3rvd5yKuhHMh6adp
UxO/6nsd7BdCVXBS5mNgiZIfjG+/gIYSeR9LEi/952xdaC7LnBGIijbs82Uj
GV7ZuucgPLJkvNIBzvtR4K4jVs2iYDvaBboTzhCdqmR4aNEt0sCuJhbo4eym
/46Q/e96flp+KuFX5yNYzmwVzTYPEnWwB2JFPlDZsjxZz5NtqeZlTe2D6+2Y
n/rclCCqajSQnhnDcPsBpp/Ij7Usdt/Q/w10p+vQp6cOwm2+Gpc6hEJnthrF
e5sxHX5lC1JW3he+F1iuu5t5Hv35qjk1zUqliqEMd2v4viVXdnEQ5yXdzg1K
Gc2VBTG+8UZD2Flj+PA9Yv3TQeodgKfqMFRnb5NuO8/i8vw4qujGuJQtb5rX
OhN8HULguycOPnY1nKphLTLRrU08DB6frZLpU8TCrhd0D1/Ao/OSmnuer0LZ
Neb3y1nthYiMjvA740bEb36QDEsKuTAUNnUnQH2vI/J6sb3f7D98cPbLieTU
TpnGqoxIjo0l8r3e1XatWKjNnaJswHJAmsWdr56nzKYHuAdlX7iX5+5wwxIz
qtdyQHxl9Xc39TGiOuNoIsp1HiCaN5BoRqplBjsHwvttOUoX7COvlu+AW/ON
pMowQMTFJeRQYAWClzKOsqkzIqj7B0eK1I/UYM0C7pR0P/dw8GOa4LScHmka
TMNDWC0QG4mWvPsZ96/z9b+vZoNZzKBiG9P7Vk/eTCsN6nGJEw/RmW6/9H36
HRaCr51r6nWN/3mJ6kruw3aFLRVL/uEVfsD0B/MezNcdbFVTizjixlB9v/Mq
5kI6mdXNUr+t4e4UXSittnXU7nern9MzhufF2tbC7S/mwqyz26rPO41ZU+5x
+mP9fYXHa/bIzEZHqF0rVlfeISGJ0xk059+69ueLx5/lbB1q2x7ync31c6ps
3o3kfRz2rz2jhLCcdMdWc/8lf6aDB/Ov5KG87qY1/6HSh1vwypBLzLhLZ49g
9bPada/JVb7um1r9+4pwI97lSRk/f1xjIWPQM153qUj/3NLDzWjF3k502uuJ
1GL2D9zTTKELt2dS1cTFZOaODjSv4wtESwbzXVpc4H9/NhQecfWEY3sl+vEI
eF+zP6icLxPr8InQjTdD+uwDKJ73STZeFIvEBdHE1DIF51eFw3BYBDHscJo4
PWG5/eKHrWvm6elvMs2k6gy/6UBGFjMdXfntXfXaj+8G6tshQP88excWv294
4yPkOT44//4kFIVeeFePYZEylRPR4mmNbmet6YrPJinQpbSkCssjJPL6ZkRl
TkJvk8bUwYHV9RQrF0De0QWiBfWlmcomcHByQnGOXP+ZdwDD6zSr8xS5jY2r
zuBYnAl4ApustqgIVZP4/KUw2LUYlZNWIudYHvG7spAY5FXJ/BYxFOQqWXlv
GCp3T0XO+mRIHk4icqurMputg6G8zPQ0u+NWSFRGk9wpdavGT0ECzBcgZlUE
MX4aDsmzZohpHUr23DqO0oNSiB8v1L9Ln9HBMDNn/lGNz2Kysq4njooYf4Ux
tx0xl2+QN9eCIL+5Xz+Geb/mw3cE4/L6cJ7lLqkO5bL9/54v7MJZXUOJX0fa
5MVLjP3N9uzYTG+aMzEFDXaH1lrDxn1ZfDYo6Q0N8/amTtOi4FI+g+uzg8Xd
Tdr8pNntd9N2W1jd+NntBnN1hSL6d3cnYcB5iaAeugL9vvnwLxeZC1MNY3jz
bSJ+6fKb/Op9f/htVw2FZZeGCIumThcOXG+rX2tRN44y/6B5gyr9qEX1vlbZ
t5QmPnTgcibKuFD72Vz30yy3KXOCMRXvbgm/yNX4TFJrvXtsKrNxFGecoMs2
pocy9tHS1NHcrUNj9e1GmTG5q3RvhexV5yC5nSbL6TUIJd3rUeNnEtgEfiVl
I08iovEFEjxmObQ2+2QVwfZ4NTUIKwszYLT7KFr774SLmwHivjAfZ+JuhuPQ
NR9GUqewXKhJPz5RcXwQnHyjOJctAXxFkBv/uEEk92UZuKUF26lyphU1dc2G
wdf1iGhoipVJPJaEJqH1iCr5UtSHyrEjcSs0gWi4B8Rv25CwRSkocj0C1aTJ
pPzv3jQxfBM+9utIc5f0otsPgUruWFO7blX6aGQCfPa9IJI2Y3FdwvxdXYyY
X8Jp9jNiOEJgMawxUtzQMqxC67v9qd3jGSid9JpEcCNJ6SYRsjZ2RsWtseg8
8AQc01gMIsuwL2JpNPI6VI3x7aekfTKLTU+ztqJJ2bn4vmcILUmMgNVSCc1s
pMRM6/r0RaotdYoIQ577VOQ98ENe6VGS0vAQ4gNtoR44E3XG1qXBr1msI+9z
IeSykzK/Pv/E5rNPk59/g8qqzqVLwXW4yslqzkt5misYFsDt7bWAnkn5CvXr
OCIhB/Rr/euq3jWxlGZOzHa3UNTE+a9UyUZjhgW7+dmUuok+QN1sEnSrXYnU
vhF8686GbWYkSlOCILncBkUFA5CyrIiUrvhPPM0SdjfCie73COS83ExsIpag
so4UHv27wuCVHCVbONhkrIZo1Wli1soZKR9GwDh3OHw8xZAHiKFU5sBnQzgx
TNhLrFpugxVNhHyeFcLDo2AQYcR8lP1HoXjK0pp4VrIHKd/rQm9nLdP3Ib/f
u+q+bAl8TsVrrmLYwve47sNqzb97sqpaFryt61CXEzIkP+9SZdNU6ZLarUTU
SIFi50g4nYpC8BxXZPk3gbJJfZLjwer3fe40h5bqTlCF/yWqbTuUW1nKas9o
Tzyj959H0nbLR9GIdL4mttqR+dLKrCbRlYOTYHGyCS1ZtJ6bapbM+wWJBfmH
Y/z2DUV6uVvU5A/dGVWfi6izh54dx/ozrVsY9bXzQcEuexTa3qct5+6nr6/s
psr5Q5DdeAf1d3emHvVqztecsiI4DWB5zpUXxiHmohHSXquhWWpBLm1j+Z7y
v+vLAlI2I6inG53+k+kOddY7UXOB4UcXbMngKmZ0Ep6dWihE9J4p/OUvFp73
ZnUJUz815maHOlDXvlb6Z6ybyOwNt4bMt9u3m4T6/LlI3H230LRLj+l54xM0
5nQ5BD5If5+i6Xhi24jxCcU23oDkPj4wOcU4PDNMs4jhYC/MOVs1ZvFd9XpJ
1rZ5MJRHUtHsT2xeJd/p+ql23E7NWC73zWruclpg9Xzflbf8l77wpg/jyvFe
HMyb5dgIi9uNEWQregpDTjIffp/D9bjSHnepaYcvNOfMRnL0WnitvVKyiuPe
9F/Bb/ieyzc/XE84EX2HNz1Zw9Go6HSZSEazGnF1Cp7izYu10P5YLBP3Gw+b
2FlwfTwVMWO7wk/nB8tbY2Dr6YLk9k1gyUWj+EVnklNlR8s7HSBhezpSxeCm
NM2oPnKTekHNM10t02cz/H7sI92XpNLbe47QPNPFiNAEoXjzBaKwk5Pzz1is
QN5grUzz0opYzm8Am753SEHQDhaPVN8lIqNm8D3QBg4l7hDVuwNxawUslzM5
MJ4bBfHrPkT7KE4mmZZL3m1rCQvhGjSSeXCyH4+VMxyhkh6UqtIYv75PKTs7
yQLGTapb9Y755/A3cVvG6r3Ev5TA+pEIqgGziHrXZVL20gf+D/2QLt8M15t+
6J+5Dy5NWS1Z+9WL4NvbGcrk1nCpvAbRSJa3Yew8G3WmG1JxvhECqtZASqtg
yFdYy+zr7oabmTNsW/7D2bx/KDF7ooSx7URIr9+D4ZpI+DVqBNFYc/hvjYSy
WYzsbt4FSGXd6R5OTGOis4nNrfcka4o1+tTbgJ7Bl7H83VZUjrPEoClbobty
t5Y+WrkoB6bmtXnPD+xnOPZdTVneqs0MVjdihaPfv9bff1+tMsfQCPcmAv/r
nn79PLHazXdcGs2LvGbxGdeWcX2DxYL/i6/8HwMzIe9BH+H1Xttq3Gy/3eur
264jZ7HsB2ZP6ah9d2jasTqcQ4fL9NHMcv3/PWMdaEa4DhNL7yNidjdyNJPh
z5LP1XBbxDQyhsjaiWp2HpDJm02ULXQdwnXSMlmWlj7E+zUvq+8lb+PwdEII
3v1cgxaX01CRZwWlSi3zHj4cpprdcKrH9DDbc21w8PwnSByzoGl+XqbpbE9i
Jv+AyLB2/uTeXTvowpcX4H6lNXfQ7Ql1zLjIufx9jHcI3cFbrn1P7b8zPE3W
bWfYVPbDoO2sJlADZECz7zYJG8X0PGnHD8TvzA4UrVqC+K721c/Iml9Tk+tz
6n1MjxTTmaOZzlF0dQzGfz2MB3Ysntv5+Q6UdeqK4oR2cHp5Sz/3Tn82EU09
v+r2/NcZUb/cmdDVn6z/vODEJRJ2isln4tgyUtjYiEp6PyIBmRvJSpOj0GiH
QXyrBfIuDkWzrgv17/LOLx+qyTV4W9fDraCrw3LPJw64CdW8wURzezWLVZmv
RkUyw9y3KDqHS8cYb9nQ02xONI0SZHmbkmutU+0wkazEsy3Xc1Mm1/VgPb7N
hljOKqI+J82JomGTWkB+ns1RwMwa7pGUuAMkOYmtZaPiulTnm0ak7wIRXTGG
GjrXcPLYTTAjlvvqVf8d0CmXaNx2ILntESg6DoH8SUO9bvEqaTPyci4wP/Sx
/iTm6hZisYjF1Ioy2kE8xAi6dqPgdqkN8gYPQrRoHwo+TYNaPhBRIj8k/3RB
QZtTbIzLPhH/9H7wzveHavExmccOc2g71s5jOf86CJ/XM4xJ2PQWuPPXTuqU
USUDwVb6vf2hbUmt+7c9bUBz505GxrMC1C1nODMPh454cJ7lw+Z7DETK+DlQ
7GCcJrqPscQ54QdKrv6TA/2W4fpWnwmE/elueJz5VP896+2x1GbCFerzoy99
N9SBGoYG/3/6Co9+nch9+naFnxku6P175wYLwpWZnvr94O49FXU07MN1XsVw
iiV3ZLX2k8mptbG8JNiWqoKacmI/ivZtrajju3DqY8LOwIzOhWTkzl40vete
iDp6yTIGvCO3mjC5yJCZVI/LoC+aWmP0n+uv9Qf5OwG+wpF+S4Ty7gHCsg0D
Bfljxif9qEMgzSlkPKdeIYxfyrlNDRZgSPoP/KVhmFL1+R3kwtV3UHw0papH
av0ayb/qQctHncGMrmro7Fhu12ordpZMXVKb/z/v5CD9OGa/19KKwlv0wuVt
DH/jr+TsnmeS8RKO429mUlHCgv9f32yHDUXoqozjvZRyoUH+BGHbrqFCv98W
+jFXtXoAi5BG9HjCY1oUlY6M6QF47mFV/R4v7yRwBu0j+YS4B/xR6PhR2mi+
aXIgZydntnGpYXuYlQ9AhWw3yRxQZXN7vyYr2n+GKOaAzI2mE0OlJUrmGUNl
UCLLPyuBxu44key7C/rSDYptrUnxGMaVGnHgKPF+oqieC8m+C7KO9Wv4ZzIM
1lHnwTWcJ9bX86Gh3eBq3pz5Y4MbQnuitHocYuafI5VbfCHm3hDbTl5w7d0J
Zqs7I2cVi9cUHBuByqHXEbZWAfXBh8QhTgmxcRjs+rmSqCGb4HlmC/zTm6J0
Ow+t+2z93BXY3UVOQAzRRM5FjOoIGbknEB51BqKgSQCKCxYRt3lVOvTqRGnd
eWehHZgpizpdB9TdHz7NpqDFu6PQjpORsAfdq/tA186F+uVWonoQKnPoMQkR
S0wxrfc+7BE2ISvbB2Y9RyFMOwUqZz+SsvgqSWsyAE5uSoiuDJQu7HAMOoyE
j1M4UTdvCVVctKwsWAJD13JiUDwO4gfnSc5klnuQR1si+vwd2CwRoJ33QSbf
2QcBAx4T5UkWKxZPOgHVSybbbrOG4Nf6mvoI1k1CasnHj/i1WCkeQwuMGtGo
j0toyM2eVFylN/GDntdau8XTpnD9h6dRvzE/6GdXRy56HaeXiaaOjYVD2fP4
qNVzuTncfX5Tr5O8uv85XvvhG2+7xFZYkNpIkISZCkYLHITbgxoJfp966r+X
EKSFQfI8eIbU1PJ5+r2EapI1NEc5ngurq6Ojs2KoWysWv5Bvrk+0T7Jlpxfq
4PQ6hwSMmQzvDlXndtO6JHvcNRxN+N94qP+7yrbfhknaBqSUucFA1R9R7+0R
Uz4RWn+2Rle2sEBFxQ4S3GY4pO+mIGDjKVIQEA7Vd8bbpn3qCPnUTKgHjcPM
NkbUvsMtRBWcx5kvDFv4Z1Z/7oPWjfN5mwjvlx34OYsbCqKwRL7zs0b/5csV
qsc+Pmo6zAIbIqAr416uuLQf6qfnkFvRA4nP3yFEiKhqxwSUTIZDu2y821aP
+r4urTV3hg2dUXbhGAKK9xK3uKpz9bUGOnsdybLoD5ViBZFceUX2HviE4V+a
UfstdjR+S3u8eW5E5SZBMrlfZ6jSxqAg1xKFii8oC2N6qvTbSmjn30bOtk+k
5LwUOU59q59pu7xKH519Ez2f5lb/Ly08H2EjPDHx1x6c7OBStT4+oUGlCn6H
2byFeJxBSpdtyHgYR1IKzYhT7BMSkZhJird3Qbdbp2B3jOk+mk+ZSJlzATGp
H4giO4LGtXDgErf7cUkld7l6eUb8X+XR1T6i+NZ1qMgsT2o8oQR3S9/jgq4R
jVyowvXt11B6juV9d3ugpJo14dh52pjKWzL7WtJ0i+z8ZKYnNWi3BcaTWqHC
V0fkM+fLOiwKRYbTerj13kRUJu3gOToMwXtZfSbpw5+kwqchFHd7IsqqP5TG
nuTzcTV8+/SB3+ogFCzTEbfXzN/Wout9+BX3htWYaERMZPEDXd9RRHMliLi1
uoKMGeysere5P6RHZiMurgzh3luguDKIikJ+1973x8ykmZeu0izxSnSrv5aa
zWKx93ODG1Nt3QyM1DLfx7STatjZnyJ+8zrCcGIHPNh3A5aZs0Dv+kD04xnT
0fIPEVIcCFfH1dA1SseSK6+xJ7cBffCO6Q2bvu+jLYeNpUv716GStd2gGBdM
UtJZncrRAbpa6+7VFjN6Y1NXbrWVC9f9yxHeRtddcPZcoj//fZSrhBfPWQ67
veFOOmtKC3rK8xxVdrxBNZN2IqW1hFYeN6BuB7TotmIU57IsDxXfb5GjOb5c
SO4orvU5M+7mFFNuiGeKvm8Fv9Kqx2RrcxuaGHwOLh3bYXb3YCx3ykPAhvGI
m9uSzlFMpkFz+tJjPViuirrZiWq5W7XMXP9ufXd5CxHNlwlBvnJhSatK/Xpy
27WX6gJZ/nP/4J2wbdwV4i2GbE1mX9GfExHtKHnyU0MH9TiMQZMPwvt+CA1b
nER9rVhOgcR9PnFLf0+S41bgDQ2BOn0Yus0+AjsvY/R3V8P98nssG874+nKa
MZyBYzjLWS78soi7OvICHbnNnEqvsLiP64MGtca7eFJtfcDVx5MLu/qFn1Hg
LoTM9BamuDgJHTfv4u0Wd9Hfp9nxm5TucqWNZo+iiXYNqGWYBGNebafkXB3a
Omo9d6DAj59uX8r/vSqVN2/ZgpflmLFcj8Pi6uf+bFoM7SAlsX7qVKX3d0VK
h57Eze4GCX34Epqy0UTeaSwy/lwntFcn+A4/AbfkYFTEyJHGJaHMaS+0vXti
4VyG57PJHQabn1awe9gZweWF6DLvK9w8uiHn2AZ2XnXxhF9OK7imjoC1ywxc
v5kI8eJRpOTBbKR83UfUeRwiZ16tspd9IV20BLluezDPMhhmq+ZWPWceiTOr
2kM8VkDbax2ki91h/fccxAVshXLzHKLd7StTTDlDAtz3Y484FMrbrlAfjUTK
0Rgs7LgFsSdz4Bu8vEouWkE73Rg2K11gVbgbaR4BKHj+iiiXbyE2nYtI1bwR
n/WLECvzgKTpR1n8xqpnNWmNgq0ECWYquF37QQq0v0iEVzyxa5CNgCYKzD77
EBF/j4RuTR9EDEsi6ph4tHCNgZ3vGSKNSiZ+09xIRtFAJF/qCXp0JgpmbMTE
b4cRMDSbaJNHEunhEZCIvhP7phZwWMh0S0m4kqjs1xC5+yPGeRXcFd6f2sAm
4gXxQSVJaVLDbaytvwu6LZYktoEZ1PvTSWbhQrx/Uf9/npPFvbuTJbtq51X/
35W4helpa13San034VNdWj+qkD99JFAv795P9/L+0Xv5rW8/8ZWL6wtjf7QX
+jxvJKxvYiDontUXFuxOrYUziYh1o4vDmU2w8CPDpzvFXyUlDhupRZAdd73T
41rPqwhkHDmVvZfCbjezy4IdB0MyOZekdxVX33u6zrZa39tDBtOC372pWefm
MNxZShRTekDUYCcxLhkO354ByGrvifhCH6R0tYX6/QMimfKDiE46yAxHtaw1
Hh4PhsJm8wOQ3wlwtCW0Yhcba+sdDNPj0qgBtzylPzdo5ir+dsd6guLkZD6z
8CoKH+2kdv1Z3PKoFavRLbl8WlZ39y7YvZxLnBwDSYR1Y6I+cY6o6uxmMZze
P0lp0BcSsWsyUbgTtOo/gF4SbsLqWwj8F7IzzsKMceHFfWtI86IE5OUHwrhD
FNTxVe/tuZGUTg7GiTl16JtBuVj8oCYPsduNgxCNtCVRw2RQPBtJfN/vhtuH
zySubiAK751AjlmLqvGJkWlWhRKP8SaQ9/ous4ndTlI69iLFfw0kGV1aI6Vi
Im5mNKH2u7oh+e12eO9YgEmXzWmM1Xsin8vyzewLOzHd6h8M/X8upbInVEbv
yeq1damv3RD87nik+rO1xxfTEpERbZ3qpN+P9l7Mozc2iHmj8R686PthbthG
VidK7j9BP0a60kMkxmoOHkb8x260xbGNlfC7Fo4bberQgOc9qB3NInan9pP5
T0xp8SHmV9SlhZGimashWmlJfkxQI/NnM5Te3UWKvSKJaxbzEThuyILTiY3k
ScUrNLhzAMX1ByPCdwqCh3WBVtYEmhkDoPqnDr3fEy3xr8N8+bZ+AjJOj0aF
R3fkfVqh/9z4oDsS/R4Tt07Hof0+hVTsKamWT7tbbL9ucNuM5sqq2hhgX/2Z
01sON3zjqN05a5LVaRWc5BoiH70Am8R9q+cxx6YbYkstYTBvHYLbM5+Kza8U
4tT0NhGdH8f8FgPqE2/fbpBrvhO3Hu1QfK8lKvhTpCLRAIGXfsBwCFvjrp6P
oW3ehlqsa05btv8blQu9kN/fjCbM0OBBB4ax00Ut0reZ9ZjTv4Nvwlzu7K0m
Qp0kB6Fk9wT9GXsneo6Q23VPbTlfxnza7o22VL+7t1EbPKg/jDO6PpVrO6sh
z+eF8L0zpvPtsw05UWeGSyz1YOcRLWE6SqYRi+2WDmR+2aPaXFQu3oqCQObv
aBlRSV1ejKolsw8MvbnCgYMF4a6P4PhssPBH4SX8uGkjuPzDbXkMS2jJTC2N
2qlCXb++VDtirSwwZDS9tV4NzV9taVG4Cbqe2E8DWjEcNhkUQKctNqf903bC
ZQfLYSye2Z7eLmb1Bi2XDkbpotNQ7Z8o09H7xOZufQRPElPTGSz+seWlrsq2
vERMraXU2eACHZGtosO/K+h8q12cQ9AeLmRXBi3O64SnJ7P+tU/fecPsuNw7
blz2tR+8s/NModmlkcL+vgrhxZHl1WN+/mBzLjKzMR16+h7VvKs6+2wFlO5j
fOlRHcLppa/deJd3obxTroqvcyWdMxa9rVlT/+B8Cka2QuaTbDSwDoauFatj
+fvBFhgazob/90moGB5K7CM7YMZgtm8Xj/HR35OYtoHk1veGd/Yy0Mfzkdt9
BHSnWiJi11oi/zSOxHiOhXhMKLlkrIXxCT8YEF9odjE8tGr0bGh+iNBh2WVI
1q3Ty3hpeUPM8I5FcmwfpBAzotmxGnl1m0IzxBsRSY4I+2sDKi46QnHbkWhW
zSRytblMm70RZUHTkXVtNG5+foUSSzfoZj0mGUkcVDuHgH7zQ0ofEQkub4T4
nvOhNLxTLXeqx8MQvTupSk8fA/mxVsh4rkKa7z81tRbUk/o9G08cxg9D8XYv
hN1ogagvvkh/sQ4pmU1JwIE6UJ7Zj+Aoe4R22YDicaXE8/ZuPA0ogGbjF5km
rTN0SoYpOfSqFVXFibCyUwBKLvWAoeVLImk8krw7yOJQBZ2OEb84Zrd4cxRu
BcxXaOxlAM3SxqRk1XqIdg2XKfc9I4b2BhAP6UskD48SH+9ucLHqVy0DeX/b
QvxxETu/69bkr63e9aj6nvCNC6hh4Tjqqd1Nny9I1t9Ttz+rHfNAEYXAl8/w
M9uLyjdtpWdPsXz8D3Y7uPTSIG6DZyehYz93/dp7sG8E72sVyUcUJfFTu5bx
MmUn4dEJI2Hyy9O86NRZvvlehl/qdO0ADWq1q/pdYhaerP59QsBHhGRbcp8W
tuL6jzbkio1PkGX+NWdXQEkiWpwIR0RTprNnld9EZWpzFJ97LZPauSJ+ak19
GamBipRH3UFxGauz4KNtC2/1aWjim6Py8iyI+I0Y2f4w6DoDJN7YTyTlrSBf
wnwoYwYEI2+5jkiVTeHkzrD00vYPiF3HTRCVDkHFtDPVzzGpO5A2vrqAesy6
QB0/r+dShSB+78SHfANnxjnrOS2cml1k8VaD+5HQ7LGBW8JtojykJik31qO0
bykR2b8nGePnwpdzgsdbNUw6boP29nxIir6hPPs8VESCgr1rSb7LxernJot5
iF8VEY/orSjZnouIXBanzasaj4BnbdFNiMSSR1W6sXtbqXj6RsizWF4UP/g+
i73ndyfy/Gt6ORNbsLNalabU//R70ZvF4Zyfk4C0gQg49YeUntqOAN152H10
gOpcJpGMjCVqxSvit2M4YrbOg9v87Sh1m468mE8kIoP5+/O+vibhc9RQWSSR
MRs3QT7IDBkzB6BoNcvlaVbA+AesJ3WklX3qc450JPU/P4Rr3eYgOq6/zEV+
2sX37RbFXyms5C7eYdx9N18FUIXXAIg3dyEGKfdqfBFtVuH5xou4m1rDiaRq
NbVmvAbJYPd4DVKGt4bfhYYIuNoV45sFQvv+Iyl+3gZU6QjJ0g3E8mKVbbL8
PCxXDkPp/nnIqzQj4qQ1KN8bicImx+CUVRcp8/cR6d+AZiLL/ZVOO0kiNgxA
tluVXCaFk+CrFqjYvgzKk6dJyWoTqNpfg9T6MO6avkDF6Q4QX5uFMg8T+By9
RbLqbIJqK0/sTivIVd8hLL4+cC4K1zShFZ0/IF82Bd7jTak4Zp1+TPdMzcDK
rSuRFxFMSiYvRdnecEhuhcHBayOOWu9AxdCOiDm3DZnDRuD06s40524sDN4N
x5f8Yvyu0g+1sRZEJzYmStdFJH3ySeyclcliKRiAxSu+wvLCKuxsynStgu0D
MWZCjUwZ77So/n1E9AduSdIAIbLYQXjoPED4vm6RsOnLEGHzpab6da+ov48q
RXVq4W8DtIxvL2NUJI3uxXOV1hL+8PDj/F/3zYWpxcZC3Kwp/J5BTbkxp1bQ
z0ce6u8VeyTp+73QIRC3B36Gdlp7YjFoGTLG3EfKifsoiGe5boZXwqv38fBA
C/1zY97/4V7JnYVNmROEg7/6Cn+1nCYcnM/qJzV4OYJr0ciGy5/WibqofWle
rzxyqddZfVsx65m9ZQK2vk6tqxr/3QkwOnsPq8/1ohWN7GHQYggyDoyEOtqI
+ix4CN9Cd3yIvgPFWTcono4lZttG4EzrOFh4H0GMEdNZCuLWkkd7DWud7XZO
dblNczz5g5t78gGyfIYrON+S7h67ttZ9Tj3YOXQ0w4/z+9BZ2NTAXYjKdRei
wwcLVpIAfZ+6nLDkFk+uV6VvaKq/G/uz6vz7UVM/6cLEZK79JDGf7vCZS+Cb
c7N7xNIZqazWwMqba2G5S0Fdd86F8stAUtDDHaqHU2QVo/cT0YuTJDljEEpS
XeBhsxj5my9B3JLlx0gbxxD5la+kaLMjTJ1jYF1nHfz2Hyclv2swgU837IHB
4O5IeemJ4rslMrPYw8ibVUhEl5kdFdtuNXSXP5F3+/qhwng2O+8OrIPkhhxi
0XASVmU/V3TbjgpHHikRc4h/h16IG7Gt6v06yFSTLGURWUw/fRcyG1qj2zKf
uV0hNvOC0n4SHEynIT3kIRSJI6r6VSjL8p4NtSiWqM6VyuRD4on2eI4sp89k
uBXNw1H7CKxcpEbEvPNkfOXuKt1bXXXGBsPGgfEAm0w+CJswHdGsvEpIn2AU
O8URBTWEvNCVKM3PEpHpEsRa+SLR+i3JeG0K6f39JE3kVj0O3l1qaodKn9SB
/cd5cJJ1hSQ1lITY7oVryTr07Md0S7/o1igZq0bGPWu4HrWDfRKr41PwNY8E
fCgkmmh/Ih06E1GffOBtMRdSQw1iE5m8ZowdDrcBm6Eragr/enGwuz6fJH60
p/OLnGutK/ldhkHUzWe2haRd7dyA4oQaHPR/LqNrLEf3lXIPt/TwFd5pipd+
7b3bP5W3aN+Jv+TjwR9te4GfxpsJacV3+fVtAvk9br78HLt/c/mOLH5Oo7uY
06MLmQ3t6nEExsanaMP3Tbm6I9T/0oENx+wjfiOWE/UdW9jlfauyNcciK0AK
+7X1sGdEDX+STe/avGrKZQ9kTsUsJuJfZouYqn3XymYnMh6uJyl/LyLKbtmk
/+hwFK3tgNK1NT7vCGMLkuPcDaqhO2SmnZiv2vBrU4h/xsEviPm4Jy1hupJ8
SRg9P+oNV1h3N7911jl++feD+v4mNU+mR1PT8EdsSsNS92HPmuvoNmk9cq5c
I25TvGB5jeGD5x3bDo1TtswvRolbXzdBuWB3LX6z/1xFNjXxhDeGu1H3bZVM
/JNXH5E2FxmlIWTQikNo0V4F6cZrpPT7Yf075iYth8s7Vj9R7bGBOIxknFtm
QTk1Z6VLL6L7K4GIOlpK7fYNh0piClHcE6IJZzU5QiZHwnX6OFgWNIHKaQXG
f8mDQT2muy9XP4ST0VH43XIiKfsrSIXtdhJiuBmJT75XryWfZYyPJGZ5M6je
mchWpzeu7ktCE0Pqv/MMfbdxFnJ9X9G2Fwu41YtD+Jl98vkO6Qn8208nOFj2
pAtzHkK+b7NscqsabtVMBxvIv06WiQ9Kqvtyft0fqO+wfBiJczOWT+zFYj0B
9/aT0nB3uL2ZjIjBFsicx3Ly5JOSofRyJm5V52zsMQqbzDDy9PkmaO6VyrQf
mspSAn8TC9tIkrOphEj6OBK1uwS+RqZVujnjIZsdHgxFCquJru0/XqZ4uoOI
bmyU2h3uR+SarrLRKS/h9/090Rzhifwd2/PCp1YiVFMB/xEOoJP3I8y1LfyE
ttCOG6ef+97BfainXAv/Q8NAA2tqox4P+4yIr38T3bQ5RFyei1vrQhATvhXx
WhlSWt4jOnQlCtUExE7cXjVXU2H/ZQ8aJGxBypnJUI6ZRURt90slSSlEOyEP
ot6M79Pp7CS4dDOnbvl3kTaX2RtXjcv+5RNM+sps0/Nd2vA5qv7C2+DxwrF7
AwSv1rOFI+aNhc8TXPXrvuymP5JMH9KggKBachxrz/zc1onPabv6Kv6Nax2h
2dluwqokXtjb/Cb/aFNDhs1byM4wfn+e/h1mZDCd0aJgPj78ioJjZd7/9Ff+
92UYZ8xv6ywXti2lQt9GTkLbZaOESv6Mfr/aH7yATquoneNkuLMPVV3qTs79
qKkF/ybcnMo9ZiL1PeMcH5ORzD4b9U0/R25TNsHWjXE2qEt3Izi+BeRWd2Wu
Rv2wJ+shWj/PQMGYSVTUjaLdvTp02R+f6meeOT2Icg8+celmO/lz9QbyoduY
j8Ok7YF/9a3jL1avuzConBsw0E4Q1xsnDBOchZnKcUJECPPBFq8+TqZV/KJO
OzJJ6FFWU0rZtQNtb8r29uQX9eGw6AH9HLSWU9avz5n1TYbLyX24sItxlOS1
ak9jxxyH/XQp5PWjoPtjS8Q7LpHihC/EZ8MU+Cx6Suw0o/71btqVSbKYFs+I
5vJ9mXyFq0wrNoU844ZMEdYGyvH3SSJawjXIGRb9O8JOMZS4xlTpADAjFQ0o
in+kED/nkcTxbgZ0DRJI8ZZRKOtkieJZR2SS3w9lkqPxxCJqACrM+0CRas14
/d7slKlWGRKPiyxG93SAFgmb10IVmUoM1w2FdNBAZIxMJ+KhCkhbtIVY8Zjk
FneCZtIFojrvBV37aFL8coO+rZTWbF8otpMzOzHHEWZ7vaBt2kbme6stSmKj
UPgyEecr96HC9TextJ9X3f+UxzLibzQYwc/XwPhmT/j9Og23galENJHprE+X
1HC96GJ7ks1vmtIeButrrTk3/5HQXhSgfa3Tryfn3HAEPGW6ni6YYSBczZhN
H/DkCYurzgqHovsjInIbJVUndKjSgSJJiXoUJFO6IfzMFuxxOw7FHh3R9kiE
/HqVrnDd8X/Kynhd7dqjccMy6d0x7WhK57acarka2apU6jDkEP1hcInaXP1N
Pm8K5dyLjtDdcsap6uV6ih9x4TGXqDLkc60aCJI1TQSPkBy+vcpCcB5NhLqj
8/iroyP54B23+R2r6tfyC7ZcHEMNHmpQdt8b8uGj9f3KKGlAD58+WD0+yneh
+jExMNoKVUclZtVnMUkXixF0/GRCC2wL4dTJCxbLW9EzNkEI2LmP+aHCPkEd
0QRlJ8eibPpHJDyKQeykHRBZRyPtqxHsDswk+fbFmLg4EopSR+LfPB9+C11g
USeYiNcJkJw0oFHJwYiqNxDKyy5E26YzKctpRC2P+2KidQ+qUB8nDtti8WZW
Oo4UKenBhC3UauBwutRhEJ929AQ/6ctZPqH1ymp9p8Hr1H+Nv925rkh+xHJn
JBcekNypw1FxeCPsG3jA7u9laDHoCHLGpRG3ukzn++zuSJ0jmtGgw3VpcOoB
2MxvTd1KjJBkuQdZZkOwfEYUfoTug/E6DtOQjINcXVp0Khrh46OQuSkEYcG9
q/RSL9ja98Hdj8nwHJ+HtNhYJBSGwuLhaRJ1RoDm1FKitbtBknTZUAyNxcJ3
4TAzcUVK6huiyRsGi9HTodZ+I3Zdh8F+zj4UzHFEeFwKnGLSSdSpgfC1SIYi
azfxfuIJzaj9snehVXuJqidcBxjgs80xWBwvJLma6Kqz9zFJGnwfqiMidGsT
ipVHajAFT+1LuZnqUN7jyB3+d5cGwjXddt5sz4xauqN6cV9o64+WKRIPQHml
SFac/lHm/y0W3dJZ7YPwybkQzx1MCtZpiSjsIJw+GKNIvR7y57sRtaonbHqI
8K6tHSrFzG+ed/cFUhxZXmHB2AzYZOmIT/Jd2Axi/B0+25vAZjTLM8v4+g8/
rdkplDwPgfoiQdSVpZg4+SJKPTdCKn5AdFX7we+Y8/D5NhyiTrYkvs4opMid
EWP+nBSsnwxLdxeEHrkPgzkRSO+shs/8YpKomY8NA5vR44TlbuatD8XnMQeR
Y+0IuaWNrMKtHYqLPKFMO86wPTkL4TJhHzTfmiKhQwEM0wcirGgFip3jiXeH
NZDkR0Eysrn+3oDVm9hed72cOBV4wJ1/Cv/BN3Ar/zYCLPZALYvB/aU62L1k
OMzfN7WYNk2NsN0dqudlQJ8v6JzO+OsiLGeghVEl11ErExZ2nyU02u0v/Pg4
UpiwKl0v4+ppBpxpymO8msxiVSLlCX39wSdr29G+z0GX+e2lDo7l3K1N73mL
xR2EjOkOwoWHk4QkjUSIn/lEP9fP97zWP6vUrjOs64eiKHI9Yr546NuzklXp
mhk/yZLIodQ2aAAapPWiWZ4NkRXGOGiSurF6H34VVvx4sZWw74OzYD9topBy
d7Tg/JpxKL2a1or6TmH8RtpmC6E0Z5yT9ncZ56BkkTsxeapFmeEhPE/ZjMpV
n+EbdR5K6QGS/OIkZvfagAyTkXgesBcmgVuQH9gIFqcVCA/Mwc8upXAoN6DD
Ep5h5/x69P6JhrT1W8ZTtVIUQwd0m0U7ZU2n4T6LObumQ/jSyhj+68u/uMOT
/qbfj7F6bPFeNbjGrHV23ILbrL5S5q9W/J95DsJlv9FCYsksYVXIdMFgzgG+
+9piXJt2W39PyjYVjVCcw7C67WnGejkUtldg0+4XkdoFU9HLXHjb7aHH/7Tg
9pox36vk2zyaXfQTkYfvwqlvJxo82RtS+TdSXN8bfsOdEWy4C5p2w5Hbsisi
XF1RmqQlxcILWX5jxj+j9U0g0oqqtT6xEXyXTkTJ3HpwGmwPSXor+B0uIjHB
ETD5vAclO1YiocdbtL6QBMoPRMEpBQIaUthvrNqrQxsg1ssVys8c0SZkE1V+
qMy2vQFScqp03NFVMubaDdJ++8mlVWFQzF1MxG0+E5W7AQqW3CNvTcbSfb8/
onjYEFjk/UHEhHdEmjYTHjM9UTrhDKnYkkpKHXohs/gkIjhfqOYNRd79Rkic
FkcqzMzhd94EAUHuEHXrT6y8IqCLNiHG98wRM4aiRFOlR2t6QXzGFIqZnSB3
r9L7ZsYRVfOt0uCzEhgXeMHhYEuo6/OwsDsDiys85L4x5M7C3zD+cQ9WnWvs
nEeTJ9Oim3fpqv12VFWP4cJ/3W9Mf/yVAg2Ow1DRFQ0cNyCxiQPKK/dAsWgr
rusSsaR1fJW+lMiwlee8sXxxCMROz8jKN2PgP8wLTl6OED8xh6jgIskNNEbu
+2RI/6nr/n9Xzq2NRHOzYbU9Jpbs/58408APDJdLNt7Q/6z3nvFPZpgM4ySP
Y+nQvjbVe7E5913/e3PbQsqJLIU71j2FglP2wtprvYUmeQ7CtzQTocWA8/wf
l4n80m2d+MooVmeoR8q6/4lDSL3ZkDbruIH2cWC5oZXt9yBgsZga/wqE3Vzm
h/duJIHll0uQt1lXq3+qkglEl3+WeGT0R+hDETWcmIWVGfOQc7oBNMv3kYIj
zogQ3JExk9VyiHk8D3l5h2visTlDobh7gvidD4XO/QUpHv+S4UT73yGSZ16Q
fr5CUhYLmPNLSst/BdO9o1z07/jSjtkKtrYvqb1mKZ82spDPbZnEL9R5cdHK
HJq4yIQuP+JNH5y4gICBt+FhJoJFOvOL2TfqA21dFh937T0IedJYYviW8dnK
3xaD7HiJsFmMl7p8kB91UNTUiX2eLqYRG38T0UWGF2rT/BkiUnpBMfE6UVle
kCmLfWqNj40j8926NWR9Vp6IgSJ2ENEOMa72M6RE/CAfLFj9VPW4ISj4+yVR
PhoJZbERpM1vkooSDjThDvxGXSS32ubC52pN/pmmdBHEzVNqYmkJgdA1DCJJ
jzQQW46BNpblIFzPNKeqSffJoH45KDlmCsmQFLLNQ0wt17SgC5uN44zFG3nn
y1f5NR9f8fGFj/mr8x34Vg/30eALH6v7rlEroHw4GqIsY2jbD2A5sV8ZH4h1
ZRBi/iyC5NJpmfxXJ+LxieU2qGQaqc9WUzgWbYTqzjDSp9VWZCa+QemS56Rl
/mv4PckiZfOqZPlY1Z7XbAO6yRhWVhWzSUq810M8cQRxWpJGzA4wO9R7xegq
u28NFnbIRcGFdlX75mlS3OUdyX6ZDIs+hvCfynh244JiYW0VBb8Na6DYuJj0
2PAJLZ6mwW9ST5KXNYS4VTaDk2ESKfY8SHyiz+n7YNUwBHFnbtSav6RvjyCN
30du/dqN+GPtEWF5n2ijomUp9/7Bqw2eTjzXr4N8v4ykZwbBybg7kqesgmHP
KIiSDGAwgPkPYl1liPhhB/5rMOyDZsLw7mvSJ+Aottd5A3Ehq1mes7cXFl6p
zTt3XpEM3XYFlmQzbr/ImFzukb2VsLfdPGHjfBfhVD9TYZpMzGJecX76fWEe
Sv4l55OasjzzOi1ceBPHboLnoYFCu4P9hTBukmA3oY+wYHCx/rutbXxo2oEU
eNwpr9JjGGeyw4n6zA76kEt6ogf1CGSY2oDIT7XGamQS4wPf3jmEO+1XwKdk
2wg9d44WqMpKiA1Jrd6/zF750ecrxNSxAdG/U7Esj4g+ZRNxq7lkSYQJFauZ
39ZnW5UMJDD94MfF7TBSN6Xixllw+7AEUU/eQt18PeL/0iBg+gzcDTWiSk+G
9Vde05GJLRvR+IGmKEy5icrf2fjpX0atlaxmnPPeAdz2Hm+5IamW/PDsU/r3
0mwYV6sv3tdT4WDVDPwW5s9qP3gVH71ggBD5YLLgvchPyOjmIUTuZOPubDiY
2vQ9SCpOxpMu56zoC7vvcDQ3qzUH/QcV6/82mCOhdf0Sq+TvOSkdu5Em7JDQ
rL1VdjPxR9HL47AObY0ouRsSP+8kNp9b1PgJG7L8GJsOFsjxskUxqdqv5JcG
6IqOkYiTfeA2JY3IgwJk4y9GI2oR08cLuMXwDqnSR38ny+qanoLPlZ4o6bkA
iYfZehO1PMva3PWSlL7PJOJdt4lkTDnxizpLisO3k5S4vXCq0hUM1X+I9U0O
Kx/1hchyLzJ6s3wBj5c7UNzzn7oexgwzGtl7V5W8ZJBSb+a/PhMcD41qNjp4
74Ko5JGsZM8C/AhmcVnNm2sQFy+CR4/eoOsJkl+boXKzDfhrEYh1Y3ITncBq
uNpNmUKkF5vB2r0Aor5qaUbEYyIyGDjAxoXhgEQjKwZoHuwnBfW3o5VLKbZO
ZHyEBYrRONy1Nx10JIiWHmZnc1ZITxTvyZfljftEAnZlk7w/R4nati6UHSpl
8nZbiCjniVRtOh8BuyKJwdorMMlbiwRxBAybbGX4o2VRpLiHN/FLzSSi3GiZ
6hCLLajerUDQmWPIMefQp4kGMe8Zp3w8rGl569fo4Mp4jW3FDsg6vJEalbA6
6rSQ5cxKp5nT51+b053a9zTw2BYa96YBp63/lK7dXFNLJSS+B/f342D+5hZ7
7r6QyZtcW6THABmlLhbc360QRj9aLWybOFtoYlDIh8hN+VOfG/OqNiyvzdB2
WnU7B3f2pjNa5cFteTZ5U7mBnjD/CsOwTlAtfE9cP0yFx/Ih0Ab2lMUGD0P0
xnic31yl+4cxTrkISTgU32OJ6OADaUkLDziFFhE7w+vIjV2A8p4b4V+ehIiH
DUmEcgKRHAkiAXNOVtlS9UnO1AHI4ItQnDEK2r43ZYqGHWAV8hrG55pDXmFS
pUPYICCuFzzL9iFtaRDcHA9AvnQWopexuH/owEj8P7reBqzF9/0fH1JJGEKS
DGEIIdrO17UHhBCSEMIQQhJCEtYDJWESkjAkIQwhhCGEEEIIQ7zzlCGE8N+n
6/3L4Xh//zuOjrXt3r3rvu7rOs/X+fQ6Gzhyv79jHOd9fLB5niy+Xbb8+Lrn
8peH0uT9F0yRfY/jeb8x9buhl/VIlj+qGnudrUZa6XAIpxZQ8PVakBwNgnn/
VIRF9oDzF85N5NikGtQBORBNj0aOVgnVpSysHLGYqc/zfBtBlY708Xgs8lsd
hzVbBH92hLz2HcD24ZHw7NmU9F3k0uAwXqdoONGbPJvLoJ6+AV6TtiB7blVk
DhyMx5brIO7G15HtPxmk2ldG/u9WUcHuKAgHTKDi2INUuiAYy86ehVh+BQlS
LfatasIO3TgIiXkJCXabbMN6kdKArbw/QpYf92W47ZyEECtfeHS4i9JjESjv
GIkH7zYh88lgFNoHwmbFERhL7v2FPVPM68lyn61lJSuqyedtfiJv4H9f3r7f
W3nhkZPyM2Mv8x5QA4uxp8Yapp3J772tTTiWvTgO40QbeF3jOWLJAa3h0teE
D4NnoqiGPyR1kkhwAqQu3kmW/nUhevGcgnvNhHp4YwhO7SG7NpHQzauL67pM
+Mfr4Wk2gQR3ltDr0s0ovdcYOQ/vk2Wd5jAcNp1j7kIK1lkhNTwaZifnIfHA
CiT/4wGtw3qp9etFSPvQD+6aWLIMjCerW3qYz9mC9N6rUPqlGU7UiERwcj2k
WzZHVrQdloZ8QZ9qnPu/0MUC2gecj0MT+pC+yNYjbyXR27KWMJxyhm5dPART
AyTG7BK6UnQQ6ydsQdybgXD8nAbrxXdgPHSXijfcIENvb/j38IRzgB3p77oi
va0QcZgFdYcOaLj8ICK8s+H4ZRKydguQF7+CjINqkHODelALGkuN+Rfgf2U/
Ca62QcyiCbC8fJP0t8qlahnPUaznqmHzijj3RZCrU8X9COqzjVitu/LdSd0U
dhnVFacWT5Jve32bHXa4xfye+8r29OI9vr//qM4Kfgf+pdP+9/hoFiaXbBis
0Hx0URgvtVJs+dhf4SZsoUgr5P1odh6xlv1qdwo/XHawabFdWfrMRggKd0Fp
zoPK+lirjXeh02yvGGOAQxuG6lKWurUa2xCzolLnFV8eJh814oN8k0ddRTXP
BHmEIlC285qlLFmuh9TYinWNqsnuPndkg/pYMpuu9gjq4g+XBg1gu6MV1v+6
hBFHy/F2wTnYPlyO/iu5LHdfGglxTDN8/voUjvNCYRv1iJTGhehfvAa5u+vB
P6Dtv7oiBfW0K2CWOoDHyUeNQ8v1ryrnou0Me6Z5OEvW7ZCtjHXkNQGeBzf8
Z66U3TyYahfndxm/2E8evtVT8VI5UfFx+TSF2edaihGFPC/rqq9FpVx986gt
y+jFe9N8ucS5m+zHfkAn177sdyOwxpej2Q1hGbrG/9uDIaE+Oz37NTz/iUbt
48sQOuMegs4HkuXpKOSF/yL1wHoV8yzs85mC9jVCTslgeA6tj8ywJBJlT4G/
u47UL+LIsiSB/GrXhlNfgst1zpk14Tzn8nEb3Q05/xgob/khHMqIg9kNkxw2
XKSCmRtJ4Ksmn83mMExtRulHzPB2hw+8H46E908zhOx3A3PsDcHZMKQcF8Lx
ZRY8Bd5Q+ruSqHwGEg9vJfXRGIlhU0rFHBVFiOFdz6Tnbx+EJmgYus9ZjZfK
/VDWmY70KQ2RfvkCrCwvQ+T9lNTzT0vMFi+H+/G9pKlaG/rIIGlM6Wf6xVKQ
03wJsgOGw7nItD+rTiePUN5PONA1FZab08gnKgQpjg2Q7ZeA5ILZyNruAGP3
z2TzfpFJ996C5RkeoxpwyYHF9eK6I2ByNtzSFGhnyMLia+2ZIMoFmdsiKf/H
BigtzCrGr817Jz1x9wqc7l6Cfek0ZPZdCqbmdbx2DhEImfyFVG5qymsdSQVz
yqmsuw/CTHM7LO8RjFU4r1iQzc3KdRR3xgUG/xNSUdGb/9j8RWLO8ZXq/3e/
u3Jrnn+rrnvk/4wd2IUdYMeYWK7fNUc+vm29Ct0v/7Kw4tnp++SK58SEeYp+
k4rlTr0vsnqNIpmTezTbP+UeW9W9Pq8D3F6ncp+Gtm7BIm4eQJnld/p+z7Qv
lk7mMan9bcj89D70NOng4tPRlFXdFzFlDTGoSjjUA8ZK1c8VFddUPvsQQnYn
UvlxMTTjuqJoWR+47/WCeu63ihqonDtfKX1pENIaN4PHvUCoxvyimKHLoA1P
hrLjeCrauQgu1Y+a1th2SenmAVB+byJ1Hv+RTjhHoWh/XQTbiOHinIQ+Bzmf
VcwrztUa0ovzZbxvVlMuHJYnbx58T35s/zB5cBnH+Pfn8ry1iEZ1WcyqNEqJ
bQ/vrJEo8vBBSLo/VNvG4e2YbC5bL0dQ8bICChsbgSyvgThkVYjCOpawX9uK
7dnqyFLfr4EgNpCMG7tQXl4IxXUZgfTB100YxloaNMaEFbrMgpsVz+VLaGnJ
Ymw497nPY46NnWfw3IakRuuRf7wn3LV2UC+PQNrRKyRWiWBzZazJpr9FzrUX
UrH/UfLpL0dhy9lInHuahPdtKBOnEBNjIGEnDQydBlPW9nvQmjBE+dP6CNP0
RlrDsyRI+S0ZGxgJUfogaPW1yOktQSSKIq2TB7JOZ1WuJWQk8rqJszOw6hj3
C9VJ8pA3WWmpWDjshbxdl6ty3wFKeeIT0/xL17H8mQpMCuK+lqyt71EwpzOc
QuvDYdJyhNh1gihZSXdrnYZg2nhp8goZLPv7IjY+A+5sdcW1P0uOQsLDVhC5
fiC1KFySVv0eqZZPp4QHc6GbO5WCzu8lbaIWBSsPkk/79VCjJVQ9ldD4GMnn
ZSMojRJKazQPHon9YCy4TD7DwiHY0FeqrjKEvJvPgVlONxjeDTHhxkgqCuZ2
Y+IEzk+ge/Kd8k85V177ngUZlf+rHvPcsKARkzA2Yx8SaQlE/g+l2b8XQ9yh
AdT9W/O4Q8RuEpQ0kPiM2kIB3gzCo82gz9pFhpvTSWC7R+ooMd3HKZFwvsex
kOU/rZHRuRo0kUpSr1pGUR9TkTzYFSEBrniQqoZo1CjY+qcib/5KKg8Mg250
dYQ6cZ9Dle+vwHzHMrVgkyTGKQJHO82v3Kd3BPuZWrykYkyxYeGywLQZcgu/
WvKoyO6szc3DLKbfGbI5X6/i+PcF1djEdpyr4s0UXnuUs+N7xbPFu0Xy1i+7
KNb1ZwqDa0vFvKq9FZpZVgrf7il/xXrEy8+T8X07HtezvEpdYm5DNHIs5WxK
rXjv9o/nf8mno//WO7vU4rkLwoEDZCkjnORtPnWV9xw8TFb1XDabPuEPl155
sz+9PKz3L8K5j02Z4PRFyezpSQh7GYtfsbtR9uwbrV8bAdFhx0r5mbdWQLnd
zCFK3CLVn3KVjtIkwPJoOtI6OiP3aHucztsIwU0rGr7yPrIS68O5Wy4F3/8T
b9VmLWLFzlfZobf3GHzKWL1XDixmr6fJ/nhNr9Nr/p/+0f892NNB8sulHRQr
DL6K6KTWiqYT5/DYv1/yf+T08het2EfUY7rySBKM47rFY9taOO/cAuPFfjT3
xDO4yC0g7LsCvvfkFd8PrVKdWQ5viKO+uorXmZEu0GnLqaARx1lv93Isp6sy
jr+ePwRRn7Yg704aGdP9yD+B84C4T+ex2LKEB5T8qjES9wxGimQbkoOnQqC8
7uq7wQnFqY9J+dWRsrd3xrNFW6Dy00t1eyfie50YdKkTCfWhy9J0/RRcOfgJ
/k22QnS7hDKXvybPxRORc5sh+ZQ1LI9/Jr2kBgIkNTFIuQkPXNagYHUE/NR6
5Ky5zGuRNDsQfInLwkK3PKiLzlGfX9E8lhxu2udJvAZAV/cfEniXSCUeJbT9
rEkWbA2BwDld6nHeD/q8W+Tyox0MYSlS+6BUuH2eBY8RbSAcw/VtcZ1scpf/
ILXPYNK/C4TGqzskNmOwuOQ9elbna1F0qRrLTrEx2UY7kOE7hOXv4XjCrY41
UvNWQO3xodIXG3Q0icxnroRvq2BYD+G9B3Lr8xy3sRu3wOeeaf86tIHRTwHR
1G3kVzoBXZpr8b1XE3a+pjmT7CwizfZ/eepavSL/ZDU9sDmG+N88f89s0vH/
rJcxwnps+O1d6LeyuaxkfAqyImdi3UcvpqOusqJHJVB24X77dayTTNDkOIte
ppGHf2tcoev///5WXH8lj8uuIY8d8J0NGhjHpPGc414z+hfV21mFeZ7mPQDj
t6or13z2E+7rCno5hJx/alC03BLqOQPJ+JRjlF9Xq7H1j98irO9lBL3iuRK5
NevDrbtJB9V/SWNtzVk9wQYYNtvBvf9vcu7ak7SP5mNU+1swtCyWenxaAH/h
Z4iOcW5R57BQStxbRGSbhtqjw+G8bwavpTUuq7gfLs+ScevEe9wdfAItYpai
j96MFXw/TctdOD/buSffYbNGJZ8+/JX80eGT8tHxTn/lOhhbinhuSVYD+AbW
QF7fxjyW0/U9KWdNJHWzfGnY0KqI8d9AukvvSDvNhZIvH0b6q9YmeVBNajHP
ir0bI2GDMnls2GXBGtgdXIbsBj2hjhwP95q7IPyqgdCky9VHa0DSvgfC7Zsx
j+r/5pqG15KeOKlGmkNHrEc4BtkZ4Gw+BIlWxyho8yQIF3AdE9P3DemucH+X
jzmD70DO4eM8eBj5N46jxctXwOOuvnLd3N7qwVJtqzHdlFoonJaOkNcbUdBm
Cse5Qc3g1L8Wzu3j9QZW1csx3CkarHUYyy3vzPY7CtnXvj4s0ZNY7V69ZJ2O
tZW1qp4sH7W2qSLigIUiqVWCvN7prrL2WU0Y+/p3rMf/He/Ds2XYNkgs95Lb
/hpIDu0Ly5INlNZegPX3k5DiNQvOgV0hHLcLgpGvyd4kd4yPhkCpuCy19NuI
fBNuEi9MhLHlD7LtdYmcRorh+XI+iQ7OIF3va5Syrwbsy8ZA3M0f5cWDoTz8
g9w9ec7n/3rXxqRz7gbLI2cp46edCe9rqSpLANvbCHk/7aHeN4tyJFcp/Rnn
ZBR9JMTnboTjOuvKayle3wcC63rIDN2LUVEXkWIcBvPdcVBV+SQVj3xKv04+
xaBN0XCoa7Jlei5AcWFnFDUcgmfi71Bm/KTCsyYbbImOzBW5SN7XEMuWpaIg
aSf5tAuC0eWOaS0MNt2TDVwei35R5qLxsJu0GwZdNJz2tEBBXdOxj+IobGN/
9F+khSD0YAVWLntkhcw3qzHNaixzu5eOoPZbK84xIeM+Tn91YjGsfqWOXq/l
OTkuTyCrfXWyrPq7VCZmnHOxxFxSsT9Kdu2DmWUrdmptMFvVbQdLPrKUvbkR
I59yor/iwYZxChY5QVFQb7Bi8rHqiqDmjpxjNJljpNN7N7OsntvRyf0jtElB
pC1oA/9w3n/z42sBa7hhC8rTZlXKjjY+Ayr/95m1g62ZayeblypiDatlsezi
H2xgh79jj2OuTmC5U/fC88phFL7wQc/Xt5HGDCRa90Ya8tIkn61C6dzMZFC1
bRCHXqOOY1Yh9uFDiC6pILgjJaVeLlVa9pZ6/+OMvB0xFPfaEtb78lGcJIVb
YDwcZ5yC7rML5r3ZiufT2zD1WQHNPlyTJW1uxLzaLGMfL/ZmZjNyK8Zkf1zI
qlsU4WM7nuerseV7SX2rDcswcL+Af6xWFjuzqsJnnr3in32j5QWNAphkdTX4
Df7w13U9C9vL9OZRaHHoTy9gl2Jecz+v41HM/e7G2o13ZIVxE7HrrAUzvukP
/SgeX/G0ukai6TPQkEVi/6jt8Hbntkx6kBfcDs5G/ojZiBs1HInjpkPXzxV6
O44NHowx7dO66ZRjZtr7Fn4QxDREwGdLhCxPQmFiXUz4sheaeby3g0C9nbof
iodgfhfKbHoS+twdFDzMhEXqPKDSrDHQfhLRs6vxCJ7cDoVvhiPo2xwKa+EC
jZ0ctqMGQWXshBNmCch7piDDCguEnF1PMXZ3ye3WTNi/yoYk1xuP76agcf0y
RPVOgjqrD63aeh3+N2pA7fadfBe1Q+n6wRBuM+35qxyDp3UqoIDAWfD0vU9m
G31g1VgN3dfnNKhvLDx+j8egfSdBDtHQHAdyGjdB2aU2yHl6kIq/fqYEk35R
D4mn4Gl9ENO8nH53/wdhNWzQvVc6jP5N+byu2kV3wXuP9VzDa5/fnliOXx9u
YHLIKqhe7iXLuo0gsk0iZfUJ0gL5HHh3NYNu4kqy7bvpXx6T2+Q2Ix5i33rw
Wb8aTq+mIO/XAGSOO0mejydTcqMIpHffCOPybiQeeuMve7973T/53iWTzvyf
dr3Dowhmt9mWxXzgcejOr4ZVrKs5EzhP1og6OyrXWcSRmvKGnVspHqaHVOj6
HusXVDyPXdmk4nndxsmKiGdbK3RhrTVGWcNNMll2nxPM9baWKW0GVujW8gHf
Kscx53YPFtBKyiyX/kNuxnX/GZ8+bh5pUreh9NhxaHpw7kZRZBMUfGkJ+7ch
sPzQC/rXNeBZXYHaU9dAa8F7lerLNlFan+UkLk8n/cRNJt3gAvU8LxJtCsaX
qB3QZcZV/lZe59vcVp6/4K+50/04SP7CrSg4Ydrnjp3++iz/fBVZ4OU18gxj
rryr4bTccWyYfFKWukKOGS7fI31mGx6jztlDKSmcf1p9/WLFe2o/RxLO/dNT
VT/UEepzXlJh/UvUeuVxE/beRr/8TXaz+pHrgXDO02+/KhMRyo5M6z6atms4
p41ymFaaQlHwv+YLQZ8brlnmKsQ7XkJW3Z5gH6dDPLQzghRe+H59A4J1TZHT
vAo033kegvHNOVJ3BpQh5yvGYdCG8xyzrZFEo3isKNOuNfL+9QH+v0ed+tHs
0FReD54o/9MvwdPZBmMdD0J40I9O+/B11uIs52t7sNRC5he0BAXRVWXn1uSy
xzI5i0q/weJcVsrWlWTJt8xqoVjOvsoTmy2Ut94SUTGH7pF/8v2/39j1n3Wh
2WZLbp3WIaZ/Wxg/hlBE7AVYPk6jkJXZlNCyNWIOH6WYAzkkeG4t8bXvjri0
UPiut8WXZ+vgaZfPY7WtzCrOm/OuOd57PYFuzEAYjPvI4Br7Vx2Gu645cnJ8
4K7NJGezEZSbvADGNzXgu6UmDF0uSSWnpWAvub/TX/OQlB08YfupCo7O3gyy
W//X2FefAfPfxDHtqqOHYOh0V5rfdjgsz+nJUG4Lw7L7EA34Tk7dApHiOBsF
dQZCVdKXIlLXwG1hHe5/KtwKydf2MHOdg8cDlkPcdjbU9FaSP2Itgt5qyfqF
C+xCUxE09yQJzlmT48QhUK18JU2zSiJJTntIJhSR/xeOr4RVwPfLrppSnwsn
EZPI7Y7MpRMqx+22pA0LbXaTiS9Xr7g3Y2HB8g70p+JYB9nm8dnsZtAMFnT9
Abks2cC04sz/3KvWHzhvORYflR9vO0QxxylYscZ9rKJj/ACFvVtShawolHaD
IfmKdIgcrEmxiGlU3fi4tstNe/AeSVpkUF5sODJiWuJTGO9BqEZmJR/llqG8
vlhq9ocL+ncaxyz2WZo/+cUdXqOdZ112vGUNpp1wk/P9mGw/5cHHUueDBsoa
a1pry4eRZbFJP7wWS8Ue0zBkkAH1zNXwLRtReW368o+k9q+KxEkdEbNkKCTD
V5PWgXNAlLXneUsx/UqQ7eqNkNu837ezWSSkP037eWwSmowVspR2Drj7dTmC
v3dAo4Qh7OUSB9b3/BOUrt7B/Btsw+9TyyrGHZJfh9WvYyFvMN2iYq4Wlar+
0vu7fnZkb4P5Wtaf+0wFXTNIZTMCSqse0qL6I+HmYMaUb5ZI755LQP5rBzg3
qg/95rXk07AFBEmdK+bQ9nsCBQXtQkzJCmg2+5Ay7JLU+CwStuvrQ9e8hLST
a0L8ZQel5NSrnAOf4k4mXcV7A4rf/CTlwBfSxNOnyaYxn6cyhyTKC1GQ+G1P
k51iB923h1R4pB/KB0fAZ9UPSt/ZASmjQ6HN1EiNXf7tT+ZGkFxWQTSE8/+q
vR9LcvMIui2T6JZ9JEKOW6BoRV9oP0uoSLEQwj3epPq1l0pd4uHXeTD08pFS
8V7eKyNjvByS357QaptVvLYs2kgBSWZIrjUEuvObKKH+QajsbkuV7zeSUTuV
rE+J4Pz1G1nfNWGOtjxvzj98KflZ3EPU0K6wNd3z0IGRyHH901tZcuglKecI
paqoVsgwYfXs/mH4OpZzphsmtP7j/zvQjoUNHgvr0sbwjbqCLQlbIXxWizlp
o01Y0Y1szRrAclhJxW8WdU+GuMz1X198C3L3aAlj1AOKGTwJmuYbSOXVFwKf
RBJN3UnqoGEU5Mp4TPfXmn9xVgk5P5uBxAX7MU/3b8/s/bZQLV0lzZp7CV+7
dmJptzg/hK1DIK7UjMerpWoWOKsVW9aB+ydud+haiff37vnFXDvzONPyZm7y
Bm1dFOuN8xUsQKWQp5j0v/lsRbOu9hX6P9NnrCIxhlWs0xpr8mShOb1kpVfM
WWDpZeaX/IeD4HQ+73UTNK4hU02dQDa1uY60n87zhyVV20Lg9s41r+ZrCrZY
Ao28JSyfZFK7XXeg7xpI9p7N4PBgKWI8oygzcA95N6kHc/luaIbw+gnLOYmU
555PuvCxyPvaDIafQ6FsPAWOPf53/x5R5hMZdGO/kO/LvigaNBlmE/bApR3P
fXa6GwLR+GRpgGAcnF+953W8TxajvHQfk3znvgeR3wKZw7Pt8qB7v+RNpt6V
tyveK696aqcs59hglP7MQF7DvSyqM8//bW1zH0EXRVS+ZgWs3r+CVepp9JQl
wrkOj7Va3ishl/Tu+LJzFZQ2+8huCbf5xR9GYlD9O/DcrKLyYIZz5avhLDZQ
x66b4F+3N4y2vP4/jc6T35Wb0IUNwvqRy6H+eUmS1/ozaTOWIKvhLegOt6Fp
NZchYUcNpO2Jgv0oO/jes4db9ZEolp1H5t1+EO3mdm7CdRXU109JjB3roqCK
CwLa++HwpZLK+zay4UN2MovjwrZvWrHj78pg7JtE5aFl8LR+SzYH9Bh0Kb/y
+MhCL3a68VkkNa0iM7YtZr+HLWeHrkhkI35sYg9TV8kUcbflTXWtFO73PsnL
u3WXu186z3LyB7AEr5NMt3wD9b1iwd73MWMC751SVfELFD6Nhr1FAAxusXRu
fDycJZnk9O4R8jb4wPxHNLJiVLCdLYfywlHy22SJ015HoMzJp8QL6+nci51I
3umH4vLvJPjVVOphK0Zm/aGwFjVAiP8P8lImoLQ0EKrbUaS7+5qKfeOgGVCN
EhP3U+Y4QmHHfvBWWUASaQaPIS5wdK6Lt10vIjMgEx+7C5j/kN8UdmgO9r+P
gJsLryOYLV6Ji5t4fa7QVY5Gc5Yxff88nnM/MQ0xyadgOXYz5cUr4BzQm1jM
Foh7n6Sye95I8RsEn10LkfClOnyZJwQNfKFVuyAm/w3l5LdETIIbslYPM8km
BbKnRsBvjyOuT+U4RPdkKAwdp2HCDpN80YxDwY0ucFnBkFs9Gnmv51Nc9Chk
Oghgud4bxvw/nExTYq2Yf8C4v3S4MsSZZS+cZDqHGtX8N7D1/wytuP/OjR8y
20k8Rims6ov0oJy/viea0Ix1XhfLvq4azJQH10sDg2LkR9w9Fe1fBipuF3go
rvpYKGamPJCFPMqiDh/FMuezW5EY2R3Gk6lseA7HoEHhF1H26S318Y+HZVQp
+VmvRIvC7/D/yPtHs0ueGH4iBdYe49AhfFTFuC7d5PXODZc+RLvaQhbcWsx8
XP/0hRrenNsRLYQHYQz+BpeV1WBT4ImENo2h28/zCsuetICoyQw4V6uF6zgO
lzvTYFB8J8lnnluq3cBle2LtnVTmY468MSdJ/0lGyhvO0JjVMNnAYZgRaETA
lt94K1bA2isKv+5ugbHNLLpisR/GVSIqZvuQ+L0+8/KNgP3hFggQrkSXkTyW
0+L3vYrnS4d4rF68448ueXbrBjYs4dfqsySVdnT6AXHhdvJM2k7LDPHwKiuF
elOiNGvnDrjt3oErYXfgs8CEWTc0RZntBUi0PCYodLSmrKe8Ltincz84jpQj
xCYQQV9GkKrGVPr4ZjnCNmmwzDIOZleWIPNNMWXUbICo27UgTLxLedpFeL38
CLQFs1FeZz6Cnj0gm7atEDNoOwl8M8j7QzjUoy/Cu09/qKqtJ8+hv0jXZxjS
OvM4s26BHZx3PKf06f1go6kFy8N7SRRsA3FyN4gmjCSv5tlwObITxnFbKHFa
GuqjCGZLuZ6wsztssu9DSN3iIQndOyHPYStUl3rR3fBkZPzTFc6DeqLQNgva
a/uhVZ2QDsrYjSt1slA6qw70G6tRmd0zyuw+Ec9LSqGtK0FxGJf9d6tvh2AZ
jz0ZdMOwpU8mchf1wdhIE/47Ew7/fS/J5Rw/1kWtQWbQNOR0HYbYojQUJHWF
Yd8KOOUOxV05X79v+w+teHYs34yIF+eRf+0kiqbr8aP6FzjefAj/1ZHIv9gC
KWPHIj3dCt4mmyT4YQcUbeY1p2rPC7T+eQYEU4dB3OoSGeXPyKb3DESEL8Mg
x3Aocz//iStmBVHWXZ6T5TNlLvqsWwVxUSvkOhdgni33y60SL0fx5Y9/2XSO
H+L/T7/A/3vETJBUfq6sEyl7rbZSFE4VKjJqNFNcNTgohn9trdibelN+IX6i
otvYporxna9w/uz+s2TVmhQwWmEt07bj1+PQhvtCmm5wZN5GzkG78T3nhU+/
VJfNNuag3lzTeG6ESoV9eU+O5J88F1VoMg58XSfCpudmGIoAP9NxKa9M+m7G
Fokyvyrlr99dOU7hvMEwLnVFzAov+HxfTmUbx0M3PJPUeQxxGWPgL35EmhNH
SeQWiVX3zuBK9c3wjFJRkQfBbYY5MqkT1L4mHe3SH9Ulf/i0r5/lOaEuPVNk
GYUH5fVUb+XFK9/Jl7XSyLvVbcmyWuZjdZ0ypKb+6ZueuewPP41ZSQASV/VE
1AAzGH3WwHJGAY06swOSY7k8pmSh+XNvUi665gbY///GBb2m50CfZm6aq49S
UXXTPQ0ocRW0f8W5U5J08Lz2m9w/hFPmu+OUUTcMgk/nJMZLs5F204R/J04g
1T4Lsj3M5aifOe9FWPA7FkHtH9DwNxrkvuyN2okbEfxjYOX4a+9MZUlSp8ox
KdfF0fXiJJg3yIVhpFqqfteACeSdsH9pBAStF1XYFs7nObYf3yON/Up/I0sS
WsoOfYhghqphMsdPa+T3S6srIrPV8rqLOsjelExkgs9Z5Gi/BjOHTGGh7xqz
kDk8phHxIwlWt/7EBULW3YDu5WBInvTiGLedCE62o6E7MJpyxvzLbTpklcSw
idcoJBqSyOg/D5I6nBvFqskp+EhCIbj4rGKcklmDoZ2TQ84u3D/gW1XMfXh5
4yA6mC/1S6qD4qDLf+pHdg6D6rg7MoalwrN6DxOmSJB4X1LBLYjLaueaSVR2
qxnSCjnW3mOS7Wd7/PFbi5LEUKvncZ/Q2QJJ0HRvchxSDaWvF0NwNRD2WToT
3mkN9wcryLKOGg39dRAm/CDnpHDyXLIS4rwWeHtkAdxXHiCzS53hYyNG7THJ
MGoKKK/dV2qxIhopNXpXjCVYzf28MW5nSdeEx36Kt+ynxKYroXNoCObDdb7/
JK4bszyW4dePA1j8jvvkPsqTcLRgCK8TelefKW/40IZcLRP0u0mldxrBZmIt
drPfLPa9sQNbpW1deY0fPXz/7AOXr7LGj57J/Ro1UDzclS2vf76avMBiS8VY
tj989Yff4aw5DIHfpD6z3bHqWB4ys95TkJGPz+yDaW1574HRoS+FD7Fhr048
Q/Hy/8Y1Bb3dpSKXyf/alDz39OhS3uNc83sgea68Spq2A004MVdqPTMaou43
Ke69aa2P90HrmdxnnixcbVrT80mlHUSeXarA2Hg8gmKDoW1WJhV8jSHL9Z0R
5j4FQY5nqeqnFGRvBXLneSLH9itfI+E/JYVpfaBfxfMWRAgk1YARJpxgw8ru
+qDdOh6L1G2qxkrsOzBjGlW87iQwr5wLtyQlG2nxx96vPv4DhL/+9MD6/In+
Ix8+aB4jZ3wqadc2R8LYudAPb06Gbs2g7Z8vDTueBWdPex6LDJ6DoJkvSfzQ
DD11x6D/kgX7dlpc3MHvua1bMfmO43mXwSk8l6XL70gYjrfgNSODDqOs3h+O
8+HXl6Og/zqKubqhco/YLJkIyVgp9IFZpDpyhxJHmNbmCc5rFWc5Heoah8k2
n9v63l/NEPexBeYVJOLLsjUIcBoCny5/zp9efwsEj8Mrz13cwQtppCdPqUkG
/jNOqmdfpe6veW6ycUA26ayuknPdg6StG0hxt6rDbDPveSCQtSdB6xYS51nX
yOmLyT5uuUSqG/SW/AVPKbulH3SW/clTwteMqmZHiHcnkr6GDTlutUXxPxvg
2XMaaVTBZPPNGsbjteCCRbjoyu1WuesbqHvb/Ol7mG7aT0tPk2rKPMpN6wR9
1kXK6cyxaNjJXjBu64tp9zdCXjsKhVvHQ+1WzPnZLvZDi3r7kXB/AkSXa1Bc
724wG+GBkNZLSZWSyOVTWSLUG6ohfkQaXp5NgDbLCsLT1rC9c4gsr4fDmTqj
MDMU6vePkDDmKASnWlP5XfbXXpm1bMp/1s+mokbMpv1+Fqk2sDoP17BbHw1/
9N+2bvJA63D5W+cd8p4NDfLPs41yba338qGlN+VH1w9R1CtopNiVN0C+UX6b
+SR2liXU/W/v7J4Tqsq0ftYYk8r9YqKvk6DpyGtfLa2OkrvFfKiamfRR+Gok
NP23lmuQmIzhF0g47jhsZ62jgMPbETfLhCtfjoV1jZYI7LgLNqMGwr0z12eB
Yz/AaYEInh72EIclk8apNhK7N4X3Ad47MCb0IzGXVDScthHe2+bCcvTUivd9
tzeGfn1TqTa/mNr4lSCsSxusOdaEnViyE4WtRv/RPdIwWVNDqvzgP2Vyq06n
5KcWNqzweWSfnM++L9JDlWBGWUcnIvlzJl4ufgfBNS15t+yG4S14/Xlp2yIE
Lj8NdnguVjVbCuHnaVQUEgY2oj1EEUelCc8G4+fm0Wz9zsco+nms4ju3FJsg
MdsNzzoSUi7NpHkWR5AVHwYzuQYhiz6RaM08iMS8ziRlYFNk/n5Flh+aQTAw
HnmL0kiX0xUBCRzric+uRuErE3ZduY+iEq2hfzuD8ibvJdszryhf0QNvk1oj
3ekCfOcUoHjlRhI7WiEo+QC9bhzLdEo/FhT3gPbMETLR+TmUb8P1r+XV/Sh/
0QMbG/Zn5+41YgtWcB6YwNWN2OQvAtnAW1Xla/XnZM9ebJHV3v+C6byV7PTP
IfJn2dvl3aQ5sgn5i5i476u/1mPIeQcI9lYn5Qcrihl7BCE7+8O/13LS15oh
VT4GClfzmJW2Opdpfk83gtnWQbZ+ZcX7hu4O8Be2RsqNdnAMnIK8BufpWdMU
CNu5wdYuFgUdGsGY9ZUKYwXw7doVnqk+MBslgMHgCIdRy1AwXQTnl/Ewa7AZ
xZ1yEPa8Lzws/FDqr4HzUiHUow6CxQUhKLMu2fRoDv0RW8R8dYaqZAr9arYM
O45WZeYFVdimkkcYNd/6r2tzyrFBn/HpyGsRg7wdcWSYFojMeyvJkBiHvG3e
SJ/lDuWe2tCe8qWC8OEQbg+guDve8PTvT8rbC6j4RRyp13Qi3bUkemuegARN
TahSOLa3ndccNiXRJmw8AOoYAdjETShXroblt2hKcakNY7cOcK99hhJn8xrR
hrujkavRI7vQkmm/vZBadmT/1ammx9q6Lqy0eCYCb4bjaPN+bPsNnsca+uUa
guvsxuijf3oH+M7huUhadRIJSk5LX05vKTN++CHrE9dRnrzQVeZ31E3W7dMC
luPf7T8ySP9OTqI6jpTZDiiJ3G66H2elAf7usImaD+8RPXBiXTj8OqdA8vwl
EqYuQP7+K7Ba2Ynlrm/OnLa5snWr17GwFTUwb4kFk6SPZzoTvg2pMwDM3xE9
Tx1C0MCFZGhZi5w+/8tJ7/YROcYBEA99TsXKzbRHGwtvRWOIPE025rFmpnt9
AcVnY5E3fhvFnMikiPqxMEz0Rek0S6S9aglJVCSxAbNhE/Nv3ZzfNknuz3x0
DNhrOs9l6PrG4ssEriMMfhPI4DIH5yJXwDB/IlK/74CmyypkXjlFwVfy4TFH
BElJNryWck6mW15WzKZVauUc6SxrQ1JvOWtXlc+bzS8vrntC4xHcdAeC16XB
c/9GOPcpJ+/tk2B2SIVz+3kOT17ji6SPvkcuLZoiKegQnObOhbeoD05/TIHH
JQWcoueCmq6DzZXpKBv4lNR7U6UFYab1bf+Dwu40h/BTI6gtDlOM+RpoWX/Y
N3VA2WcxRFH5UtveYlhfjMatOdEI22WH4rcBODdqK+wbM3jvioDNdF6fVHDV
G1nfwpDTW4igXbXIhx2gtDbtkZk+CmVtPlN2jdbQD7OCc8k8si6biRaJKRhb
bw+uDD5mWs87yfh8KVpHbMCWbdHwzakH9YLnkrwkF5Q9+kz56vpQresPddIh
Un59Qs6BfaGs7k7z+q5GRynndswIawqqGwHNRW5ric6Nho27FJmfbVDedh38
vEbDs2ECzh3YC/XbE5KcjqNQujMWPidnwax7D2hOldHYpFi8NqbBUnGblFm/
paqZrlR0fwkyv2mQV1WDdK0bjhblYEveBrw9b4Wwq2fgttb0N7ovdH6dEfWz
PlZNj0fa+zRSp/riunIV1NNdyNlTS1mb2yFo6UAELbejmCh3iCOmIu0pQdVD
Cp/sUJP96g1DvVlIMd03weupVFzkBckhEx7VekA9KE6qOfOI1G8u/2Xj/++x
ZGH9/9OW3PjU+a/3u9Tme2K8vTt7Pm42s9Bz3O9bcyUL6Wspe7y7kWxMyS7Z
0pGT5WHHMtjNj41liyetki9WzFHM3ltF4duoZoUunOa05D+6P6jWYnqw9SZO
rLyJsBd1mEuvZRCW7oLBbigER8spoE1raNynEJsSbLLLXCioVTHF3fNFlgkj
+Ho7oaCfFiEtrBE8fwLcn7YwYYTtktwFchSH+CC3dAZURwdWXHfehcQ/vAcx
OWR4VYNsWpps+8h9MDtaAyk2CRBk/SLR718kLD5O5cWzKq457h23GwtGq6Dc
/FB6b26tyrl5vuA9cvby+Kh3VciKDKHyG2sWyUdeHiE/Kdkr07Z9iLcnY9jc
U03YIGtzppzkgeTJVZnZuJHwtNsM97Wd4PM+EkrRYqmwXxwEfeZLonZ2gd75
BJXI1mJZpxUov+eIrGCuo5Nbe8F/3t891Kw3TWDBL7l94PSD5wfpd06vuNak
T/uhHchlbthDBpVFLomcVOTxVIVE27WktHAlyQSTLbJmqeTu0wgkruA4/H85
hf7gHAGaj/dJ2eEqqc52QFaPFujy8hzci65XynSI4lgz4jwWkm1XeR67130S
DupLhs/BUH2WkXDOANiE/+E/2r/rDmu5xSjbXi6SH/v2QVb7/Eoelz1wj+2L
3i27uLKB3LfvEFljt6Hsd3IWm+XnzF7234LFcU2YKrsvMx7lfJWy0R2ZzV7O
y6786YykhnHIvNQFOU/ekDj8NwkO7angnCnze07aZ5yf3Dl8Ablf2E5FZ2Lg
FzEOhpom/DVQSWYPkqG/pZYK9i2QJjb3QdSZlfC/lgmhUwT8oy2wfelaWA9w
g9NEH7iv4nzaed8uk0fzBbC2470EPUo49nBeaIZsx2HI8jXhh28XqHSV/b8+
ZC9oP0yE6JcZ6Z70hcPHHXil7cC6vzgO5fh86TJNLpTuXcn+31wrTYI5adZ8
paKI2hCN5BwRvjd7I1gdBnH9X2T5cSAyu0tgP7kd0mIs4f3qACw3L4P6kodU
yM6SpuohMgSsI89fXuR71ySz1/A4Q47fK0qw9MOgizEQlogpuXUA1J/HS8tz
6vK57N5O6tRhRuX9yg8+z23tSTw/3P37HUpgFiw9dBJiqnL8GtaqA/octWP6
Dj9pcc9oCG1coD3aC8q6f7hOQ8fz3qrpgbwfgKjjXkptomGX6iVUvG7U8Ceb
9moPm1eV5ydT7hUTnmcIjejDhDVTkDctpHIPZ8iScdqLxyZZKM8VjotfDlWf
H1JVgoasZ99FcCuT/pqvw90mt7C/XyEKjv+JR9zo/KPi/7QNx8h95x8fm2rN
owp7K1O1mYJi7pLwuJ4Sb34g5fyG0oyBWugt20jTZF3wekwkcsfVRvHWNhCc
qGuyyfg5yu+4ItN/JIJYwl/yVtS0NQRDPlFas2boeDce6ie3JCFWD0jfkdvR
2n3j4XHCJNu91pExtAqCb7nBM4fnleuHTZZOltVjfd0tWJlvFD0YEMHqvavL
OYI+/Jvbt/++6//7Ldvxo5gKK+DyWIugMyZMnNkJXqVbkZ6gQNkDgmU7V7hs
GQyJSbaWnVBTR3kczFaHQf49H+mWUVBecCDD1m80bdRaDHfeisxRZaQ+y3m0
A+bXgvuxx1R26jpp5feRcovXvBfv3w79rGkQJt8h55Gu5Ckyg/nH0xDW5Hx1
tv/zO/lZStx+j0KO+U1yPCOEqu3hirkum7EIPq4vTTbMcMp/6Y7attxvq/dw
QtCo81TYinORJ5e0QmrbKNgPbQGjzRkMen0PZZf/cCUkP7WDQBjnun3xUqj7
5UuVDXgso6xqG0Q9HwXHgHpYNuUM/Kem0tvLybj4bBdiej+sGJ9yuw8JhnEu
I7c5u6FvH0JRI7htqOslIM/rp0kyl+c3qeZ7wumSBXru2YX8dtZI7P+bbJtz
OysgyhLqLa6Iu7oT6a5pUM61lCbu4f5S90nfyZOZ9PS3gTCmTaCUwTcxqu5m
uDSrA5d7k+ER743EmaEmu7x+xbyounCbReCaSz7PUygvWoeQMM5vpUrZJo3R
dYGgPiSWxZ9I/4PXDWRu4zyB6ncJEt3eTSSxmoeCDVsQHBCP04ZolB0r4HUO
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
ODRwhtbVgfjHb5PiVy6ZxvLIrmsZ6doMqL0GP8ISQUeuU0EU1/cvKHAXmfzG
knLeaW5su7hcWOXLUTD9OoYiI+ejKjy/FSLVPkRM4vLli6tcofwrAaG73yB6
uGPd/bs/vsuEZgYwaeddYPN2HfPXtfGM9R/foLXdhg3TmzKj385hpkV2YeJa
VKEmhOM2iBzJ+XCC1o4Hr3x57Tgif+uBZO8ERHXbBcHplhS29hDmJd2B3Pk4
ZMfPYojTIeSca4yMwVyM9V8es0jVQIhecTWbkpb24pFnv8B0dDYErnFkXBsA
g91nyow4TbMVt2FidX7Ym02oChwDa69WiLoZACtBBiWL4xAW6oZ272MR9+l/
PfnWchyDvCOTRbz8+2TdcT6iVndHxb4EFB65R+YnC0n3RyMUXntKYQe5OCMV
x8K4PAFBPbgYnHfOLOj/dhSXXOViicI3t8kQbgHBphPiPOEYFgfPQKLQFsYH
f5Ps1Nr6mPXfIznbfhun/++5pOFdg3iUsbjTO3kIe/w5stzSHPoMLuYn918j
lp7LJcmzd8S353r/yZL6Ev9UK6qe3wEqu77ghXDclr7PuX7Tyus/audct2k1
KeI+En+TPYxpu6Hsu4uqHDg84t6vnn8uFXvZvbQUogWfaO+kz6wuTBTbdoiq
/b79KxvG0KwbU/5XIUqd6vPVn9j5MJJ+TYhRKBjDWS5/M/98ezh/Sa2XWUvt
EUI88Da7i5V+gWLrEd0gCAuD4MQgCEoPiOVfnamwYTvMnrYNwtXtKP/xICT3
9ELQyWOo6qQmfv4X6jmMy2cvvZQOreMQUnk8I0lrD7Fd0WduTnVtyLr3CPje
XI+IUYehnF1EvI6PxYr2xaQfy9qtA4OpOpd9lhf7InLuAEhWz66dm7TkEHYP
XqeY1AAofz9BglU3xU4OVohwOQl5RZZYot1ChmUyKMbKqGLtXCjfiOD3OgLR
60dAxdynnPVO7OtG0v3bN6JYhqh3Q+ru2ydlDRSXaiikNBpPn/ZmGj8+h2Jw
WGBeJY+RNHlJ+46w9u+J8kGF1JSRnOF4cIMlN8Cb1oI7Dw1B5N6BiCuSIGAW
tyfkU4dD4j4W+h3jSGD9mhTqzlQ8uCn0dy3q1teNvrs42+WZCOYJL8nupAU0
UY5QGZ5R9UV2rW7jfMzeTf7HF9jIG3KnQbS5CTseRUuEdQqC8ak1nAZaQd9q
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
IT8ogSz9D8NZ2IIJxgQg3aMuHPeXwDfIjlk+28ou1OB9geb4DBw79JjZaS6y
cPua8gY/Mvg+EH9v+5WbM2yQ3GnGYyaY8KXKTpR6/Lcn9Gtmw7bHrWVqd6fq
3xf4964ez2T3vaxLXV3VmZN46Dh5l90p8r+61uqbt8u179vn2+WiU4SHG5JY
8qSbqPjgiKT6fD6V7awQvBi2DYqoEJR0F8OU0Q/52kekf7UaBTFZ9OCu6ddz
7Pck6Q++rlMpjYHjZE84rGoOq2NnuGyoBeMIJSzWY8ive5OcRvVH8TcBAnaf
JfGG1TB8G8/PxUEbKMN/kPbM71T80BfeLvyetO76RAtn27CR4lx8/vyIPzvo
9gYH5E7szt0Y+d79E+WK09f5Wmk3fo06zeZ7DZjvaMn8ajoVZ8yFw9r9FE4S
NHPh+MbfPHe6/T4BKv89UAbwcV+dZBAJWqqqriV62Rv5h39Syhh+L2V2U0CS
aiHF5o4y33HT4T2OoJ4XSx4f2qBU/x4pTU8i72fN6nGf0L6SxUUvkwsLm8v/
+WxlkklLqz5rti4XIWIFrF2GYNXmzuzB4Ek4ls5x4entSHfwFpIWh8Hx6BDo
d5dSQewOBNjZQVcBWcVZLQK+rSd/jRcyN8mqxz5/0N8kMj8hQ32+TiWlcQVJ
Li0hdXFHyu9ugC57E7kFNUCcbDHUFYNJHXGYQifyeWuaHR3hOGIhpPG7oQg8
JXNwJhI38MPUl0YU7ByA4jNNYFzeGUX2dpBM6Ym0T5xfcE6AJqg2zJoABNTc
gWBvzj997USS1WMhik4mrfU8h2dWwljwhvSbY0j0oR+pnBpRQb9sMqZPQPDL
OnB90gvBEx9QouQoCs4UVj234nsAOd1Zg7is2VBs4+v5BWd47iwu0VHWLTeY
Cjm/+3wOHOZqOV7ZDo2zOd45a7JU6f+IzOUHqe9SA7QTs/lzB4/XMocId7Kc
P0Tm5bxNNf3xkXK6NYPVjj9fCrONQ1FX7hqVbfoYT22HbkehtLSWC9jb1dA3
W4kXd66hLG456Ru74KrPGSQ064hcI38uFJN3C/m1EijV1hfKPftI4rEIoik7
yW9DASrz+Hr2ey124qzv71BFfMK0dgFs/ccj7MJPv6p1cHo7r+ddvssZyv18
DMoqqcfXV/22A34TNiNnXleogodWfe9BvcHQaXvBXtcWHW8egVvzZGg/toZw
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
WAL1fCWvORTblKlPNUfJ2IZwyrNhrrpb+NZ5G37cjMeBydy8L03vU1HSEMkL
WrP8+Azkzn5DioLatE3/CiUDRciZ3xw3H32BwN+Hur84Bt+HDSAUS6A/zsfL
bIcuRY7vdSy++g6qBfUg7DsfSul6SJbLKOtJXVb+YCkcpjRkfSV1mKvCH1FZ
3J5fx/eOV53LoNK7teA2Owlm2RMI11SQ9Y2YhBfnIv9bHC3NyELIuRgYvAYj
t0AB6VYtmmZ+RfoEF5iGvpBFnZuEwwPWIeTVLLg24PZC03wKWM73pXKYFMHh
9UUw+LQjrV83KAYpq/2CSvOSrDUssvwfctKM5es6hBfvUGVWKnKLHCG4YEOO
b+sjoEUJZR4ZhcDeMmTIz8JLzdfNVHSZD/WDxzLNjRA8aNcWFT0ekzT7V7zV
0ukmaUU1YVx3lASWKVRyzhPN6r/j8cKCDzKHxasp8NUA6HwnYpDpPkIXX8Wn
sTthatWVHjn8VvW9MQOaMbt3l5Ey9RQubHRkT2y+Q521nz4OZyyv7i8tIO9L
tzDM+BK1b1zgnn0ax+GUzDQlGgEz6yJkxDzs1DdkF4MasZChtZg2soTu3d8N
1Z9psMQdZ3T4Cbu2/w0GXe8qj7hmJw9fso9V2B1ln2sdQG39Ipb7pg4L39KU
1dqRUn2/F+ZslvySP4/xfMHXCZoONqJUUkBz8zsV0ge4fktC6qumVe9hF78d
4ePeV/3dYeZFiO/PgfeHoag4tpWsrTgfNRskCOpK5Wl8re+K29HIT7xOit0z
SXIwkHRDuqHi+iLonnaH4D2va6Xcv4105w5R93uxKPPnc5euHGrMsrYLIHIG
Sj70YV6OrvI7k1az23tfs9yNY9iwmYeZ45dJ8if1+lXxbN+PfN1NSfo7KtAt
hYJ9wrcCHYri+mPQrkMYBF6TP3DlYjgrTyG3nwCKBj0of5eSAnqeJ7NbFv1P
W9N253Zo05ojfEBtFDy9R4Lb/UgZwOt/V9wqIl1glCy0aR4EF1Ogu9zx1xls
rThyyU5lid430cfFVr424Dqr/X0wW7EpiWWc07KCzryGM5vvjvw3j6iLO2fj
vpTJfDcd5cYjnj9/6AzSiX8na6gDh6WLqGDGF8p85ob8CcdJW/meDMO5PSru
TY6n5iH84KLq9am7GoWM1tFIOZRIuml2lD5ID3Myf+ZYEqCjophGCJnlhLKC
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
pFm5/Oj/A0WU5wc=
    "], {{0, 128}, {512, 0}}, {0., 1.},
    ColorFunction->GrayLevel],
   BoxForm`ImageTag["Real32", ColorSpace -> "Grayscale", Interleaving -> None],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{1450., Automatic},
  ImageSizeRaw->{512, 128},
  PlotRange->{{0, 512}, {0, 128}}]], "Output",
 CellChangeTimes->{
  3.7717660471725616`*^9, {3.771838644648941*^9, 3.771838657374784*^9}, 
   3.771853504181892*^9, 3.77186487358216*^9, 3.776172364840716*^9},
 CellLabel->"Out[72]=",ExpressionUUID->"f0f85539-a2d3-43ad-a422-5f7f48f2de33"]
}, Closed]],

Cell["Blurred and binarized:", "Text",
 CellChangeTimes->{{3.771766384715864*^9, 
  3.7717663912302103`*^9}},ExpressionUUID->"f1ac4bcf-cf64-4c1b-a11c-\
72b5e1bcf5ac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sep", "=", 
  RowBox[{"Binarize", "@", 
   RowBox[{"Blur", "@", "seg"}]}]}]], "Input",
 CellChangeTimes->{{3.771633477705323*^9, 3.77163349356579*^9}, {
  3.7716335343730717`*^9, 3.7716336631569767`*^9}, {3.771634060989153*^9, 
  3.7716340642134533`*^9}, {3.771766056119246*^9, 3.771766074400682*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"00d6d9cb-5a36-4ecd-ad7c-729ac18191de"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztmEuO1DAQQNusuAa3YMuS7XCCGWlgB1KDhNhxdCYsIGOX40/Kv9R7Egic
pD5+brfT756+PXx+c7vdvr99+evh8eeH+/3x16ftPx+//nj+8nx//7Rd/v3y
57b9AwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACWxY0uAIbiWACWcfi3DQvA
Nvi3Df5tg3/bvPbPWjCGp5/NwBp74w7/5tgrx789dsod/u2Bf9M4/JvG9z+y
FuiP885/A0uBAfj+WQC2wL9tAv8sAFME+lkApgj9DywGusP7/yItN6py2fd/
tVLXaLqVm1X969U6vGmhgGCo2da86O8/ekeV4Yte6CQc6up/gUWgNx/4989/
K2wCK/qPpJnN/+jPQw6Kb6rd/EfyCK3EhlpX9c//IgtALZJKoIxEsfxJ/+J6
Vync97/IjwDr+Y/lqfavMwXB8W8d/1WPiaFOl5OV+sC/MDTA/98TSnnUEaul
rnfxqX7bf5H/1NM6RyCX9p/IkltFtPuMQS1rI7e2aG5hXPyu7+BfHEmkOVjX
6dvEHsTd76CCfEb7j0xUfTwV/+ECSNyRc9kbl28TewgG9U4kU/o/E29a/351
+G/iXyXI8fc9/pWY2P8+kh9WxX9ks+rtv9dZP5JbObnKy1+wAObwX1BBrKzC
J4oTyFnjaUfuPRG6+S/e/wsqKKhKj3jXR8+0q6eOxv6Tt8nbgj9ULjOy3ehR
0s7ucsOKqsj1nwqRHj6YMOHh8K6DCmJF4T+Jkn95POe2LE2VH/+Gsx2Jn/Lf
rqBaMvynlm3mPEduy3q44vA3o//5kD7/E25TpfTZ/rO/zv5fb1dRHaL/C9C8
obxDT3i5XUVVuIsugObtxI8zr/97dHUCrupfn6oJCk/SavXogP/cvmsmyH9m
vjl27mZef1bnVTPkPzTfJOv4n62rfLI7V/JfGqE1W0H4z72xKnpFVf3Y+T8Z
ZU2C1mMTcVH/G+e//fV77DVrgv7Yr9lX9a+w/av32G3Wmvpf4litcPpX77Hf
rAlvaHH/NcEN+G+hf5D/g6m46Pav8fa37sdfyKyZHP918S7kXy1WG9yc/nUD
FqWe35kq5/2rT9ho/6OSD2FK/7rxynLb0q/y65+1Kbsc9lY97MG/bfBvG/zb
Bv22wb9t8G8b/NsG/7ZBPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA
L/4AXxkQXQ==
    "], {{0, 128}, {512, 0}}, {0, 1},
    ColorFunction->GrayLevel],
   BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{733., Automatic},
  ImageSizeRaw->{512, 128},
  PlotRange->{{0, 512}, {0, 128}}]], "Output",
 CellChangeTimes->{3.771766074663528*^9, 3.771838658035478*^9, 
  3.771853506933218*^9, 3.771864895427669*^9, 3.7761723792409678`*^9},
 CellLabel->"Out[73]=",ExpressionUUID->"0979f5ab-9a31-4e4b-ab60-3652520ae60e"]
}, Closed]],

Cell[TextData[{
 "We then find the bounding boxes for the musical components by using ",
 StyleBox["ComponentMeasurements", "Input"],
 ":"
}], "Text",
 CellChangeTimes->{{3.7717664011500063`*^9, 
  3.771766427753518*^9}},ExpressionUUID->"40924536-f277-49a7-8378-\
bbbb74352700"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bboxes", "=", 
  RowBox[{"Values", "@", 
   RowBox[{"ComponentMeasurements", "[", 
    RowBox[{"(*", "sep", "*)"}], 
    RowBox[{
     RowBox[{"Binarize", "@", "seg"}], ",", "\"\<BoundingBox\>\""}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.77163372637778*^9, 3.771633731584282*^9}, {
  3.771633761932127*^9, 3.771633790579742*^9}, {3.771634861625722*^9, 
  3.7716348718111343`*^9}, {3.771634920296307*^9, 3.771634957831272*^9}, {
  3.771766106615272*^9, 3.771766124116684*^9}, {3.77183867579735*^9, 
  3.771838697965898*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"f5d8699b-4e37-4b98-a816-a7b585df420f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"20.`", ",", "103.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"21.`", ",", "104.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"49.`", ",", "82.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"50.`", ",", "83.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"289.`", ",", "70.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"292.`", ",", "81.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"214.`", ",", "69.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"219.`", ",", "80.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"454.`", ",", "69.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"459.`", ",", "80.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"416.`", ",", "68.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"422.`", ",", "79.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"436.`", ",", "69.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"441.`", ",", "79.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"43.`", ",", "69.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"48.`", ",", "94.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"48.`", ",", "56.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"53.`", ",", "78.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"392.`", ",", "59.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"397.`", ",", "76.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"472.`", ",", "65.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"478.`", ",", "74.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"268.`", ",", "64.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"272.`", ",", "72.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"64.`", ",", "58.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"69.`", ",", "70.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"95.`", ",", "58.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"100.`", ",", "70.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"134.`", ",", "59.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"139.`", ",", "70.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"156.`", ",", "59.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"162.`", ",", "70.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"177.`", ",", "61.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"183.`", ",", "70.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"194.`", ",", "58.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"199.`", ",", "70.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"118.`", ",", "59.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"124.`", ",", "69.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"28.`", ",", "29.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"40.`", ",", "102.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"244.`", ",", "55.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"250.`", ",", "64.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"341.`", ",", "55.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"346.`", ",", "64.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"363.`", ",", "55.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"368.`", ",", "64.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"28.`", ",", "47.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"30.`", ",", "58.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"394.`", ",", "51.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"397.`", ",", "57.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"378.`", ",", "43.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"382.`", ",", "56.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"325.`", ",", "45.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"330.`", ",", "55.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"284.`", ",", "45.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"289.`", ",", "54.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"95.`", ",", "39.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"100.`", ",", "53.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"299.`", ",", "40.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"305.`", ",", "50.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"176.`", ",", "40.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"181.`", ",", "49.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"31.`", ",", "25.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"32.`", ",", "27.`"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.77176612443156*^9, {3.77183866614255*^9, 3.771838686410524*^9}, 
   3.771853508664796*^9, 3.77186490913875*^9, 3.776172383151609*^9},
 CellLabel->"Out[74]=",ExpressionUUID->"86674a7d-3f7e-46cb-921a-56f5b2205424"]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowBBoxes", "[", 
   RowBox[{"image_", ",", "bboxes_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Show", "@@", 
   RowBox[{"Prepend", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Graphics", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EdgeForm", "[", 
           RowBox[{"Directive", "[", 
            RowBox[{"Thick", ",", "Blue"}], "]"}], "]"}], ",", "Transparent", 
          ",", "#"}], "}"}], "]"}], "&"}], "/@", "bboxes"}], ",", "image"}], 
    "]"}]}]}]], "Input",
 CellLabel->"In[75]:=",ExpressionUUID->"24255036-c9a5-472c-9bbe-63305e1f7ac4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ShowBBoxes", "[", 
  RowBox[{
   RowBox[{"ImageResize", "[", 
    RowBox[{
     RowBox[{"staffs", "\[LeftDoubleBracket]", "8", "\[RightDoubleBracket]"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"512", ",", "128"}], "}"}]}], "]"}], ",", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Rectangle", "@@", "#"}], "&"}], "/@", "bboxes"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Area", "[", "#", "]"}], "\[GreaterEqual]", "25"}], "&"}]}], 
    "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7716337955915527`*^9, 3.771633797933942*^9}, {
  3.771633832191334*^9, 3.7716338727672367`*^9}, {3.7716340036921473`*^9, 
  3.771634034035387*^9}, {3.771634083633608*^9, 3.771634107331764*^9}, {
  3.7716341662924337`*^9, 3.7716341760512867`*^9}, {3.771634573939733*^9, 
  3.771634601368889*^9}, {3.771635006645151*^9, 3.771635036843656*^9}, {
  3.771766211446793*^9, 3.771766256656715*^9}, {3.771805302706352*^9, 
  3.771805309795138*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"8dbbe3c7-2193-42ff-b2d7-501e7a9cbd00"],

Cell[BoxData[
 GraphicsBox[{RasterBox[CompressedData["
1:eJztnQm4TdX//2/8EiFzZB4jJCJlppChUoakSCRDZZ6SsciQkESZikyVKUqK
EmkWKWN9FckQyZQhdd39f/33+znr2Z3p7nPOvdfFfj+P82z7ruGz1vqs9/p8
1l5Dkfbdm3ZMExcX1zs9P03b9a/Tq1e7Ac2y8p8W3Xp36dTtsQ4Nu/V5rNNj
vW5rn5aXw/gXR/j//2xdzEhISPj333/j4+PPnz9/oWVJHPE2UkBUslC1UD/J
nddFAdX8hZbCw6WAeB8utCAe/gOP6zx48JBi8AjnAkKVf+bMmQkTJrRp0+bz
zz+3UmuLSCoM8u7du7dr165fv37JndeOHTs6d+5MdsePH0+wkXw5pnKo7DNn
zuzZs+c///xzocXxcBFDXWnlypUQzuTJk63USjiXA6BTfvv27ZstW7YHHniA
359//pnmSLUTQTiMqE1cXFyXLl2SKQtpIyxXoECB22+//dZbb7377ruVdTLl
mPqhOqlWrVqOHDkWLFhg+TTHg4eIIGL58ssvr7jiigcffBB10hBwOXeuCwj1
4kceeeTdd9/lAXO3R48eVtjeHelg7T58qJDmvR5OnTp10003oUihbPIYzQlF
P3ToUN26dfWmZMmS33//veXTXpfC+71JtHTuU3aZY5LApPn333+PHDlyy5Yt
3bp1s5Ktw3qmYGpG7ContXnzzTc7derEw7p168qVK6e+nLQZJVUilwAotT61
mIfzNng4d+4cASZNmrRnzx6eV61aVbt2bcvxdcYZxfIRYGBjGWL0+1qq5g5s
38CvPybloJqgLBiVeDhw4EDp0qX//PNPK4CQTXSVzhTTWRCTfmAZ9UAuxDp4
8OBLL72EF8Bz69ateSYKVRQ0NeevX3Gc/w0cPpylC1PhfokrjF/FOgseWKgo
vpj7VSbVcvz48bNnz2IkJJPxb4qsHJ1FMOVyho/3YCOZ2kKJG00O1GG/N0F1
2O8lPYgHeGb58uU8Y1RUqFBh165dlkOBnYlb/9VDk7Uzi6AaHkray3wiNyhM
d96xYwfNEZ4o3NOI6tmNfkbUIjDzDTfcADPDRe5jRQqnnvTr1693795hQlrB
iuBXUUGHzkRlCPNXjd2Rphk7unfvvnfv3iTPN1Q1ekg9cOqw+94dKh2hWrVq
a9assQLo3QqmDC7VI1C2y1OvVKWff/75QBs7d+6cMGHCoEGDFi5cyPj7nI0/
/viDMPx38ODBBMAdo66++eabp59+miiMCBMnTiTKzJkzCbZ69eqiRYs+//zz
lmM1IKP5iy++qOx69eq1b98+y1f5L7/8cpEiRR555BEZ1WoFTPchQ4aQHcKY
kO+//z4p33777UePHpWxocBY+wxJeIvff/99nz59Nm3aRIDKlSvjQubMmfPx
xx+3fGYwwJxo2rQpOSLns88+O2fOHMRG+HHjxuFpUhwK9fXXX6typkyZwp+m
TZv2ww8/qH6++uor7Hzq5I033rDsTwDDhg2jZsaPH//oo4+qOER55ZVXtmzZ
oiibN2/mPWIUL15827ZtimWKQ9UpL8rLfxHJ+q9l8thjjxEROl26dCkpU7E/
/fQTgUlZneLbb7/F2aEG/ve//1k+94ome/jhhylmmzZt5JLwp6FDh5YoUWLj
xo1jx47FoaO6JOHWrVspKbU9ffp0y11HUGWePn26UaNGpIkk1MO8efMk81NP
PbV27VorEksgUSgpKqFw4cIDBgx47733+vfvv2HDBgpFEWgycqd+XnjhBScz
0BwIw/unL0tQM9TV8OHDaamkagjTFh988AEVS/pLliyhts+cOdOyZUt0+PXX
X7d8FuOIESNQwh49eqg53nrrLaKgKujemDFj+Cu9AKrhJT0IbpFCfvbZZwT+
9ddf+/bt++OPP959991kYfk6zsqVK6EgMlq8eLGEweusX79+sWLF1COUNVmo
BmbNmkWX0fPbb79t+fiELo9s8IZ8EMumKRKpVasW3Sc1f+JMQqgqli1bliFD
hmuvvfa7775r3LhxXFzc6NGj4SIeChUqRG3QCmnSpMmbN++DDz542223UcMf
fvjh1VdfDcHCJ02aNCEk3EtSd9xxR9euXUlEo4aaDG6pUqUKDydOnCCj9evX
W3YPhbsyZco0e/bsmjVraoBQ+MOHD5cpU4Y027dvL6phRMiVKxfcy0ghpo23
Jxx4IF9ku/XWW8k6e/bsEDvaTjs2bNgQzU+bNu3HH39s2bPTlk0IV155JSxa
p04d0oc9evbsyYN0LGvWrNdccw2Krcrp0KGDZGB8zJw5M4mvWLGCgvASWiYA
GsVzxYoV77nnnieffNJEgXUZKbJkyUJqDJS//fYbJImc1IzlM8tr166Nndyg
QQMKAptR+SgqZUS9TT0wiODIEAw5J0+eTMooJ4NRwYIFKQXKjIpef/31UBwB
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
USPdyJAk8/9KpFevXp07dx46dOiAAQOeTjqQ2qBBg6pVq9azZ08eYkmkS5cu
NWvWHDJkSKISEmDw4ME1atR48skniRhFiZRj165dq1evTlLRpYCotWrVolbd
yCCZ69evr5uPPP734MGD4LeTomHDhkm4/keJDB8+XHf5JQeeffZZHQAeCw4d
OvT888+7Dz9q1Ch9S40aJ06ceO6552JJAYF1BJxLjBkzxhy0GEu+Hjx4uDRg
qGD37t2bNm2CSDGDk/CUMPH/M888A/PoTp/4pMO/NgYOHOh3Z0EUifz444/D
hg3TVSnhw+seFszpX375RXGjE3vPnj1I7iZHJ5zFZAzavn27GxnIgjAUUOf/
RMH/3pBh+XaDemtoPVwakOWPHduqVav06dOnTZu2ePHiuXPnTqrzHywH/5sz
jWNP00AS9ujRY+HChR9//PHq1atXrVqFJR9RRgoJMeow6vjEvB5lOnTo0KhP
6VSU3377zXk4sxvA4WvXrqWMH3744SeffNKhQwdzBUz4iMqCAkbN/x6cleYN
AZcAEkIgcNe802xz31tTP1TA+vXr+30l1Gn2SVLSZOV/JX733Xc75Y908epF
wf8JvnvrrrrqKlPSDBkyuBzsYuf/06dPxz7JdvFCjb5169aXXnopaU/n9uAG
YSjaj6X96NoP8b7rlrzmEye88cYbMEm6dOmusHHllVfy36AH1MeSS7Ly/z33
3JMmTRotdORh9uzZ1qXL/9myZaOMjNH8XnPNNS7X88TC//G+O8hwOlxKe4lB
dPHnn3/my5eP3lGwYEHvGO0kR1AaP5/M12md993HrdOkaeLDhw/TMf/3v/8x
1n/77beff/75xx9/vGLFiiVLlixYsGD69Om6fewSgOr2lltugfadO7MgFn51
yULsS0BThv+RP50NHhjRrEuX/7Nnz65dA/ymJP/jVQVe1nCZQLq0fPly+Vz8
VqtWTZanZ0amDOLtS95Pnjx59OhResG+fft27979008/bd++ffPmzRs2bFi/
fv2qVatoo7feegsGmDp16sSJE8eMGTNs2LCnnnqqe/fuHTt2bNOmTYsWLZo0
adKgQYM6depUrVq1YsWKZcuWLVGiBGN67ty5s2bNSvviYsu+CrqIunjx4he6
MmKC9BaV5pfag0Zk+ZsC6g2Vg27r3thYQAq0nb48ms9nSQWJ17hxY2cDMUbz
8ty5cy4TkUjoEoNUvP15N3x4eZFDhgxBA89HVSJFYfgYNGiQmxxNlAMHDjhL
ynh38OBBNzKoFSggxYxUZsWdNWsWncultJcY9IH+tddeo1/oPA0qH55JsK+u
vtDSXfRQh1q7dm2XLl1g6Yceeqhp06aNGjWComvUqHHbbbfdfPPNN954Y8mS
JYsWLZo/f36IGisoU6ZMELWTuJIJokc53XAjwkRUugvN9+GASsfZE/76NUOe
PAKdAp0kGD16tGaqkwM9evRgrJ83b96cOXMoUXQZQaRYC+7Djxw58siRI1Fk
ZHDs2LHhw4dHGmvhwoWzZ8/GwqG8Dz74YEQyUMCI1os6Ad199NFH0cW9NPD+
+++rX8hAwgW40BJdUoAioubnNA6kdcDvCCy/3feh9s4HPUHLON3ly5e/0FUV
JeS5T5o0qVatWnfccUf9+vULFy7sN/ljqpRfPKN69eoRuE4MqF27dt26dYsU
KcI4Tqb8N5bUAhMnTayCu+66q1mzZvfddx+WA+WKIhHEQ0jKm6iEKhFVV6VK
lehKpBzxsEiEpNyncPvtt997772UkZLef//9N9xwQ+XKld3IEEsrEJgqJS9s
MDf1Ex4kdeedd8aSQlKBCrnbB0QKUy7+RMEpvukaspd4T4tEUSGkRqYoLb88
x1IKcqeHYifXrFnTSELRKJHzTUQgrqrlnnvuQVtiEc8NpGAlSpQQIYdi7PCn
oIiigUYBvzmNJET69Olp9EQLRRMQDLK1Us2UqZyRTZs2zZ8/f8GCBW+//TZ1
rkJlzJixTZs2uDZx9vyPHIGCBQsSZr6NBdECMxWTtXnz5pjo2JCxJBUIUiNN
KHHKlClz587FKsYFIMcoEnnxxRdbtGiBqIlGJwDVwnBD40ZXIuU4efJkmJyk
3AtMxDk2cAH4L7U6YcIEtVGiMlM0CkgxI5WZuIsWLcI379u3Lw+RVq8BDbRk
yZJWrVo1aNBg6dKl/De6dGIHRaASxo0bZzo1RaN+Qomk6uI3T548xuDkoV+/
flRIRAVRQzz11FMm6+eff/7NN9+MrlbJmohU5ocffrhixYrFixeT1LJlywYM
GIBxgr9GMSPqESRIiR599FHJBhVMmzYtRgZwkymS0xeSg64F+QUZMmTImjXr
tddeW6hQoZw5c2IOwXhYUIye0HWjRo0wq/Cp27dvj7b37NmTZho6dCie/vjx
4+mtM2bMQNQmTZq8/vrr1HOYElHhlKh///4MoFaq4f9AYNRRLY8//rjufEdO
nqkurQLKlStXkhwBZNk7VXXyZHJg+PDhscv5xx9/6B5wl8Bd1fXTUePkyZMx
7v994YUXIprsooBR78KGFnRJd4yYOXPmiBEjYk8ndnz88cfiBH6rV6/uJsoT
TzwRZ1v+cplJIbqsp06dSgoYXfw+9NBD0SViQJti+dBzsdUrVKigCXNoTeu1
ogDEJfGgzaeffjpG8VyCDpUuXbrs2bND0Tly5MidO3e+fPlw7UuXLk2hGM4w
qhs2bAhFP/DAA4888kjnzp27des2ePBgzOxevXphCGEEwswMVZgZ77///po1
a7744ouNGzdu27bt559//u233/bv33/IBl2P0Z8AUezmGzJkiMuQGzZsYDSx
Uhn/mw8ux44do5Ux+3///ffMmTNrNcuoUaPQojjfKiBMCO0eDbe5NCwUl2E0
mfb/8ouKUoSoE1cs7f+Nd1FYfQ9FDX755ZfoMlWUPXv26PtvFNWrKM8888yO
HTvcyKDwFJBiRiqz4mr9T3TSCn///Te/OCBYp+a/FwTKevr06U4yf/XVV+ka
oaRSo8MkmmTQSmPGxPgIK0Tpy/43X9xWrVoVUTpayk5vXbt2bc2aNWXiMpBh
0MKWZcqUgTz1EjkZs7RIzE36Eg+ClXiaRdm6daupgaAQsbgUPhASDBMRz0gs
ja146tQp5ZjoCquJEyceOHAgUhrEntcth+d92wHO2+siQu0aMMDpO3HiRPgS
SfLVq1dTk1Yq43/LNxG0b98+Whm38ejRo7Tyt99+SyUwpPJQrVo1zZ5RS1bo
tZRuFr/FJ+f6T6U2cOBAmbXRJX5RrP/0Q7zvVKWffvrJjQzxMa//nD179rvv
vhudtIK06KWXXpJJmVSuZdSSwDaa4tD33EqVKp0PuzNIBe/UqZOZVdAa6Ygq
RFmPGTPGLCXioXnz5u7TMRJ27doVGcqXL4/pu2XLFkjJhGFAuffee+nIPXr0
YCzAumOocpOFxOvSpYv4XytDevfubYVoL0lCRpFuundCUmGQa9tpKDh3folm
Ga1gWtxJIiKeDmbxo2K/1Tha08gvevjpp5/y4GaIcQLnyO+0mUCIInAPUzP/
YzpifmCWU420ss58xrGC1rD0pOFhmt4lPP4PlaPH/9GlEzvUgt99990VPshU
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
MGTIkBi34lr2VHBEu3GfffbZA5HvOnGCvj9s2LBYUmCA1v1fLkEB3cxsB8W8
efM++OCD6OI6MWXKFK16Mvjnn38wxtKkSZMuXTr0be7cubGkr80sWugSEZYt
W/b2229b9nbatm3bJhqeLOjgUUgYiGnTpmkvUij89NNPWqSkU3GwHMIniG0W
OP9PByeF9OnTU8kR7eodM2aMlo2Fwrlz5xjC3CcYFBgY7j+COJGoeEHxyiuv
YJFGkR1Vp8UDieLTTz9Nhfyf4NtDwQMe/V133aVv1tqTiIYsX77csnvlxo0b
eYPu+X0lV/Qff/wRQ44h4NixY2E+hTvX/yjZiL62h4dKgQGg9Z/RJW7W/4iN
tYUkTHjn+p/oMjXrfwYOHOgmx0A41/+4kcG5/idSmZNv/Y/q4c8//8Rij/Md
PF6kSJEzZ86EX6MSFGaPDx46LmGC6yVGKtHixYsZ4xQLG5txJCHEkhKFX7Jk
SXTrfwKTYkzEbUkIthbFrLXTYlEtyLnzzjstm1UCxQtc/2NKUb58ebOr9+qr
r8YSCJpjYGrhF9goDD4CPleoMG4qwVv/k5LQCtXq1atff/31eoOLJ/cQY0zf
03XhhXjbuUo2wbf+H/7v2rWrDvZJCLtrkjYiHa2bTcIzsZUpvI2jevr06egS
VyIQI4YEiUjgUMUxWQwfPhz+j65EShz+xy2C67QgMEyOgTCfcmgpbR1yswuD
VqCYkcqcfOv/VWSsRzhftoe+w2qhUdTbImrWrKmjvF1uMVAsXfCkN4899liY
jRIKv3Tp0ijW/wdNCltUZysFNore/PLLL3KOzCV9oS4gM+v/dayQ/qtgOtdF
p2XyMH78eCuxKnKzwF4pUBuTJ09O8K1ujaISvPX/KQlVwsMPP4xeqThQX758
+bQhpWDBgrTmDTfcQH/UjIGpJQ1wBGaw7t27d5cuXY6E3fehsg8dOrRSpUrF
ixfX5bxJNQSc993/jm3DQKar2aJj44MHD9avX79kyZK1a9fWUtVQ6ahEGDwV
K1akRLpuLKJMlSPjZsOGDUuVKoVjHul9gmb/F7VarFix6dOnh49u9n8hM+Fn
zpzpPrtk3f8lGTBotRhS1ildzIpqg5ii9OnTx+VxB0Ig/2PYfP3111aIKkpJ
/jdDZNGiRc05ljzMmTPHClZFQflfwfCJ5EHIz3JzNKVLgoVApk6dKq8kiq7t
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
GcU=
    "], {{0, 0}, {512, 128}}, {0, 255},
    ColorFunction->RGBColor], 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{289., 70.}, {292., 81.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{214., 69.}, {219., 80.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{454., 69.}, {459., 80.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{416., 68.}, {422., 79.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{436., 69.}, {441., 79.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{43., 69.}, {48., 94.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{48., 56.}, {53., 78.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{392., 59.}, {397., 76.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{472., 65.}, {478., 74.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{268., 64.}, {272., 72.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{64., 58.}, {69., 70.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{95., 58.}, {100., 70.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{134., 59.}, {139., 70.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{156., 59.}, {162., 70.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{177., 61.}, {183., 70.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{194., 58.}, {199., 70.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{118., 59.}, {124., 69.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{28., 29.}, {40., 102.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{244., 55.}, {250., 64.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{341., 55.}, {346., 64.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{363., 55.}, {368., 64.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{378., 43.}, {382., 56.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{325., 45.}, {330., 55.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{284., 45.}, {289., 54.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{95., 39.}, {100., 53.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{299., 40.}, {305., 50.}]}, 
   {GrayLevel[0], Opacity[0], EdgeForm[{RGBColor[0, 0, 1], Thickness[Large]}],
     RectangleBox[{176., 40.}, {181., 49.}]}},
  ImageSize->{1256., 317.},
  PlotRange->{{0, 512}, {0, 128}}]], "Output",
 CellChangeTimes->{{3.7716341526425543`*^9, 3.771634176719123*^9}, {
   3.77163457877699*^9, 3.7716346024743347`*^9}, 3.771634970822041*^9, {
   3.771635030581173*^9, 3.771635037643882*^9}, 3.771664689205124*^9, {
   3.771699016234429*^9, 3.771699044822459*^9}, 3.771754667696335*^9, 
   3.771754698815239*^9, {3.771766248723894*^9, 3.771766257200017*^9}, {
   3.771838668485394*^9, 3.771838688019788*^9}, 3.7718535127818193`*^9, 
   3.771864961140194*^9, 3.776172385938881*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"aa329b1e-f7a3-4997-b5a5-3afff60cb049"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Classifying the Musical Symbols", "Chapter",
 CellChangeTimes->{{3.771585093829673*^9, 
  3.771585098911482*^9}},ExpressionUUID->"b19622b1-2c78-4f60-8c76-\
4a9269c16c3d"],

Cell[CellGroupData[{

Cell["Importing the Dataset", "Section",
 CellChangeTimes->{{3.771585109900038*^9, 3.771585114088212*^9}, {
  3.7716351415561867`*^9, 
  3.771635144064726*^9}},ExpressionUUID->"c8c5cdce-ac36-4248-823d-\
5548afb394a6"],

Cell["We import the dataset for the symbol classification:", "Text",
 CellChangeTimes->{{3.771766486188403*^9, 3.7717665242132177`*^9}, {
  3.7717666123827763`*^9, 
  3.771766620999962*^9}},ExpressionUUID->"f0a6ec5a-9f48-4787-bc67-\
4413e2d1a937"],

Cell[BoxData[
 RowBox[{
  RowBox[{"symbolClassifierDataset", "=", 
   RowBox[{"importDeepScoresSymbolDataset", "[", 
    RowBox[{
    "\"\<datasets/DeepScores_Classification\>\"", ",", "1", ",", "All"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771635147854485*^9, 3.771635153975259*^9}, {
  3.77163519564987*^9, 3.771635241998312*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"775f375a-dee9-4fee-ad0c-8b6b10a7c5c7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"symbolClassifierValidationDataset", "=", 
   RowBox[{"importDeepScoresSymbolDataset", "[", 
    RowBox[{
    "\"\<datasets/DeepScores_Classification\>\"", ",", "1", ",", "All"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771635147854485*^9, 3.771635153975259*^9}, {
  3.77163519564987*^9, 3.771635241998312*^9}, {3.771636423557724*^9, 
  3.771636445601707*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"e46b8d2d-4e39-4814-95c3-f159d531e1e0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  RowBox[{"symbolClassifierValidationDataset", ",", "30"}], "]"}]], "Input",
 CellChangeTimes->{{3.771637594044943*^9, 3.7716376360262537`*^9}},
 CellLabel->
  "In[130]:=",ExpressionUUID->"76b01357-56ed-4028-9f4e-fd6ebee2f1c1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJztll1sFFUUx++987HbVUoBq6z4wadp1EKtxQBFBSkq2gSpCIJGhXRbULNN
tjaNPjS8CDYRozFGoUtaNWLaSNI20RgeqLAoEgLWkj7Q2qAuEbbWpsTW3Z2Z
e6/nzuy223XbnWl803+yk5md+d3zcc85M4t211RUEYRQrRsOFbvq1wcCu15/
Og8unvHX7q32+yo3+V/zVfsCq3aLx9YlfjyjGOPU0HQKZ4YWi0VHBkdicc1g
nBs6hZtZxAyBgoZ//KrlnX11gZpXa+oa3v7kxE9/mXezLgCiYyPh860N20oW
iIBAinfVSwe/7B/Rs4HxmFj/0tH6rWuLFs5T0Ljc+ctWbj1wxoAopnTB0EWQ
Vy60N2y61aKw7HK7QAoWV9I9r7ReikEQNOMKLK4xFut5f+f9t80CFJsMJiDz
FA5yfnH9t6OcJTKUljb4Vz/X7F89x3xaliUAzXWwOBBZFldLKjsjFEJI84BR
iEwfDtWWLnAhIllKuGC6gbH4B5aY/2zbNYiSplmHBWMXgy8slkS2wTRGGURc
cHvuls5RrqemgDEG1odPv1EyD1wFK1PgEJQEmbzJF/qTshQPmDj97ZjvLrCg
qnJmNiFVlfCSQA8EayRpsR8s/HG5hyAVp8Sc2QVILFl6ZHSCpyKUyx89kguL
u8i0sClFRR5/d3S8FSjlRt97D2O4Mb3phAOQnBsfbQoDaOWO0rGe/YVQ6FMk
7Z8RIGnhnnOMm83A4Ni3rxiKU8mOWjyskFN2nHLNMs+HgoUSJshG6AmeSKio
3eRFOw99+pgKO2uTFgvIClraavJUo8aZp2ZjRZIc8IqCF30ueEr16OWDXiTZ
yvy4hP024JnGaKTlCReSpq+5NPMi/hUdgo9zfvE5L0yHLEWXxkME67427fN4
+93YkXVz/8ktO0IwLCB9/W96nXkPAwkq9d66HwTPhzuez8dEcsRLBOVsPBxm
HBro58bVHtuFm+BhjuVVnY2LxuW91beDcUc8hItufut30Xacn9+cA5XrCIfd
I0Vf6FwT7fPdg8hZ9Ag6RV38cje3+NADDrMPsxXJW44NJubfyWLoW7uNh0Tt
yDKa3xiOJ+Zv1wpnvAzB51WcpEyzpl9XoTMeniVln0V4cnoDL9vnAcZqwQd/
8PE3cNdyJ/YVGHErD/SlvL2cxE/gObVg/4CmGzDyhSg7UWSbx6qw3thLxWeQ
JcZO3WeXF0WS+9C7A4b5gZVUyPb+E9mTV978q9k1SV0f7YD8yVl5MfGl/DVV
Ry4MXY9cvRqJXLN0tK3uDjv1L3jifbLhUHNL8HBTUzDYZGlDWeENyMboM79f
cpc/Xr6+dE3p2gm53Yr93pE8s2e5VVV1TSjVwkzkclm9C9HhrCKyMK6myuNR
zdwTZfL/meXOSdeMnP4XVblnw1yxNXdu3vvi9p3O1dv/YQG0NNnYOdB9+vuz
jkVZV7EYqNt+4caY7lwwv0sEv2NwUlvYlsG+seyHmRGlMxBP8pxGDec4m8Qz
x7LeH5hsv8JZbCYJ+J//T/N/A8Sllhs=
       "], {{0, 64}, {64, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"noteheadBlack\"\>"}], 
   ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
g+A2S/lvRmD0b2EH6Ko3Af4GOVUx4A==
       "], {{0, 64}, {64, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"ornamentTurn\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
       "], {{0, 64}, {64, 
       0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"timeSig4\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJztV3tMlWUY/+6cC4g1XOGyDixSCyZMLXfMJZvGaikTR16YESw1Eg8IxwuX
2nDTaVvLGi5XLdaFVs5FS6WNESA4RGDOlie3ZlxEDhwujvs5373n/b7vnJ37
OdoftdbvO5ztfO/7e97n8nvf9yGpsCRnH4FhWLkOvnIKjmaWlRVUbF8MP3It
5UX7LXvfesVi3bt/b9m6QjRto/Yn/xshSaIKSZIehi6Kggpk4oEXlnwgR+0G
TJIEnuMEn7cix3KCGI0BSdSYLrvtentb29WuXtvgtDbGRwhEW8A1caf78ufH
D76Ruy3n9bzCg+9+fKHj1uB9Xp0SxoTAo9HBxhPbU5fEGvT6GAagMxgM8U+Z
C860O5B7vBjScXjE8Z5vDm0yIfn5Al+0PMvyWed9yIXIB3MBsgapczRazUto
mE4zNOkGRdMkmKAeSX+nYWiWF1lB9o9CQuURnUOXLM9SGE7RFHwIDygEksBw
U877v4yiyX5RSIIABudv1xdnGHGgM4S//yRFMjROxz1X3DQFMfjzeVTw8Z/2
pcXRJFoxIH4Mh5AIHCNWHW1xgBZ8CyHxEJNsr9tsxCFWHCYHGsAICgcDjz5f
/F0fC4rkRH/+vXPrCRwiJYLzMVidpPRxKW+3Lsgy7/KSKOgT8T8xUxAoFcR7
TxYIEmOyvrYLMu8tcXX9ka9ejccI8DHE+gqfwMiMiuZhTlKK5sk/4o/9ULAi
Xk+F4CopIMEy+fTus9cmIXrQm+QuPyrI7I3avBUGnAC9hAgBnIMkJGYePt/H
evPVaggzv3+5YykSXwxKtQd+fDw+bXftb060XbxVANZk4c4XO5NJCB8nYxia
pjThKTnR+PAdsyzrRA8qAefDR5uP67tYs2X5YhKlCpgeKDKGpRU+mWCu7JxD
fMFbQyJsIZmf7m89W5SZFBuQOZJw6wqPTS9rD+ArB58iyplbDR+UF+Ruzcrc
uGHd2oyVpgTGrSBUWwwzpJVcCcLX3NBeTg/aeq62XG749mxN0dY1pngaV/2H
Z9Fqa4c3n/WCy8VqaZF41/zczNSEfaj/dvf5iqwko7I4HAQJ5mNtkyw3Nzvv
UjgBTgTBZO/pF3WYogu9acuZPu8xuw+G7cMK7gGGEO4O9A8MT93/ES5ShR/3
TPap63b7iIdxKCRKFRw8YLFWHtmZqhYF1z2eujm/pNxaWqLN0kcGHMIx6GRQ
DJA0o4M33oORoUObAhnACVpvNBq8iFWRUFFVU1P6mkkpHk48tj7fWl1VVV1V
qQ2PhYNj1OEYHZsYaKpeDXsPHsZ8quvehGPEMe6eErZwElKDNHmtNi8FU/iJ
bzaBeAQ2xEUUwEfXjWD7MDsZ6YeIe/Llkzc53yNcCgORd7KSONGwKxHSB8eP
advp1hEOvRc8TULoxUXUfkjOPy4Up5LABvdfONE9A90E6k+iaAcEF9za7M2T
m54wQNlhCy/bcwndP1w0wcOtBpeqMNRcvVavnL14fMb++n7kVjTJkwR0xDtv
1e5aacBIAu5Pas17VxysDM4H2fj+bAhQlrmhluMbFhMEzeAYnbD2WMeC0sZE
4bySntnej/LSF6nHHpmy51znGLyXeSEiWUI1dQ40Hkk3khgBvQBmXGVpmoWA
uMDmIRAC8nCh43hWEoNR6EKiVx343jaHohIiOi8p67NTXRXJ6qlJLcnI/9SG
zEYmq86DkWlbfWEio2MY/dKXDl+860Q6isJzWW1BoW6Tv9Yd2Ja9o6imruVP
p6wlNEogExJrv9H8c7ttdE5UW88HaKK1uSLrRE2npHTh0bNVE6ibBBEJPMtG
JZggJpT2/2H+eXAbCL+5/8d/BOLfRLj7Ixr80/H/BWUx9AE=
       "], {{0, 64}, {64, 
       0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"caesura\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJztVltMHFUYPnPOXPZiaHHRVqhUahBLabLGtNGIuMQ+qA9qISQ+WHtJgTYq
JqyKmBIwxAe1NhBiURNNNKYkYluqxL5gE2PVGmypRRKSxhaDhaaFtJawuzNn
zhn/c3ZDU/ba4aEm+iezMzsz33e+/z//ZUp2vFLTgBFCYQ/81GxvqW5u3t5a
uxz+1DWFdzc21e98sunV+sb65od2iNdCicO5bozT/avRmn7bYY4b+xfge+9B
9y4Bb324BpUedI8331+pFB5grvF233ocHOIu8Zw7f7Q+smdaXLg0Nnr4dyBy
CweCmDvtCePy4MLcEVCTgghm22wJTizNLDN+jsWoi1hYluOc++rjL76fhT8s
GjPtmyFhlDszJ/ZsKC6v6Rk+d1Xc4jbNPRg25zPdoUJoEP7Sx3Z/djYqXKDU
tnPaELH6aOd9or2AYd/GXd2HhqeY2E9mZlfBbW6ealyJEMEEY6wgsmzV+i17
j56dmedSBLNZJg5YaKD2dkR0VUEK0QxNqMgrCz3fduDUnFzAEiLSe2IOViPk
JShhimp4JYf/4Z093w5PzMdXSSMBaI+VKQSjG00BQwpW8x9vPfwXuOCkW586
Y5sgaEoSHscptRXrqrZ1DV2GV20zBQVzupDuJ4vxkoOomiqvSp9u+fS7CSdF
iUPVvZuPiSJCn8QhfMBE1THSPIGqjh9maDKe89MvBeA9YmipRWAcv68WV7ZP
Jbc4zulY+1NrDfEm0XSCF0cyHguVwL4U/QrhSmEXful+tizfA2JVQmQOKYtF
EF3DqORMKryotEvHPmmrC+bFExhIkj2BHS7ceyVli2YxS9Cc6N1VXVGcl6xf
uoDQHc2zaVp0/C6LXJ0+3rU1aEjBi1YnaFnn36mwCQaodnlx6czQ5x11FV6g
WABjHbKg6qMLWQYEo1Y8weZHv34z6EngFVWkUMkzh6BHZULLVIAOLMqE09Mv
FkgBMo2xv3zfeStjDScYrGgMThcHOrdt8EnlhgGBWNc6OA0PszVEZomuNTc6
0PZogU+H6lM12DR1bV3vJAVJmZ0H6Yw6bO58f8PGIryQt8adm3pOzl4Pb3q8
DfSRn/c3VftFwL0aEf1kRW3H4BVoMDE7Ww+E6M1P9D8XgHAJ2aBeIQUPhEeg
b9HkqksykEePbF7tl0GDaoGSRRXtJy8KJMs6Sbjl8KOvV4o8gyLGKoCN0BsH
/4RHZg6LQ2Qv94dgYSgxRXaRwP0vfBMVQy2XAQQbG3mrSBf9EpxW4Sh+7fhU
VDTMnOYXc+i+VcJthXigb+PKlr5xAcwW8wX19o9BpGOsabBlgQe39E2aoink
kK/SbCfynpf4VJkudzd8+ds18IjS3GevE/0ggIiosrtq3hkRu5E1XW7Uz8ef
0CFut5WHxyLMyTwsUxE47KetPpT/spwQ9Ka/XkRhjYQ3vz0OvsSylEkaBtu5
NimT+FaZHR8Dro3nnC7pCG7Zd+v/9l+0fwAImyOA
       "], {{0, 64}, {64, 0}}, {0, 
       255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"articAccentBelow\"\>"}], 
   ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
9D/zpzfL0OQvBCIL/0c8gH8ARabMxg==
       "], {{0, 64}, {64, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"timeSig0\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQMU/x8Fo2AEg38Ugp8Ugt8UgoEOv3cUgv0UgjIKgTaFgGGAgSSFwJtC0E0h
OEMh+EEhGOj8Q2n+/zvAgNLyc6DDfxSMglEwCkbBKBiJAAB3PXut
       "], {{0, 64}, {64,
        0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"restWhole\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJztl+1LFEEcx3d39jyDJE17EXSnFhH0pkjNhPK8PKEgiLz2VHqldIk9WN0d
qESRmRHhnfeg5l8RFfWmoBe9iQqDoMwKfRE+vAnPS8Kd3dnZZmfvafcMgnsh
0n3gbrn7zHd/x8z8hr3qrqutFziGYfzF5K21s8/p83UOuEvJB6HX39Pd6z1/
sjfg7fb6jnRpw5qSL/U/B+VJvvUXKPNmFoz83bs0WlyuZgPaN1mYvSvjmTyJ
xSJjE/fcu628xcJTiiygpKYnOhGNxiiRsclbzgpLxvPcjpb+2HiEWjoJaw8b
LAzL6XcELLP93GvjJPVVsgyne21Y1c3ZlJLlNaj8eFDLZ+dL3Y9FBKFMWZPU
6Uu7DHmb7x2URUmzZAdgdSlYZ8yffa6oGCd3iKJ+v2Iz5O2BD1hVUr9AURdz
8s+Qqihp/y0nP6VodQv5Qn7T50l/LIVy+ieTX79/FFWheYREaZ3+fQIVSdJP
WFFSv+T071tJgbJ+/pL7LEfrDfmytpeZ/lWQOuezG+v3f8ZY94lEPLE6d7/G
kN925lF8dWUlQYmv/P540VT/2pvErzi1Dkejw1m/p4QlRs+TC1+x33GcCEqj
s7lupzWttavVdsjRpGuO4wAPuJRMjeEAAJwOADzHruN1Gw4HIxODp+1cugD5
/VsOekPjo6EwJRidHDhWmqlPRpY5/eFYaFSzGJP5+xk5bJq/F0jFScg6zl43
rl9l36eUlck5ihZGcvYPRJKkn78ixDOm9bcFpiQZUo+xhPC8Oe9+KmOE9AoQ
4ZnLpv3jf4+wrOhruNH7v5Av5DdvnvbX/Ij5/P3n/tOev9BisNZcX5TTz18Q
f82tDyX9+QtCUZSWxxuKWABYCg/Y8o5XoiSKkEL8XKAKpDzHs2z1jWkxqT0e
wdN+6kA5D1KQ07TYflRoFwQPRfB0nNhbArL91n0uoU3XTJ4MU4YGs7k9eOfu
sAGzH0r7jf7/gfMk3/oFNpY/mvlP7Q==
       "], {{0, 64}, {64, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], 
    "\[Rule]", "\<\"unpitchedPercussionClef1\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
cdf/b/NEYYc=
       "], {{0, 64}, {64, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], 
    "\[Rule]", "\<\"accidentalDoubleSharp\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
P99YXBnuothXOORY0f8C2DS9Ng==
       "], {{0, 64}, {64, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"dynamicSforzato\"\>"}], 
   ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
       "], {{0, 64}, {64, 0}}, {
       0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"cClefTenor\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJztVmtQVFUcP3vvXvYlYILIBKyzRhmo1DDI9BAxMWbIF8OGM0WTQQEDH4jA
IKCsUXtJkyM5ZahB0yhjH7RxGKXkkczoVJMJ45QixSNHHrJLkrh77z3n3Ns5
56J9YR9wv/qb2d27997/7//6nf85joLXc4o4AEClmXzl5Fc/U1GRX+NcSP7k
llWWFJcVvpZVtqOwuLDiiQL62rqZj3of96EbWFH0mCsQYVUfhYoRnjcBFmU9
ntXBL48P0ivkFSGacxSS0pW85tXdh7uG2V/ZI0E8F3tZPS5wJqtj667W3oEJ
SO4oGMKgy6Eo0i4DMBiAxZ6cVdzQ7ZYQuSkH2xIFqf1ZgAMGHpCPJfH5uqaO
Pi+lxVAOphpYvfxiTKSVGBvIPDLYFi97tqqlZ2RSJLIgQQTR14mOQ3XZj9K5
BwSecsSm5pTUn7nO7KDMEgnAMXG2oShztWMB5eDofASxm94+1tU7pnUC+49B
oWWArq5Pt9mNPEdrSWl4Yanzk1+maQIB/GPNC7x5pbtl57aV1BrQRIDNnrKl
6tgV9tQrStAnC3EvQ3Y12n2kPDftYZYJi+OBp4v2tZz7iz3FhGP2VGiEGEHS
eyzdHmqrz1sZs8jCGgIEky0us/bUwNiURF/ECPlY7grGM8qVR3ram97KSTRr
pQAgJC5lc/nB9nFqqJAgfOmCUCBE01Sw5+/2gzucT8WHAq2aIeFJ2bVfd/wx
RYNlkfpgQEQ2iDoS3UOXTu3OS44Ot2hhWKMT1pU1Xxr/V6Ky8wMMJa+oORi6
0LK3fONyGwmBkUSlvlD1Wes10Z/5PRJRZG5c39fnpyc/slAwmY2UI3rDG80/
BqZQ7unGe8t9vfW9VWSJsBh4k9my/MObahDLE0ueO6z1g4ezI4kyBbOJMjyY
8c6F6UDm+K6mxntO79u+2gQEFr01Pn37gV+h6tc9iZwuXSKFafdP+52OMKsA
DGRhmUKX5n5xefIOVvw2QIGiV6b8Y23vv5SRYLkr5mXOj0787NKi8xk2kmU2
NDzXuo7u3BRnMWrdNz+09uW9nS5KC31KWBMgpiXvP/lmRlKsdUbAYY4tH7T9
Pioz8fmcrkR97IGn99uPSzKWsGYR73xsRun+H27QF0hePsTPmk2+4ORwT0tp
Ekf0xvMk7ZDF8RtqT/9DhgSWfdlSkDXBhv/FhtwV9nDq2kh7bVv/bmf/uKhV
xmfYZEzSi5HOxsqtCXQAGm10AkWuLTlwlu1LSPazK2k5j15t37OZ5swzmXMR
8WmVJ2izUMAdTUFo9GR1uj3CDGbS5i1P1rQOTXhYWQKNb+m3b2rz1sTQPgtW
GndUZsXnZ/5ku3rA/QOrNxqLUhaF8IC3sAUWteq56u+Gp0kxIcQ44NlGVjsT
Iuh44EwC4EwRqaXN5wc8tNpk/QSxC0vqOTswWtn+Ff5YTt3RXsQWgBTkUQKp
rhoLL/DcgiWPv9LYNy0qKhvRQR9EkNoeRnwnFhw63zfJbtDNP3jI6tW0Fc7q
potUfkj0p9FZgVV301eDKjt1zOnk8z/DrSn2q+cMiQNs8rMDahBFSZbJcQfB
+UEkVZuX8fzz1XBbJ/boRKhOcDqxXidadULSCUUn/gO0txaf
       "], {{0, 64}, {64, 
       0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"articAccentAbove\"\>"}], 
   ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
G2/cJf4HQP+blA==
       "], {{0, 64}, {64, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"cClefTenorChange\"\>"}], 
   ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
wXjQ98J48bjxHxf/BwTmi/c=
       "], {{0, 64}, {64, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"flag64thDown\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzVV3tMk1cU/54ttiCPKQYNMYUqQXR1ccmYc3POJUwXzYajPCog+H7EZeh0
yzajLgsqbstMnGRGxaEMfOMmm5vROmdU1C0RdRIzp4Y3BUGh/fq97s792tKv
L2jCX/sl9Pvu/c6595x7z/mdg6H4/cxlFEEQ6yLgJ7No46ySkqKPF8TAIGvt
upXL1y5dMmft+qXLl5akF2Ox191/6H8OeZiQhonh2r9/mCCGCYvFkpeXm5tr
sbjecrLNWVnmnNzcbPN7WWZzdk5uniUAWME97VTAOx0KOF4QJUmWRIDyFHgn
B9OcUwWO43jeM3CdQr/nOOwP6s8ePbB7x+dffLl7b8UJ6+02GU/zgjxwYvjM
OadnJAqo9/iq/A3VF69ZT5ZvKpyVEud1jh774ryVO2tvc6DFi8p187yEnhxf
UVR2T5bxjMCjx++CqCYxZbzOpUUytAKGdo2jphXsuomUJQR4cBeKxxHE1DOg
C0aBflM+w7KKJBuhZWnKuz9J0QzL4LdJSyoasbnPru8rMoLgpI0NYLtbfyFs
STGMFi/CMBTpe0MkxWhgKvKVwjWrFmea9IrMXKtdQvhMsL4FZAhsrS5ai12h
/ZcgwA7vOxjLftiLeOVI3foaiqCmbz5Se7h0PpwfzVCEPyhGq4e9qUjYQj+9
mkdO0atP0OSYBb8rF9J6dkOaYjVFDlhBwkhZMbkoLy2KJFJ3PZIV7wf2J+iV
D0UeACcs3zm4yOhVHTBgyrK9F+sKY8C5ufdkUXTdP+g3F5DMyBknIUokV0Ag
9LSh7psVc0zxIzQAfXzq7MJNB8/fcqBz6XDGmpTSZ0jw6mP7Tfsh0CRXkMmi
ktW9j+/W/2E9d856+XrDwy68atunBuxp/Ob7IvJkviSinqqcjLJOJHu5QBYF
VcAqYjKy1+XoCFpLEen1EErI+112dDzqgaGvhpI8OE/wD3jWuGMyRWopknqh
rAPr+0H2n1B9gm+2mgwdwVAsTei3d4mSrziQYEh1WQLPn9YtjAXP4UqpUdk3
4NDUiw/KroJTRk9+LBiDAwIijyAW1DtFSfRKiINAkuCWes4UQrrB1rA/yaYf
lZAgqGRCu43Bd/26JBESBiclyVKaN63+hH04JA5V/FBd+nYC6dKGEKW0xsWV
JysrfaQGoVZKo8XbupPRPyXdmBQcqSlpRp0S/qQnDaiEyWmpAYJcEADlcujf
0hSKGsh6mtVO+5lz2ANkhUDwTgH1XTDHMrQn+SiaZGZV90I8BggH3prA24W+
/cmg5U1dmogt6xedQcQD7wymmrdMwSTnoQCKIEfnX5VlfpAg90CSBbF1Zxyh
Jjx4nWPth3IUhj7kRmvJOJpWkxdNaNf3IX6IWFN2l2S+aU8yxJr3hoGXI16r
4ZEQRq8AeW3/ysCypCpaaJIY/9ltyc2XgwGXM+7mfBzpqgiDgam2D+fakLsL
SLpanEAR6vqBS8Psf/C3cKxH38Zjg1Xq4L+2uBOJAYwVzHzp8WoNqaHVSQQL
GDZ3h7E/lHPUsW8mQ6grMDYm4tXvnmGeDkP/7gcG0sd7vJh+Xk1/OPpA+Tfy
YgkSeMoLKMsjzaft4ehDeF+aybKshlVBo2FiFv3mCFP/8htBKIb5pFFEoW7f
Nxt7/qo95MuCVVVVpx84pZAcPZRVQ+GYD47WVNcEoPrIsdB4zh9xAQgQUSMp
OAxJSclG44QJE4xGY3KSwRBCLCmpxQetLc3NTc2t7Z22ri6brRPDZrN12To7
2lqampqxgB+CHorkeNrz6NrZE0eqa079cuHP1t7+kNHvLZaik4OWzNn+90/b
LekTExNGRUfqdbqo6LjRYw2muesr6nGTgfsJKej9SRBhfPOVbRnGeL07bnRR
IyNHuJORjRk3tbDybg9myCChhNmFu7X15bEjXLyvGf38O+vKyvfu2bbmrbR4
BioAXidmYv6pDqTulDzqsOzN1YkMJmtI/8gZW6+09zogIWXB3tNycaNJC82D
wgtRM77v9l8B2gyxrdSgZCsDfJGypd1vfVv5VBY3EXiFiHlWJ+Sqqv+Cw72U
GY1bVtwqEGPK2oDHRRdhAicpz/vLommWVPiAMn3djbwnB4KOqwWMu+KAn9GF
l3j4P0NlH1wOatwyHtdBaPUJInVfpzzQQUJduGOOBNKg3NWOZDPOc5Dwah+h
TX2YrYFKRkI9YrSmA07klNzOy0KNgWAGKg602lTSRw0OWV3vRFHuLn9JQ2AX
KSgvi1uQq0P9DyuQTUs=
       "], {{0, 64}, {64, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"timeSig7\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJztl2tMVEcUx8/ce3cXFFjYKqbV2EiJVVtSlRgQrY9UbTVRLAhRam3dsNAq
ggtUINBaqrXpxya1iR9MH36wD2vxXSuRaBurLEURUROrkFZ8YYlVKuydmTs9
d1/cu3a3KX7oF//JbjJ35zcz58yZ/9wd5yzLKZIAoCIGv3JWV80tL19dk5uI
jbzSijeLS12FC0srXcWu8kyn3m1O4KM9pMQjRZTGGOP/4/y9LfsPXfIOcY+o
JuqxlOY0aWJIMSC/ASQpo4EPma8hAFl7o/M8krycV2F9T2+gnEbsxKMurQ75
Gd9HX2Z7uM62ndZ1prn9wuvIP7P52AlPe1vbGd/TtrPh3WPNslljhick+uR4
TD/JRLLgo7h4e5IjKdE+PMYaYwZKDVpXsrZ8c9XCZIlIkoK5A5nAyBdWr8pd
lPmkjE3J/lJdfcnadUYmLJzenc4sh0RkCWKXbs+TCGQdEMJ772rb4S9KJlql
dPfJMIAFpXoFby0fA7pwssX7B8RGPf97aLAAbzcWOQCWHFe5GqJYaB810Vk9
GteoSESBhNoeHNq3f7j/TNM4o3rX6x+mgaP+mt7bJI1rbFc6gAVXjCmLffWO
6OOiJsBz//j0j9ajjRtSLGTFZY2ZBsDm3bcTQZF9i1dg9inKvZqRZ2LgiHPK
WHucI0GRybxOQU1JELcLY4gv5T6+VNMYNfCYgbOvDYeAFGJxXTGsQGPiRoUV
rP5fCYGkrZhWA68K5pmvBycRFA4gSR+LwdLVON2qgBIYHTOQ3oC/Gvh+cTcf
rFJwfpBlyG0XwW1BizowDSQ5xMsvHjfzqrgwFawkxOMaxnykaYEUUI0X45Jg
kM8+iSGb+I7niM3Ik8T3eIDHnfsxk1hCvEzk/FYzPyDuZJvmlyHtS0yxf3rx
57uj9KhDvLLqnJmnOMUckC0y8dOY6dq+4N3lFdezJTI4uAyWwouYFDVQP3uY
7jHCs8yio5KkD+LYeFUEnJ338640sJj44l85ZVjjfp5yxrkq7n3jSo23KYot
boK7kQo66D/nU4zBIf9Glz+zuv/o5y+oGx1Nu7764dwtY+m511e/kgByCAcC
Upqzstxd9lb1NGw+vqSicr3b7cYH7qq6utra2rqq9WXukOAh5TnV+vVosAw+
kEHJP+TxeJo9LUXYnPyJp6XZE1l4uH4bb45fKen2x6b7x8xGEVX8Pu/KNMaP
fOEFzP8A8/l/5ndoN+Gmz6hXZYH8U9HjGgbEWD/Oi+b6iXpJMNG/fTyRjXxB
W1QeDa3r8M99Qgs2f18EhvoHObc5Kq+K7gUw6QAVfguhXGyJk0MHAPnFJ6Lx
nPd9OoqkH1QDLorudMmpnym/8PKYfcR8/k08lvJP02Jh3q2QBXIqjk2QgxnA
haTu0FgkHjPevYaQEVuEFrJQTtUjKRA0CElWNglG/5nXVHF/3TAFym5ywx2A
HtIwGSz+EGQLrLwTIX7uFTfXJIK84rwwvZnhPdS0QHdm3/zw1DZVu/8gr6+4
tcAGNtc1s//ruyB6NifrMAG8vyZ7BGVatc7vC/Bcn/CvbZMApnzGBpcUuAY5
U4U4XWgH3R0lSUpD2/HNn7nby7xUz4YQPTtmATxRc0VQ+sD96VdH/dyReg4I
xBc0dVfiXjx/NBB559GaZ4FkbLpoJn4xqKW543LTO/MnJdtkiwJxWRMxH0/X
frtr5+fbPiieGguOjKL9l881txiZJJPs8SNSxicHr6JwDRubOire7jARuWHK
WZqdk7cclZ+XPQ6ZuNSp6Rmz5ucUFKxYnvfy0pxlYf1FFOn+OfOwJqK9ALNI
8lKm71/WXpWpETuF598gVRO+95c9bOjvv1gIM/YN/f25HOefsnuIPEZ2cOX0
6e93iqj5i6r+3t7wc/Jf9ND/MB/9P/1X/Q1nUFE/
       "], {{0, 64}, {64, 0}}, {0, 
       255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"timeSigCutCommon\"\>"}], 
   ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
ASrVvXY=
       "], {{0, 64}, {64, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"rest128th\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJztVntQVFUYP/exC6KAtK4S5IRpY7M0kQ8SG00gTaHSIh17zDRpEUK65Qqj
mDXVBI7NiClZkzVmojYNms6o40yJiA6RlZM06TgpD0MBhcDHsrv33nPO7Tvn
rrAuy+4aTf3T7+7enT3n/L7zvc8Zs/j1nFdFhNCKSHjlLFqZ4XAsKn5mOPxZ
YF+Rn2fPfSXLXpibl+tIW8yWpXu/+j8PSrCmqRwaxoTeFtUAhodg7H3BT5hC
KKwONIjD4VNCGXTd09V6ofH8+camC5c6erDOR2loFYiGQYir/bdvt65duXRJ
/jLHqvfKd9c1XVWBqmlEp0FEYI1Ndv1SWZqXkzFhbKIlLs4yMiHJlpb9vH1d
5a89XH5/27yaU50Q3dNR/8WSKbGoH2Ieyvv853bFWBiIrqkg2fnD+oXJw8X+
dITkCOsja467wEP9VeC+IRR3nSiZFi0gJIiiJAo3wf5wkeL4lz6r66A8mn5e
Z8FRLlaVzroDIUk2SYIfREkyy0i2TCk+7uzvBYqZ8t1H356VYIa9JKmfBSDB
ZBYFZHq4pK4L8hGc5eMGqikQtstfzU+UOVcQAjhAkpke1hmr91/CPNDUj9+6
dWYkkiRJCMyHQUES5WEpy4+5qM4Z/vxMsyAPyGcqmEC7qNk7Luu6quK+QBr8
tu2PxzLXD8yXTYIkmCa9W9uhMR/48FXgd+xdND5SYNwB9wcXIHncC5trOwmv
lV7/s4BcrV2bMz4WQofEgBkECcAn4zMKKxsVlu69UWTxp54/T33ypAWhiKgo
c2AFmG1IiLEt3FTvBr7aFwKgQ07hM2UzrSK4GbLFbALIDBLLxT4+MidkvnPC
eSufBRQc4jpdsTTVYoJVokHldEgpg8l9g8TYyUXHb0A5+/KNEtC1rvqdhXMn
3xXhF3pWAwYfBEXe99oRf75RBuzlvFj35ern0icm3zsmKWl0wp3WuGEmxGwy
/Aq2mMfmVV334fOOxT6sVbKh7oaT1Qf3Ve7YuqV8femqgmczbCNkw36mP+xf
UHWd6qqiGd2Od1uj02qq4nZrfRp5bnQ21dfs/rh4wcSEIZBc3IToCcurrxGi
eFTMO7V/OwgApXGPPUVGIlNBtk5/60d3GKRb8f3LiUYUo+6ZV/6H70z5ANjE
sXHjhrKyDR9tWTXDYvAjRj04f82Hm9i0sc4cApAGkEssAN5wipAdPMG882Gh
lw586ZaZrKCYkzVndtbceTNTRkBhsyf67kmZMJ4NMwaqguJw1eHvDh87UmFP
EZj/BcmW++nBahhmHw4aFCwtiKthn4PzBTT0iV2tKutf3rOS3jywA4NXGW3e
WTB1JEs+OSrZUadQori13iVBt9c80JpcNctskcx40ZqWX/E7HKZY1YLzboJ4
FKXzpw+msYqE2nlg+YEWF2t+PtsOnHNEZbXQ8nXB1FEIWrOIhmVvbw12CvuC
+U4hurth21wLbA0tJCL+0fdPKmwYh0HHigoy2vcXp7PISxJC4xZXnHHyXhf6
IkIInOj02pltC5LMSDKbJNOQ0S/uu0LCIetGR9Zx8943HxvJzh1oH9b0wm9a
YIKGNp7yWwa+emrzU2NjZMkEbUdOfHrL6U43UTQ9dMPgB4vn7C7H9BjEq0aO
n1G0p5lJVUN6zrgI6aRxc+aIKAmOLITiUt84eMWNdYz10LYT3kuVtkO50bxa
h9pySg6dc3OfhBd29va01qzLvj85OXVOfvmxbhhQw8qZPhXIjXNH91QeqD3b
7gTFSfA8DagC1Vw9qrFp2JdnHxm9yrCr923TQQd+pvBz5fbZXILRHP4W93/8
iwirDwdr0YPEf21/2yBRNEgEvmyHj78Aco6BSA==
       "], {{0, 64}, {64, 0}}, {0, 
       255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"caesura\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJztl2tsVEUUx/8z93a3tggt5QNUwUgLbcECUYoNIg9RikYS0kJCBMSihYBQ
YlEISojhA/hBwRADPkLkGbBYMVGgiFQRRHkHLCaCIoogD3n2se7euXM8c3eB
QtK7u8T4yZPdm93t+c3MeU/vnzijdJIEMDOVH6Xls4dUVZXPKcvgL6MrZ06Z
XFnxwpOVL1dMrqgqnmjUBsfe9L8kJq4O/XbRIX2HuNK1g3IKZl66wwUUVedC
ipQX/05igZuaLtXnIRhIlamb+XPSOCl3MkxeBcQEPkqickPTpYNZQjAvURRK
8PyaGpf/EDuDogWw4PFdTyRogKIPMUq50aWu9REeL5CxNTEDNF0psrOjm7l0
oC2jUvDDXuPLax17KNoQkMF1nrKixWy9tJkXeJccP97TdzR7vAwpmB3jx8Ay
7jMOWOTLm4O7HrIvS6Rggqesw4/CRodp90BKvO3Hh2vqeIFTe5TjTodlY6RR
dumnXOan0WiwCe+1zmu60Dn7CF0qz6ulozmSXT7MHEbRpnQg43BkFvOBda37
z6Vj2RhBSwQGnXmJA25hsMO+dOh93n7QNZrPv3TY4ccfTJPZu4dLK7Usk6Nl
YUCIDD9fpOJ1olfYo375o2hHCtoOy2A3WYwzX9zg8ZUIokbTOATQN9R6ASra
KIVtEk16Twv9LnMyaHcsZPpuah7IfJlP+rj0vpAmzRANt4WHr5pkujoc6HGc
vu/A/lvoyy9gWuK6WOjfZPgzRUDJFZrLPwS+9ikfl6pwk0bMfy4dzwXG0rFu
wkbOn368Hh8t0xv8EMfw9Z0E5jc/C+YnhXXr9e+q4S14IS2UsLMVHcwUeGMx
G2/Z6/2yV4eLW/L8+WmmFX13F6zCLIuTv+dJ7dM9dHMfw4toqdnpFkp5O0Xf
mFTkl43pfsWvdUMP4z8vdgJdyiV7zfBfSVP9bFB6rS9Pf3VjPrq7JcasB6Z6
fB1M5+E/DW1wfbqnS7/fZ7KnIMuzfdXHwDzP/i+jUZV2tW/vcunHTswHlw/k
3UWgvhpyicd/4fE2Hg/5bc+8yVAUXnwKloXeDWsQXBvjjfvsdtv9WzcftB1X
6DgyvJhCK9Gm1uNrTS9IwSxX+c4OLr80Lt3FehQsiWV6Bdrv9/gt/D0FA8+7
/pND0eqARPu9NJ6t6LibVqDjL7H97RR02xdvcCj6gKNc2EjPcLsY2kSr0Pms
l79beb2HdsadO4reYcXniEq5T1QRrUX3yzHeGn8k/thz6C123ypSIyDTthCt
Q78GbfhtSD8UZ2pEeW4faaxZAuScd+kjjAx7/HZk/ariT12H5gG9zpEzBKLM
jVA1pmqv/dch6+cEprZDcyAmKeUMAE/JMNVgIbcUXqgOmcfJcVl84+/Qq8Ay
CjuP4O4DzG+0NvAYdSJql2h/QkUUSxz+Nck5GnGfCJZcowh9gr3RmO0PZp6K
e/qo//peYPB5LCWlaE/5OdKHPvu8bmla+sptmzaznPa7vSn69oG5bDHVrzZ5
Q42nFekJXfILuloyJz8vLz+/4FP/JArX3epnTadz0VJWJJAGfJBI9NqkHNrc
xrIt09NYbJlW47+/dqJgLE7aoTdNKxGmpwohRdstcYrgtuGgaAZXxM2GnrUr
idunMT80ssVAkLj3aOK3XzIN7dSDLQaiRPezSfGKDmej5TjuG07q9q9oZ2ps
HET5YUmZbypf8EXmutioSJbfJDh8Mia2XJQsv73FdYLvzvHCf5u4dHJ0/8eK
C3t50rtn0R/J/vekQ03NTY3XpSk5+N8Q9xb57/ePK/8A2++M3Q==
       "], {{0, 64}, {64,
        0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"dynamicMP\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJy9l39oVWUYx5/3vOfHLuratKTAAq93DZv28x8lsaUYVnp1U1faXLq6LiG2
2MKRsBTKYiToCvrD+qc//CcdrZq1Nm+YYLVJw2KyuZERoYlmM5TRPee879Pz
nntnu3rjvKegL2xscD7v85znfX6dufVN1dsMAGgpol/VW1sfbW7e+sq6Evpn
Q2PL9obG1POPN76cakg1L6pXj1XmfjBEvjf5lyfDnr1ZwkVxbNeGx1bWvjmM
QkQ8QQofv21cPIMBGLNXvHMFIx7gC/HZIxYDw7LoTW/dMy79iOaPVIDFjUA2
lB6WQkQxj98sAM4Nch+AWRw2D5NL2tZ9caYWwIScGDPKPkVPl5dSYsd0zuG6
DMPqQFefF6dXgWlM4U1o8aUuT0++MZMr3LDNIAIGZ/VXUPcGffz9CaC7A0bx
z/Hw1E+o6YCQfm8FI8OMgZ19CeLXDOnyHv6xcyYYFHQob6uJqWOIrxrR5TN4
bhkjxw0oOygHV1AaKH7TeYqrFu/iqTlg0wnFr6OY2MO4qeLfcE2TlygOzQKL
TK4f9Xzcp3hyYZdu/gn87bUZdPsG34uuJ7L2wTkgXa0KojobecYBk7F7uqUn
L7zI6PIZqziimb/UNgYeZnT9Zv0o+fJVJQWPM7PujKb/xKfnUsmxonddKtn2
EnLeBPuAp5s9GeycRm0DSvroJkYqKZLE39mPGb3bI/594FQ85YOIlzapd+cw
7YXz6IWzSuTmW1Q34FSdxos7ioGq2IbEcanZ/yhHvN2KL3nVP7m6GFQVmFA9
rm1e4tUdYDhwx872JUEJGRZb+LlKC13+1+0qfLc8RPNHtSBuO62eZuqTGYFn
t6h6oagF7dMw2fIB/d5J/Git4lXTU6XP2fQPPDeK/eGNgf2g8RAea7pAHU0T
V/xQTdZ+0HgsJzmmG/sc/311znUVO1h0AqNMHnp2cG2OZ5S6CzpRRJl8xJ9M
ZnlOLfTBLt/Xf/ks3/8kqO5HPcte9qXwI81dxQ8onmgo3daPvhsJV/x3q4P4
O8s7zmEmQuiv8/T+7LalrUPUiiPvPSr+VcBiL11G/YGbz59aB2z+IZkR2kmb
z/+wHtj9XfLPaIH/mx96Gti9nRHWlUnR3iHpukfryP5H6PlyUpEOUf2DPfCJ
9raQ7wD5f7EJjCn2NVdPifKXvp5039F090Zgid0n0r1HldJf9JzViAS17Z/b
yuN3x+Pz4qWUfLeXJeKByhNlb0+Ej27hyt55UFhtGQ3ew/3MtDg3TbV50dBV
f5Js09lPdAhPcbqcAoumtlKwcuZkc+e98P5HYU8vgeyyli+L2QfDZ6cnxL7Z
hXko7tbgpZ+iPeNmnMbInGMaPF5bSTtXAZ4ZSwdD+wDd/tjiYGW9URxiz/0Y
+v3kozx+H5gFeBNmtY+Hfvz46H5cAbb6XOH5KmJ39YRXoI+ZDxM0Lgi38hWD
+WPhbZA+l75e+A/Zm7xEG3GYBF7dm3y2bnNtTXKq1qxdtaVrQnf3+E+SXsYl
ZW6U3tarDhCF9S/62P+kvwBNEocZ
       "], {{0, 64}, {64, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"dynamicPiano\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJytV3tMU1cYP/fetjzHxEJiIBsiTqAFazLd3GQRBSFAyAgFwxxmE6G4Zak8
RAdLJKOZmMxk/ME02QxmS5ZM99emYNyWDEbZI9lkQZf5KMWUOSMxDB/Q0vs4
+869bWnpLT0k+yWll3O/3/ke5/u+8zWz4XC1hUUItcfCn+oDx3a1tR3oNK+B
f2qt7W81W5say6xHmpqb2rY3ELFC3wf/b5BEQRAliTxJovxMxVIgCmL4O5Hs
FwVL0k/Gvx7oPlhbsavY3NDWfXZw/AmNfp73Lrg9M9c/q3uBxCoIa7bVD0zM
ut0LXn4F5BtMBQWvPKclDIZlOR9YliErOkNBQYHJkB8BeXlG63FLGpFkOYWx
BAaWyHf628etLa0qsB5uP3IUf1uWyGmWc4P24BLKhyM5LzxwHlInhqLpHvbw
Qgh4fv6jks3pCYjhorE5Bu2YwMKyuOM++aUmguUhXmhQ1ljoBgKeMKIYNthv
hgmOfui2WpT5GxZD1HcgbbAKJdZBCD0QDTJNB1kg4KtGWAuQSQy0qS++uv8N
S2N9XcVLmYnyy6BNOWR2SwELFvEpCAuB7B1C6yptP07O+d7zj+7+OXxq31Yt
2dpnBMNq+rHgS3dJwM0oRvaRARWJ5QM3lXW57vyF98hu20Yc8Ruw8U7AAB5f
2ADc2GTIvfSjfxCPIMsJVyRbwPF6vTyxc6jaHwQwoF3kFQmQwdOXL16xX3M9
f2Zm5QL7qSpewyoh3HQ3/HWhZV91zd5IqDWbG6qTQDkxAOl21NXW+l/VmAE1
NRW7i0tWxO7S6rIkOQgMSigt2RP0ak9xUdHKxvvwXRqEDxzID/dVpICALzwF
58Sh1K+kQARFEc/f+f0HGvVw3F1yTuts2H+4kug5sSUjOYbKflGaMSEWTLBI
/hQS8AfysVLxJVE6E4NYDaryJ5eARzOQDvKXqsmDuCsDKgqV8n6+ZFXqT1Tp
+yoO4MdmxGpRkVfh83gsC8mN5xfM0zggCT0cow3o9+KT0HkIepc3JnW+iD/W
gcGVyq0GB3IIvCf6G+cFrxAVUE4nNdAp672Lch/1CJc2A10Tpz9M4z5BC3QT
7kTQws1rf026ZrZ3UqCrs+tYLtSApgSe5IWud9/rsfX0vN/9jCnHEB25xvVy
AW4w5gaWsrOzc3JybvALnqhwu+c7tBC+3KnF5dKU3k9lIGiy5eFnFX1CgLMX
BAtcDkyMLXyioNANp33paZK96b9SJctyCHjKAMnKoUIPXbYvp8+VA5ll4k9L
dDNVCES8uJ9cwRwy3JdWr17AbguhM4y2V1y9eh4/fJ3QQf2WB1hF/cp148Wu
CpnOIu2XcEWFS0TRP2aS6Qyra1EXGIyMbwav9KYqXYZD+nNDF9WEUlWRkpKy
Vp+V5L99wYK0dbCmIjmlDqfj73t9GzllOuKYhNMOp1NVMKLnzjd1vqufQ9pP
I4qF31aS6JXwfZteuXUJPf4TOCZJ/W4L3xD68eOzeYHJToP05wODS1SQDefO
vSwPjb7RL3eEli6RbJj+0AhR9w098FXlxDwNXf4FsmhvfXaJDbYn9fJUNU8q
Q7rVVwR3msbPho6Rcxn2pbIdX++rTAqa9+S5+rXJqLYrA4Z4fqecbEvzJjxt
+gIuumizibLLwywyxC7NuzBapvX8S2O2w+G4fcv5eSq39DOA+KCtGHJN3bjt
iIo4QHxCYJRG/t8TyfqY2DgKjI6OjtjtBYEpF9hrDw79bB8ZHqWC4sVOeZhn
SQTWt47THVgg/rw4m8/qlNhv7f+H9DSaqTAQfxG70mXjs9/53qOUwKog4bmO
4pK9/VdnMaavNB/+A9kayOo=
       "], {{0, 64}, {64, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"fClef\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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

       "], {{0, 64}, {64, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], 
    "\[Rule]", "\<\"graceNoteAppoggiaturaStemUp\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJztVmtMVEcUnvvcBQUXVB6NpkJCFVM1ulTBagLV2LSNRVHUlqSpKBIaxURt
jEYlwVRMk9rE2hATEtNXsK1GrdXaxkjZTUAeqdoapT5qJWo0NlJl2d1778yd
npl7kYVd6AX/+oVddu/Od86Zc86cbzJKNxatExFCm93wVrR6a8GmTau3LfPA
l+LKzRXllWVr36jcUlZetim3lC3Lt190xDAxoaRr5HxiYKpfewb/uk71cyNm
myYh5t26Z+BT8qCxbuBDcxh8o7OlLeIRsWASp0bMUHco+inBmMQ08L9WTe1x
t25/JP1s8GRF7w6e2j7hv3a78evPPj/sv/ZPIMwW08jVpo1BHOsapZ1VmWMS
E8ak5pRUf3cpADZ1bPa6gQ8kGNC4ocH411azvga4xmXmFO9pCMIPumaYFMwE
fNvffLWg9GBbF6GxojAMSm+WjxFV1SVZRlLmldf6H1KKQxrVW3bms4MkTa5o
Mlh++zEBek8PxlfLEpCsqoIgSrIswPJxi3Ycvxym9NHxVcCW41wIZX/xhIR6
QkYfMIeuE3KrYjSSFBkhQRQlCWwgMXlycf3Njtr5o5Asyaqspq84G6KGZpM4
+iK5twH8Mz6HqKiyJCBpWnFRtiTIqiIiIbPiZNR59TP4GhrOt9S/HY8k2d4+
A7BknlJRhk2JKD636piPw9+HPI7c3PzXvCngQhBQP0AYthGoy8TZBfm5c/L6
ATlGlG0OL8csb97c6eNFljpYKKmKJAykujPz5s+Z5fXmePuhmaGp0dfa9n1h
HJIkQRiVyLiKGpEJEfhy5rKPz/ib/L6m5kj0ZfJ+ZQKSRORauG33mrnJvY4t
Pgss7uVdndGty4toaDrGtz4YDY5Q4o47gXu/7HxrskdgcQOR2ZAUCSnzvrwd
NPDTprGovP+CQYw7yjh/bA07Jl1/7p8tIcg8tBIzIEJkQto7h25qhhbWIvov
sv+BD41f/QiHwuF7tdNFpCg8fMkqrDh6xsZmg2KDRJ8/GBs3LH7qbji7Xac2
TIX8wZ+a7BF6TSBP4U9hinU8FD+lOkDNixVpkDI4NBMWb92y0MOaWmDBzDwc
Ar4xFD/tk256cfs0hWUvfsGBPwLBG4eWQzmUOOBPOdRDjaH9v1CH7384QRZk
OG6L6h6wn4OXaleksM2grANPqAHzZOAc7OVD26Xtbq/3Qg8KaMKGs2yAgMzR
4JmV6W4JCdn7H3P+YP7hyHoWrF2SCpVzZ61vx7BZQjQYf10/bnwlUZCya7uh
VoPnX1ZdcZ4kTzw0S96+33VrVsHwNnCP7/1kEc34KgjzY/D9yy43myCS7Jn/
6R0Y6YYdKiZGc4kLjS316Vy3B/cviyrkOankyF+6QSwhYuFqnd8snTRnl/+h
YcYY4RF8BQlITV/5swFqZEsQ44c6Gw7uO/2vpTRR6Mu/C24/wsya9scmptEq
aMYWRot/nfmHwZ2YU9XB1Cem0MSkcz65vo7X37308N8Gux0NWMOlPTbdjn/t
KNZ/SdVPQLeiWnwIMKnFJPjr8jjGH783bOmhY7CUmo8aq2ax3KPUj8C/oQ+D
zwaCebWmIJlP6NSaHoh/uHxyfg2cOdZ7qTVBax45DZ7oYd3UT86FaRGvsvi7
TRIOE+eA6Uu1U4vHuRU349d0U+ycb90m4O3O6aJ4NiPS94ef3nYc4ATD8SNH
z7UcAz7Uz/Pet2dOHj16wiEyOCZlZL00MYGLjZj04pSsDMdwrr+xsYSjsHDV
u69Pkln/uKYuLikuLFziEBcYfmttu3Llh2V8/8nrmzout7ZdcIi+Tri73p7/
w2g9+/4GCopxr37tDWBD1w2H4EUkmkbN6zZ/D+iXpjmtPw+in34O+/w85z/n
j5j/H1NFi1k=
       "], {{0, 64}, {64, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], 
    "\[Rule]", "\<\"graceNoteAcciaccaturaStemUp\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJylV3tQVFUYP/e1j1lYQAwtjaDUgkxSJzK1AjQbJvUPUxtFM1FkVMIZbGys
6eHUlEU5FWlaVJqZlkVovsGZLEvT6aFpwgSYaDzSAFeW3Xvvuef0nXt3795l
14WZfjO7s3f3/M75Hr/v+86mF66YsYRHCK10wNuMhU/nlpUtXP1oIjzMKl25
tLi0aHF+6VNFxUVl4wrZspzAixogWFaI8bHzz5Pf1tZ8e7KuXQ38JstYo7FB
NBUzPiG0u63p3Jkz55parmL2CN+pqkb64MNKHZpGsOLr8Xp7/DKw4BG2IH2y
A1toGg6zNMDvJwiwgd/v9eFUFWMS+KzIYHvEPmyNquKo2xNV9vkVzQiB6vf2
yJFmaIrf5/XJOCqfBM8ILsa9D4JYxLBff7/aeuliy2WPfgJWw/kkdiCx5+/6
kwe/3LHji+pDx86ev6xQa9YgheAP7mxuavHIve1iL++F77asXVX8+Jw5BQuK
y16sqK5XGCW4VBeCv7n2/be2Hr0ksy9CfLZKbdi5Kj/7zuFpqampacMzxzww
f9MfXsYKbIA18Oli1YrJE/OfP+IBy9QQHzJFvQeWZIo8zxngBSFlesVpqIeg
mJiqrh1cOkIU7FO2XqaapoT4Csa0c0MWqykLBj+0sZ3tHbBRpVr9S3eJCIkT
K/8J58sqplfW3ox4l10SRUmUbDabXUSuud95icqcYzkl+OK2R5yckJi1eFcX
8C0iUIDfsX50nN3lsEkG3+G0ITS6/GcP+KYZzl75vCAVIWHw7A/q5HApqOBb
9/5Ft0sIcQEneAiFOGR6RaMGlmsEUkFPLBkigflpz/zip+EFyQpGqXtvWjzw
hKD7nGhz3vz4Udgdoqhgz/nK8QjZJNeEzR3ACFOA7mLX0advgeBInMkXkJD9
UQfFCvO+aUdROuIE98iSH2RQZpiQCYSDaG2fTHQiCficyUc3LqvtpLIX9PJ9
8UgX4rj0wq9ajWSGAXykyvEnM5yCANk3+AKIwTXu2RMKhYLr3DjawfNIHP9B
MyaRhQS1Rmlb1aI0oAuBEMInkU/Oeecv+L1j3/wEcE5MLvgRM0n1LiS9S8kX
t+TZES+aOhJESNdjX7Yr3UdKMgSOl5KyXz4PjSJa/UPPoPjU8sG8KJl8lgxh
RNGnR/evHulAouDIXLa3i/XiaGWMFULaNzw4wAbnB3IAYuCRK2NmWVG2kxnj
yt/c6MMkoq8YfFBa95FnsuNFnjNFAHxkvyF9qAucF1DKk7/4DUFHgYY12Xth
zxPJcKxo8jnesIWXBF4Yta41VFBRIuBX5eY3h4F2pVAVGunkQM62obOrvaxY
r8cnskZ7vp7ssoVEzKiSw+F0gh8JOa/87MfkunxKQOjaydXjkkEBPGduAL1E
tIMZaSUH2jVKrz9HCYRWad5deiuQRA5ZwQKSVdHkjz0JNahkuXXrRFgshTUj
DvjcpH1+GCCxOjjRg3N8bpzIiRY+64ecNHDeCTjBF3s0slK98FL2wDDzoW4Q
P+iBl/9kIY7NV2FCdlYvzRQMVqAM4InLLKluZ40sNh9DJ1AbP3wYzhdNEYlM
DrmbGthAvW7yghHAKu05VuhEvfjcrMMwTTTa581AhVbbsiaVY1ZzZhmj+OX1
rO30xTb43R/dH69PITN+XPoLbVC4Sj/4cIZ6uGSkHXi6B7oS43M3XmU3jL75
TJ64rvLRAazmdOvBCum2wqpuAursm69Pq86fnoNmzdvY0awNx0169Zif0ljX
D8sOmKj/fJwV5EvAT5q//bxqudrEhAYnkW/ugwyY/JSVx67RfvN98FZzv5U/
9LVLGu3vPZKdT/eNN/mQhRGVcozG0wtsWPt2jAW+PaAe4Z7t1KitfrB1L1vX
Z8AAAz7HhoBtUhWNcb5ihd+vKPK1X9ewYWvnDL794V2gvW6fEh2yFX6frPj/
3r30JiN/eh1IOV9TTe7uCV9pgoSBTcL6d6clsa6l60dE/JhtRFc2iYqICGg/
PnW3k01wFIh/+hstMVLXZUVHR5enbcvUFIHTh5eR/+TFuxr/9Vzt7IqKA1bs
3Xuw9qvlGTbomkb9s07qvHfZpj01h/btPxAN86yYO3dB4cxRcazrBrsvGJI4
LHfOwgUFBfOiIcEKt3vAoCQbCvEDkJJSBrjdCdGA/iespyckJrldDqHXVRha
kSPO7U5MjHp+romcB/OmTJlwxw3sEhiyH/ogx7uHjZ2Q91BuTm4kyk28vra8
4t1Vk2+E6IfzEUq8c8bqt94uX1seibMhnDrd1PDZVBfcPK3RY53YOWjmzoaG
3387GwlsQlMU2rUzL6AaywZQw0JelQf+1+FIhIlRrVs3hvFFa/44CRwata7O
F1W/mgmw4EpN2XCdz/fmp5YeaoNLViT+Ay+UgEI=
       "], {{0, 64}, {64, 0}}, {0, 
       255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"articMarcatoBelow\"\>"}],
    ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
MOLk
       "], {{0, 64}, {64, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"fingering5\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJy1V3tQVFUY/+69uy4ICiQwoghLKwuoSGqiaApIgpjYhOPk1FQj4wNzBgtT
84+e2owZjywL0Clrxpk08xH5SJtsmqw/CF+AyJKCqciyKJqPXfc+zum7dx/s
Lped2q3fsMyes9/vnPO9fvfcpJI1xStYAFgbgv+Kl27ILS9funFRJA4Wl61d
tbJs+bLCsteWr1xePr1ENstxfuj/DEKCoyt/QcBuC5wrUtsX08Zv7sMvAYGn
PcUAE9ooH5gPPLU8q2WnmALn9yxiYGLA+9tpz9MA41qpPVC+eT5AygV/fNEP
rKRrHkByE7EKg9r4P8HNBQDGNn8l1DE4Otu7T2cD6I/3tF/u6OzsVDUaOxgM
SfoEQwI2ozbeqNfrExMSkwwqZjAodBHR0cM1AExIWFh4RFR0VKia1Q5f1NXW
1Oz86tC+6tL5U9P1uD+jDQ2LiEvOmLOs+uCBXTU1tV7mqkG53/Dx6oVGLWjD
tCyE5xbnTEqKYLn4vJf3mv3nj7dT2nN4hWEInix24abG87Mwf+eFu3/d/PO3
j4oNAJFLvn9ABV49fwRH5zZlMLJfj1d34ExfPubvgqv/zJ/PjwLdwmN2Kqkc
moiEtpXFA7AhMOxVZIs2qSsP+c3EJhCp6Y3iJ7KyRnIMRL5ynYoDSkKS6K1K
TAen4dgRr1vpQ5HYafdc5Ldg/fa+neQMOIshmXORCgPpZ7BYNSywHKzmJbnl
3Hx66wWsAy3HsrJvWoZ7sY1KnicgkigeSAOOw/UZdvZJqgTGwU9upg8OJYKO
caWcYZnYA5T3jAGa7xqt0EELuk9EUZFd5OfL/UMt2xJZjZsP6OB+Knjw0dU9
qaBllR9h5I/OhnXwjc2UP5UCIayLPgSYl0xeERSoaRIMUTZgQFvU4hQcJx/9
t1eOlLflOPywwDzZ4plBItGutcMZjULnILL8qnNx5Bco/IeSdGKBq/wZ43vX
ieTxXJHs9EQscI4fNRD3YV8/f54jf7ib7feKJbMys4o21N+gHg8VuWh5WwXL
alx8/R6ryHvoj7FJsgpYsspJFR7vW79XSljGyddC8g/9rt16CiDVpFKsblRV
VVRvKxuPeXfmBmJKq6oqq2Rs/XRTKkDMhh1b5XGlC1WeGFw//hlycrJzcifF
yIlzOAChE7NxTsasuTOjAEKnFsx2jNXQ29tjudn4PMu44//o/l6LpVdG920T
5n/sr3e7HWM3LGZzj/OrHFVCKhgMnJNvOCI60yNQC8YvpdW32bw6hxDRTk7E
9ed/zK57KAUybI78Yf9LxAMCsR6txxJSJqkiO1dWhYOr/mI2W/rrp9DZ/14b
8t/G6z7AddwzIm1OdzQo8oeVdlJhcL7E04vPaEbXyaz+/rHXJcjagQsw7Mwz
hPfDt9O9kVB6jXgKiEiE9yOBk0+ggYjD/f07gC8I9OfZMOawV/9jYUu2mkdQ
mWS+9q0+yaUfvnwMzNkCGPHZA+JzsZOovX4yoMqgA/rd8jYqfFGgfH06dqh1
4JUKV76wLBQTqNFA/llcgHjzidJspnVRMO0bqvYAkPC69l3BUPRgKJf5C07w
96WuQiX/VoGXzyO0vZMCUaWtVFR7flB5+t7Xi+PkLMSub7BSR/8aWx2BMx0s
iYLw547zXtIneYAoqt/47twIWSXzNu5sbMhF/W2803CstrwgGqVg/SkBg+DJ
UTuH/dzuNTPihwI3YhSKns6QEhuhC4nOqzjZO9D20gC0t1262n2j4/S+LSsL
05CvGZUxb8WWo6Zr5uudJtMfPtbjVTAuNXVc+mNTpmZmZ8n9PyVvxvTMyRkT
0lLTBtoGqz+16qirq6ut3f5lJa4f++bu7TXyjKqhaiLduF2E+tHuz8Lf/dOm
1E9yk2QL7P6J9Yv33+SWIO7PRcHweWouZnz141/xLUs0zISA7//y+4eWSWsN
/P3lzjod5F8JlE8osfx05LIQ5CtkMJAEXl1r/iuQIPE315iZPQ==
       "], {{0, 64}, {64,
        0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"timeSigCutCommon\"\>"}], 
   ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJztln1MlVUcx3/nnOd57r28jYuKIHLjWpMSLS5cxMqcDWMz09l1rGnaAkFW
LivMNWtLswZSaE3dYDm3XjZXujkJaK0yKGsuy5paS9K56SYBhiWC3Pu8nNN5
7n1eL/13/2rjM7jb85zzPef7e9k5T7Du+cgmDABbvfwnUvvyw01NtdvXZPOH
mi1bn2nc0lC/fMtLDY0NTYvq9GlLjX82xRQpoKZINEVS9T+SIpUuFobLQqUh
/ldWEX+uqODPJqGy8oWVyUCKBG0KixaUzsnxSR6PD0FOgL8pKvADiD4Pf6WT
nlcSKg4Egk52W7Q0v93Rtm5eOhE9Apm1dsfultbmbWtmS9gjiQJHFPyLt7fv
b21u2e1gyGRgcGK4+5VHgxJgAgvf6r0yNDT854Uv9zwxEwSiO0WQHtp44Mdb
owMDw5ZqyFEKuXddIMeLEIbg4b+Mwk6MnGvKBYLiseKMvPt29f93/2lsuHlp
mj5LAO+bt4wBymdc2GktwAnUdMlMsftPi8MnXtubC8gjYhBw5WV2S46PqMrt
KBt5MQviEQCRJIDqYzeZopkkXGhsZFdWYhcCuW2jTLUMUo1dX28bwBjdeVjT
qDMGqqnje2fyMX2SBCXnNdUZIWOnq6wFMD+8533MzI3NLY7fw31DIvxHuD/n
8prCOvyC5YDPW3Ja11hyyi6vABGhRJVw/Th16ami9dcIiBh6RESxftSxhcJi
r2XwfRP+IHNH1K3nZunRGWDqAYkw53PFSgGf/Hsp3z4xhqFgv0w1l57vcKWa
IKuGBAl1g9YeGo1+kIMkMPVFB5VkvaqO78u1AtBzVPgDk63FBxrTzUGuD3RM
0jNFOR8yI9T1SPpQU40AZPbrA8g0x/X578SomqxnNyPI1hPwvvo3MxaIstOF
dnIw+F9Pzh8PgEbfmJ7oj4SePHXR0NMo+85ve0NYaBifpNeoeny+owkBrT5r
609mO/QiLB9lyXreIr9V8bAtPX78rO3/VJ4jNxKEr7Lk+Ln+RsSsse5f2PCH
qY+xX+61Q+MrBbtikwqgUXkDSNhqAM+268zoIIVdXe9F5hD3lvHCyOQEqnST
rReQ2GE1oEZvv+fnYVsZgPJ+biqpgDLbbOl5Jaf3WTnixT5XDLaeQM4RVU7u
YJU1WnpC0MqrVLbG2NhGYncAQdK6S1RxnRDcZGy9qefb5310204RPwt+CoNk
dwDyf8Lcep7/wVVm/rEIjw05S8wz8e408JjZ4bWIXGQydemVU4uN+hMB5vUw
V4U07cqzmXpYhgGSuXOcOVOgauqBwniR+eUA+fvc55e+WH8txlZ+CZQcpaps
T5C1sbWJHhFFyNozRqm9dfycZuxMnQ+INxEi78+lJ5g2HjMO6egE+76E2yeS
B8HclmvcDzWGlASyqpypv8tRQynyjcr0C4CjKmzwuSwSr5B3Udsgi8mKaggd
UVxqr8xOE8wI0lZ9NWa1yM1DhZgfYFJm7pNf/OMqrONDSBt5v/ah3EQfYAGh
FQdPXouq/K668XP7g3riPMUrt31L1YmY4/upy6Kzs+frI5vvljDB/JLBAham
rW471tPZ3X3o6XxCCEYZVa2fneju/LTLQdiivDRctWzBDJ/Hyz8VJI8vDUH2
3LKK8nB4/gzAPv374Y77q5eEQmEnkCKz3czKz3OQXxB/WTDL/eykz02vm+TX
fZNgKUJTREmRVPdPNf4p/t/8CwnjDc8=
       "], {{0, 64}, {64, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"noteheadWhole\"\>"}], 
   ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
       "], {{0, 64}, {64, 0}}, {
       0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], 
    "\[Rule]", "\<\"accidentalFlatSmall\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
ryf752T4g0Otg9j/t+du/wFzK1QC
       "], {{0, 64}, {64, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"flag32ndDown\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
X3Ka3mnM4PzPm1k8tZP4H8OqTv8=
       "], {{0, 64}, {64, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "Grayscale", Interleaving -> None, Magnification -> 
       Automatic],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Magnification[1],
     ImageSizeRaw->{64, 64},
     PlotRange->{{0, 64}, {0, 64}}], "\[Rule]", "\<\"dynamicPP\"\>"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.77163760504458*^9, 3.771637636683446*^9}, 
   3.771664791537505*^9, 3.771666696123335*^9, {3.771666826723839*^9, 
   3.771666842438321*^9}, 3.771668088086776*^9, 3.7716690678397923`*^9, 
   3.771669189043185*^9, 3.7716693249444447`*^9, {3.771669428764523*^9, 
   3.7716694754872007`*^9}, {3.771669577504004*^9, 3.771669620115355*^9}, {
   3.7716697449137497`*^9, 3.771669754810397*^9}, 3.771669822075226*^9, 
   3.771671837643755*^9, 3.7716720099198647`*^9, {3.7716952959696207`*^9, 
   3.7716953062695217`*^9}, {3.77169540476481*^9, 3.77169541081847*^9}, 
   3.771697659050425*^9, {3.771697696800735*^9, 3.771697715080801*^9}, 
   3.771700612112*^9, {3.771752291482565*^9, 3.771752298400572*^9}, 
   3.7717529056004744`*^9, 3.771770658451481*^9, 3.7718536956646357`*^9, 
   3.77185536271062*^9, 3.7718670778701143`*^9},
 CellLabel->
  "Out[130]=",ExpressionUUID->"4fbbea4a-3c09-4559-88b1-a701770cfc7c"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Training the Classifier", "Section",
 CellChangeTimes->{{3.771585115971184*^9, 3.771585117819028*^9}, {
  3.771635344784461*^9, 
  3.77163534577433*^9}},ExpressionUUID->"b2de478e-368d-49b3-809d-\
18afb5d4650c"],

Cell[TextData[{
 "Let\[CloseCurlyQuote]s create and train the ",
 StyleBox["ClassifierFunction", "Input"],
 ":"
}], "Text",
 CellChangeTimes->{{3.771635348245647*^9, 3.771635366516214*^9}, {
  3.7717666318096724`*^9, 
  3.771766634759721*^9}},ExpressionUUID->"2b2e49ee-3174-479b-a491-\
1c69106c4e46"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"symbolClassifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"symbolClassifierDataset", ",", 
    RowBox[{
    "ValidationSet", "\[Rule]", "symbolClassifierValidationDataset"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.771635371383655*^9, 3.771635380013217*^9}, {
  3.771662961651965*^9, 3.7716629648044233`*^9}, {3.771663257535571*^9, 
  3.7716632656745377`*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"258022d2-d663-4b2a-9762-98cabea20c79"],

Cell[BoxData[
 TemplateBox[{
  "Classify","bdfmt",
   "\"Argument \\!\\(\\*RowBox[{\\\"symbolClassifierDataset\\\"}]\\) should \
be a rule, a list of rules, or an association.\"",2,77,1,30945594087099365126,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7761724728601637`*^9},
 CellLabel->
  "During evaluation of \
In[77]:=",ExpressionUUID->"dd45533c-cc0b-4070-a078-6ed90ea2fcc7"],

Cell[BoxData[
 RowBox[{"Classify", "[", 
  RowBox[{"symbolClassifierDataset", ",", 
   RowBox[{
   "ValidationSet", "\[Rule]", "symbolClassifierValidationDataset"}]}], 
  "]"}]], "Output",
 CellEditDuplicate->True,
 CellChangeTimes->{3.771698766297271*^9, 3.771701516733987*^9, 
  3.771754347794691*^9, 3.771756140164845*^9, 3.771758467171013*^9, 
  3.7717711026460876`*^9, 3.776172472883108*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"d87320b7-49fd-4914-bd13-cf67091e95b6"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<symbolClassifier.wmlf\>\"", ",", "symbolClassifier"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.771771153264517*^9, 3.771771177634696*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"ca525484-189e-45d9-ab9d-fa1b080869a1"],

Cell[BoxData["\<\"symbolClassifier.wmlf\"\>"], "Output",
 CellChangeTimes->{3.771771179055258*^9},
 CellLabel->"Out[82]=",ExpressionUUID->"d74e76b3-add8-4108-bce9-49e9c05c0a79"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Importing the Pre-trained Classifier", "Section",
 CellChangeTimes->{{3.771853725978778*^9, 
  3.7718537331141376`*^9}},ExpressionUUID->"9ded45fc-7f8b-4b9a-8916-\
d57a87b4c887"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"symbolClassifier", "=", 
  RowBox[{"Import", "[", "\"\<symbolClassifier.wmlf\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.771853735919024*^9, 3.7718537498199453`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"bbb119f1-6a74-4e9d-b5ca-e68140a6fda8"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Image\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["119", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"accidentalDoubleFlat\"", ",", 
                    "\"accidentalDoubleSharp\"", ",", "\"accidentalFlat\"", 
                    ",", "\"accidentalFlatSmall\"", ",", 
                    "\"accidentalNatural\"", ",", 
                    RowBox[{"\[LeftSkeleton]", "109", "\[RightSkeleton]"}], 
                    ",", "\"timeSigCommon\"", ",", "\"timeSigCutCommon\"", 
                    ",", "\"tuplet3\"", ",", "\"tuplet6\"", ",", 
                    "\"unpitchedPercussionClef1\""}], "}"}], Short[#, 1]& ]], 
                    Annotation[#, 
                    
                    Short[{"accidentalDoubleFlat", "accidentalDoubleSharp", 
                    "accidentalFlat", "accidentalFlatSmall", 
                    "accidentalNatural", "accidentalNaturalSmall", 
                    "accidentalSharp", "accidentalSharpSmall", "arpeggiato", 
                    "articAccentAbove", "articAccentBelow", 
                    "articMarcatoAbove", "articMarcatoBelow", 
                    "articStaccatissimoAbove", "articStaccatissimoBelow", 
                    "articStaccatoAbove", "articStaccatoBelow", 
                    "articTenutoAbove", "articTenutoBelow", "brace", 
                    "caesura", "cClefAlto", "cClefAltoChange", "cClefTenor", 
                    "cClefTenorChange", "clef15", "clef8", "coda", 
                    "dynamicFF", "dynamicFFF", "dynamicFFFF", "dynamicFFFFF", 
                    "dynamicForte", "dynamicFortePiano", "dynamicMezzo", 
                    "dynamicMF", "dynamicMP", "dynamicPiano", "dynamicPP", 
                    "dynamicPPP", "dynamicPPPP", "dynamicPPPPP", 
                    "dynamicRinforzando2", "dynamicSforzando1", 
                    "dynamicSforzato", "fClef", "fClefChange", "fermataAbove",
                     "fermataBelow", "fingering0", "fingering1", "fingering2",
                     "fingering3", "fingering4", "fingering5", 
                    "flag128thDown", "flag128thUp", "flag16thDown", 
                    "flag16thUp", "flag32ndDown", "flag32ndUp", 
                    "flag64thDown", "flag64thUp", "flag8thDown", 
                    "flag8thDownSmall", "flag8thUp", "flag8thUpSmall", 
                    "gClef", "gClefChange", "graceNoteAcciaccaturaStemDown", 
                    "graceNoteAcciaccaturaStemUp", 
                    "graceNoteAppoggiaturaStemDown", 
                    "graceNoteAppoggiaturaStemUp", "keyboardPedalPed", 
                    "keyboardPedalUp", "keyFlat", "keyNatural", "keySharp", 
                    "noteheadBlack", "noteheadBlackSmall", 
                    "noteheadDoubleWhole", "noteheadHalf", 
                    "noteheadHalfSmall", "noteheadWhole", 
                    "noteheadWholeSmall", "ornamentMordent", "ornamentTrill", 
                    "ornamentTurn", "ornamentTurnInverted", "repeatDot", 
                    "rest128th", "rest16th", "rest32nd", "rest64th", 
                    "rest8th", "restDoubleWhole", "restHalf", "restHBar", 
                    "restLonga", "restQuarter", "restWhole", "segno", 
                    "stringsDownBow", "stringsUpBow", "timeSig0", "timeSig1", 
                    "timeSig2", "timeSig3", "timeSig4", "timeSig5", 
                    "timeSig6", "timeSig7", "timeSig8", "timeSig9", 
                    "timeSigCommon", "timeSigCutCommon", "tuplet3", "tuplet6",
                     "unpitchedPercussionClef1"}, 1], "Tooltip"]& ], 
                    "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Image\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["119", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"accidentalDoubleFlat\"", ",", 
                    "\"accidentalDoubleSharp\"", ",", "\"accidentalFlat\"", 
                    ",", "\"accidentalFlatSmall\"", ",", 
                    "\"accidentalNatural\"", ",", 
                    RowBox[{"\[LeftSkeleton]", "109", "\[RightSkeleton]"}], 
                    ",", "\"timeSigCommon\"", ",", "\"timeSigCutCommon\"", 
                    ",", "\"tuplet3\"", ",", "\"tuplet6\"", ",", 
                    "\"unpitchedPercussionClef1\""}], "}"}], Short[#, 1]& ]], 
                    Annotation[#, 
                    
                    Short[{"accidentalDoubleFlat", "accidentalDoubleSharp", 
                    "accidentalFlat", "accidentalFlatSmall", 
                    "accidentalNatural", "accidentalNaturalSmall", 
                    "accidentalSharp", "accidentalSharpSmall", "arpeggiato", 
                    "articAccentAbove", "articAccentBelow", 
                    "articMarcatoAbove", "articMarcatoBelow", 
                    "articStaccatissimoAbove", "articStaccatissimoBelow", 
                    "articStaccatoAbove", "articStaccatoBelow", 
                    "articTenutoAbove", "articTenutoBelow", "brace", 
                    "caesura", "cClefAlto", "cClefAltoChange", "cClefTenor", 
                    "cClefTenorChange", "clef15", "clef8", "coda", 
                    "dynamicFF", "dynamicFFF", "dynamicFFFF", "dynamicFFFFF", 
                    "dynamicForte", "dynamicFortePiano", "dynamicMezzo", 
                    "dynamicMF", "dynamicMP", "dynamicPiano", "dynamicPP", 
                    "dynamicPPP", "dynamicPPPP", "dynamicPPPPP", 
                    "dynamicRinforzando2", "dynamicSforzando1", 
                    "dynamicSforzato", "fClef", "fClefChange", "fermataAbove",
                     "fermataBelow", "fingering0", "fingering1", "fingering2",
                     "fingering3", "fingering4", "fingering5", 
                    "flag128thDown", "flag128thUp", "flag16thDown", 
                    "flag16thUp", "flag32ndDown", "flag32ndUp", 
                    "flag64thDown", "flag64thUp", "flag8thDown", 
                    "flag8thDownSmall", "flag8thUp", "flag8thUpSmall", 
                    "gClef", "gClefChange", "graceNoteAcciaccaturaStemDown", 
                    "graceNoteAcciaccaturaStemUp", 
                    "graceNoteAppoggiaturaStemDown", 
                    "graceNoteAppoggiaturaStemUp", "keyboardPedalPed", 
                    "keyboardPedalUp", "keyFlat", "keyNatural", "keySharp", 
                    "noteheadBlack", "noteheadBlackSmall", 
                    "noteheadDoubleWhole", "noteheadHalf", 
                    "noteheadHalfSmall", "noteheadWhole", 
                    "noteheadWholeSmall", "ornamentMordent", "ornamentTrill", 
                    "ornamentTurn", "ornamentTurnInverted", "repeatDot", 
                    "rest128th", "rest16th", "rest32nd", "rest64th", 
                    "rest8th", "restDoubleWhole", "restHalf", "restHBar", 
                    "restLonga", "restQuarter", "restWhole", "segno", 
                    "stringsDownBow", "stringsUpBow", "timeSig0", "timeSig1", 
                    "timeSig2", "timeSig3", "timeSig4", "timeSig5", 
                    "timeSig6", "timeSig7", "timeSig8", "timeSig9", 
                    "timeSigCommon", "timeSigCutCommon", "tuplet3", "tuplet6",
                     "unpitchedPercussionClef1"}, 1], "Tooltip"]& ], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["21810", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 2280576, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            10530240001732769911707748075266757234658464329554519337504, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 10530240001732769911707748075266757234658464329554519337504,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771853752004541*^9, 3.776172481447975*^9},
 CellLabel->"Out[78]=",ExpressionUUID->"a3b3b5ce-03ea-4660-af02-cd7b1bd381d2"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Evaluating the Classifier", "Section",
 CellChangeTimes->{{3.771853720999566*^9, 
  3.771853724390353*^9}},ExpressionUUID->"a51f8687-b50d-477f-828d-\
61cc50a8fb43"],

Cell[TextData[{
 "To measure our classifier, we use ",
 StyleBox["ClassifierMeasurements", "Input"],
 ":"
}], "Text",
 CellChangeTimes->{{3.771766641945477*^9, 
  3.771766660701799*^9}},ExpressionUUID->"d8ec0c46-9d20-4e36-b202-\
b4c056fc7e0b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"symbolClassifier", ",", "symbolClassifierValidationDataset"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.771636499267117*^9, 3.7716365098643436`*^9}, {
  3.771662951658874*^9, 3.7716629587393923`*^9}, {3.771668226816044*^9, 
  3.771668227218457*^9}, {3.771770430987743*^9, 3.7717704551748543`*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"81002a2f-368d-4320-a129-dd848a798ab4"],

Cell[BoxData[
 TemplateBox[{
  "ClassifierMeasurements","bdfmt",
   "\"Argument \
\\!\\(\\*RowBox[{\\\"symbolClassifierValidationDataset\\\"}]\\) should be a \
rule, a list of rules, or an association.\"",2,79,2,30945594087099365126,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.776172491499666*^9},
 CellLabel->
  "During evaluation of \
In[79]:=",ExpressionUUID->"66423b58-ad95-4fbc-b18b-c935d1ca65a1"],

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{
   TagBox[
    TemplateBox[{RowBox[{
        StyleBox[
         TagBox["ClassifierFunction", "SummaryHead"], 
         "NonInterpretableSummary"], 
        StyleBox["[", "NonInterpretableSummary"], 
        DynamicModuleBox[{
         Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
         TemplateBox[{
           TemplateBox[{
             PaneSelectorBox[{False -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, 
                    LabelStyle -> {FontFamily -> "Arial"}, 
                    Method -> {"ScalingFunctions" -> None}, 
                    PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                    Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                    FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                    GrayLevel[0.94]], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Image\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["119", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"accidentalDoubleFlat\"", ",", 
                    "\"accidentalDoubleSharp\"", ",", "\"accidentalFlat\"", 
                    ",", "\"accidentalFlatSmall\"", ",", 
                    "\"accidentalNatural\"", ",", 
                    RowBox[{"\[LeftSkeleton]", "109", "\[RightSkeleton]"}], 
                    ",", "\"timeSigCommon\"", ",", "\"timeSigCutCommon\"", 
                    ",", "\"tuplet3\"", ",", "\"tuplet6\"", ",", 
                    "\"unpitchedPercussionClef1\""}], "}"}], Short[#, 1]& ]], 
                    Annotation[#, 
                    
                    Short[{"accidentalDoubleFlat", "accidentalDoubleSharp", 
                    "accidentalFlat", "accidentalFlatSmall", 
                    "accidentalNatural", "accidentalNaturalSmall", 
                    "accidentalSharp", "accidentalSharpSmall", "arpeggiato", 
                    "articAccentAbove", "articAccentBelow", 
                    "articMarcatoAbove", "articMarcatoBelow", 
                    "articStaccatissimoAbove", "articStaccatissimoBelow", 
                    "articStaccatoAbove", "articStaccatoBelow", 
                    "articTenutoAbove", "articTenutoBelow", "brace", 
                    "caesura", "cClefAlto", "cClefAltoChange", "cClefTenor", 
                    "cClefTenorChange", "clef15", "clef8", "coda", 
                    "dynamicFF", "dynamicFFF", "dynamicFFFF", "dynamicFFFFF", 
                    "dynamicForte", "dynamicFortePiano", "dynamicMezzo", 
                    "dynamicMF", "dynamicMP", "dynamicPiano", "dynamicPP", 
                    "dynamicPPP", "dynamicPPPP", "dynamicPPPPP", 
                    "dynamicRinforzando2", "dynamicSforzando1", 
                    "dynamicSforzato", "fClef", "fClefChange", "fermataAbove",
                     "fermataBelow", "fingering0", "fingering1", "fingering2",
                     "fingering3", "fingering4", "fingering5", 
                    "flag128thDown", "flag128thUp", "flag16thDown", 
                    "flag16thUp", "flag32ndDown", "flag32ndUp", 
                    "flag64thDown", "flag64thUp", "flag8thDown", 
                    "flag8thDownSmall", "flag8thUp", "flag8thUpSmall", 
                    "gClef", "gClefChange", "graceNoteAcciaccaturaStemDown", 
                    "graceNoteAcciaccaturaStemUp", 
                    "graceNoteAppoggiaturaStemDown", 
                    "graceNoteAppoggiaturaStemUp", "keyboardPedalPed", 
                    "keyboardPedalUp", "keyFlat", "keyNatural", "keySharp", 
                    "noteheadBlack", "noteheadBlackSmall", 
                    "noteheadDoubleWhole", "noteheadHalf", 
                    "noteheadHalfSmall", "noteheadWhole", 
                    "noteheadWholeSmall", "ornamentMordent", "ornamentTrill", 
                    "ornamentTurn", "ornamentTurnInverted", "repeatDot", 
                    "rest128th", "rest16th", "rest32nd", "rest64th", 
                    "rest8th", "restDoubleWhole", "restHalf", "restHBar", 
                    "restLonga", "restQuarter", "restWhole", "segno", 
                    "stringsDownBow", "stringsUpBow", "timeSig0", "timeSig1", 
                    "timeSig2", "timeSig3", "timeSig4", "timeSig5", 
                    "timeSig6", "timeSig7", "timeSig8", "timeSig9", 
                    "timeSigCommon", "timeSigCutCommon", "tuplet3", "tuplet6",
                     "unpitchedPercussionClef1"}, 1], "Tooltip"]& ], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False,
                  GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}], True -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, 
                    LabelStyle -> {FontFamily -> "Arial"}, 
                    Method -> {"ScalingFunctions" -> None}, 
                    PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                    Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                    FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                    GrayLevel[0.94]], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Image\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["119", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"accidentalDoubleFlat\"", ",", 
                    "\"accidentalDoubleSharp\"", ",", "\"accidentalFlat\"", 
                    ",", "\"accidentalFlatSmall\"", ",", 
                    "\"accidentalNatural\"", ",", 
                    RowBox[{"\[LeftSkeleton]", "109", "\[RightSkeleton]"}], 
                    ",", "\"timeSigCommon\"", ",", "\"timeSigCutCommon\"", 
                    ",", "\"tuplet3\"", ",", "\"tuplet6\"", ",", 
                    "\"unpitchedPercussionClef1\""}], "}"}], Short[#, 1]& ]], 
                    Annotation[#, 
                    
                    Short[{"accidentalDoubleFlat", "accidentalDoubleSharp", 
                    "accidentalFlat", "accidentalFlatSmall", 
                    "accidentalNatural", "accidentalNaturalSmall", 
                    "accidentalSharp", "accidentalSharpSmall", "arpeggiato", 
                    "articAccentAbove", "articAccentBelow", 
                    "articMarcatoAbove", "articMarcatoBelow", 
                    "articStaccatissimoAbove", "articStaccatissimoBelow", 
                    "articStaccatoAbove", "articStaccatoBelow", 
                    "articTenutoAbove", "articTenutoBelow", "brace", 
                    "caesura", "cClefAlto", "cClefAltoChange", "cClefTenor", 
                    "cClefTenorChange", "clef15", "clef8", "coda", 
                    "dynamicFF", "dynamicFFF", "dynamicFFFF", "dynamicFFFFF", 
                    "dynamicForte", "dynamicFortePiano", "dynamicMezzo", 
                    "dynamicMF", "dynamicMP", "dynamicPiano", "dynamicPP", 
                    "dynamicPPP", "dynamicPPPP", "dynamicPPPPP", 
                    "dynamicRinforzando2", "dynamicSforzando1", 
                    "dynamicSforzato", "fClef", "fClefChange", "fermataAbove",
                     "fermataBelow", "fingering0", "fingering1", "fingering2",
                     "fingering3", "fingering4", "fingering5", 
                    "flag128thDown", "flag128thUp", "flag16thDown", 
                    "flag16thUp", "flag32ndDown", "flag32ndUp", 
                    "flag64thDown", "flag64thUp", "flag8thDown", 
                    "flag8thDownSmall", "flag8thUp", "flag8thUpSmall", 
                    "gClef", "gClefChange", "graceNoteAcciaccaturaStemDown", 
                    "graceNoteAcciaccaturaStemUp", 
                    "graceNoteAppoggiaturaStemDown", 
                    "graceNoteAppoggiaturaStemUp", "keyboardPedalPed", 
                    "keyboardPedalUp", "keyFlat", "keyNatural", "keySharp", 
                    "noteheadBlack", "noteheadBlackSmall", 
                    "noteheadDoubleWhole", "noteheadHalf", 
                    "noteheadHalfSmall", "noteheadWhole", 
                    "noteheadWholeSmall", "ornamentMordent", "ornamentTrill", 
                    "ornamentTurn", "ornamentTurnInverted", "repeatDot", 
                    "rest128th", "rest16th", "rest32nd", "rest64th", 
                    "rest8th", "restDoubleWhole", "restHalf", "restHBar", 
                    "restLonga", "restQuarter", "restWhole", "segno", 
                    "stringsDownBow", "stringsUpBow", "timeSig0", "timeSig1", 
                    "timeSig2", "timeSig3", "timeSig4", "timeSig5", 
                    "timeSig6", "timeSig7", "timeSig8", "timeSig9", 
                    "timeSigCommon", "timeSigCutCommon", "tuplet3", "tuplet6",
                     "unpitchedPercussionClef1"}, 1], "Tooltip"]& ], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["21810", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False,
                  GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}]}, 
              Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
            "SummaryPanel"], 
           ButtonBox[
            DynamicBox[
             ToBoxes[
              If[
               
               Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
                "Local"], 
               Style["This object cannot be used as input.", "SummaryEmbed"], 
               
               BoxForm`EmbedSummaryLabel[ClassifierFunction, 2280704, 
                Dynamic[Typeset`embedState$$]]], StandardForm]], 
            ButtonFunction :> 
            BoxForm`EmbedSummaryInterpretation[
             ClassifierFunction, 
              10530240001732769911707748075266757234658464329554519337504, 
              EvaluationBox[], 
              Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
            "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
            Dynamic[
              
              And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
               "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
            Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
          "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
        StyleBox["]", "NonInterpretableSummary"]}]},
     "CopyTag",
     DisplayFunction->(#& ),
     InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
    False,
    BoxID -> 10530240001732769911707748075266757234658464329554519337504,
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", "symbolClassifierValidationDataset"}], 
  "]"}]], "Output",
 CellChangeTimes->{3.7716365485609217`*^9, 3.771667812595087*^9, 
  3.771668261054885*^9, 3.771698778486898*^9, 3.7717015209510517`*^9, 
  3.771754365996285*^9, 3.771756226297821*^9, 3.7717584732215*^9, 
  3.7717711505520678`*^9, 3.771853764252026*^9, 3.7718550662060328`*^9, 
  3.771865027462977*^9, 3.776172491628726*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"0d1bbc6a-9dd7-47d1-b6e6-1b3741d7ed2e"]
}, Closed]],

Cell["Top Confusions:", "Text",
 CellChangeTimes->{{3.7717666666609993`*^9, 
  3.771766668255238*^9}},ExpressionUUID->"f533ba27-5f22-4518-819d-\
171dceb50cfa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<TopConfusions\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.771668491030431*^9, 3.7716685682631474`*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"cf5b0281-42ad-429b-a3df-9b0b104d69ec"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"articAccentAbove\"\>", 
    "\[Rule]", "\<\"articAccentBelow\"\>"}], ",", 
   RowBox[{"\<\"articStaccatoAbove\"\>", 
    "\[Rule]", "\<\"articStaccatoBelow\"\>"}], ",", 
   RowBox[{"\<\"articTenutoAbove\"\>", 
    "\[Rule]", "\<\"articTenutoBelow\"\>"}], ",", 
   RowBox[{"\<\"rest16th\"\>", "\[Rule]", "\<\"rest64th\"\>"}], ",", 
   RowBox[{"\<\"articAccentBelow\"\>", 
    "\[Rule]", "\<\"articTenutoBelow\"\>"}], ",", 
   RowBox[{"\<\"restDoubleWhole\"\>", "\[Rule]", "\<\"restHalf\"\>"}], ",", 
   RowBox[{"\<\"accidentalSharpSmall\"\>", "\[Rule]", "\<\"keySharp\"\>"}], 
   ",", 
   RowBox[{"\<\"arpeggiato\"\>", "\[Rule]", "\<\"fingering1\"\>"}], ",", 
   RowBox[{"\<\"flag128thDown\"\>", "\[Rule]", "\<\"flag32ndDown\"\>"}], ",", 
   
   RowBox[{"\<\"flag16thDown\"\>", "\[Rule]", "\<\"flag32ndDown\"\>"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.771668493887775*^9, 3.771668498933249*^9}, {
   3.771668535386117*^9, 3.7716685685644903`*^9}, 3.771698779695446*^9, 
   3.7717015219589376`*^9, 3.7717543713738413`*^9, 3.771756227475896*^9, 
   3.771758473929413*^9, 3.7717711851233177`*^9, 3.771853765736599*^9, 
   3.771855068125268*^9, 3.7718650283487473`*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"bd60ef72-e9be-4b6a-bca3-8bcc276c3a34"]
}, Closed]],

Cell["Accuracy:", "Text",
 CellChangeTimes->{{3.771766670627657*^9, 
  3.771766671997676*^9}},ExpressionUUID->"9f3e13e1-6dd5-42bc-8276-\
e4c21d37897b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.771636514425396*^9, 3.7716365188411407`*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"b5d28b0b-e1be-41f4-880c-201ff25bb1bd"],

Cell[BoxData["0.9802384227418616`"], "Output",
 CellChangeTimes->{3.771636550865403*^9, 3.771667834333673*^9, 
  3.771668263829859*^9, 3.771698781790724*^9, 3.7717015290230913`*^9, 
  3.771754373597773*^9, 3.771756228505393*^9, 3.771758485675939*^9, 
  3.771771187507999*^9, 3.77185376759027*^9, 3.771855069863777*^9, 
  3.771865030156755*^9},
 CellLabel->
  "Out[111]=",ExpressionUUID->"f1156fbc-26bc-4fc3-846a-792fc4eb6d06"]
}, Closed]],

Cell["Confusion Matrix:", "Text",
 CellChangeTimes->{{3.771766674173761*^9, 
  3.771766675830303*^9}},ExpressionUUID->"bbb99447-cad1-4460-95f7-\
942057af6c0d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.771636519974489*^9, 3.7716365305030413`*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"6e7c78f8-9a72-44a7-8216-97b01b7b6271"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJzt3QtsVfUdB/AiMRHLlLCOgdPIY3MqSgkNlQHyj0DAuTCdRQJmGAWEqQVh
MBQdaHSogVpaHUvQRZwRyASdDeoWFXFqy8LiY6BCaXmUl0B7b6uRV30tYyxL
TKre2vbc3vNpQj4luWl/59zec7/3d37nf3pNuvXqGztmZWXddvLff77/71dD
IEmSJONszR05z4yu2Xby///7ir4ukiRJsi2Uh0mSJBln5WGSJEnGWXmYJEmS
cVYeJkmSZJyVh0mSJBln5WGSJEnGWXmYJEm2tWOKizZunZAMjT0HlHZbkgiJ
Dn0PZ+85GHldjJe5I9/KmdyjPqyonZc7e3V16N+nbF/JkXGR10WSJEm2pfrD
JEl+vceX7jpyS0kyHF18T6erJibD7G1ZBXM+qY28LpLNt3NpXvn4ivrQdcv0
4k0FVaHLif5wfuR1kSRJkm2p/jBJkiTjrDwcLz96/op1a19OhJ5nv10w+tLa
sHd1df5d2/ZEXhfJltf5fZL8ajufXt7vyZfrwusXF/1t7jO7QsPvyp9b9M85
kddFkiRJtqX6wyRJkoyz8jBJkiTjrDxMkiTJOCsPkyTZfO8fUlDZqTAZji87
OvndzYkwc/mGmyqXHoq8rvbqqwd6HBi8IBmOdV2X/1D3ZGgYOmXHystdB8rW
cch7Hba9tDMZ3h+9+czPz9keGm4559yBz/0y8rpIkiTJtlR/mCRJkkxfrZ9J
kiTJ1lR/mCRJknFWHiZJkmQcPbM0sf6BhkS4edGONwcd3xEGLRvS4d3hN4e3
V5x67Z+zk2FSYt51K6bVhYu7jZj/8O79kddLkmRzNHdHsik7l+aVj6+oD123
TC/eVFAVuvQp21dyJD/yukiSJMm21LwESZIk46w8TDbfo59dU3jezkQ4du+d
23+9vjY8/FTlozkX74u8LpIk+fX2eu2UpcNLasOSFRcu/LjT7nB949Ixhw+X
NHlfmI+ev2Ld2pcToefZbxeMvrQ27F1dnX/Xtj2RbweZjo4pLtq4dUIyNPYc
UNptSSIkOvQ9nL3nYOR1kSTTS/Pt0er+dCRJkqR5CZIk00F9QpIkSZJkFOoP
kyRJMo5afzg9db6MJEmybdUfJpuvzy8kSZIkSbZfm1pnNeq6yOZ4/5CCyk6F
yXB82dHJ725OhJnLN9xUufRQk4+33hpJti+djyBJkiRJki2t+WGSJPll43Y+
wn1F42nHrBcbcy9MhsH9Fiaevm9H2Dpn4d4OU6alPHcRt9cLSZIkM0v9YTJz
1N/IDPUZSLJtdD0dSZIkqT9MkiTJzDDV9QO79562qKyoPozI2zBjYkVV6H/i
/nSjIt8Okumr8/gkyUzS/ZpJpmqqeTinpvylVaOT4dNVha+MvyIRCqcU3z2s
f/rNM8v59HeVedr//CbOz3u9bOqARLiq1w8+vvMnu0LN2Hsv7LZ9VuR1Mb1M
t+NJS91HKd22K6r9QJIkzQ+TZLqZ6rqXZBxs732MljLVfkhV3hdr5g5Mhs/6
rap95NREOFjxYfas+Qcy9vlK9ffOfGJJ3XcKE2HQ7OS9+Vm7Qtnw889+evrM
yJ9nkiRJsi3VHyaZLraXeWOSZGZo/WGSJElSf5gkSZLxVh4mSZJknJWHSZIk
yZbXuigkSZJMZ/usfeTK0wvqw2+W9LzywKDqULht5Jq6Qb9o9d+b6rp5cjVJ
kiS/jfIkSZIk2bTmh0mSJBln5WGSJEnGWXmYJEmS6Whrz/2Omjpwec7KZDjt
yYsaHijZHiaduJ7uhsi3u7W8f0hBZafCZDi+7OjkdzcnwszlG26qXHqoycen
et0fSZIkozXVvBfV+hIkSZJkOti997RFZUX1YUTehhkTK6pC/z5l+0qOjIq8
LpL/13kKkiRbz9yRb+VM7lEfVtTOy529uvpkHh7X5OPHFBdt3DohGRp7Dijt
tiQREh36Hs7eczDy7SBJkiS/ja6nI0mSZBxNtT+cqvrJJMm21P2n7Af7k6na
2nmYbA0dl0iSZEtrXoIkSZJR2tr9rqZ+flPrDzd1Pbu+HElmho7nX22m7p9M
3S7y22hegmSqxu39NG7bS5Jxs3NpXvn4ivrQdcv04k0FVaHLiTycH3ldZJTK
PyRJxkd5mPzmyskkM1X3/WGcTXVeQh4g01+vU5IkU9f6EiRJkoyz8jBJkiTj
rDxMkiTJOCsPkyRJMs7KwyRJku1b11OTJEmS9LmAJEmSJNka+rxJkmTman6Y
JEmScVYeJkmSZJyVh0mSJBln5WGSJEnGWXmYJEmScVYeJkmSZJyVh0mSJBln
5WGSJEmSZBx1nxGSJPWHSZIkGW/lYZIkScZZeZgkSZJxVh4mSZJknJWHSZIk
GWflYZIkScZZeZgkSZJxVh4mSZJknJWHSZIkGWflYZIkScbR7r2nLSorqg8j
8jbMmFhRFfr3KdtXcmRU5HWRZFx89UCPA4MXJMOxruvyH+qeDA1Dp+xYebn7
ZZNkWykPR+vxpbuO3FKSDEcX39PpqonJMHtbVsGcT7wPkmR70/GcTH/LGw+d
/v6PE+GChQ+dMS7rYBh7yWW1a2dVh+sK//XYbe/UhuvnPrF+Xe89oSTn48sO
L3g+8npJkiTJtvCUxurl73yvLkz74v2f546tCdc/duzNv3x0exg7ePPW936f
CGum3L37TysPhd9ecvNFq67eHXm9JEmSZHNsaj4td+RbOZN71IcVtfNyZ6+u
PjkvMS7yekmSzASbmqMwX0Gmj2cs7nLjBdW14e6nO66f82BNWPpsQXX3SXeE
sx7svPHJexJhTe2LZ+694VBoXPbmXyuX10ReL0mSJNkaWm+NJEmScVYeJkmS
ZDqaU1P+0qrRyfDpqsJXxl+RCIVTiu8e1v9gi/38q4/+asr0wmQYlHXfO9/t
uCO89nnjP175/pQmH2/eiSTJ9NH7Mvnt7VyaVz6+oj503TK9eFNBVehy4nq6
/MjrIkmyLZQnydZzTHHRxq0TkqGx54DSbksSIdGh7+HsPS3X123K9wrv6VjS
Mxlyi7v86PEX6sKiGY+MPOXZD5p8va/r2q186h114Y03sjeMaNgVPlm/aPia
WXMj22+pHpf+cGzYz24/ngiT5zy3+IPedeGp21eeVpG7P/LnnyRJku3Dn05a
PLKyrjY8tfONa6oe2xOevTF3xqPnrgtlh/8ejg9NhLELbv3h49ceDOcPfWrY
efu3R17vl3WfU5Ik217vv8wkz+rda2HNC4nwx/2XPPP6LTvDE+s+PGdlr+mR
10Wy5W3t6xGY2UY1VyB3tS9T/TtJt3mVdKuHbeOoqQOX56xMhtOevKjhgZLt
YdK2kWvqBt0QeV0kyXhZlffFmrkDk+GzfqtqHzk1EQ5WfJg9a/6ByOsimfm6
no5Mf/UrSJJsfa0/TJIkyTgrD5MkSTLOysMkSZKMo+aHSZKZpHl7ks1Vf5gk
SZJxtHvvaYvKiurDiLwNMyZWVIX+J/rDoyKviyRJkqlpve6W9d/4cYhQ
   "], {{0, 0}, {119,
    119}}, {0, 1}],
  Epilog->{},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{118.5, 
       FormBox[
        RotationBox["\"accidentalDoubleFlat\"", BoxRotation -> 0.], 
        TraditionalForm]}, {117.5, 
       FormBox[
        RotationBox["\"accidentalDoubleSharp\"", BoxRotation -> 0.], 
        TraditionalForm]}, {116.5, 
       FormBox[
        RotationBox["\"accidentalFlat\"", BoxRotation -> 0.], 
        TraditionalForm]}, {115.5, 
       FormBox[
        RotationBox["\"accidentalFlatSmall\"", BoxRotation -> 0.], 
        TraditionalForm]}, {114.5, 
       FormBox[
        RotationBox["\"accidentalNatural\"", BoxRotation -> 0.], 
        TraditionalForm]}, {113.5, 
       FormBox[
        RotationBox["\"accidentalNaturalSmall\"", BoxRotation -> 0.], 
        TraditionalForm]}, {112.5, 
       FormBox[
        RotationBox["\"accidentalSharp\"", BoxRotation -> 0.], 
        TraditionalForm]}, {111.5, 
       FormBox[
        RotationBox["\"accidentalSharpSmall\"", BoxRotation -> 0.], 
        TraditionalForm]}, {110.5, 
       FormBox[
        RotationBox["\"arpeggiato\"", BoxRotation -> 0.], TraditionalForm]}, {
      109.5, 
       FormBox[
        RotationBox["\"articAccentAbove\"", BoxRotation -> 0.], 
        TraditionalForm]}, {108.5, 
       FormBox[
        RotationBox["\"articAccentBelow\"", BoxRotation -> 0.], 
        TraditionalForm]}, {107.5, 
       FormBox[
        RotationBox["\"articMarcatoAbove\"", BoxRotation -> 0.], 
        TraditionalForm]}, {106.5, 
       FormBox[
        RotationBox["\"articMarcatoBelow\"", BoxRotation -> 0.], 
        TraditionalForm]}, {105.5, 
       FormBox[
        RotationBox["\"articStaccatissimoAbove\"", BoxRotation -> 0.], 
        TraditionalForm]}, {104.5, 
       FormBox[
        RotationBox["\"articStaccatissimoBelow\"", BoxRotation -> 0.], 
        TraditionalForm]}, {103.5, 
       FormBox[
        RotationBox["\"articStaccatoAbove\"", BoxRotation -> 0.], 
        TraditionalForm]}, {102.5, 
       FormBox[
        RotationBox["\"articStaccatoBelow\"", BoxRotation -> 0.], 
        TraditionalForm]}, {101.5, 
       FormBox[
        RotationBox["\"articTenutoAbove\"", BoxRotation -> 0.], 
        TraditionalForm]}, {100.5, 
       FormBox[
        RotationBox["\"articTenutoBelow\"", BoxRotation -> 0.], 
        TraditionalForm]}, {99.5, 
       FormBox[
        RotationBox["\"brace\"", BoxRotation -> 0.], TraditionalForm]}, {98.5, 
       FormBox[
        RotationBox["\"caesura\"", BoxRotation -> 0.], TraditionalForm]}, {
      97.5, 
       FormBox[
        RotationBox["\"cClefAlto\"", BoxRotation -> 0.], TraditionalForm]}, {
      96.5, 
       FormBox[
        RotationBox["\"cClefAltoChange\"", BoxRotation -> 0.], 
        TraditionalForm]}, {95.5, 
       FormBox[
        RotationBox["\"cClefTenor\"", BoxRotation -> 0.], TraditionalForm]}, {
      94.5, 
       FormBox[
        RotationBox["\"cClefTenorChange\"", BoxRotation -> 0.], 
        TraditionalForm]}, {93.5, 
       FormBox[
        RotationBox["\"clef15\"", BoxRotation -> 0.], TraditionalForm]}, {
      92.5, 
       FormBox[
        RotationBox["\"clef8\"", BoxRotation -> 0.], TraditionalForm]}, {91.5, 
       FormBox[
        RotationBox["\"coda\"", BoxRotation -> 0.], TraditionalForm]}, {
      90.5, 
       FormBox[
        RotationBox["\"dynamicFF\"", BoxRotation -> 0.], TraditionalForm]}, {
      89.5, 
       FormBox[
        RotationBox["\"dynamicFFF\"", BoxRotation -> 0.], TraditionalForm]}, {
      88.5, 
       FormBox[
        RotationBox["\"dynamicFFFF\"", BoxRotation -> 0.], 
        TraditionalForm]}, {87.5, 
       FormBox[
        RotationBox["\"dynamicFFFFF\"", BoxRotation -> 0.], 
        TraditionalForm]}, {86.5, 
       FormBox[
        RotationBox["\"dynamicForte\"", BoxRotation -> 0.], 
        TraditionalForm]}, {85.5, 
       FormBox[
        RotationBox["\"dynamicFortePiano\"", BoxRotation -> 0.], 
        TraditionalForm]}, {84.5, 
       FormBox[
        RotationBox["\"dynamicMezzo\"", BoxRotation -> 0.], 
        TraditionalForm]}, {83.5, 
       FormBox[
        RotationBox["\"dynamicMF\"", BoxRotation -> 0.], TraditionalForm]}, {
      82.5, 
       FormBox[
        RotationBox["\"dynamicMP\"", BoxRotation -> 0.], TraditionalForm]}, {
      81.5, 
       FormBox[
        RotationBox["\"dynamicPiano\"", BoxRotation -> 0.], 
        TraditionalForm]}, {80.5, 
       FormBox[
        RotationBox["\"dynamicPP\"", BoxRotation -> 0.], TraditionalForm]}, {
      79.5, 
       FormBox[
        RotationBox["\"dynamicPPP\"", BoxRotation -> 0.], TraditionalForm]}, {
      78.5, 
       FormBox[
        RotationBox["\"dynamicPPPP\"", BoxRotation -> 0.], 
        TraditionalForm]}, {77.5, 
       FormBox[
        RotationBox["\"dynamicPPPPP\"", BoxRotation -> 0.], 
        TraditionalForm]}, {76.5, 
       FormBox[
        RotationBox["\"dynamicRinforzando2\"", BoxRotation -> 0.], 
        TraditionalForm]}, {75.5, 
       FormBox[
        RotationBox["\"dynamicSforzando1\"", BoxRotation -> 0.], 
        TraditionalForm]}, {74.5, 
       FormBox[
        RotationBox["\"dynamicSforzato\"", BoxRotation -> 0.], 
        TraditionalForm]}, {73.5, 
       FormBox[
        RotationBox["\"fClef\"", BoxRotation -> 0.], TraditionalForm]}, {72.5, 
       FormBox[
        RotationBox["\"fClefChange\"", BoxRotation -> 0.], 
        TraditionalForm]}, {71.5, 
       FormBox[
        RotationBox["\"fermataAbove\"", BoxRotation -> 0.], 
        TraditionalForm]}, {70.5, 
       FormBox[
        RotationBox["\"fermataBelow\"", BoxRotation -> 0.], 
        TraditionalForm]}, {69.5, 
       FormBox[
        RotationBox["\"fingering0\"", BoxRotation -> 0.], TraditionalForm]}, {
      68.5, 
       FormBox[
        RotationBox["\"fingering1\"", BoxRotation -> 0.], TraditionalForm]}, {
      67.5, 
       FormBox[
        RotationBox["\"fingering2\"", BoxRotation -> 0.], TraditionalForm]}, {
      66.5, 
       FormBox[
        RotationBox["\"fingering3\"", BoxRotation -> 0.], TraditionalForm]}, {
      65.5, 
       FormBox[
        RotationBox["\"fingering4\"", BoxRotation -> 0.], TraditionalForm]}, {
      64.5, 
       FormBox[
        RotationBox["\"fingering5\"", BoxRotation -> 0.], TraditionalForm]}, {
      63.5, 
       FormBox[
        RotationBox["\"flag128thDown\"", BoxRotation -> 0.], 
        TraditionalForm]}, {62.5, 
       FormBox[
        RotationBox["\"flag128thUp\"", BoxRotation -> 0.], 
        TraditionalForm]}, {61.5, 
       FormBox[
        RotationBox["\"flag16thDown\"", BoxRotation -> 0.], 
        TraditionalForm]}, {60.5, 
       FormBox[
        RotationBox["\"flag16thUp\"", BoxRotation -> 0.], TraditionalForm]}, {
      59.5, 
       FormBox[
        RotationBox["\"flag32ndDown\"", BoxRotation -> 0.], 
        TraditionalForm]}, {58.5, 
       FormBox[
        RotationBox["\"flag32ndUp\"", BoxRotation -> 0.], TraditionalForm]}, {
      57.5, 
       FormBox[
        RotationBox["\"flag64thDown\"", BoxRotation -> 0.], 
        TraditionalForm]}, {56.5, 
       FormBox[
        RotationBox["\"flag64thUp\"", BoxRotation -> 0.], TraditionalForm]}, {
      55.5, 
       FormBox[
        RotationBox["\"flag8thDown\"", BoxRotation -> 0.], 
        TraditionalForm]}, {54.5, 
       FormBox[
        RotationBox["\"flag8thDownSmall\"", BoxRotation -> 0.], 
        TraditionalForm]}, {53.5, 
       FormBox[
        RotationBox["\"flag8thUp\"", BoxRotation -> 0.], TraditionalForm]}, {
      52.5, 
       FormBox[
        RotationBox["\"flag8thUpSmall\"", BoxRotation -> 0.], 
        TraditionalForm]}, {51.5, 
       FormBox[
        RotationBox["\"gClef\"", BoxRotation -> 0.], TraditionalForm]}, {50.5, 
       FormBox[
        RotationBox["\"gClefChange\"", BoxRotation -> 0.], 
        TraditionalForm]}, {49.5, 
       FormBox[
        RotationBox["\"graceNoteAcciaccaturaStemDown\"", BoxRotation -> 0.], 
        TraditionalForm]}, {48.5, 
       FormBox[
        RotationBox["\"graceNoteAcciaccaturaStemUp\"", BoxRotation -> 0.], 
        TraditionalForm]}, {47.5, 
       FormBox[
        RotationBox["\"graceNoteAppoggiaturaStemDown\"", BoxRotation -> 0.], 
        TraditionalForm]}, {46.5, 
       FormBox[
        RotationBox["\"graceNoteAppoggiaturaStemUp\"", BoxRotation -> 0.], 
        TraditionalForm]}, {45.5, 
       FormBox[
        RotationBox["\"keyboardPedalPed\"", BoxRotation -> 0.], 
        TraditionalForm]}, {44.5, 
       FormBox[
        RotationBox["\"keyboardPedalUp\"", BoxRotation -> 0.], 
        TraditionalForm]}, {43.5, 
       FormBox[
        RotationBox["\"keyFlat\"", BoxRotation -> 0.], TraditionalForm]}, {
      42.5, 
       FormBox[
        RotationBox["\"keyNatural\"", BoxRotation -> 0.], TraditionalForm]}, {
      41.5, 
       FormBox[
        RotationBox["\"keySharp\"", BoxRotation -> 0.], TraditionalForm]}, {
      40.5, 
       FormBox[
        RotationBox["\"noteheadBlack\"", BoxRotation -> 0.], 
        TraditionalForm]}, {39.5, 
       FormBox[
        RotationBox["\"noteheadBlackSmall\"", BoxRotation -> 0.], 
        TraditionalForm]}, {38.5, 
       FormBox[
        RotationBox["\"noteheadDoubleWhole\"", BoxRotation -> 0.], 
        TraditionalForm]}, {37.5, 
       FormBox[
        RotationBox["\"noteheadHalf\"", BoxRotation -> 0.], 
        TraditionalForm]}, {36.5, 
       FormBox[
        RotationBox["\"noteheadHalfSmall\"", BoxRotation -> 0.], 
        TraditionalForm]}, {35.5, 
       FormBox[
        RotationBox["\"noteheadWhole\"", BoxRotation -> 0.], 
        TraditionalForm]}, {34.5, 
       FormBox[
        RotationBox["\"noteheadWholeSmall\"", BoxRotation -> 0.], 
        TraditionalForm]}, {33.5, 
       FormBox[
        RotationBox["\"ornamentMordent\"", BoxRotation -> 0.], 
        TraditionalForm]}, {32.5, 
       FormBox[
        RotationBox["\"ornamentTrill\"", BoxRotation -> 0.], 
        TraditionalForm]}, {31.5, 
       FormBox[
        RotationBox["\"ornamentTurn\"", BoxRotation -> 0.], 
        TraditionalForm]}, {30.5, 
       FormBox[
        RotationBox["\"ornamentTurnInverted\"", BoxRotation -> 0.], 
        TraditionalForm]}, {29.5, 
       FormBox[
        RotationBox["\"repeatDot\"", BoxRotation -> 0.], TraditionalForm]}, {
      28.5, 
       FormBox[
        RotationBox["\"rest128th\"", BoxRotation -> 0.], TraditionalForm]}, {
      27.5, 
       FormBox[
        RotationBox["\"rest16th\"", BoxRotation -> 0.], TraditionalForm]}, {
      26.5, 
       FormBox[
        RotationBox["\"rest32nd\"", BoxRotation -> 0.], TraditionalForm]}, {
      25.5, 
       FormBox[
        RotationBox["\"rest64th\"", BoxRotation -> 0.], TraditionalForm]}, {
      24.5, 
       FormBox[
        RotationBox["\"rest8th\"", BoxRotation -> 0.], TraditionalForm]}, {
      23.5, 
       FormBox[
        RotationBox["\"restDoubleWhole\"", BoxRotation -> 0.], 
        TraditionalForm]}, {22.5, 
       FormBox[
        RotationBox["\"restHalf\"", BoxRotation -> 0.], TraditionalForm]}, {
      21.5, 
       FormBox[
        RotationBox["\"restHBar\"", BoxRotation -> 0.], TraditionalForm]}, {
      20.5, 
       FormBox[
        RotationBox["\"restLonga\"", BoxRotation -> 0.], TraditionalForm]}, {
      19.5, 
       FormBox[
        RotationBox["\"restQuarter\"", BoxRotation -> 0.], 
        TraditionalForm]}, {18.5, 
       FormBox[
        RotationBox["\"restWhole\"", BoxRotation -> 0.], TraditionalForm]}, {
      17.5, 
       FormBox[
        RotationBox["\"segno\"", BoxRotation -> 0.], TraditionalForm]}, {16.5, 
       FormBox[
        RotationBox["\"stringsDownBow\"", BoxRotation -> 0.], 
        TraditionalForm]}, {15.5, 
       FormBox[
        RotationBox["\"stringsUpBow\"", BoxRotation -> 0.], 
        TraditionalForm]}, {14.5, 
       FormBox[
        RotationBox["\"timeSig0\"", BoxRotation -> 0.], TraditionalForm]}, {
      13.5, 
       FormBox[
        RotationBox["\"timeSig1\"", BoxRotation -> 0.], TraditionalForm]}, {
      12.5, 
       FormBox[
        RotationBox["\"timeSig2\"", BoxRotation -> 0.], TraditionalForm]}, {
      11.5, 
       FormBox[
        RotationBox["\"timeSig3\"", BoxRotation -> 0.], TraditionalForm]}, {
      10.5, 
       FormBox[
        RotationBox["\"timeSig4\"", BoxRotation -> 0.], TraditionalForm]}, {
      9.5, 
       FormBox[
        RotationBox["\"timeSig5\"", BoxRotation -> 0.], TraditionalForm]}, {
      8.5, 
       FormBox[
        RotationBox["\"timeSig6\"", BoxRotation -> 0.], TraditionalForm]}, {
      7.5, 
       FormBox[
        RotationBox["\"timeSig7\"", BoxRotation -> 0.], TraditionalForm]}, {
      6.5, 
       FormBox[
        RotationBox["\"timeSig8\"", BoxRotation -> 0.], TraditionalForm]}, {
      5.5, 
       FormBox[
        RotationBox["\"timeSig9\"", BoxRotation -> 0.], TraditionalForm]}, {
      4.5, 
       FormBox[
        RotationBox["\"timeSigCommon\"", BoxRotation -> 0.], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"timeSigCutCommon\"", BoxRotation -> 0.], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"tuplet3\"", BoxRotation -> 0.], TraditionalForm]}, {
      1.5, 
       FormBox[
        RotationBox["\"tuplet6\"", BoxRotation -> 0.], TraditionalForm]}, {
      0.5, 
       FormBox[
        RotationBox["\"unpitchedPercussionClef1\"", BoxRotation -> 0.], 
        TraditionalForm]}}, {{118.5, 
       FormBox["200", TraditionalForm]}, {117.5, 
       FormBox["200", TraditionalForm]}, {116.5, 
       FormBox["200", TraditionalForm]}, {115.5, 
       FormBox["200", TraditionalForm]}, {114.5, 
       FormBox["200", TraditionalForm]}, {113.5, 
       FormBox["200", TraditionalForm]}, {112.5, 
       FormBox["200", TraditionalForm]}, {111.5, 
       FormBox["200", TraditionalForm]}, {110.5, 
       FormBox["200", TraditionalForm]}, {109.5, 
       FormBox["200", TraditionalForm]}, {108.5, 
       FormBox["200", TraditionalForm]}, {107.5, 
       FormBox["200", TraditionalForm]}, {106.5, 
       FormBox["200", TraditionalForm]}, {105.5, 
       FormBox["200", TraditionalForm]}, {104.5, 
       FormBox["200", TraditionalForm]}, {103.5, 
       FormBox["200", TraditionalForm]}, {102.5, 
       FormBox["200", TraditionalForm]}, {101.5, 
       FormBox["200", TraditionalForm]}, {100.5, 
       FormBox["200", TraditionalForm]}, {99.5, 
       FormBox["200", TraditionalForm]}, {98.5, 
       FormBox["200", TraditionalForm]}, {97.5, 
       FormBox["200", TraditionalForm]}, {96.5, 
       FormBox["200", TraditionalForm]}, {95.5, 
       FormBox["200", TraditionalForm]}, {94.5, 
       FormBox["200", TraditionalForm]}, {93.5, 
       FormBox["200", TraditionalForm]}, {92.5, 
       FormBox["200", TraditionalForm]}, {91.5, 
       FormBox["200", TraditionalForm]}, {90.5, 
       FormBox["200", TraditionalForm]}, {89.5, 
       FormBox["200", TraditionalForm]}, {88.5, 
       FormBox["200", TraditionalForm]}, {87.5, 
       FormBox["1", TraditionalForm]}, {86.5, 
       FormBox["200", TraditionalForm]}, {85.5, 
       FormBox["200", TraditionalForm]}, {84.5, 
       FormBox["200", TraditionalForm]}, {83.5, 
       FormBox["200", TraditionalForm]}, {82.5, 
       FormBox["200", TraditionalForm]}, {81.5, 
       FormBox["200", TraditionalForm]}, {80.5, 
       FormBox["200", TraditionalForm]}, {79.5, 
       FormBox["200", TraditionalForm]}, {78.5, 
       FormBox["1", TraditionalForm]}, {77.5, 
       FormBox["1", TraditionalForm]}, {76.5, 
       FormBox["1", TraditionalForm]}, {75.5, 
       FormBox["200", TraditionalForm]}, {74.5, 
       FormBox["200", TraditionalForm]}, {73.5, 
       FormBox["200", TraditionalForm]}, {72.5, 
       FormBox["200", TraditionalForm]}, {71.5, 
       FormBox["200", TraditionalForm]}, {70.5, 
       FormBox["200", TraditionalForm]}, {69.5, 
       FormBox["200", TraditionalForm]}, {68.5, 
       FormBox["200", TraditionalForm]}, {67.5, 
       FormBox["200", TraditionalForm]}, {66.5, 
       FormBox["200", TraditionalForm]}, {65.5, 
       FormBox["200", TraditionalForm]}, {64.5, 
       FormBox["200", TraditionalForm]}, {63.5, 
       FormBox["200", TraditionalForm]}, {62.5, 
       FormBox["200", TraditionalForm]}, {61.5, 
       FormBox["200", TraditionalForm]}, {60.5, 
       FormBox["200", TraditionalForm]}, {59.5, 
       FormBox["200", TraditionalForm]}, {58.5, 
       FormBox["200", TraditionalForm]}, {57.5, 
       FormBox["200", TraditionalForm]}, {56.5, 
       FormBox["200", TraditionalForm]}, {55.5, 
       FormBox["200", TraditionalForm]}, {54.5, 
       FormBox["1", TraditionalForm]}, {53.5, 
       FormBox["200", TraditionalForm]}, {52.5, 
       FormBox["1", TraditionalForm]}, {51.5, 
       FormBox["200", TraditionalForm]}, {50.5, 
       FormBox["200", TraditionalForm]}, {49.5, 
       FormBox["200", TraditionalForm]}, {48.5, 
       FormBox["200", TraditionalForm]}, {47.5, 
       FormBox["200", TraditionalForm]}, {46.5, 
       FormBox["200", TraditionalForm]}, {45.5, 
       FormBox["200", TraditionalForm]}, {44.5, 
       FormBox["200", TraditionalForm]}, {43.5, 
       FormBox["200", TraditionalForm]}, {42.5, 
       FormBox["200", TraditionalForm]}, {41.5, 
       FormBox["200", TraditionalForm]}, {40.5, 
       FormBox["200", TraditionalForm]}, {39.5, 
       FormBox["200", TraditionalForm]}, {38.5, 
       FormBox["200", TraditionalForm]}, {37.5, 
       FormBox["200", TraditionalForm]}, {36.5, 
       FormBox["1", TraditionalForm]}, {35.5, 
       FormBox["200", TraditionalForm]}, {34.5, 
       FormBox["1", TraditionalForm]}, {33.5, 
       FormBox["200", TraditionalForm]}, {32.5, 
       FormBox["200", TraditionalForm]}, {31.5, 
       FormBox["200", TraditionalForm]}, {30.5, 
       FormBox["1", TraditionalForm]}, {29.5, 
       FormBox["200", TraditionalForm]}, {28.5, 
       FormBox["200", TraditionalForm]}, {27.5, 
       FormBox["200", TraditionalForm]}, {26.5, 
       FormBox["200", TraditionalForm]}, {25.5, 
       FormBox["200", TraditionalForm]}, {24.5, 
       FormBox["200", TraditionalForm]}, {23.5, 
       FormBox["200", TraditionalForm]}, {22.5, 
       FormBox["200", TraditionalForm]}, {21.5, 
       FormBox["200", TraditionalForm]}, {20.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["200", TraditionalForm]}, {18.5, 
       FormBox["200", TraditionalForm]}, {17.5, 
       FormBox["200", TraditionalForm]}, {16.5, 
       FormBox["200", TraditionalForm]}, {15.5, 
       FormBox["200", TraditionalForm]}, {14.5, 
       FormBox["200", TraditionalForm]}, {13.5, 
       FormBox["200", TraditionalForm]}, {12.5, 
       FormBox["200", TraditionalForm]}, {11.5, 
       FormBox["200", TraditionalForm]}, {10.5, 
       FormBox["200", TraditionalForm]}, {9.5, 
       FormBox["200", TraditionalForm]}, {8.5, 
       FormBox["200", TraditionalForm]}, {7.5, 
       FormBox["200", TraditionalForm]}, {6.5, 
       FormBox["200", TraditionalForm]}, {5.5, 
       FormBox["200", TraditionalForm]}, {4.5, 
       FormBox["200", TraditionalForm]}, {3.5, 
       FormBox["200", TraditionalForm]}, {2.5, 
       FormBox["200", TraditionalForm]}, {1.5, 
       FormBox["200", TraditionalForm]}, {0.5, 
       FormBox["200", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["198", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["211", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["209", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {5.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {6.5, 
       FormBox[
        RotationBox["199", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {7.5, 
       FormBox[
        RotationBox["194", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {8.5, 
       FormBox[
        RotationBox["243", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {9.5, 
       FormBox[
        RotationBox["147", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {10.5, 
       FormBox[
        RotationBox["228", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {11.5, 
       FormBox[
        RotationBox["199", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {12.5, 
       FormBox[
        RotationBox["193", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {13.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {14.5, 
       FormBox[
        RotationBox["204", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {15.5, 
       FormBox[
        RotationBox["170", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {16.5, 
       FormBox[
        RotationBox["231", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {17.5, 
       FormBox[
        RotationBox["224", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {18.5, 
       FormBox[
        RotationBox["190", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {19.5, 
       FormBox[
        RotationBox["198", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {20.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {21.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {22.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {23.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {24.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {25.5, 
       FormBox[
        RotationBox["201", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {26.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {27.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {28.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {29.5, 
       FormBox[
        RotationBox["201", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {30.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {31.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {32.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {33.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {34.5, 
       FormBox[
        RotationBox["201", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {35.5, 
       FormBox[
        RotationBox["202", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {36.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {37.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {38.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {39.5, 
       FormBox[
        RotationBox["201", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {40.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {41.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {42.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {43.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {44.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {45.5, 
       FormBox[
        RotationBox["201", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {46.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {47.5, 
       FormBox[
        RotationBox["202", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {48.5, 
       FormBox[
        RotationBox["196", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {49.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {50.5, 
       FormBox[
        RotationBox["207", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {51.5, 
       FormBox[
        RotationBox["201", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {52.5, 
       FormBox[
        RotationBox["194", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {53.5, 
       FormBox[
        RotationBox["202", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {54.5, 
       FormBox[
        RotationBox["197", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {55.5, 
       FormBox[
        RotationBox["196", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {56.5, 
       FormBox[
        RotationBox["201", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {57.5, 
       FormBox[
        RotationBox["199", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {58.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {59.5, 
       FormBox[
        RotationBox["209", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {60.5, 
       FormBox[
        RotationBox["203", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {61.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {62.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {63.5, 
       FormBox[
        RotationBox["201", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {64.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {65.5, 
       FormBox[
        RotationBox["198", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {66.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {67.5, 
       FormBox[
        RotationBox["201", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {68.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {69.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {70.5, 
       FormBox[
        RotationBox["202", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {71.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {72.5, 
       FormBox[
        RotationBox["189", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {73.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {74.5, 
       FormBox[
        RotationBox["193", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {75.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {76.5, 
       FormBox[
        RotationBox["198", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {77.5, 
       FormBox[
        RotationBox["206", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {78.5, 
       FormBox[
        RotationBox["195", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {79.5, 
       FormBox[
        RotationBox["204", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {80.5, 
       FormBox[
        RotationBox["191", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {81.5, 
       FormBox[
        RotationBox["206", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {82.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {83.5, 
       FormBox[
        RotationBox["203", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {84.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {85.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {86.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {87.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {88.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {89.5, 
       FormBox[
        RotationBox["201", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {90.5, 
       FormBox[
        RotationBox["195", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {91.5, 
       FormBox[
        RotationBox["161", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {92.5, 
       FormBox[
        RotationBox["202", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {93.5, 
       FormBox[
        RotationBox["222", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {94.5, 
       FormBox[
        RotationBox["199", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {95.5, 
       FormBox[
        RotationBox["192", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {96.5, 
       FormBox[
        RotationBox["212", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {97.5, 
       FormBox[
        RotationBox["207", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {98.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {99.5, 
       FormBox[
        RotationBox["201", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {100.5, 
       FormBox[
        RotationBox["195", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {101.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {102.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {103.5, 
       FormBox[
        RotationBox["203", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {104.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {105.5, 
       FormBox[
        RotationBox["181", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {106.5, 
       FormBox[
        RotationBox["202", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {107.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {108.5, 
       FormBox[
        RotationBox["199", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {109.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {110.5, 
       FormBox[
        RotationBox["196", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {111.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {112.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {113.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {114.5, 
       FormBox[
        RotationBox["202", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {115.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {116.5, 
       FormBox[
        RotationBox["201", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {117.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {118.5, 
       FormBox[
        RotationBox["200", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox[
        "\"accidentalDoubleFlat\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox[
        "\"accidentalDoubleSharp\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"accidentalFlat\"", BoxRotation -> 1.5707963267948966`],
         TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox[
        "\"accidentalFlatSmall\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox[
        "\"accidentalNatural\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {5.5, 
       FormBox[
        RotationBox[
        "\"accidentalNaturalSmall\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {6.5, 
       FormBox[
        RotationBox[
        "\"accidentalSharp\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {7.5, 
       FormBox[
        RotationBox[
        "\"accidentalSharpSmall\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {8.5, 
       FormBox[
        RotationBox["\"arpeggiato\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {9.5, 
       FormBox[
        RotationBox[
        "\"articAccentAbove\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {10.5, 
       FormBox[
        RotationBox[
        "\"articAccentBelow\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {11.5, 
       FormBox[
        RotationBox[
        "\"articMarcatoAbove\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {12.5, 
       FormBox[
        RotationBox[
        "\"articMarcatoBelow\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {13.5, 
       FormBox[
        RotationBox[
        "\"articStaccatissimoAbove\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {14.5, 
       FormBox[
        RotationBox[
        "\"articStaccatissimoBelow\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {15.5, 
       FormBox[
        RotationBox[
        "\"articStaccatoAbove\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {16.5, 
       FormBox[
        RotationBox[
        "\"articStaccatoBelow\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {17.5, 
       FormBox[
        RotationBox[
        "\"articTenutoAbove\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {18.5, 
       FormBox[
        RotationBox[
        "\"articTenutoBelow\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {19.5, 
       FormBox[
        RotationBox["\"brace\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {20.5, 
       FormBox[
        RotationBox["\"caesura\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {21.5, 
       FormBox[
        RotationBox["\"cClefAlto\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {22.5, 
       FormBox[
        RotationBox[
        "\"cClefAltoChange\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {23.5, 
       FormBox[
        RotationBox["\"cClefTenor\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {24.5, 
       FormBox[
        RotationBox[
        "\"cClefTenorChange\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {25.5, 
       FormBox[
        RotationBox["\"clef15\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {26.5, 
       FormBox[
        RotationBox["\"clef8\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {27.5, 
       FormBox[
        RotationBox["\"coda\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {28.5, 
       FormBox[
        RotationBox["\"dynamicFF\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {29.5, 
       FormBox[
        RotationBox["\"dynamicFFF\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {30.5, 
       FormBox[
        RotationBox["\"dynamicFFFF\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {31.5, 
       FormBox[
        RotationBox["\"dynamicFFFFF\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {32.5, 
       FormBox[
        RotationBox["\"dynamicForte\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {33.5, 
       FormBox[
        RotationBox[
        "\"dynamicFortePiano\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {34.5, 
       FormBox[
        RotationBox["\"dynamicMezzo\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {35.5, 
       FormBox[
        RotationBox["\"dynamicMF\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {36.5, 
       FormBox[
        RotationBox["\"dynamicMP\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {37.5, 
       FormBox[
        RotationBox["\"dynamicPiano\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {38.5, 
       FormBox[
        RotationBox["\"dynamicPP\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {39.5, 
       FormBox[
        RotationBox["\"dynamicPPP\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {40.5, 
       FormBox[
        RotationBox["\"dynamicPPPP\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {41.5, 
       FormBox[
        RotationBox["\"dynamicPPPPP\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {42.5, 
       FormBox[
        RotationBox[
        "\"dynamicRinforzando2\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {43.5, 
       FormBox[
        RotationBox[
        "\"dynamicSforzando1\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {44.5, 
       FormBox[
        RotationBox[
        "\"dynamicSforzato\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {45.5, 
       FormBox[
        RotationBox["\"fClef\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {46.5, 
       FormBox[
        RotationBox["\"fClefChange\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {47.5, 
       FormBox[
        RotationBox["\"fermataAbove\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {48.5, 
       FormBox[
        RotationBox["\"fermataBelow\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {49.5, 
       FormBox[
        RotationBox["\"fingering0\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {50.5, 
       FormBox[
        RotationBox["\"fingering1\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {51.5, 
       FormBox[
        RotationBox["\"fingering2\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {52.5, 
       FormBox[
        RotationBox["\"fingering3\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {53.5, 
       FormBox[
        RotationBox["\"fingering4\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {54.5, 
       FormBox[
        RotationBox["\"fingering5\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {55.5, 
       FormBox[
        RotationBox["\"flag128thDown\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {56.5, 
       FormBox[
        RotationBox["\"flag128thUp\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {57.5, 
       FormBox[
        RotationBox["\"flag16thDown\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {58.5, 
       FormBox[
        RotationBox["\"flag16thUp\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {59.5, 
       FormBox[
        RotationBox["\"flag32ndDown\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {60.5, 
       FormBox[
        RotationBox["\"flag32ndUp\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {61.5, 
       FormBox[
        RotationBox["\"flag64thDown\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {62.5, 
       FormBox[
        RotationBox["\"flag64thUp\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {63.5, 
       FormBox[
        RotationBox["\"flag8thDown\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {64.5, 
       FormBox[
        RotationBox[
        "\"flag8thDownSmall\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {65.5, 
       FormBox[
        RotationBox["\"flag8thUp\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {66.5, 
       FormBox[
        RotationBox["\"flag8thUpSmall\"", BoxRotation -> 1.5707963267948966`],
         TraditionalForm]}, {67.5, 
       FormBox[
        RotationBox["\"gClef\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {68.5, 
       FormBox[
        RotationBox["\"gClefChange\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {69.5, 
       FormBox[
        RotationBox[
        "\"graceNoteAcciaccaturaStemDown\"", BoxRotation -> 
         1.5707963267948966`], TraditionalForm]}, {70.5, 
       FormBox[
        RotationBox[
        "\"graceNoteAcciaccaturaStemUp\"", BoxRotation -> 
         1.5707963267948966`], TraditionalForm]}, {71.5, 
       FormBox[
        RotationBox[
        "\"graceNoteAppoggiaturaStemDown\"", BoxRotation -> 
         1.5707963267948966`], TraditionalForm]}, {72.5, 
       FormBox[
        RotationBox[
        "\"graceNoteAppoggiaturaStemUp\"", BoxRotation -> 
         1.5707963267948966`], TraditionalForm]}, {73.5, 
       FormBox[
        RotationBox[
        "\"keyboardPedalPed\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {74.5, 
       FormBox[
        RotationBox[
        "\"keyboardPedalUp\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {75.5, 
       FormBox[
        RotationBox["\"keyFlat\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {76.5, 
       FormBox[
        RotationBox["\"keyNatural\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {77.5, 
       FormBox[
        RotationBox["\"keySharp\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {78.5, 
       FormBox[
        RotationBox["\"noteheadBlack\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {79.5, 
       FormBox[
        RotationBox[
        "\"noteheadBlackSmall\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {80.5, 
       FormBox[
        RotationBox[
        "\"noteheadDoubleWhole\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {81.5, 
       FormBox[
        RotationBox["\"noteheadHalf\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {82.5, 
       FormBox[
        RotationBox[
        "\"noteheadHalfSmall\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {83.5, 
       FormBox[
        RotationBox["\"noteheadWhole\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {84.5, 
       FormBox[
        RotationBox[
        "\"noteheadWholeSmall\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {85.5, 
       FormBox[
        RotationBox[
        "\"ornamentMordent\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {86.5, 
       FormBox[
        RotationBox["\"ornamentTrill\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {87.5, 
       FormBox[
        RotationBox["\"ornamentTurn\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {88.5, 
       FormBox[
        RotationBox[
        "\"ornamentTurnInverted\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {89.5, 
       FormBox[
        RotationBox["\"repeatDot\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {90.5, 
       FormBox[
        RotationBox["\"rest128th\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {91.5, 
       FormBox[
        RotationBox["\"rest16th\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {92.5, 
       FormBox[
        RotationBox["\"rest32nd\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {93.5, 
       FormBox[
        RotationBox["\"rest64th\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {94.5, 
       FormBox[
        RotationBox["\"rest8th\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {95.5, 
       FormBox[
        RotationBox[
        "\"restDoubleWhole\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {96.5, 
       FormBox[
        RotationBox["\"restHalf\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {97.5, 
       FormBox[
        RotationBox["\"restHBar\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {98.5, 
       FormBox[
        RotationBox["\"restLonga\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {99.5, 
       FormBox[
        RotationBox["\"restQuarter\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {100.5, 
       FormBox[
        RotationBox["\"restWhole\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {101.5, 
       FormBox[
        RotationBox["\"segno\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {102.5, 
       FormBox[
        RotationBox["\"stringsDownBow\"", BoxRotation -> 1.5707963267948966`],
         TraditionalForm]}, {103.5, 
       FormBox[
        RotationBox["\"stringsUpBow\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {104.5, 
       FormBox[
        RotationBox["\"timeSig0\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {105.5, 
       FormBox[
        RotationBox["\"timeSig1\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {106.5, 
       FormBox[
        RotationBox["\"timeSig2\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {107.5, 
       FormBox[
        RotationBox["\"timeSig3\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {108.5, 
       FormBox[
        RotationBox["\"timeSig4\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {109.5, 
       FormBox[
        RotationBox["\"timeSig5\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {110.5, 
       FormBox[
        RotationBox["\"timeSig6\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {111.5, 
       FormBox[
        RotationBox["\"timeSig7\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {112.5, 
       FormBox[
        RotationBox["\"timeSig8\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {113.5, 
       FormBox[
        RotationBox["\"timeSig9\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {114.5, 
       FormBox[
        RotationBox["\"timeSigCommon\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {115.5, 
       FormBox[
        RotationBox[
        "\"timeSigCutCommon\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {116.5, 
       FormBox[
        RotationBox["\"tuplet3\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {117.5, 
       FormBox[
        RotationBox["\"tuplet6\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {118.5, 
       FormBox[
        RotationBox[
        "\"unpitchedPercussionClef1\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->8.789062318197438,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->1198.1933366587698`,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.771636552490511*^9, 3.77166783583799*^9, 
  3.7716682650687103`*^9, 3.771698784122744*^9, 3.771701532589559*^9, 
  3.771754377544527*^9, 3.7717562312022448`*^9, 3.771758486987146*^9, 
  3.771771189580412*^9, 3.7718537690853157`*^9, 3.7718550711861067`*^9, 
  3.771865035199355*^9},
 CellLabel->"Out[112]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzsvQm8bUdV5394545vTt7LADHMkxBsBP92q92t/h27Hdrp//+3tvbfCYWE
l4RHACUmTBpwQFFRBAEVjUYcEVABkUmiCIjGxETAICgEZTAhCIjK6fpW1a9O
7X2q9q69z973nXvf25/PvffcffauYa1Va/1q1apVX/VtVzzyESe+7YpHfce3
3fPLTn7b5Y981Hc89p5fetlJc2t6l8lk7TfNz+/cc8Ln2WSiX6nrd/iV/m7h
q6faG9PZD/7gD87+9m//1v43//Yhgzy+ZR//mZ/5mdnTnva02Q/8wA/M3vOe
99jvfTH77GP3nt100032kac85SmzH/3RH53dfvvt9rE/+7M/m1199dX21Re8
4AWzX/qlX7L3f+RHfmT2N3/zN/bzK17xitmTn/zk2ZOe9KTZ7//+79t7f/7n
fz47efLk7I1vfOPsAx/4gC2TsqnjHe94h33mfe973+yaa66x9yj3qquuWrPN
OXv2j//4j/aVpz71qbMf/uEftkXceOONs5/6qZ+yr/7mb/5maBavPvaxj539
y7/8y+yP/uiPbDO+//u/f/bsZz973+yjH/3oZG32Yz/2Y6H2P/7jP7ZF3Jam
2EWWMpTPdcstt8y+7/u+L6aY/fzP//zPs8c85jHhf7oNle+8887ZFVdcMfvw
hz88+9SnPjV7znOes0Cyt7/97bbdn/zkJ2f/+q//atv6rne9a/arv/qrs9e9
7nX2Wfr8B3/wB/bzrbfeOnv84x8/+/d//3f7HqTl4vtAsrMsud785jfbr976
1rfOfuInfiKQDNI88pGPnH3iE5+w37/85S+ffe/3fq9tAt2j2ZSyb/Zbv/Vb
kw3L0Ze85CX22Y9//OOzSy+91JZhuZam2wFLn/e+973h/hOf+ETLt5huN998
8+yHfuiHJk7s1mz/77jjDtsnyy9ub87+9E//dIFstPllL3vZRM9AYtr2y7/8
y1bKKOriiy/mr39mOvunf/onyyrT/nCP6gzZfH/5fdiy6sSJE/YvF6R+//vf
XxE502zbpre97W2WhVdeeaV7fXv27ne/2zaPHkN6ro997GO2Gz/7sz+L6E2a
ZM7RjuGgiwb+wz/8g73/13/91/Yef11HzKgwtEOgkQcaZBopuiDfddr9zu/8
zuylL33pZM2TXTSjn4ZmU1vi1EoZHIzJBZmr5JrqNf6a/7h3rEKqf/u3f7Mc
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
cxZ1h3Opm9lYcixkoMPBgITbuLBk+sjGjHy4IrZzIyAhl8vZ9mr6yDbJWCh9
fUEvGuZPGgHSMqnh2PwDcRnz6ACMK8tThm/FqeGGSDGydOqCdasAkBf9POMZ
zzCvhkX5bSs4jCSEh7ABDr+jX5g71OhNN90UIp7QMvhekVUWSVhGpE2GjBMt
+ralY8CuUw+RLIbX+3BLmIFL9bqa4gSYALucdQeTOesaSLa/jCTtqRwaxKOQ
bac+ydj+wdrRHNmjnCgNbZ3oTMll63LlHC1K89Iah7Bcpoz7DkBeR7rjg2S1
IX7CH9yzzwaaHbbFaOdCW2gNkxSvDNx+30PWbsWjKM4rqRlDLcliCOOPJyGE
NRjUEHRMQ46fILSjZ5BaS6up7aCmlhXVswssjZ5pr+tgq6wm013erZLusq2I
JfLsKHi3LSnnEBmFFiT9YEXSCYFCPDHPvEY1tFjnvJrBpEypNfOiSQFvas4C
4kCIqAFfpXlbCi9nVzFg5QpvudxckqCGTvsxtZaWkAcECRkidVZJPlnYSx2w
WFtX6hMC5Xo9x7bxfDuVU5AscJIuQC6eGyD9kjixhPQ2U3medrZdIO65zDi0
37fIb1tXSiPb2wheIgwNdcgUDJDOyq45+VVrLUtqjrlMQpKCXBBxhhV/hSB3
3aMJRtoP1Ep1/7lHa8koNqNGeY6GCJx4KXcjKrKaLqva+KOJVqbKi+utZ04Z
M1PT4Y7lxc8dTtRxqPDdQ56KLRlU+iTheGBhl/Jp17LNUjEMRP9Ikktx8z2g
cwbFBstueymQxuCJYP2qyWcOpqW0Q3qglECXCtb50T1R/HihsG1HTZTg70s8
1yFN1Vb0ep36bTlqUpzTPZ+ip3IvHtfxGBE3j/h78biuq5kueXXOT7TlqG9R
PcldHBokt39M3sW0Qy0p/Kbx15WgEC7U/QV82MfH0tQ6pcwSzkp0sk/ioFjc
xatUBqduWYOy9EtF+aTUYkOyoFni+p1lvvpiXxcB3N5nPXmUe+K7vuu75r8+
xK/jLe+Yltvno8v8H7gbfRf62HZv4xQ9d6aO3dmWM/3dnXWsUlv2Sh2r1JYz
/d2ddaxSW/ZWf9fqWMkgz0smglCXTMIPEMojr8+xfx4SVsj5wTeLM5ALx4zc
U/hmCf0ApfE9PlJcS6zacymfC2HFOG1w4OAPokyCo3HwAVzrZRL5ADgmqhIv
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
UjI1WDhHur0LwMan3Z4FW5Z0a1VVeqJKMBvQ2GbdHZlW0xG2QyAqv6BkryHE
8PRDT9O4uLxdzFO4CCEpDG/HEdI0Lm6Y7iVQUKp7WsyIYcARf2/HkdE0Lq4P
GYrRzxP9VzFCeXiuPo9+KgvBDejHNWVPIJS2+XaCJIOHLzpy7g3U0oOeYwQJ
OpLuCTDTg6Lj7JRxNP2c0wH51Le6fEmC1HVf0AChcbJ0exb7TAP2mTWZv1LJ
HipKTa6Z8VDRNKCinh0fKVQt1fPx3UbTAI56UmOM8LQn+2bEOPEh3ZvWcKpT
FYxdlCv7v/KrFpX3i/myHdDbdWAsa9by3R8ceDnS7T7g1YN2Y4AsR75dB7Jq
nqD/kqDZz/Fr8F0Ojl4P2ysAKusFKlVgg20peKLn667GTYVLZHnijoONrvIN
WQ4bFS6C5Ts3Ev7ROk5s9OMQ+mExUeHaV54KY+Cex/lmxNjkP+Wa9n/xq4Z7
fi3xcCXb/y7AJmeHR0uqUrMSW2SzSjFPuZHy++8GWHOsYsPb6lK7cptWswMq
T/vxUvvvAlh0JDzaVFW9WX4raVDs0V7S+mGRn5Wg+6/wa6Ss/rtvVU7vldSr
NmZ2ffYR/1FT++8CPHZOBY/ptaZq601M7MjML4/mGTEOdnuMb8gidttswm4T
Zcnv0IGR8FmqB0q6H2O2A/5eV3zmnw/JZjr0eAws9iTfjBiLfUb3piWxmLWn
jVjs008ZFmOtQ/WiMrUjhxVsNlpwyaG6laOHddbVYPPLfKcHRliOlg9dSYQV
0xI6sq1T2SJqtOxByjEAk6PmigGmA4GQ2HFtkiTmYCChHGeRztHys1YSCImg
tOv666+3/WNrVJ2giQW52nrcRQmq2mRJw67HOWKW4JgH7DiOETFhorL6oLmQ
kLp0dlp8K5XYoUCK/F2pXWp0Ei1AimztcYXI2JxaJzuts+X7OBKOSXUy71Ny
HachZsz7Xqzb9+JOd15Py/d6TCwTw7Qslsk3LYlltFYX46TsWt19+VXDSX+Q
L1s5ynYrTqIu5ufZRaI8PQbHSY6WuxcneVr2IOUYOMlRc1fipIpQzu34fRL0
+31+De4gkiTuVlwEAQ2f99n8cdPg/5nNGlIplyq+wfw+jsi7Fy8toTrHwUbf
5xvSFxv1118j4SAFaMegQCluh8JGdNoMy4lyFCF58WXedd29f7b3Y+AhubJi
zPKfuzMmiVku9mTYrZjFH5g9cSdmH7UnZqMMqJe+IC7QLXWvyyKczWBRg5lv
9LQbGPo4lnz2roQ+maOzrcECn5i6ZHSiW0ELZdbnsvOSPFfGQFGOMSuGova3
oqjKWdob8VnaFneQVvTOO+8UC6Jb9pFK/tfEml03tozjunKMefiuhGiZ07YD
cakLYZgnctuO7zWv6c3x8gUJlryOX8P6vRwnSnDcg1cSxyXO2wbC+JSsLlMy
cGZ+bzPc67SgVzpEhsKDSgNUhgenMR6c3LV7J0YCgaledAN80xjw5U8dz/ds
DID3Lb4ZMbb9mu5NSwK8/+2/isHj/0g8bn8fT5T91nzZ7sTv1QzSYvuqmfEq
SCuVkjQ+Jzk+3ytxurd95sSJEypOZrjrYeK1ZmTVQ54Rg8NNx8TVjPnyTPTj
+Vg2A2lM7vjcr8T54eJkiCMTK7ucV55pR96BnufnGEDVsXTFgOpU3PT/8fuw
8pCGJioPKVRXjvL4dKknpQ8snzP0SKi5y/Ho1XSo0zgdaj007ViClW/i1+Ce
R43MVYS18ASiT+34dKfzZjKSWoIzs6vzMnFAuv18ySWXOG/luXZ1iqohn/ja
5Wz2TJN6jNORHJ+Ox6sZ8FYzoal8pBQNTeET2kbHiyVOarfPG5FR/By1w3Ek
VKzl6nJIfK1Jebid5+s4cFvZ6VNwO1aDB6N7Oqpsw/82tJrFF+x//etfnw2x
y/dxJDSe6mSMxnEjGAoFrnid4fONu+XnSPcH53l8ipkjxpZNVK8wPNAIssxz
DC5TRjYKL0+UMYD8E3wzYrD92bmm2cjDmqf2psTDHmzr1NiVB9tHlwXb2VGc
p9jgqNhRezeg4rOGQMV5zZmn+RjI1ZH9dEKus9n/Ye/dY/Vbzvq+l73ed99+
t3M/x8bHdrACDkmBNBeSNm1JJRQSJVVVCQioFZQk2MeXc47PsXG5NeqFVjE2
tUIEWD39B2zFf7hyHSBSjcBuEBYOdi1AVqsicKu6NhisnOS4aipF3Z3PzPOd
d9Zac1nv+661f3v/zm+kvd+917tm5pmZZ57bPM8zFUNqefKXMaQK66++xPnQ
XBLnwD/wPDPjfhzz2knDRF8Dse+BQ8W+PQjLMiKZsmDtI5IV71ItD2Ihmctn
GnSkNzEVxllyo5KpNmcM3Uf82mPgS8hVOvxP5ap/a3fQsnJVyH97DeSqcDGM
3ZsUTU1Tn5lDh/9PccqjqfPlsCyMYTqvtuB0/ebzSktEIjDXZzqvg4Sz9tyU
wny5to7ssQSY3R633ABnSHAb5vYaCDV3FVUnZVt9i7XbElauwNablF41N57a
we1YVlnH7cIYHCrpsRSp3R6bq1/T08+XZ3PjnpxPVWky0tPdYpqM8jxnhRdl
RUkFo2/OvP7/8nsgE32h3GyQMu9ZmSiH5eUZmt22FGb33hWRdpveJcxIYYbv
WaHJT7Bn2P8yM61e+Jj9MFJI+zIRnLr4+OIib6CbSlJnOyoMK3DPile7UY1l
bETPGQxLil27jXMhM1JuoLL/pHLKbXt2iTJa2zRenq0lbE9KY5eKWN+0E1QV
ye2eELH0XjpKu06yNxv/zN6eWZwKM3lviFO7TeUSolOYzXtCdNptMpc5URNy
3rtik5X0kvDe7A4vCZ9BEgqTek9IQofg6FxSzw8aDHNJPbuNaSEJJzeoJS1O
m15ONAo2pJeKw15CVPnPbSypBPcnd1qMrKjyX9hXqQT09ZnX/yDT7P9TbjaE
KF87CSiH3eWRzy7thFm7ftLObtO2hGQTZu7aSTZ+4jx3/f3MdHkCM7uxR0h2
baWWzVA88dT4DzMTmCNQs5lswjxeO0Flt726jFDydw2GfYSS3eBfSADJDWAW
ASQvaZRxewlJ43/IzLB3yR8YQC4y7xn797Eeq8ey7DeTmcHXBW8VbsfeAJMK
7D8X4lGGcHY2HUb3aJZN5rIcEG4P5ApMZjSMLsOms7665aEtwUp/2iAwVub/
CwM/UcKA2COTY2sU34GnMLoMK91xdMto7Vq9HP/JBdzzyepJVAA/C/wvuSDu
c5lRecI5r7asweSYQCZm3YPBouLcSX4P3mUwGSZ00GLNxSk+YDCwqvJbzGVV
LcO1EAc4HLArSrpzTfyv/D7NNJFzIe2xgIeyLADg2Xp8B1XiO7BOxJAJZWIp
SPPvec97jvDndj195StfiT3lzg8aoF4qL9Awf+VXfuXiIx/5iP+OjQGFgfBq
mEoTIgpDslInZWc3YGN8l8sQ1nGIECovoBMAce5bgCZqhLTsJto/ozAbjk9s
yeX/UhrWJvyaWQeq8QANie8Ut2i02feVIifkBPkNcgpyuO/3WbWFNJQac9Ao
WW+4s6QuCJ8SH4A6+K+h8dEReMoonSazzyiX4RDK6asBXUQd4TR95geHCkZh
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
Z+O8S3DbnBxjGZ3lPzaQmF1bxSjjj++mW8dVsaw70lzTpDvGmU2EPfZIolsD
ARuEcbL5bWtxzjlaSBH6Dw0ms4j7/8RcchM3vrHuRpy4WoKe4czBtNh+epdp
cgNYYuaWUKX+oQGUqlLyltoLyKyKNLWXb+T3WYwm+Muhg16Y7xsz1ayXv+M/
LlMR+1PXTRHL4d/kSZ9dRwoL9m33daS6jpQ7b5+8aEsoMWHd7isxJSXm4iJ1
ePmG9lL9bX7NbunX9rqvWHwuLldGsThoey10SBCW7q/cVwbKykBWlZ+8bstI
6j9kIC0gqT96yGgXkrnfYTBdlsx90Bxclt/5YTKsl6kvVYZ9ZDYZFncaR/PD
3Pw5T3Pe9KY3+c8pmWfY20hQgAkW8Cw1+5WcUpKLxH2MFODQJgeYWtZ0aHg7
/uqvBp2FjQfdaw3N+ljleMXXhRUeJy/1XiLzS80BRb7/WkrNhiL+GYIla8TV
suBIJXWNZ+HAyroAE2QJv+khjpTcZ4QjSJeMS1InBiC507RwpDU262MPFFlC
Rg9Ychky+utmk9FT7CAsgPYk+LXS38jAHzbJHQ+TsEOpp0sOPsIOmJ+b5ngA
Qb9gGTunhR2tsR1AQZY5dggI8m9fS+1AiAJZUMyJEKWSUSdFlDBXX9vDE8Cj
lNySUk5DNzBOQGa3ynrK0Bg+BWlZ4S3gCLjSGlpKRbz6+LUl5PjH/Jr3DEI4
cR3VDnACm3+S/ijiRCsBDxu/gBOAz/+se+6aAuGE1AZAlo9+6rdI98qhAJjU
Q8phK7eGtj9nWUbNka19mpqz6S0RJ3cf/vCHo56QKPbRSSmNVQqG9NM4z0gm
SH46+IcEOHS7Y/AfPmUL6UrfaZDsryv155EtRtqm2jymSX50IJHSMIeHRwBk
1blAIH318Lm8LJ2rAcbkGN7XlNr5J+V2QnKCe0Bje9Vla2w5hGqswEJJf/7G
fWVqd2UqK8o21m+5lD4vV03n1j6aThKv8OrSgnmv/9nPJMJivcy1jlv7aB37
bLeFTie0iC9rNeHWPmrCPou4jAwv2/3lyfBdKntmU3w3JmIhyfxZg+TuSuYH
z84l59UZg/FPMy+bjOzdJa+pjMxyux0dbCyv6zl0tUJk70bEQ2N5Zhegw9KW
g2evsgBtS2vzeCvObysIl2JxCzERzyUELjSWdgnZOqzuZcjWj8wmW/c27M04
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
G4WlgGQClkPDQDXPSqvku+2ToBtZMlZYxrhWdtVwHIrdNRxk9hO/OajCCNgg
zDmHdG7i4lk8VJENRkFS4m9oE6IQDIpJdiNL7ZZAxODD9r3hq1iQgW8G9woF
vUpEpNutkSOovmg7aExygwZVmHi2mGtTcTSsH81xHKOIfSCjOuykkdndv+8N
wzT3iOdyDM6SNvv9zvwyCtaJakwAtA9KqgRqvA+m0QVaCCKNw7g0WSHqK1jD
ADiM0SEUjI0mdBkw8YzMK5P4sC1lIWDCstRIGRh7v23zrI2vrjkZJckbS/eb
KN2PjbCNjGvHozS4vaiYTdxprUt1RsnjzkcufYXDRQnu+8VoBocxu5sycq3E
Xy1yqP3sqBPlwULtYQaH0tG6uFB6Ni2szBmqUntA5iJBTc3YCWbdC671uQDG
hxOvsNarOuDGI5JOIXn1Pe95T0vInSIfNzIRNeT2Ru0GXLUhgeHoosrNbsRE
LTcU5oaesxxc+82X9Ily+oxTz9ngXoiMbCY2lezsb3vb2wKBOfU3ISm9EX9L
TL6mIUSIE2w5zKGO0OvqcUSstGw9SDple/EhWwrFlM/kNuyyS8MuexsJJUoF
MKK59yROhYqivoZRn1g56eQoEzEWRvhQTdTwbYK+rDWEWL5soA+MW3KD46gK
08fQCguQIY5LdzqTwOGmSNdcdyW3r7HKs+mpPCYo9fJvsCAXCa0cBr2ldKUg
aGl96T69dws0dQimNUzzgklfSjnPbWuGavL0SDIdqpmUMckqWTAjSbobHpFV
X9/tRI1Skk9L7e2cOOp4ZPnbJevTiWdYvAKdgwci5CFhbW/86TJyzxSNfjPS
6NMY1iEutUI15Q9cCsRg0jE4hlOis9I6+saM9kSxekC6hDnDtanc+6sgNOQ4
xF7lJWEjawF8qFLYvOx5PEkULfLe9743OsuJ5iCsMOmkmF97N+QuunG7yTPg
H/b0h43N2uq6MQw0EnaYRKmY0B5zSvCfoAogowS4hY/HjfItZMe6nTvkAIMM
+EpTqQT4FF22A9EFGqZfV0Urp6+Ri5Cm0g8/rgTVgl2Aph/wxBPsSvmTIif4
H0Cx8rLaEFYKgrBdpJweweqI5iEbVCG+o5f88iyXrqyQNemkd4uN8Kakkqhs
GdpxZGgqZunWKpih2381MrVt/MaEdE7L51RLxFY8lNzt2nNNPkxSdi1ZEVAT
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
ZxEuI2SOtYhooAuOggB4C+1EMqNXFQXIZ0Ay54w4qx+repmllh/7sJIBI8L+
Q5tFBUYZN669hQKtUQuc6KCWoyLFI+VRJV6fPDlGw5wah+WF6g1R0G+XSDAR
Q6p4mawo5cOPah6dljAzqet8FKPs11XCt7xC7U/8pc+Op1FPI2V5goxTLhme
ovfUpHGzy1pJT9kkrRAqJIl9CI4k6wSsWDHEUbCZInZ80IvIxIfhlN8lFnwE
Dv/TaCvIVRP62gs9EpeCcxAkvnQWbYW/IVDRJcvQl89uS7vLWsqahgIRgSxg
pstlkjJzuCx10N+u3F10Ec0P5CZehAVegSlQpa8+q+gwSM1qUuxaXZ5l4ams
fPtJiYXLTDaPkLDenK4tq/Cd2sOtUXWS9SSZugVsWe5df8xI7KTMio36KPPq
Nh7sfGGWHVVhfcbOeeeIYVhIvrp9vKA9ZrAe+pKDy25u4fI6qyFfj+W1ZfLC
TdM6rxbBlFmtMknbyPqritawXledpZJiGZv26MMUHokjiQvqAK+iYnSSL3zh
C7W5rGXgOsXskkAftVxw5DA8pua4/X+q6svwkzfffLPGTxiE4Kw4n17t3BL1
KNy4tyqpFShBO7O7adfqg6l+xD57C7DvmyYKTMSQxGiyVXyHa+gqiWV3ahbL
BA3Ci1GIx/ZU9VknRhNPq8RoMkk+ppWJgtcy11CmbLNRTKuctVENHglXFtoo
O0gTPyuu0fa9lzM83Puup0E8mSby1mE4eQKdWa3K08sY5psWiZa4XYcWQFwu
tEB+DJXb5RNlPcrNtBb2TBnK+SoqTHsdIQizM9O+dmIXmWCPMHfYqF2kUS9H
wk5X8xqlHMkUm0PvLpmHxOSJ6Q2JOpinfZ77SC8pun0Vm6Jb/3rGWg4DRg13
VnG5Jv+9PeZRLGQddCgW/VPLlIDzDqg8SxfgYFEV+r1nMVY+l0axnaNYxySH
uAvJyFwsIQlZm3unvou/u5AcMeiHUaxPfQWTAGuFpCBGPGA8j3ldDDAJ5tEO
OIjlqb9jh4NF0CTUPCiuYsY0wpqUelOn0FkVfMWlshx6w5Iac5KP3mSnXYGP
g7qFLFTG7yyiXpJnGKWT7u+87LsR+GNaW1XryoV+9D2MJkFHxFzfNR5xWTVg
+cwjl4seqvTMKPRUOLOz3JlXjFwmOKmSUUkIlwb81kE1735bQkUTCdpV+yTh
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
ocvLAmIv2/3RlkJYqcgVbF6F6XdfpZ/gb9t9M5AqD+wfMJdVdFLkUdUcMCiY
v/jrFTvns2g/Y6sAxi0AvwFyfVSY6zftnJfnjTIuMntYtZsfDF/CYT7v/ouj
QJ1TpKZLtKxHwiInyMSfsMvruE8rz/OyXU645PNG8VzWVqTsELRIUaJQCvxc
+0ACxZxEi2k1qZGqo0ml57b36pO6TUjc+4TEjn8Yhdx8xN6RldXVO7QsPDz2
/7IBS+xAUkdYGfS6ULmtjMMiaN5VIW+wfdeL8h8cQzYRr2OFBzqo4K75r8HN
Z2U9nrOOJuzkRbsM714nC5QFpXHwbun32Dm/cJ5bUkEk5++5x3Aj+AY7c0Jn
SttssL3PBuuUEbGRj9gdE8RkWaNW/sv/bWOSGDq+bU+Fi+ngF5Mvwivfsmrw
tk88SdjG8tzH7NwoOos7ZOBNeMhL1vBVyImChWbYDDLwzBIGHntaiOTg5UIO
BhsghVr7lB1Fk0QM5qPW7wTOdYJGKlaQ7NT/0C4zkMqfUF3JskK0jtHPdcki
LDrJz7gI9MczNTuliV8YuISdSrFt2cFS/CaFD5VuE3EaLf8kuuHP7cuz6LOF
TW/vuWLbhBXVR55rjkTV78VyZ0kQWvoRm/G0EOBNTtA6/4+1wG9D/8gece6V
amaDORW6VwiN2zZUmY4qwnECm+AR/JRliCWSGR665ed/u/yvNznmSV66smki
EnJQIt1JkHji/9y1RAaxF5Zzv607fuV5Xqr2au6zwPPl3M+9oR+2niTIehOc
wf9pX+HLZvzsqxlK0t7uT+ycq77e49hclfZ6GANpFdUP4h/98qDg+qfsjUk2
sCZ3Jh40uYkzWJPrQ2NsciXXo4q9k7q6qt4x8+991FGooAxGcFb/w+5HJYBb
A/yqGWIQ4HQMgdh3UovYpy+uyxjLMpEs/Ekt4k/b5SSn8pOuXYGf8rvWriiA
wlTu37E3JAqm2H4Uvnmqn+gj9onVTrlezBF42tQ0ZFgfD4XtHhcGpF2+5QWr
tzVZkU6NflLaU7qTX3nSnTxE8afsSpQsJuPkTLCq8AmcgGGADsuQao7gGWgG
BGTRN5RkU4i/aV/YllFJw/TE4GYW2Law8r3qEYlkyQX+u80O72ZhcUB4ho9R
dwLlKWEXJetGxJ9Ann7SPuILcUMd6JNSosp246acK/Hz/pkNBZyZuWWOUPJw
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
wvANPeH2WSviPhyPhn272/2l/wcvIP8X\
\>"],ExpressionUUID->"748d41ae-5572-4a4b-a691-5f93007102a4"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Testing It", "Section",
 CellChangeTimes->{{3.771585128481588*^9, 
  3.77158513232095*^9}},ExpressionUUID->"3654b1b4-9f66-446d-947e-\
86b46ad4345f"],

Cell["Original Image:", "Text",
 CellChangeTimes->{{3.7717668135459023`*^9, 
  3.771766817105447*^9}},ExpressionUUID->"c87c7328-8a45-446f-a4c1-\
7b7ef7f614de"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"staffs", "\[LeftDoubleBracket]", "8", 
  "\[RightDoubleBracket]"}]], "Input",
 CellChangeTimes->{{3.771661979613327*^9, 3.771661987510766*^9}, {
   3.7716993421953506`*^9, 3.7716993432121067`*^9}, 3.771766698685298*^9},
 CellLabel->"In[80]:=",ExpressionUUID->"1da5be04-d177-4f75-813e-1c30eb6718f6"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3Xd8FNX+/3GyIQkJJBJ6EZAOoShNSgABYwAJvXcQCIIGJZSIghQRQVAD
6BUUC0UUUEFA6UWKoiKoNPUrcEEpIlVISAhJfuc6v8fcvZtkMjs7mzO7+3r+
4cMMs7Ofc3b3zJl978xUfOypbrG2fPnyjSsg/tNtaELr+Pihk7oXFn/0HDNu
1MgxI4a3HzN+xMgR8U0e8xcLa/vly7cwJF++//x/JgAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyNnNmzev/sPAY9PS0n788celS5fO
nj07ISFh+vTp8+fP37lz599//22smEuXLm3YsOGVV16ZMmXKs88+O2fOnDVr
1pw9e9bY1gAAAAAAAAAAAAAAsLLbt28/99xzAQEB+f6Rmpqq84Hp6emfffZZ
//79w8LC8mVHbLNnz54HDhzQX8zevXvbt29vs9my3WCzZs0+/fRTQ60EAAAA
AAAAAAAAAMCKdu7cWbVqVftwXGdwv2rVqipVqqiPKlas2LBhwxYuXPjOO+/M
nz+/f//+ISEhyj/ZbLYJEyakp6fnus1JkyapkX2JEiXi4uLefPPNt99+e9y4
cRUqVFCfq3fv3ikpKS43HQAAAAAAAAAAAAAAma5cuTJ06FA/Pz+Hs9p1BvfR
0dHqQ+Li4pKTkx1WOH/+fOvWrdV1hg0bpr3BKVOmqCt37tzZ4TL7KSkpI0aM
UFfo0aOHU411E1HV6NGjmzZtKnry66+/ll2Oe/3555+ySwAAAAAAAAAAAAAA
7/HBBx+UKFEiX758fn5+jz32WNGiRQ0H9xqJ/O3bt++//351yx999FFOax45
ciR//vzKarVq1RIPzLpOenp6y5Yt1a1Z4Zr5vXv3tv/NQ69eva5cuSK7KLf4
8ssv77nnnlu3bskuBAAAAAAAAAAAAAC8wbBhw5SguVq1art27RJLypQpYyy4
L1CgwF9//aWx2tatW9UtV61aNafVRo8era62dOnSnFbbsmWLutojjzyip073
OXz4cL4sypYtu2PHDrmFuUPTpk1F67Zt2ya7EAAAAAAAAAAAAADwBs2aNQsM
DJw8ebJ6Yrvh4P7RRx/VXi0jI8P+dP6jR49mu1qVKlXUdS5cuJDT1lJSUkTl
ymrif+7evaunVDd58803swb3gs1mmzFjhsTCTHfx4kWlaXPnzpVdCwAAAAAA
AAAAAAB4g/HjxzsE6AaC+0GDBlWqVGnOnDm5rml/p/tVq1Zlu05wcLCyQlBQ
kPbWypcvr27t4sWLekp1kxUrVmQb3CueeOKJjIwMieWZ6OOPP1YaFRcXJ7sW
AAAAAAAAAAAAAPBOBoJ7/bp27apu/PXXX8+6Qnp6us1mU1YoVKiQ9tYqV65s
keB+586dGsG9MGrUKO/I7uPj45UW9ezZU3YtAAAAAAAAAAAAAOCd3Brct23b
Vt348uXLtQvw8/O7detWTpvKyMgICwtT1rznnnvkXir/l19+0Q7uhZkzZ0qs
0CzqK5jrnREAAAAAAAAAAAAAAMa4NbivVq2auvGff/4523X69u2rrrN9+/ac
NnXkyBF1tX79+plbp7Nu3bqVa3Bvs9k2bdokt07X1apVS2nOww8/LLsWAAAA
AAAAAAAAAPBO7gvuL126pF4GPzIyMqfVvv76az8/P2W1bt265bTaE088oawT
HBx84sQJE+s0pnDhwrlm98WKFTtz5ozsSl0SGhqqtCU6Olp2LQAAAAAAAAAA
AADgndwX3L/11lvqltetW6ex5uTJk9U1Fy9enHWF9evX+/v7i38tUKDAp59+
amKRhqmnomvr3Lmz7EqNu3btmtoQLpUPAAAAAAAAAAAAAG7ipuA+PT29bt26
ymYbN24s/tRef8GCBYUKFcr3z53u+/btu3379vPnz1+8eHHv3r0jR47Mnz+/
WN62bdsjR46YVaGL2rVrpye4F7Zs2SK7WIOOHz+utiImJkZ2OQAAAAAAAAAA
AADgndwU3C9YsEDZZqFChX799Vc9D/nzzz9ffvnlyMjIrNl3w4YNP/7444yM
DLPKc93IkSN1BvcRERFpaWmy6zXiwIEDaiu6dOkiuxwAAAAAAAAAAAAA8E7u
CO5Pnz6tnD4vvP3223oecv369Xnz5jVu3DgwMFA8KiAgoHTp0mXLlg0KClLL
q1y5stharifv542XXnpJZ3AvrFixQna9Rmzbtk1tQvfu3WWXAwAAAAAAAAAA
AADeyfTg/vbt2+pZ83FxcXoesn79+uLFiysPqVOnzscff3zr1i3ln1JSUjZt
2tSkSRO1yA4dOqj/KtEHH3ygP7hv3ry57HqN+OSTT9Qm9OrVS3Y5AAAAAAAA
AAAAAOCdzA3u79692717d2Vrffv21XN2/Jo1a/z9/ZWHREdHJyUlZV0nLS1N
bE2ts2fPni7W6br9+/frD+6FI0eOyC7ZaUuXLlXrF/0vuxwAAAAAAAAAAAAA
8E7mBvejR49WNtW2bVs9W7tw4YJ6Uf0iRYpcvnw5pzWTk5MrVqyolvr555+7
WKqL/vjjD6eCe50XH7CUhQsXqvU/9thjsssBAAAAAAAAAAAAAO9kYnA/adIk
ZTvt27dPTk7W85Bnn31Wffb4+HjtlefNm6eu3LFjR1dKdV16enpgYKD+4L5k
yZIZGRlya9Y2evToF1980X6J+FOt/8knn5RVGAAAAAAAAAAAAAB4N7OC+4SE
BGUjjz76aEpKis5H1atXT332DRs2aK/8/fffqyuHhYUZLtUslSpV0h/cCz/+
+KPsknP0xx9/+Pn5lSxZ0n7hM888oxY/ceJEWbUBAAAAAAAAAAAAgHczJbhX
T5xv167d7du39T8wLCxMffZc7wJ/+fJl+xz85s2bxqo1S5s2bZwK7ufNmye3
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
H6JmUXlSUpKsLgUAAIAVqBPd+++/X/x5+fJlf3//rLPKrVu3yq40c/Lkya5M
jCMiIn799VdjT71//351O+vWrTO3XQAAAAC8EsE9AN909uzZzz//fO7cucOG
DWvSpEnhwoW1s0vLstlslSpV6tChw4QJE955550DBw5cv35dTw8Q3LtbTsG9
g5SUlO+//168dmPGjHnooYcc3ooWfB/6+/uLpvXr12/OnDlbtmy5cuVKnnUp
AAAArEAcfSgzw9DQUPHnBx98kHXSGBwcbIUffLZv397YpFccZw0fPvzvv/82
/NQffvihurX169eb2CgAAAAA3orgHoAP2rFjhwXzUD0CAgIiIiJ69OgxefLk
lStXHjp0KDk52VgnENy7m87gPqvTp0+vW7du2rRpXbt2tf6l9QsWLHj16lU3
9SEAAAAsKC4uTp0N/vnnn/379886S2zfvr3sMv9DnZPrZ7PZHn300cOHD7v4
1HPmzFG3+cUXX5jSHAAAAADejeAegA96//33nY4nZQgODq5fv37//v1ffPHF
Tz755MSJE3fu3DGrEwju3c1wcO/g+vXre/bsWbhw4fDhwxs2bFigQAH7N4kV
Yv1s78UAAAAAb/XKK6+oU8ENGzaEhYVlnSLOnz9fdpn/oR716HfmzBlTnnrM
mDHqNjdv3mzKNgEAAAB4N4J7AD7ImsF9WFiYcifx2bNnr169+ujRo+np6e7r
BIJ7dzMruHcgXq+TJ0+uX79+6tSpMTExpUuXlvee/f8I7gEAAHzKp59+qk4F
a9Soke0U0fCt4U2UmppqYHJr1rMPGjRI3eb27dvN2iwAAAAAL0ZwD8AHWSG4
Dw8Pj4yMjI2NnT179vr160+ePJmRkZGXnUBw725uCu6zunr16t69exMTEwcO
HNigQYPAwMA8fjMT3AMAAPiUw4cPa88PK1asKLvG/7h8+bKe2WydOnU+/vjj
0NBQ5U+znr1r167qU+zatcuszQIAAADwYgT3AHyQu4P7rFcvL126dFRUVGxs
bGJi4rZt2y5evCi7Dwju3S7PgnsHd+7cOXr06NKlS8eMGSPedUWLFnXruz0f
wT0AAICPuX79uvb88Mknn5Rd43+cPn1au86QkJCpU6empqaKldU7Upn17GIq
rj7Rnj17zNosAAAAAC9GcA/AB82ZM8eFlDIX/v7+lSpViomJSUhIWLx48d69
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
e4sguM8kuHc/gnspxPtZvdipvfDw8L///lt2db7l4MGDgYGBhnf6Wfn5+V28
eFF2s9zizJkzJl4qTeFNtxVYt26dub9qCAsLS0tLk90sOIfgHnCwZMmSWDeL
iYnRGEuLFCki1unQoYO6pECBAu4uyVn9+vW79957GzZs2LVrV2VJmzZt1IKH
Dx+uLFRnLBEREdobHDx4sNigi7uh6Ohot7YaAAAAVtO8eXMX55BZderUSXaz
rK5u3bpqd5UsWVJ2OXqpwc2AAQNk1wKfoCbXBQsWdHYgqlmzpuzyXVW6dGml
Ld26dZNdi09r1aqV8kLUqlVLdi3SqF9PjRgxQnYtuahXr546DhQrVkx2OXqp
MVy/fv1k1+IWRYsWVRrYp08f2bX8l8YtsBs0aCC7Oh8yfPhw8Wl1dkevTQkI
vFKFChXM7augoCA1jPB0Q4YMCQkJMbd/RIfLbpZkYtxu27Zt69at27RpI/5H
HOwPGjRIdlG5sL+Pdj7v+mkKYEBSUpK5v2gCAAAAAAAAAAAAAKesWrVKdnAK
SPbKK6/0dKfOnTv7+/vn9BkMDAzs1q2bspr98i5duri1KtepPwkWTVAXqr+C
qFGjhvbDXfwtWdGiRUWPubmJAAAAsJYHHnjAlTlktpo2bSq7WR6gevXq9lNx
2eXoVahQIaXmjh07yq7Fg0VGRlaqVKlZs2ayC/EADRs2VN5yVatWFWOLs6cJ
tGzZUnYLXFK8eHGlIVFRUbJr8WmNGjVSXogqVarIrkWagIAApRN69Oghu5Zc
1KxZUx0EwsPDZZejV1hYmFJzhw4dZNfiFoULF1Ya2L59e9m1/FeLFi00diJB
QUGPPPKI7Bp9gis3fs1WSEiIEhB4n5IlS5rbV/nz5/eaib140dW9lVmKFCki
u1kStGnTRp2F5qpMmTIW3HM5XLL766+/lp2aAl5u3rx5GgPFM888o65ZoEAB
dfnJkycl1qzHnDlzlFIrVKigLlS/l5g2bZrGY8+fP+/E/uZ/2Wy2J554IjU1
1e0tBAAAgMWooZhZxDG77DZ5Bu5x75vu3r375JNPKn346KOPyi7HA6j3uH/6
6afFnwsWLHBqRBo1apTsFriEe9xbBPe4z+Qe9+7HPe6l2L17t/Z+RLzzP/ro
I9llerlvvvnGqZ17rvz8/DZs2CC7WW4hZuAa5zMa8/rrr8tulmnEp9XczgkK
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
DChYsKAnXt918eLFrowq06ZNk90CD3D79u1BgwYZ7mQ/P7+vvvpKdiOsJT09
XezRnDrR3sGyZctkN8K4X3/9Nddb/mkQx/spKSmyG5EXCO4lIrj3Ed26dTM8
FjnYsmWL7NZI4FRwn/nP3Xay7T2HW8h5CoJ7iyC4zyS4dz+Ce+u4cOFCu3bt
dO6dQ0NDuSGjiwju9SO410Zwr1O5cuV0DnF6iAHzzp07stvkiOAecLcaNWrk
NCxMnDhR+7H2Z+Na+eJ46i3phe3bt6vLb9++/cMPPxjY4Pnz55WtvfDCCxcv
Xnz66adzPYcxLi7OvAbJkZaWlpCQYGQHY6dkyZLp6emym4Jc7Nmzp0SJEi6+
1mvWrJHdDg/z008/qXNgwzzr4h6mjCplypTx9DOX3e3cuXONGzd2sZ8fe+wx
2e2wkJs3bxo72dxe8+bNZbfDoM2bN4eHh7vY/I0bN8puR14guJeI4N5HNGvW
zMXhSNG7d2/ZTZHD2eBeaNu2bdYOjIqKcmudbkJwbxEE95kE9+5HcG8p6enp
7733Xq4X87TZbBs2bJBdrMcjuNeP4F4bwb0eYj/uyikeDtq0aaN9Xq0sBPeA
W4nPlMbs6NSpU9oPf+qpp9T1X3nllbyp2Rj1dE5jSb2Dn3/+WdlaoUKFNG40
YG/UqFGuP69EaWlpZl3m5fDhw7JbAy0bN2505fRn1fDhw2U3xZN8//33xi64
7aB169aym6LXnTt3XI8+FT/99JPs1ljX2bNnK1as6Honly1bVnZTrOLvv/9u
0qSJ610q5g83btyQ3RqnffLJJ/nz53e9+V7wg0Y9CO4lIrj3Efb3bjMsNDTU
wEXYvIOB4F7MWrN+GxkREeHWOt2E4N4iCO4zCe7dj+DeglJSUhYsWFCqVKmc
dtCedWKCZRHc60dwr43gXo+kpCQDxyPZGjx4cGpqquwGZY/gHnArcViU08gQ
HR2d68PtL7MfHx+fBwUbpt5ByZTrSL/77rvOjrSxsbGuP68s6enp/fv3d7bJ
Ofnss89kNwg52rZtW4ECBUx5ofWMIVD89NNPRYsWNaXbK1euLLs1uty9e7df
v36mNDmfz5y6a4A4mHLleub2/Pz8LHhtrrwnDsFatWplSpcKx48fl90g52ze
vDnXSwzp1LlzZ9mtyQsE9xIR3PsI8eK6PiK9+uqrstshjYHgPvN/r7ynuO++
+9xXpPsQ3FsEwX0mwb37Edxb1s2bN6dMmZJ17zx06FDZpXkJgnv9CO61Edzr
cfv2bcNHJSo/P7+pU6da+fqiBPeA+6SmpmpERXouc71kyRJ1/W7duuW6fnp6
upgkTJ8+vWPHjpUrVw4JCREPFIcnYtjv3Lnz7Nmz3Te9rFatmniu/Pnzu/g7
pevXr0+ePFmp3CmeG9yLfYSYLTvbXg1Lly6V3SZkb/fu3Qbe2zl58MEHZTfI
M5w4caJkyZJmdbsY1WU3KHdiXzB48GCzmiysWLFCdpus6NKlSxERESb28+XL
l2W3STJx/KV+6WGKr776SnabnLB161azftklPPTQQ7IblBcI7iUiuPcRrh+n
1KpVy5d/mWYsuP/ll19sNpt9N4rZrPuKdB+Ce4sguM8kuHc/gnsri4uLc9g7
t2jRIiUlRXZdXoLgXj+Ce20E93q4HtyLefWnn34qux25ILgH3Ef9LjGrEiVK
6Am4N2zYoD6kXr16GmueOXNm0qRJZcuW1R6XxOH/o48+evToUfNa+f/16tVL
bL9KlSqGt3Dnzp1XX33V8Fmxjz/+uInNyUsvvviisSbnZP369bLbhGycOnXK
9XsW22vbtq3sNnmAa9euVa5c2cRud2WUyzMzZswwscnC559/LrtNlpOWlqZ+
F20KsYMW25TdLMmGDBliYpfm86gz7n/55ZewsDAT296lSxfZbcoLBPcSEdz7
iOXLl7syFvn5+X355ZeyGyGTseBeeOSRR+x7skiRIm6q0K0I7i2C4D6T4N79
CO4ta/78+Q57ZzEd4kfjJiK414/gXhvBvR4uBvcDBw70iAGQ4B5wn86dO+c0
REyYMEHPFsRHUn1I4cKFs11HjOTDhw8PCAjQP0AFBQWZfrlC5eIAhg8DP//8
8+rVqzs/1v6Xhx6B7tu3z9/f35WGZ+WtR0ke7e7duw8++KC5L7TOYcTH9ezZ
09xu13PxE7m+/PJL00cVU+6B4mUmT55sbifXqlVLdpskW7ZsmbldWrBgQU85
x1PUqX4TaJbnn39edrPyAsG9RAT3PiIpKcmVKxf1799fdgskMxzcr1y50r4n
Ce7hCoL7TIJ79yO4tyYxW3b4fqBw4cI///yz7Lq8CsG9fgT32gju9TAc3Ner
V2/Tpk2yy9eL4B5wMG7cuIYNGzZw2QMPPODn55fTQFG7dm09G6lTp479o8Q2
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
PHjQqU3duXPH9dMndYqKinJTh+hppv0vQkNCQnr27Kle8LlPnz7KasuXL1fX
8Y6jftFMYy9WuXLlNm7cKLt86GU4uPf393/qqac8N42Sy3Bw7+fn17dv30uX
LslugRHdu3c31uoKFSp44jXGZcnp53m5at26NXFGturVq2esS+vUqePpBy+G
g/uAgIAJEyYkJyfLboFkBPcS5WVwv2/fPnN/zFykSBG3FuxTUlNTy5Qpo3Rs
586dZZdjOa4E90OGDFEea7PZPPSggODeIjw3uF+/fr04QDNx/K9Ro4bsNuUu
L4N7MZcODAw0sYdDQ0O99UpQ1g/uFy1a5OwZ91WrVr169arswj0ewb1+BPfa
CO71ILgHYEBOl/CqWbOms5syfGciAypWrOiO3tBp0KBBpUuXHjp06Jo1a5Rv
JJo3b64UNnz4cGWdZcuWqdV66OVwHajBvb+/v86XSey+xTw8JSVFdu1wghrc
h4SE6HyhxYHziBEjLHsw6BHU4F7/ydE2m61Hjx6HDh2SXbtxanCv/ybslStX
Xrx4MaOKUwwE923atNm+fbvswq3LQHD/wAMPrF692gu+FVSDe/37CDGsjRo1
6vTp07JrtwSCe4nyLLi/fft2tWrVnB0ltHXp0sV9Bfua9957T+1YcTQnuxzL
cSW4b9iwofLYqlWruqO2PEBwbxEeGtxfu3atVKlS5o7/sbGxspuVuzwL7lNT
U2vVqmVuD7dv3959Bctl/eBecfPmzRMnTuzevXv58uWzZ8+Oi4vr3Llz7dq1
s/4G5p577jl+/Ljser0Bwb1+BPfaCO71ILgHYEDFihWznbvOnDnTqe0cPnzY
8HklNputVatWL7zwwpYtW44cOSKOkVesWNGlSxeNgDgsLMxNHaJHenq6w13G
1Pu/q99vvPPOO2q13nHGohrcL1iwoEOHDhpBW6FChbp27frBBx9wl3NPpAb3
0dHRU6dOLVq0aE4vtDiMqlev3pQpU37//XfZVXs8NbivXr16YmJiuXLlNMbM
atWqxcfHi2Nb2VW7Sg3uxajy6KOP5jqqfPjhh4wqBqjBvRiWtb/puvfee2Nj
Y7/++mvZJVudGty/++67kZGRGl0qhtD+/ft/8cUX1r85qU5qcN+5c+fnnnsu
PDw8p7aLfUTDhg2nTZt2/vx52VVbCMG9RHkW3L/00ksaw4Ix4p3jvoJ9ihiN
a9eurXbsuXPnZFdkOYaDe3GMrJ44KeZ4birP3QjuLcJDg/uxY8eaPv7v3btX
drNyl2fB/auvvmp6D69cudJ9BcvlKcF9Tv78889ly5aFhYUprbDZbFzM0ywE
9/oR3GsjuNeD4B6As3755ZdsJ65+fn5OnRhl+CL55cqVe/7553N6rlOnTqlz
CQdiwmap78Br1KihFDZlyhRlyaJFi9RqvSPWVIN75QrVly5d+vDDD5977rmh
Q4f2/EdsbOxLL720detWTob1aGpw/+ijj4o/09LSdu/ePW/evNGjR/fu3Vu8
0AMHDkxISHj//ffFHll2sd5DDe6VayGK8e3bb79dsGBBXFxc3759Rbf3798/
Pj5+8eLF3vFDIIUa3G/evDnznwPzlStXilFlyJAhyqgycuRIZVRJTU2VXawH
U4N75c9jx46JPdTYsWMHDBggOrlPnz7ibbZw4UIPvRetFGpw/+uvv4o///3v
f7/33nsTJ04cNGiQ8tZ94oknxLC5b98+77v9ohrc9+jRI/OfGeDOnTvnzp0r
9hG9evVS9hHPPPPM0qVLL1y4ILtYKyK4lyhvgvukpKRixYoZOCzSUKtWLX63
ZhZxIGPft/xWLSvDwf3JkyfVjnX2LADrILi3CE8M7i9duqT/ekQ6tWjRQnaz
dMmb4D4lJcX0CxpUq1bNi480PT24F7Zu3aq+WLNmzZJdjvcguNeP4F4bwb0e
BPcAnLVgwYJs567Nmzd3ajtTp051dnpcu3bttWvX5nrNWLHCyJEjs93CzZs3
XWi6ySpUqKBUNWfOHGXJ66+/rpbqobefduAQ3MNbOQT3yBsOwb2PcAju4SYO
wT1c5xDc+xSH4B7OIriXKG+C+48++sjZwyJtNptt586dbqrWB0VFRdl3L/cg
yMpwcP/pp5+qHeu5b1qCe4vwxOA+p6/XDAsMDPSUH9bmTXC/du1ac3vYz8/P
u49DPT24T0lJqV69utIEsb+21Nlbno7gXj+Ce20E93oQ3ANwVrdu3bKdvi5a
tEj/Rg4dOuTURfLFkL58+XL9t3m9c+eOej67PUtdebV48eJKVQsXLlSWvPba
a2qpycnJcsszBcG9jyC4l4LgXnYt3ozg3nQE9/kI7o0iuJcob4L7gQMH6j8s
0uO5555zU6k+SAzaWW+Yy6GNA8PB/ejRo5UHBgQEJP0/9u47zobr/x/4NmWX
1VuwglWCqNFCRAlRsmIJ0T8kSpBoEWV1Ep3oPYgukiBqELF6iURdEZ3o3WJl
q9/7Y36Z7/mcuXfuuXPn3nPL6/nH55HPmjNzztwp58xryrNnTqqesyG4dxOe
GNzXrVvX3OP/1KlTZbdJlGuC+44dO5q7hqlj4KSquglPD+7VZ8Ree+21x48f
y66OV0FwLw7BvT4E9yIQ3AOAvXLmzKntuwYFBd27d09wDvHx8aVKlRLsFQcE
BPTr18/Ae6jq1KmjndutW7fsnY/zBAcHK7VasGCB8pfx48crfwkMDJRbN7Mg
uPcRCO6lQHAvuy7eDMG96RDc+yG4NwrBvUSuCe5LlCghODIS0bx5c/G7ncGm
vn37alcydkaO4eC+QIECSsHKlSs7qW4ugODeTXhicK8+zWEKD2r4C1cF9+XK
lTNxDTdu3Nj7vmnF8ejg/ty5c2nTpqXKZ86c2Zs+F+gmENyLQ3CvD8G9CAT3
AGCXs2fPWuy+1q5dW3wmI0aMEOwVv/LKKzt27DBW1fLly2tn6D4fUk9ISFBr
tWLFCuWPo0aNUv6SMWNGudUzC4J7H4HgXgoE97Lr4s0Q3JsOwb0fgnujENxL
5Jrg3sTghvreXvzhXdejlWnx1xkyZIjsqrkXY8H96dOn1VU6fPhw51XP2RDc
uwmPC+6TkpICAgLMOv536dLFs+7ack1wnzdvXrPWcGRk5PPnz51UT/fh0cG9
8gAX7VabNm2SXRcvhOBeHIJ7fQjuRSC4BwC7LFq0yGIPdubMmYJzuHz5svqk
ub6sWbM6coek9hpLSEiI4bmZ7t69e2rF1q1bp/xx+PDhyl/y5Mkjt3pmQXDv
IxDcS4HgXnZdvBmCe9MhuPdDcG8UgnuJXBPc586dW2RwZFOPHj08K7Vxf6tW
rdKuZzpFUh9MdtXci7HgfuLEiepa9ejLdAju3YTHBfcpKSlp0qRx/ODv7+8/
bNgw2a2xm2uCe/W1Hg7ynTOs5wb369atU2r+1Vdfya6Ld0JwLw7BvT4E9yIQ
3AOAXbp3767twQYEBFy/fl1wDk2bNhXsGA8ePNhwPS9cuKCdIZ0XDM/QdGwN
t27dqvyRmqz8pWjRonKrZxYE9z4Cwb0UCO5l18WbIbg3HYJ7PwT3RiG4l8g1
wX3FihUFx0fWBAUFzZ0710nV82UWPz89fvx42fVyO8aC+7feeksplTNnTo9O
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
o0fTeZk2bAcXCgAAAE7ijOA+Njb2r7/+ouEADU6pK3L9+nXTLzg7YxHuFtw/
ePCAxgU0tqLuFo0caahlymxv3bpFI+tevXq1aNGiTp06zZo1o/9esGDBlStX
2MlouKozNKCKmVKZy5cv0/Bn+0v0H/ZemNUXHx9/7dq1o0ePKj3hc+fOPXny
xMT5c1wQ3FOnetu2bcrFQPoJTpw4Ye8VjGfPnl28eFG5BkIrnDaq58+fm1tJ
FywCAMCzUI+ls3Xs1TY6R/fs2TNLlixc6pQ+ffomTZrQqdnEZdlEp5iRI0fm
yJHDz4o8efJMmjRJ7YBlz57d2pRZs2a1thSd4H7v3r1vvfWWxRkWKFBg0aJF
Nq+l06lZbfv777/PziFz5sw6K0o8gKD6i1yJpc6qtTlQb1ad7NKlS9Ymo59D
fxE2+2a0utasWfPBBx/Qz6FdpXnz5u3QocOPP/5oV49aJLifOXOmzqqmbV6d
krZw6p2mS5fO4ib0zjvv6Hd7nNFAa6jzbK1F1M22VmrJkiXWSn311VfWSk2e
PFnnd1fXyb179/r27UsbtsVdpnLlyrR0xxuuRRstNZkOULRX+vv7axddtGjR
jz76iMYyBmYuPbinDUZn6z127Jg65eHDhyMjI1OlSsUtmo6TvXv3vn37tonL
solGQK1ateKSaFaFChW2bNmi1tzaZKRt27bWlmItuE9OTp43b96rr76qnRtt
ITVq1KDjhs0mdO/eXW172bJl2ZmULl3a2lqy650tu3btYssGBgayS2nTpo21
pXz//fci83/69CntdM2bN7e4VxYpUoQ2DGP7BYc90zVq1IhdiuEznU5wv2/f
vmrVqlncWgRPzTrOnz8/cODA119/PSAggJt5mjRp6Cwwfvx4Z7zaheq8ceNG
+rFoh9W2Kzg4uHz58j169Ni8eTMNda3NZOvWrTprmz3Zse7evatTKiYmxtri
aPuxVqpPnz7qZImJibNmzSpRogTXKNrgK1asuHTpUtphHVl1Xoy2igMHDgwf
Prx69eoW92LaJqtUqTJo0CDuSppFOgdk1uzZs7VlqaOoX6pp06ZOWAFgPhqm
0dE1IiKCOqXa35GOe3T069KlC52Xjc3fWnBPu/k333yTP39+i9vP22+/TQd2
81oJAAAABu3du5ft1VPHgD1lV6pUyWLnX+dme9XRo0dpiF2oUCFtTyB9+vQN
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
3lqF4F5hOLg/duwYt/4Fv/mi0r6x3PBH05wU3AveUyce3H/99dd+pqLzaUJC
grHG0tGsUaNG+pcp1BYJJukvpAb31McQrCSCe4sWLVrErRkSHh7eoUOHCRMm
zJs3b7UG7fXsxILBPalYsSJbsFWrVtppqlSpovyriZ0xcKXff/89W7Zs3BaV
JUuWDz/88Msvv5w7d+7KlSu5LYo2IXZiBPcAAAA+yEBwz53WHVegQAHXL0LL
y4J77rlm8RemKUwP7hU7d+6sUKGCzd+LBkrNmzc/fvy4zqy0CfKAAQPsqsyJ
Eye4Odj1uXaOucG9vcUVs2bNsrlu7fX06VMXLwIAwLu5Z3CvPbx//fXXgi1S
ILhXcY8hc+/zUe88rFy5Mvt37kVAwcHBT548YSd44403lH+yGZDlyZOHnVWa
NGnmOsbYl+gtMiW4d6sGenRwbywFePDgAfcTpE6d+ssvv+S2WA7X8UZwb9ay
aPzCtdeu3QrBvcLE4N7eN6clJCRwcyhUqJD9Lfgvzw3u6bzp4GHcwd08Jiam
T58+r7zyip8tkZGRd+7csTlDBPceijZj7i4O6rds2rSJziw6pbiYVTy4X7Bg
AVuQ+jN3795lJ1BPnVQre1/7AO7gypUrmTJlYn/ldOnSTZs27fnz5zqltm3b
xhZBcA8AAOCDDAT33BdwSO/evR0ZZH377beuX4SWlwX3NN5npwwICNAfa3Cc
FNwroqOj27VrFxoa6qeLBpI0fLZ28/x3333HTT9w4EC7qnHy5EluDtTRNdyo
uW4Z3Ddv3tyRHYc8e/bMxYsAAPBu7hnca9+hbe91m3Tp0rHFfTm4X7NmDbus
/Pnzs30w9cn6iRMnsqUSExO553FWr16t/uvFixeVK8np06fXv9ZHSpUqxc6H
OlTmNtARpgT3btVAY8E992Fxz3pVPveZchpl0DZvsxSCe4XpwX3btm259v7x
xx+iTXr5Rmi2LIJ7hSOvyq9Xr55di3748CE3B+62LnGeEtx/++23XJMnT55s
rKrmSk5O3rlzZ9euXbl7ETmFChX6+++/9WdlLLivVq0aWwrBvYvFxsZyr/Sh
LpzI0cBwcP/06dOMGTOyZSdMmMBOoIaq4tcnwa28//777O+bJk0aix9E4CC4
BwAAAFNelb9hwwZza+WCRWh5WXBfvnx5bh3avMzLmjNnDlvW3OBeERcX9+OP
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
aNrvlP82cC0U3AT3PpawsDDBgsuWLWMLIrgHAADwQcaC+169erGlgoODnzx5
YtdyixYtqha3+MEvFyyC42XBPWnUqBG3DmNjY0WWwl2B9HMsuI+Pj1cGxXY9
mt2hQwe2ApGRkdpptG8VELxk9OLlm+gyZcrElm3cuLF49bTcJLjnPrRKjh8/
btccPvh/7d15WFXFGwfwK1JYLj2gmEqlQVqaZo+pWVqPWZaWS26Roa1miShB
KoFPqJimqGmaqIiKgsoSomhuYSou5ZJLaG4ZokBhbolYwkV+73PP85tnmnPu
uXMvl3uv8P380WOcM+fMWe6cmfPOmRkwgKVNSEhwyi4AAKowlw3ck9atW/Pr
+/j4yIz3K0QKFK4WuD948CCfxNfXV71OWVkZ61e2f/9+mZzoEL6feuKJJ8aM
GaP8e+LEieZSFRcX165dm08YHx+vRNY8PDz+/vtvyb3PmzeP3wilvXbtmnzm
IyMjWdqQkBD5hBbZJXBf7koHKERMDBIf227cuFFIYnPgvm7dujdv3pRJKJwx
g63zC6i/Di4oKJBJOHv2bD4VAvd23FdOTo4Qf5eMNwkxcYNLBu6joqL4JEFB
Qep1Ll68yEpv2z5XFxqGmhs5cOAA24vQP6dHjx588s6dO0vulwoQIehPTS0b
8q9gn+gqNL/upB+IxSedAwL3N27cECKVU6ZMkdmLorCwkPW1kJxERsA+n9+1
a5dkku3bt/MZpse6zspDhw7lV/b399ffOF0XdR9IBO4dTOgTKP9KUOinYW3g
ngQHB/NbeOihh+rUqaP8Ozk52dqtgYsQBimiyqrkRCphYWF8QgTuAQAAqiHb
AvfUknV3d+cTWlWZ5FuU5obyc8AuBFUvcC8Mr2SQbg4Ln6IbKha4//fff5WN
1KhRQ36+P7oV+Qx88MEH6nWMRuMjjzzCr0YVY8ntq2fjlW+za3KRwD2dYWG0
hM8//1w++ZUrV1i84O6777569apTdgEAUIW5cuA+LS1NeDhOmDBBP0lJSUn7
9u0NKq4WuKeKFp+kfv366nXy8/PZCn369JHJiQ563gkxVhakyM7O1kk4cOBA
zVRWfVReXFwsTG0zefJkybRFRUUsbc2aNW2OrWuyV+DepQ5QCD/pv/MsKytT
R2dsDtyTb775xmKq0tJSIR7RvHlz28YZSElJETKwbNkymYTCkOwI3Nt3X0Kf
Z7qxLc6pfebMmXvuuUc4Vy4YuBe6fAwdOlS9Dt+veMGCBZKHwBNmJNfs9t+y
ZUtlKbVlhEXbtm0TzuSePXtk9it8rdC4ceOK3K6nT5/mt0ZFk3odflLC3r17
a27HAYH7ctW04D4+PvLx94iICJZwxIgRkql4LHAvH6XKyMjgM9y3b1+dlYUJ
FOiho9/JKikpyaCCwL2D8d8XGKRfVuTm5gqvLm0I3P/666/qG8BgGt7QjtMV
gYPNnTtXuKCbNm2ymIoqivxnaAYE7gEAAKol2wL35aaxxfiEHTt2lH/588Yb
b7CEM2fOdOIueFUvcE/1PTa2qsLT0/PcuXP6u9i6datBxS6Be0InWTKV0JA3
1+UgJiaGX61WrVqSg90Js009++yzssdjhosE7gnVtPlNUVtP/gM9/pMWnV4Q
DtgFAEBV5cqBezJo0CA+iZub2+rVq82tbDQa/f39DabP+u677z4+oasF7ouK
ivgvUu+66y71OmwoexIcHCyTE31CYEthcQ50OuHqVAbp8Ki57dSpUyc3N1cm
4ccff8xSyY8TK8legftyVzpA9SxCf/31l7mVlcaXn58fn6QigXtvb++LFy/q
p4qOjhZSSb7OVbt69aqQh1atWlmcbWrDhg1CBhC4t+++6Lr4+PjwSRo1aqQz
8Xd+fr7S/1mYttsFA/epqal8Es1oKT+Ghnx7k/fMM8/we9m5c6d6Hdb3uHXr
1uqlAQEB/Baee+45ekTq7/S3337j+07UqFEjPT3dhswzN27c4J907u7u6nV+
+ukntgIVR5rbcUzgnp7LQnAqIiJCZkfZ2dkeHh5KEvqHZH1DwO58qsBIFhGh
oaF8bvUfyvv37zf8l87dfvz48fr169P1Et4RIXDvYEuWLBGumkwIXhhdQTKV
mvCuTxEWFmbDpsBF0FNYuKB0lS2+1lYPcYnAPQAAQDVkc+D+woUL1Ljg0y5d
ulQm4caNG9lwcPfff39xcbETd8GreoH7ctP3ZcKXFNREvXz5srn1Dx8+7Onp
aVC9w7FX4F6/XzpP+Crn2LFjmquVlJQIr1lkYsHCXADU3peZTEGf6wTub968
KYx1HBoaKpPw5MmT9957r5LE3d39t99+c+IuAACqKhcP3BcWFgqj2VCdKigo
SOgXd/v27aysrKeeespgCu5v3rzZ29ubT+VqgXvSvHlzPlVOTo6wAj+9bFpa
msw29cXGxhpUxo8fr5/q+vXrwmzLBlNPgytXrlibAWHS1ccee8xihHfWrFls
fapFWzXRsww7Bu7LXeYA1UNV0E/jxIkTwmq0L6WjC9U8hZkUbA7cKzX29u3b
68wUkJGRIURnKjigxIgRI4Tjff/994WRw3nZ2dlCm86AwH0l7CszM5NFMxX1
6tVbuHCh0Bamajy1qZUSu3HjxsLEDS4YuBcCH5rztnfr1k1ZSj8QybnhBHx/
HrJkyRJhBWotsqWBgYHqLdB+haeMfgcw+s3SsfDra84CYK0WLVrw21SP+c+X
gebCOo4J3JMjR47wzzuqb1jsonbu3LlmzZqxJDNmzJDJmxr/ukPzggpOnTrF
T2Tj4+Nj8U6jRxJ/QqgcphMrdOegknPlypXKIDBUtFJ9hk+CwL2DUfH4wAMP
8OfE3d19/fr1OkmEIUEUtgXu6U4QtkMVbLwwudMJfTvJZ599prP+rl272Bsz
BoF7AACAasjmwD2hGiw/Ixu1uSxOlXjw4EE2fxylXbNmjdN3wVTJwH256aWx
MHEeNTPT0tKET2OuXr365ZdfKlXEdu3aCZ2N7RW4N8h9L0ZXjU/y4osv6qyc
k5MjTEoYExOjs/7vv/8uBBfmzp1r7UGpuU7gvtzUaZ9/sUA3wMKFC/WT5OXl
8ZEai+PNOmAXAABVRnR09LT/6927N1/gP/3002yR8P6ZnvJsET0X+FQPP/zw
NM6FCxeUJFSdGM559tln+VQtW7bkl5qb3Pb8+fPCqNoG08vDTp06DR48eNiw
YXQI/IvNqVOnUir5wL3Dzobg008/5VNFRUXxS//4448mTZooizw9PW0L/Qgu
XrwovBUnhw4dspiwT58+QqpXXnnFhgzcvHmTxbMUVP/MyMjQXLmgoID/aszD
wyMzM9OGnQqoZs5fHaHORheFXyo5TJZLHWC5qR+p0KHRYHrb36VLF2pqRUZG
0n+pNsuG0qWfwO7du/mVqXLOnwed9o4QuKftKH106cDV1fs///xz7Nixwuzn
9HvJz8+vyPEWFhY2btxYON6XXnrp6NGjwprUCqBqtjJRrxCQatCgAX/IrJ8D
tVzYH6ltIuzliy++YEuXL1/OdmRbKouolcFnUgiJUkHEFglNztmzZ7NFVKzx
qXr27MkWffXVVywJXT6+fBaCR1QC8EvNjbm9YcMGIXZvMA1G0b1793dM6B+s
Ak//2LNnj/BdsE7g3pFnQ8AHuKnRceDAAX4p32nf5k4pQgeGF154ge+LUlpa
yg/Xpvk9frmpj0rDhg357QwaNEizz/y+ffuEKP/LL78sP6mcjjFjxvCbnTRp
Er+UnnRsZAbhSUfPXHYthGdQx44d2SLh0UzlLVtENxifSng0m6sVJCUl8cOM
U3kVGBio2RPJaDQmJibyk6T069fPtik/yv8buCcDBw40V3koN/2y+EKPMqkf
zFXEx8cbVKimERAQEBERMX78eHoksYpH06ZN6aiFcvL999/nzyEf9F+7di37
e3h4OJ+Kftp8Kj7ySyUtv0h4OtDTii2y+NqtqkpJSRHenlFFjq6XuvMk3dJK
dfTuu+8WviWhmgl/niV3TU9MYQ4gKrHtfXzgaGfOnBEGJSP9+/c/ffq0sGZR
UdGUKVOUh7hQFDRr1kyzOM3NzeX/LnQWGjJkCFskBPG//vprtki4e6m+wRZZ
Wy0HAACAijh69Cj/ZBfe6PJtZ4V+TJNW4JNTHYPahpofNdAfqc3Odx2kRqVM
hitvF3///Td/pMLMgEJLk2+ez58/n39zoryMYvz9/dmicePGsVT67y0pq5r7
osobn4pyxaei1jFbpPMaimplQuvDYOqJ/dprr1FjkKpzzz33HDU3lL9TmzQn
J0f4DsiOgXtq+Hz22WfmRlYvLS2dN28e/8apXr16Z8+e1d/F1q1bhWEGQ0JC
NF99rFu3Togs0GWyrb1fUFDAXxqqe/Obbdeu3TQV4YMX/i2WxeTmwivmrFmz
hl1T5Zx8+OGHmh/rlZWVJScn89PWv/rqqzqfTTlyFwAAVYN6dGtN9PjjUw0e
PFgmFcnKylKS7NixQzIJWbVqlbkM5+fn9+rVy+IW6CkwZ84cJYl84N5hZ0Mg
DEpMFRKqBa1cuTItLY3qlvw7+ejoaMkra9ELL7zA583Pz08mlVANI7GxsbZl
4ObNm2+99ZawtUceeeTTTz+NiYmhY6czMH369N69e/PP9Lp169orqK2e31MH
XaA77gAVP/74ozpgqikgIIBqnkLgXkCZN7cj4edz/fp1OkDWP8TLy4uqWO+9
9x5V77t06SLMuksefPBB9Re4Njh06BBV0YWNU1WwdevWtPexY8eOHj26b9++
7GX10KFDjxw5onPISUlJypaFobN1dOjQgeXHtlQWac4gpqlfv358QvVbek10
H7IkYWFhkvsiOgMsUENSiAhratKkiTIJu3zg3pFnQ7B48WJ+TbrPJ0yYoPy6
P/roI/bTpn/I9IzSZDQahe43VHrHxcXRXqhxqgwvo9DvRnXy5EkhdELFmr+/
Pz0rqTW0YsWKL774olOnTsKx0w/ELlH7ctOTjn8fQoUD/SSVJ11UVBT/pBM+
2eBLSB20Gp9KXfyaY663Q7kpLC68G6FDoLto5syZiYmJlPNFixaNHDmS/9De
YCpLLU7SoUMI3Cvn6uWXX46MjIyPj6d2bkpKCu03ODhYKF6oXKXrKLMLKuqF
6fnMod8IlZCURIjWCfiXYMr4LTLo9LJUdFCSqUJCQmw+t3e6qVOnqk8I/ZC7
desWGBhIZTUVO88884zy5KX7gW5RYZ5HgfyuhS6mNk9qAy7lhx9+UFcR3dzc
6MnywQcf0B01atQoKitYt7rQ0FD9By4199iWZX7OhKrBfJbU4yBpsqFarlZQ
UEAP8UUAAFDJZD7vBRennrZJX8OGDfU3SDeGUAmhZteQIUOocbp69Wqqan7z
zTfUWhQ6n0dERMhHSytpF7m5ufLngZ9wTf0ZlDlNmjRhqYQR5yT3lZ+fL5mq
Y8eOOgeblJQknB9NrVu3VrpkV17gXkGV0oEDB06bNo0a40q7mM4P1Vr52C6h
+uS+fftk9pKVlSWkpZtk2LBhc+fOpTtk6dKl48ePF0YjrFGjBrWwbO6lTxmT
vDRMYWEhvwX1C08ds2bNsjaHW7Zs8fLy4jdCFe++ffvOmDEjISGBGpixsbFB
QUHCZ5V0XeQHFHXALgAAqoA7LnCvoKdz586d1X3/DKbhiKkw/+WXX9jKylQ7
zJ9//un0s6FG1Rt1KFNANUw7di2jOiq/8bFjx8qkunLlCn+WatasaXEEeH1U
3WKf9Vn06quvWuwzKa+yA/dOP0AmMzPTYtVu1KhRpaWltLIdA/flpknAZWqV
3bt3P3funL2O98yZM+3bt7e4U/rFUX3baDRScaGzGgL39grcl5t6s0yePFk9
cIqCqu7jxo1jn4Hv3buXX9quXTtXOBsCaq9RyayfnH4aMgO76aBb1GJ7mRrL
FkvjoqKi0NBQyTi4j4+PxWextVasWGHxSRcQECA86ZwYuC83vZmhJqTkpry9
vePj421uxSvoKRAeHq4ePEQfFXo//fST/F7oxyiMLKTWtGlTJWpfjsC9y0hO
TpYpuKjiQQUjrW+vwP2pU6dYrZtuzop0TQGXcvjwYaFPl6ZatWrNmjWLCreq
FLiPiIiQzCQAAFSQzls4uCPYPXBfbvqKv3PnzpIb9PX1/e6776zNdmXsoloF
7smlS5eCg4OF6Dbz4IMPRkdHs67+wn1CTXvrLth/7du3b9iwYcLQBBb179/f
qreLVDpRPoUB38xp1aoV1XIreFBWHY7B4YH7ctPo9AMHDtSMuahR7X3x4sXW
RiscsAsAgDud5IcGcXFxfKrMzEzJvrVsnu6LFy+mSKOKkEzmz58/n5iYSJUE
qkWEhYVNmzZt/fr16rARHyagh4LOy0aHnQ1Ne/fu7dGjh2ZtoU2bNpKf0cmj
ipyXl5fn/8mPn9OvXz+W6rXXXqt4TqiOt3TpUtps3bp1NZ/RjRo1+vDDD3/8
8ceK74t37NgxyQtH1PNKy3PWAfKopkc/E3Xsj34R3bp12759O1uT7lKd86CT
Sc3AfbmpXUOVbfW8qApqJlQ8zqVmNBpTU1O7du2qGfKjxkVQUBAbA//y5cs6
h8wGc05OTpa8W/jx2G1LZRHVciU3u2XLFj7hsmXLZFLRHcuS/PLLL/Klt2Q0
58CBA/SbmjRpklJ6z58/PysrS+k6wgizxemMzOzIs6FGdy8di9ANW0Hlea9e
vawdnUzThQsXhg8fzk8HxlAjesKECeYmKdDcVFRU1NNPP635uKFiigorOuRK
6sxMT7qePXuq52oxmJ50miP1ST6aaTU+1bZt2yTvioKCAovZ/vnnn0NDQ82F
t6icef755ykDdpnLRkE/h507d4aHh3fo0KFWrVqa+zWY2rABAQGbNm2yoRlL
ty4VO506dVJfDrqpPv/886KiIrZyRkaGzjnkh8qXrxTxlb2zZ89KpqJbqILn
9k536dKlKVOmaA5gQs90+mnPmDGDXTsqf3ROpvxO6W5hvRD5t4JQBdy6dYvK
XioKNDtW+fn5jRkzhr3/1H/gsuKUWhmSv+jNmzfzmaGcyKSqSLWcoUzGxsZK
5hMAAGxGLeKKF9rgXCdPnrTqosu/wPzhhx8++ugjYep2htq/1HikW6gijVP7
7oKq2fLngX8VsHv3bsmXKvzcZ9nZ2Tbsq7i4WDJVenq6zFFTc2/Hjh0LFy6M
jIwMDg6m5gA1fqmNLLzKmzNnDn9uR48eLbNxfTdu3KCmaGBgYMuWLXW+AqDr
S7s7ePCgbXs5fvx4WFhYmzZtNDfeoEGDIUOGUNu54rHjwsJC+ftHIbzqkXyL
peC/arTWkSNHqBWg+abLYPo+pXPnznRL6H+84/RdAACAy6LqCl/s16tXz9k5
suD69etUq1y1ahU9YelxTPWTvLw8Z2fKQW7dukVP7U2bNlElnw5/9erVW7Zs
0Znb947j9AOkSvXRo0fXrVu3ZMmSuLi4DRs22LHru7nAvYKqmt9///2sWbOo
Mkz1/KlTp9JJOHPmjL32bg7td8+ePd9+++0iU+Nx8+bNVCG3ez8BqAypqan8
HfXmm286O0cWUFlNTWwl6JCYmLht2zZzU7DZrKSkhJqi1JaPNaEbm+5nmxuP
f/311969e6lAoNKAsk1F0+HDh6mYsm+eNamfdHdKUZ+bm5uVlaUMkh8fH5+e
nk5XpLK/PjYajadPn6YLxDoC0T+2bt2qM/WPVa5cuZKZmbly5UraMv330KFD
Qi8acE1//PEH1SKUC0e3BN2ZMr1QbEMbV4piNze3nJycStoLOFdRURFdaKWc
SUhIoGLh1KlTzs4UAAAAVAvU3tmxY0dSUpLy6oZaiNnZ2Xz34DtiF9VcVFQU
/w5n4sSJ9t2+8k51/fr1ypuEuLi4lJSUnTt3Xrp0yV67yMvL27Vr15o1a5S3
Ot9///2xY8eq+bfe58+fZ+dk2bJl6enpBw4csO+LIwfsAgAAXI0we3Xbtm2d
nSOAqkk/cA9gLWE25/DwcGfnCACgmnr77beVorhnz57OzgsAAAAAALgc1mRQ
2H3kWAAAAKgyqJ7AVxtGjRrl7BwBVE0I3IN9DR48mL+jNm3a5OwcAQBUR9eu
XWPz3axdu9bZ2QEAAAAAAJfz5JNP8u9wrJprHgAAAO5QI0eO9PX19fPzs2py
k7feeouvNlg1izQAyEPgHsx5/PHHqfQeMGCAfJKSkhJvb292O9HdhTsKAMAp
YmJilKK4cePGlT0xBAAAAAAAOFF+fr6vSVhYmHyqvLw8Nzc39g7n4Ycfrrwc
AgAAgOsYNGiQtcH3a9eu1a5dm1UbHnjgAcyQAlBJELgHc5Ry2MPDQ37O94yM
DP52eueddyozgwAAoO327dtPPPGEUhRHRkY6OzsAAAAAAFCJcnNzlcq/n58f
tQUkU02fPp1/hzNt2rRKzSQAAAC4CBa4f/HFFyWTjB49mq82zJkzp1JzCFCd
IXAP5rAOVDNnzpRZ/9atW61atWL3kpub24kTJyo7kwAA1Za7uzsVtv3791cv
+u6775SimNY5f/684/MGAAAAAAAOwwL3hNoCMkkKCwu9vLxYKk9PT/mvNgAA
AOCOxgL3ZMGCBRbXT0hIqFmzJkvSoUOHf//91wH5BKieELgHc1jgvk6dOseO
HdNf2Wg0vvvuu/y9ZNX4bAAAYC0lcO/j41NaWsr/vaSkpH379kpRPHjwYGdl
DwAAAAAAHIMP3Ddr1qywsFB//evXr3ft2pV/hxMfH++YrAIAAIDT8YF7Nze3
8ePH37hxQ3PNy5cvh4aG8nPreHt74yshgEqFwD2Yw09Z0qBBg+TkZHPjrWVn
Z7/00kv8jUT/azQaHZxhAIBqRQncky+//JL9sbS0NCgoiH1uf/z4cSfmEAAA
AAAAHIAP3JPmzZtv377d3Mq0qG3btvz6gYGBDswsAAAAOBkfuFfUq1fvzTff
jI6OXrVq1Zo1a5YvXz59+vRevXrxQSLSsmXLkydPOjv7AFXN7Nmzwzh8VxkS
EhLCFmGWimpOKJNJ06ZNqTU3f/78lJQUKr3j4uLCw8M7deok3EX+/v7mOmgB
AIC9sMA9oaI4KCho+PDhjz76KPvj2LFjnZ1HAAAAAACodELgXtGmTZvQ0NDY
2NjU1NS0tLQFCxaEhITQH/l1atSoERYWhi8vAAAAqpWMjIwuXbpQNUBdfzDH
w8NjxIgR+PIXoDIIVXQdbdu2dXZmwZkmT57s6+srX3STRo0azZ8/39kZBwCo
FvjAvVqPHj1KSkqcnUcAAAAAAKh0xcXFn3zyScOGDa16h9OiRYu1a9c6O+8A
AADgHGfPnp03b96AAQPuv/9+c7WFmjVrtmvXLjw8PD8/39n5BaiyELgHebdv
396zZ8/EiRO7du1ap04dc7dK7dq1u3fvHhMT888//zg7ywAA1cXrr7/eoEED
dZlcv379SZMm3bp1y9kZBAAAAAAAxykpKdm8efO4ceM6duzo4eFh7h2Ol5dX
nz59kpOTy8rKnJ1lAAAAcAlXr17dv39/enp6YmLiokWLli1btm7dut27d1+7
ds3ZWQOo+lJTUxfJ+fbbb52dWXAteXl5O3fuTElJoXKb7pCEhISNGzf+/PPP
+KgTAMApbt++ffr06S1btiiVaiqW9+3bh5A9AAAAAEA1V1ZW9vvvv2dmZqak
pMTFxVFjYdWqVdRwOH78OOL1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAABO9D+ycmDp
    "], {{0, 300}, {2707, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{2707, 300},
  PlotRange->{{0, 2707}, {0, 300}}]], "Output",
 CellChangeTimes->{3.771661987853672*^9, 3.7716678598940372`*^9, 
  3.771699071862616*^9, 3.7716993437255*^9, 3.771701536055522*^9, 
  3.771754723286622*^9, 3.771766698967244*^9, 3.7717712027818823`*^9, 
  3.771853779506782*^9, 3.77185509502915*^9, 3.7718650555911016`*^9, 
  3.776172504102448*^9},
 CellLabel->"Out[80]=",ExpressionUUID->"2690516c-5e30-4ce9-ad26-94a0a6a012f8"]
}, Closed]],

Cell["Trimmed bounding boxes:", "Text",
 CellChangeTimes->{{3.771766822096889*^9, 
  3.7717668256238737`*^9}},ExpressionUUID->"65e64af2-f776-4f5c-a96f-\
916a2e29b74f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bboxesTrimmed", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"First", "@", 
     RowBox[{"ImageTrim", "[", 
      RowBox[{
       RowBox[{"ImageResize", "[", 
        RowBox[{
         RowBox[{
         "staffs", "\[LeftDoubleBracket]", "8", "\[RightDoubleBracket]"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"4096", ",", "1024"}], "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Rectangle", "@@", "8"}], "#"}], "}"}]}], "]"}]}], "&"}], "/@", 
   RowBox[{"Select", "[", 
    RowBox[{"bboxes", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Area", "[", 
        RowBox[{"Rectangle", "@@", "#"}], "]"}], "\[GreaterEqual]", "25"}], 
      "&"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.771636729225811*^9, 3.7716367610615377`*^9}, {
   3.7716371274872627`*^9, 3.771637131764139*^9}, {3.771637286262759*^9, 
   3.77163729230616*^9}, {3.771637333384416*^9, 3.771637371041353*^9}, {
   3.7716377196816893`*^9, 3.771637720260283*^9}, {3.771662583258525*^9, 
   3.7716625834414043`*^9}, {3.771667846798921*^9, 3.7716678479370823`*^9}, {
   3.77166788120953*^9, 3.7716678813235817`*^9}, 3.7716679686213007`*^9, {
   3.771668129918964*^9, 3.771668132706417*^9}, {3.7716683296796217`*^9, 
   3.771668353341468*^9}, {3.771668424060487*^9, 3.771668442109283*^9}, {
   3.771699307402834*^9, 3.771699314573591*^9}, {3.771699349199842*^9, 
   3.77169935497775*^9}, {3.77169969029018*^9, 3.7716997656793613`*^9}, {
   3.771699961906231*^9, 3.771699973298629*^9}, {3.771701544497991*^9, 
   3.77170155481702*^9}, {3.771755195291223*^9, 3.771755196596726*^9}, {
   3.771756299841806*^9, 3.7717563225297832`*^9}, {3.771756369203031*^9, 
   3.771756376567257*^9}, {3.7717585258108587`*^9, 3.771758559348731*^9}, {
   3.7717667004973497`*^9, 3.771766719471521*^9}, {3.771806893034359*^9, 
   3.771806901111079*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"fae6df9a-8f3e-4ab9-b757-7dd49e25bfd6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJytmFso/FsUx3/+f9dDuY7L8eJ4cH1ACMXDKQ+OW7kcdPLiMufvRG5/dVKE
ycgTUhMePGhSkohIPHgwT1LKuJRSjGtiUDKMy/mf73/Wsfudmf8ws3+zyrR/
47c/s/Zaa6+19/qlsqHwz0+CIHx1x0dhxd+/NjdXtBb54OH3+q9/famXV/9W
3yL/Im9OrfyML//A38/4+z4mcXZ2FizEycnJzc2NxpmZmYuLi99M8vT09M2K
vEP7/nuf//tFmUymVCqJYzQa+WhQ75NJMC4tLd3f3//HJHw0Uo80jIuLm5iY
MBgMmPX6+vpD5oc0Ugzi6+tbW1t7fHxMpgOQg4bFskFqaqpGo5Gim5NJXF1d
MQ4MDBwaGtLr9TTXUr0PaSQuLi70WmVl5fr6OiZCt+fnZz4as15iYqJarSaa
ZeDZTiPP+vv7t7W1kWe5dYPp6B1gEXh7e3swGmhm4Wc7je2LlJSUmZmZu7u7
l5cXM+faSBNEpgsLC1MoFGdnZ2Q9bhpZz9vbu7i4WKvVSqFR4IGGl2NiYubn
58ExW6ztNPGbXl5e/f3919fXhGJhbC+NNgVELpdvbW0RBBry0WhTQLBnJycn
CcLC2F4a86yfnx/C2Cx/2ksT58+ioiKdTke+4KMJol2WkJCwsLDw8PDAQoWP
RkkvKCios7Pz/PycaPAsB43lT3d39/z8fApjSnfcNDgXA4QxKiP5go9GQoGH
YqFSqS4vLynquGkUePhsbGzc3t7mthujkTvy8vLYMYCbhikUJ7GxsYODgxJp
LIZ9fHxQZ5E8pdAE0S7LyspCbpdOIyAWOzs7i00hkUaxh0LW3t6O3C6FxjYF
/Jubm7u5uSmdRp6NjIxcWlqSQmOK4ROlZ3R01FE0aAjTOYRGSy4vL5dOw1yK
k7S0NOk0rJF0Cw4Olk6jqi2IDvBSaMJb6WGPEmlsUziKJn50CI0xpdtNDHEI
zVE+JXEsjUEYVoqwo51DdGM0Ko6OormZxCyk7RW2QJx2PD098SiFxlZHNImL
FRcd1l6QbkB2+MRA4nrFYpapuCEshbJvuGlY3U8mcYiG4ISGhoaHhxOQmZFP
cHzFhT0nJyc+Pp7dfbglJCSksLCwp6enrq4OGtKXrLTZK7gONzU1aTQaHMOg
IX2JfcdnvYiICCh2c3ODi0lraytuZFJ0i4qKGhgYoJPw+Ph4UlISWY/PudHR
0X19fXSh3tjYwE1WJpMJJudyOAW03t7e29tb0PR6/fDwMO533DSsVKFQnJ6e
4nYDDVdXV8vKyjw8PASLOm4jraur6+TkhO6tR0dHUBWHT/qvve4Arbu7++Li
gkyHs/ry8nJBQQHtCHvzPGhKpfLq6or1SQ4ODjo6OuhIZu9iiQb7s66awWCY
mprKyMhAWhbsDBWxbuzKv7u729DQgGwg2OlcMxr1XnARGxsbo9MsdOOmGY1G
Aq6trVVUVKAACfZYT0yD3VgDFtsWOw6xTa/ZCLRcKdGg5MrKCpIVVTQbA8+M
Ru0Xir3Dw0OECvlCsK1e/JBGzr2/v5+enk5PT7c9q1jSxD063ItrampYVvmw
ZFjSxI01RLJKpULJEP7fDrWXBi/QGL4oKSlhvuCjUUcXA51Oh7SAYiS8efYd
d1ijsZ7k4+Pj3Nwc9gW1Qd4PPGs0Uo+AOzs71dXVqLw0hY/GQgUZZmRkBG8K
b3FiDfgOjfWHoSQKUHZ2NrmVj0ZCHTZklZaWloCAAJplLYw/pFFzEqJWq5OT
k2mWtVCxUTeIVqutqqqiWZYZ7184m0s1
      "], {{0, 90}, {26, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{26, 90},
    PlotRange->{{0, 26}, {0, 90}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJy9WmlIVVsUPmqWzVmJmmWK2WCJNJlgWZKglkmmNmhFmtPrR5q91AdSXCsa
fmSlzRKGIZQgNEA0GwWapA1i2FwKQaJllpavp76vs3Cxu+d6vV7vOQuUfc+9
e31rr2mvdfZ2j09dlWQtSdJ2O/xbFZcZmJ4e90/kGHyI3rr9r+StiQmhW/9O
TE5M94u3wcMY/Hnh7/e4e2DU1dX1n0y/ZPpXpl89RF91dnbiZwMEGjhZRAZa
Ly3N9Fk0ZeB6AAfw6ejogJJNn9UhEyZa1grg1inTf38SPeySySJAxFB8ApTG
xsa3b9/W1tZWV1c/fPiwsrISg6dPn+LJq1evPn78+PXrVyWf/kJjCeTV4sPm
5uaKiorS0tKCgoJDhw7t2bNn3759GOTn5+PJxYsXy8rK6urqvn//LgoMJv1V
CGkYc3nijx8/qqqqzp49m52dnZCQEBERERQUFBwcjMG6des2b96ckZGRl5d3
+fLl58+fiwsXmZgILU7/8uXL+/fvHzx4cObMmdTU1PDw8AULFkydOnXChAkT
J07EwNvb29fXNyQkBFLpdLrz58/DHPX19Uor9Enk5GystrY22LewsDArKys2
NjYgIGDatGlOTk4jRowYNGjQ4MGDMbC3t3d0dPTw8IAMoaGhmzZt2r17d1FR
EfxBZGsiOmUw+vjmzZtTp04Bd9asWa6urg4ODsOHDweotfXvfAvCwMbGBk+G
DRs2duxYCObm5gblQIbi4uKfP3929+jfdA1A+ZChqanpypUrW7ZswXolBVlZ
WSkfEkEtkBbqevLkCQlgCqIoIVZ96dKlzMzMRYsWDR06tDeg3mjkyJHwhNzc
3MePH5uIjgRFYywcq05JSYEOnZ2d+wtNBEshLk6ePAnnMUUA9g0sHJ4zc+ZM
MrERJRsh+AOcIT4+/sWLFybiQvnv3r27cOFCdHS0nZ0d8YEAg2WCQW1kslYQ
HuJbW1tb+iXLAO2B27dv30zROaK7pKQE2cPLy0tcCNgSNGFZCaQnABFPRBTA
b1++fGkcnZJMTU1Nenr6lClTEFkiOgH1qW3lzyC2j4/PtWvX+rR7a2srtLR0
6VJxvebZHVOgCrIdQgbbgcFVizXA/fv309LSkC6IA9kRTMxAh8yYDq+jj0g+
BtGpDsG4paXlwIEDyJY8hZiY5/BkAghPH+fPn28QvbvH4bE1REVFIW8zrhmg
esRMsBEooVnnHz58OHHiBNIj/ZgCx7xViwQOFClgqIcuJn/sy5GRkditaBYF
9QChGZ1WoUQnnWM32bVrF/ZriyDqEfM0GGUoWu7du7dy5Ur+sWVloJCBAxgM
NFg8JydnxowZqqKD9CxOar99+/aSJUuwIfLvB+5sIrHbi+g0gMWPHDmCmgTf
WsTJ+0QXq4jy8vINGzbQt8iKangdobPmqVbHAP+PHz/OFufQUANdEtZOmoe/
JSYmUjJUA7c3dPxvb29H7eTv7y/JbskJWVV0VjsahB07dri4uEg9+5Ha6JTY
Cf3OnTt+fn5Dhgyhr9TTPHPmQPv8+fPhw4fHjPn9voUFUBude1I0RzExMfQQ
gabewkV0pHRyOTRHnp6e9FA9i+uhU5JB1Yoikx6aXbqYgc5qDwwMlFQONIPo
qJzz8/Pd3d2lnq1fbXQx3hsaGjZu3MjFm9pqF9Gbm5sR5vPmzeOCR0v0W7du
7d+/H+WlpNp+2hs6sHQ6HSooSi9qbKYGidaI/2FhYQhzijKLlOumo4PQG1Kf
Qi2nZugkALel2vgbY3HHrQ2iUgC2vmY61yPKbBrkdiZx1dwaa4bO7o2iffTo
0SyJZuiSnFvmzp2LhkVjdLI1iqikpCR+kaUBOlmc8jlahnPnzklC3tMAXepx
tvDw8GfPnklCzlcbnePayclp586dLS0tkvxKRG1cInrVhsGcOXOuXr2K0kKS
N1YNoKl+IPTVq1ejZSN0tat3IlY7wjwnJ4feVGiDTq5O48WLF6NbpGpWG3Qs
nE4TkGSysrJI7Vrand7VuLm5lZSU8FtBSWWfFzdx5LeoqKiamhp6TUF2VxVd
7MS9vb3ROKBdpddEhK5q+yAWbNHR0dXV1eIxk6rorHMIAIvv3bu3tbW1Wz5g
Uhtd1DmqR7TnN2/eJFAN0KkhpeWjcj59+vSnT5/03g2qh86Eha9YseLRo0fs
bPwSXg10vUbYx8cHzVpTU1O3fLgmHn9Llo448egHhNY4Li6uvLycXV08TLc4
uvTn2r28vBDj7e3t3YaOvC2IrtebwOddXV3Xr19/9+5dwuJ3RGqgU4jxqkeN
GhUREVFQUFBfX09YfLyoHjpzQ9148ODBuro6Pm1X3rWwIDoTZBg3btyaNWuu
X79OthYvTijRuansLxBN1Ds6cXR0RMkKZ3v9+jXr3OA9B0InDmb0khRfygPu
vLw87KR8xt3b9SrJQppnyR0cHOLj46uqqtjQRq7WSH/mOuVJut5Kifh4XfwW
tRPy+fLly48dO4ZanfjTRTsj6KLJoEA6YjZypk8H+qRtcS6iGxsZdF5ZWcn8
lVezetM8n5AqcQ0KIEY3mAQGBh49ehTmFm9VGSfSGLKxGTdYiJDSYevZs2en
paWVlZWRnmFrhHmft4kwHS28h4fH5MmTjWx2RoIRRUtYWFhmZiaKVU5r3XKU
mYI+fvx4f3//gIAAemOpB8oRbVAAKC0oKAg5DatGlY5MzpxNucQoyckBwiNM
0GWgErCVqbfYJ2HI65DQ0A9u27YN+wjbul83Jwkd1Sbkz87ODgkJQTEAK6Db
UvY4AMVi0f9Onz4d6sIsQBcVFTU0NDBDutRq4v0x0jyaytLSUmgPoZqSkhIc
HAwZnJ2doQrIQDon70JEAzc2Nlan0xUXF9+4caO2tlZUuN6lkT7R7e3t0WJU
VFSgBsCWVFhYmJGRsXbt2oULF6I2ANykSZNcXFw8PT19fX2XLVuWnJycm5sL
URsbG9va2uDbZt/b/B/iW5ic
      "], {{0, 90}, {42, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{42, 90},
    PlotRange->{{0, 42}, {0, 90}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 90}, {42, 0}}, {0,
       255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{42, 90},
    PlotRange->{{0, 42}, {0, 90}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzFW3dMFN8WHttTwUJVgqAICipg/CGgCCGgGAtYwAjmKSgKggWe5RnFEEss
MSYGggqIghoBiSUk/qEJFgwGfAgClh8CRkFAgoIUC9h939uTPRl2YdldmH0n
YXJ3d+bON+d8p925TFz/r4CNAwVB2DkMh4DQ3d47doTGrDDAh5XROzdFRIeH
LYr+d3hE+I7Z6wfhy3/izwl//xv/6YP8/v1bPG5paamurs7Ly0tKSoqKivL1
9Z05c+bkyZMtLS0tLCwwcHR0dHV19fPzCwsLO3To0NWrV4uLi+vr6798+dLt
nNpB+vHjB3/s7OzMz89PSUnZvXt3UFCQu7s7YJiamurr6/9DJhgYGhqOHTsW
3wPb4sWLw8PDDx48mJWVVVlZyfOI59RCfv369f37dxzpY01NzalTp/z9/R0c
HKAcY2PjESNGDBkyZMCAAYJMMBg0aBDBMzIyMjMzs7a2dnFxiYiIuHHjxqdP
n2gezNkXVCyYp7m5+ebNm7ALLCVoIgMHDnR2dj5y5EhJScnXr1/7AgO2+/nz
J3+sqqrKzs6OiYlxc3PTCBIJtBoQEJCQkFBaWkqk0o5auOrbt2807ujouH79
OrQ0a9YscEYLVIMHD7axsYELJCcnt7e3Y07xI2skfGFFRUVsbKytrS0oBNpo
gQqCC+EX69evLy8v10JXv2XC49evX1+6dGnp0qWMBzwhj4MG8OXA7gTf41c8
BU4bOnQoY4O2r1y58uHDB01VBI9jLcFr0tPTQ0JCoCieGY42WCYMaYBIlIHh
yNfCK7dv315UVKQdKooGsB2c2srKSk9PT2wOAtCr1ZRPA0gPDw8oX1NULG1t
bYjM0DkbDnOSZjQlFS6BKYkD8Jf9+/ezK6kjbDsMEMaRU9jpKDziqAUqoiIe
iuYJDg5++/atmpAoGhDVQci4uLjp06djNvHkWkAiXRHZ6KO3t/fDhw/V1xXR
CYoCIdesWUPz8Gx9FJ7H3t4+MzNTfTwkyHeJiYkoBmgSuDb8SDstiWWQTDAP
PBHlhDqokMcJGFIe8l1gYKCJiQnNBkha204sbMThw4evW7dOI1R1dXXIpBMm
TNA6jPck4tLCy8urV0gczz9+/JiTk4PaiS6H7fqLVIyKJrSzs+sVEpdhZWVl
Bw4cgOtJgYqEQj2qiF5RUUwDNkTd+fPnjxo1imbod0gQCjU49oqKGNXQ0LBr
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
UNE6AC/t0uouCX2kX/vOJZb/AoRt4O8=
      "], {{0, 90}, {50, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{50, 90},
    PlotRange->{{0, 50}, {0, 90}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
dXX1gwcP0I6hUOyVfynpf2UpLps=
      "], {{0, 82}, {42, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{42, 82},
    PlotRange->{{0, 42}, {0, 82}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
v48U7YmOZI0adGhBXqVxiU6ySTqM1v0fzAGsXA==
      "], {{0, 202}, {42, 0}}, {0, 
      255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{42, 202},
    PlotRange->{{0, 42}, {0, 202}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJy9nAmcTeUbx2/1r2wjipgsWZKMrJESsiSGbNMMhWiYGcmSpaKQZAlF9iXL
ZCsmW4VE1izJFsYaZUlChSRl6f6///N85vm8zr1z5ty5p//z+cz9nDn3nPd3
3ud9lt/zvu+5Rdu9FJN0s8/n65mFj5j4XrV69Ih/7elc/BPXtWfHDl0TE6K7
vpzYIbHHI+1u4eSn/EXx979jfzpy/fr1q1evcrB///4KFSpw5c03/w8iZ86c
7du3P3PmjFxw5cqVKVOm5MmTRy646aabOChdunSjRo0iIyN9aXKTJbfeeusT
Tzzx9ddf//PPP7Qsn87o+/btK1u2rKLnypUrMTHx7Nmzij5+/PiIiAgTPUeO
HHffffdtt92m6HIvUqdOnS1btnCve3T6oi3ceeedL7zwwq+//qpXjh07NkuW
LCa6yn8s4Ty9lq/q1q27detW9+h79+4tWbKkot91112dOnX67bff9MpRo0YB
IVg29FstueWWW9CDom/fvt295lNTU4sXL67oqLRr165m34cMGSItA+S7UTgv
CtGvnnzyyZ07dzrg2tD37NlTpEgRRS9QoECvXr207xcvXuzevbv21JeOiHKQ
evXq7d692xnaROfiQoUKKTp6GDx48Pnz5//888/Dhw+vXLmyWbNmNghRNZ+B
6NHR0RiSe/Rvv/32nnvuETXyGRUVNXLkyNOnTx87dmzu3Ll0vFSpUjbD5gBo
/ddEb9iw4aFDh5wH3UTfsWNH/vz5tXHsf+jQoTzS6tWrgcYZs2bNajM2B80T
B77//ntpP0N0nhATxdJEn3yWKFGiW7duM2fORAM4rzTrHr1JkybHjx93g04k
uXbtGqEpb9682gIRDLtt167d008/LdYYEnpMTMxPP/1E+7TsgE6vQaf7GzZs
kEAqsStbtmyYPbaHKaJzZ9BA9NjYWOIk7cuwOqCLcjZu3Cjot99+e2CzEsDd
o8fFxZ07d84ZHVw0I2aJ5gVdwmlgs9qyg2goaNGixR9//EGzKDY9dB7s77//
lqFRzafXd9OznNG5+Nlnn6VlZ/TracLxJ598QmbxpY175kT73rp1a+mUPEPg
cJtxgKgyYsQIcrr5/KiaJ5H04WbQTfT4+HhpPxCd81ct0TOrVq1q2bKljLj4
O3AcaOp0ia62QXaWlv/666+g6DoiuMbw4cMJpDKy5vi6NHW9WGM+kSo9dBWG
hjyybt06Oo6DayMu4QLR9fl79+5togMk/mUq/JdffiGMDxgwQBhdmKKKIjq9
8cYb1ywhRfIpAY1PHkbtjczSv3//xx57TKw9TNEhgxdBRa5YgtebTqfWDnOY
M2dO/fr1MTZzyMJHv/fee0ePHi1wQT3uxIkTn3/+eY8ePYoVKya3KCEME51G
HnzwwQ8++CA9Y7t8+fLSpUu7dOlStWpVIcm+NEcLR6QFnuGRRx5ZsGBBeujk
fSwNFwPaTfQOCZ3PmjVrEjlNxAsXLjDQcNSTJ08uWrSIrC238Kg8QPgdV3Ra
o5BJSUm5YAluxScpbPPmzStWrGBEoMpSOIhILPUEXUg1tGTSpEkgUs6QuDkY
N24cpRBuSN7HKiSki4QU0DJEJzWg+T59+oA4YcKEMWPGcPD8889TFTZo0ECI
q8910nQvGuiIXc2bNwcRYta2bVsOOPPwww/fd999ejEq4jm9egBh13JcsGDB
CpY89NBDckBNCnmg6rRd74nONR1La9mzZyfc5c6dmxCa2xIttcLHCipmXwTL
JnIZ14REGDKUwHpWg54vzaRRhVAmDx1cWlM4EUoShviOO+7IZQgmJ4VS0AcO
B90sJBnoypUrV6lSpWLFig8Z0qFDhzJlyvx7444G6HW1atXwr6SkpISEhERD
pk6d+vjjj4vhhe9lkpHN4SOrUkH069dv8uTJ0y1JNmTbtm1UtdJ3T1I5CjeZ
f7169YjhxNVdu3alpqbuvVGgjlR2cqUnec0kJFR8r7zyypEjR4Q+8XntRoHh
eIsuggbgJ02bNp09e3Z6Cd1v0ebGjRvLLQ4TL6FKvnz5WrVqNXHiROdZmv37
95P45JYw+246Do5MIjtw4IDUjOkJRSI27xU6Cid633///XjTpk2bBILxhUNe
DSYrV66EOcvtodq8LUdwe2RkZN26dWEpM2bMkDkKQYeuXwkmy5Ytg+xlDt02
N4WjEcreeuutL7/88tChQ2atRMEijP36jQLNY4wyh64akAPSNKGD7lCnKKjD
oCPz5s0j3oaKHpR0kbAgLZixNi7D7TA1xwCVK1cuJHQtom3nJbb8/PPP2rgU
iQ59nzJlCmQy1L6bfEmVULRoUcoBqLKztk3BK6Oiotyj2xSe1RI5LlGiBEUi
6BgzZZHzjJwIzFam392gC0/TyzguUqSI0gPcfOjQodQmjLVL9BEjRvDMqs8M
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
mvh7rA==
      "], {{0, 178}, {42, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{42, 178},
    PlotRange->{{0, 42}, {0, 178}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
a/z/Aa8OyJw=
      "], {{0, 138}, {42, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{42, 138},
    PlotRange->{{0, 42}, {0, 138}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
2uo=
      "], {{0, 74}, {50, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{50, 74},
    PlotRange->{{0, 50}, {0, 74}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 66}, {
      34, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{34, 66},
    PlotRange->{{0, 34}, {0, 66}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
iFledXR0jI2Nff78OTN0b7Jr6riH7c5GjBiBBqagoIAdMyk4a6ZZ6h0vyr9z
wP5o8eLF8fHxHz58UKxzInZqrxIDzNasTyZyc3ND7/TgwQOGqPicXfGFAcXo
9JKNiW9gYBAeHv7o0SOZI04FJLOm8gzwhGbVyMho4cKFFy5coF6dTpr6vF3A
ViBNMlXIE3UL9IwMn9gVrly58sCBA8XFxWxloPd5qYmtwC4JMB5kiLoFGBqP
8dGNcubl5ZWYmPj06VP+UpMy96koN6qnc6plaBf37NkDqQlOpVt85ubmEydO
RJCqCo1cam1tPW/evNDQ0KtXrzY3N9OCdB9MyYtkmI6mC4ZTFd3Ozs7b2zsq
KgobhMrKSnaWClzlL/KtWrUqLi7O09MTu0vloY2NjVesWBEdHZ2bm4v46uzs
VO/eIEpwenp6ZGQktjk2NjZjx45FjYBWkbfhYOQVGMC19PX1UbLNzMwcHBw8
PDxg64yMDFZA6cqlqtcXAwMDCwsLb968ifSInQ6UMHfuXKxvZWVlampqLNC4
ceNsbW1RO1xdXZHDIyIiEhISoPCXL1/y9lUDXSqVlpWV1dfXYyksCCuAB5gD
JXL+/PmzBFqwYIG7uzvq9c6dO5OTk1FBqqqqMEXm1go70lWeNm7c+OLFCxqj
AcvJyUFdRt7Ytm1bUFDQZoGCg4OBC+WkpqaWlJTwl8To7F7tu7KQCFKzr2h9
Hz58mJWVdfny5ZSUlJMCnTlzJi0t7c6dO+hV+HzS/TujqnrHlZedR8dmB5uO
169fV1RUlJeXlwkE5UDVtbW1gJa/lNgf2f39/ZnmyXAUsLTBp9RBY0JRA0Ix
OqTrFEjJK8p4jB7uz/Vgho4GjO45y/fbPRKFNjUt/UeHfUkK5RWrRnApQCdc
sizZvUfqv7B9osu4nKiOx6OTaMzzefrJkQbR/wdBzsTg
      "], {{0, 98}, {42, 0}}, {0,
       255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{42, 98},
    PlotRange->{{0, 42}, {0, 98}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 98}, {
      42, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{42, 98},
    PlotRange->{{0, 42}, {0, 98}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
T0tLo9NeNrpEssuEZQLI3t5+9erVd+7coftFnZqb6WfnyLogks7FH4cNG+bj
44MGhu6ZwNzQuZZLJnxbQC8G+MSfjxdlqqZx8eLF+/fv5xsO7RrJTY0MW0uy
p9EmDAu+Z88eZDZKL7qQ2px68cBkaWnp4OCwaNGis2fPUkKjk6YubxfwDKRJ
8V6BGtG/uD0WeXZ3dw8MDExJSWE/By6que7odEmA741YaBDpmc7BxVWAra1t
UFAQlmbQeVtbm2jxLjWvKYsuxA6PKjZp0qSkpCQ+1tTrJhtqgaurq3ixQUey
trZ2cXHx9PREDS0pKfn8+TNNSI26jgx4eXkFBATQJobuBM2PGTMGL0Lq8+fP
NzQ0iArXXfyQkJDExMTZs2frtT2O4PL3909OTq6srER86XhvSpM2b95cUFCA
ekR31RA4NjY2iCDYAt5F95fgjbCvlZUVsii0BA/38/OLj48vLS3l0EZOU7uD
pwvFxcUhNZ06dSohISEsLGzBggUTJ050c3NzcnLCWttBRUCEb3h4eKBJCw4O
xivp6elQ+OPHj3keCnB9b+7FxMTU1dVheYV4AQ+QaNWqVVjuwZ2gjd9UNGvW
LGSSlStXAhctIrSNV5qbm8VLg+3/bdR1pOjo6KamJho3NjaeO3cuNTV1586d
UVFRYOMPFWEtEBsbi2SSn59/7949EYI6B4MvKyJenj9/TmPMU1tbe+XKlaKi
IqVSmZmZmaGinJwc4JaVldXU1Ij5pL3jrqwBtxaJ/gHmZwTJ
      "], {{0, 90}, {42, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{42, 90},
    PlotRange->{{0, 42}, {0, 90}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 90}, {50, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{50, 90},
    PlotRange->{{0, 50}, {0, 90}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
nV73/QvN4RNp
      "], {{0, 74}, {50, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{50, 74},
    PlotRange->{{0, 50}, {0, 74}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJy9WgtMje8ff+USKSFUi4nElIoRSkl/l7SolUVz6SLV/i6hIm3NdWpYtRSa
zHXkrqnRRVOSyCW/bOQyEYXK/S4/5//5n+/Os8c5p9M5p3Pe71Z73ve8z/v5
3p/v932eIYtXBkQaCIIQ2x3/AsLiPWNiwhLm9MZFYHTsf6OiI5Z4R8dFREXE
TFzcGTcX488Of/8fSzShP3/+/CsljWaBaBamazpR7iW/fv36+fOnphMxBRO1
YFsO/ffv362trRpJgYdbpaQ1uiLcjx8/Pnz40NTU1NDQ8Pz582cyqq+vf/ny
5atXr1paWj5+/Pj9+3ftEHno31Li7wCxsrIyLy/vyJEjWVlZmZmZGRkZu3bt
ys7OPnTo0IkTJ4qLi2/evFlXV8e/Ci/RVANkbhC7A7lKSkqAGBcXt2DBAm9v
7/9IaerUqb6+vvPmzYuIiNi4cePevXvBw7t379hEvISXQiPCREz/9OlTRUVF
enp6eHi4h4fHsGHDevfu3aNHj+7duxsZGQ0YMMDa2trJyWn27NlLly5NTU2F
isAAJmrq8xRi7BKGvnv3bn5+fnJycnBwsIuLy8CBA7t27Sr8TQYGBr169Rox
YgR4g2a2bdt29uzZO3fufPnyhX+zmsKyywcPHuzZsycyMtLT09Pe3t7c3Bzy
CsqoU6dOYMDKymrkyJGwCFiFrp4+fUrvUTNp8OkFTn7+/PmQkBCoGnru1q1b
586dgaIUnTTQpUsXPAZzgI2goKDCwkLKFX+kpBqasQcNvH79GrbetGnTuHHj
lKJ0lRHGuKPIlYODQ1JSUnV1tToxCN5YToO9CgoKEhMTvby84FSKYkIJXWSk
FBrUp08fHx+ftLQ0hGq76BAcqqbxkydPNm/ePHbsWEBDk22pWjWBQ0z38/O7
fPky5FLH68ADggXmDggIgFy8pPhPYipK2klGeIAeZnGBYNy5cyfsqELnyMk0
RqosKipau3atnZ0dezn5El6oyIAcLkHjYUNDQ3oA44ULF1ZVVbUlO+4znSPE
EhISxo8fb2pqyotmICWlgiuyQcR+Qh44fPgwfKktBlgyzM3NRWiDcxVA6hPZ
DgqJj4/HeqRUcDaora2FnyOb0VzwAG235dLtEiYi8GnurFmzSktLFaGZ1J8/
f8ZqhTTFshnzNO0Ex0RmfVtbW+RMOc3zmQ2CL1q0qG/fvh1XOM8ADSDRypUr
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
xH7SFTTof5zDs5E=
      "], {{0, 98}, {42, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{42, 98},
    PlotRange->{{0, 42}, {0, 98}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
C0PJwbY=
      "], {{0, 82}, {50, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{50, 82},
    PlotRange->{{0, 50}, {0, 82}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJztfXWcFEfX9SyP4BCCBIIswSHB3d2Cu9vii0uAhcXdg7sGdwvBNQRYXIIT
3GEhBEvysPOer88391d0z/TMzvps7h/DMNtdXXW66t5zq27d+sqnW+12MSwW
S69Y+Kjdqm/pnj1b+dX5DP+p17VXx/Zd27ap3LV32/Ztexby+Rd+/BbX+uDf
//fdGqry999/88umTZsSJUqE8v/zn/9YXJP//ve//OLr63vnzh0UEhQU9PHj
x9CtYWQQQWnbtm1ffvklmvzvf/8bn15eXk5REjzLlSu3c+fOIE2kQE8SadSO
HTvSp0+PJseIEcNFlP71r3/xS8aMGSdOnPjnn38Cpb/++itiWxQWIijt3r37
66+/FnxcQclLE2CFodqhQ4fff/8d5XgkSv/73//4Zf/+/fny5UNHChZKuB4j
FEOvcuXKVE0eOeIEpcOHDxcrVoxKyUWULNrw5AjNnTv30aNH/6dJxLYoLEQa
hTZCCYvZCi5KadOmXb58+R9//MHSoKAirk2hL4JSQEBAtWrVYseO7R5Kn3/+
uZ+f3927d1mah/EBQen06dP169ePFy9esFCiarJo3KlKlSrHjx9naR6mnQSl
8+fPt2jRImHChMFCSb0SfGDjxo0szVNRunTpUvv27TFw3ECJxCl+/PizZs0C
a7J6HEqiQK5du9azZ89kyZKx7RxHLorQ9UGDBj19+vSjJp6kwAWlW7du+fv7
p0iRwg2UxFVp27btr7/+iv7pYQ6dtAXmacSIEalSpXIPJfLw6tWr79u3j6PY
k4iToPTw4cMJEyZ4e3u7jRK+5M+ff+nSpVRKnuSqCErQJzNnzqTDK/bdRRG3
N3Xq1CNHjnz//j1GHNW4Z4igFBgYuHDhwkyZMrmBklycIEECX1/f169fo0CP
RAlNW7lyZdasWd1AiUoJt2Do1a5d+9mzZ1YPHXEYJps3b/7mm2/cQEm9pXjx
4r/99pvVsyiTsBqYpN27d+fKlcs9lHA9tVP27NlPnDhhtdk4z2BN0gp8OXz4
cJ48eUKCEm5Mly7djz/+iI7Ekj0DJQrbcurUKZjyEPal5MmTz5kz5/nz5yzT
k7glRwdcucKFC1sU18x1kVsSJUrk5+cHf8fzUKKmhZNStGhRt1Fi94PP27hx
Y5lC8SQGTqv9+PHjEiVKuI0SJVasWMWKFYMhYMmeZOnIAF+9elW2bFlZGQkW
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
      "], {{0, 
      586}, {98, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{98, 586},
    PlotRange->{{0, 98}, {0, 586}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
VXh4uMFgWLhwIT6xE2mUeIftX4w9B7Q=
      "], {{0, 74}, {50, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{50, 74},
    PlotRange->{{0, 50}, {0, 74}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
xM3Rtw==
      "], {{0, 74}, {42, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{42, 74},
    PlotRange->{{0, 42}, {0, 74}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzFmmtIVGkYx0/eGitNoRDX6ziFuiGK4CXS1ilQdy0RB8siQyev6GqMhi0o
hZIiRKWI17yECKkf+hBRhkXihwqt9EOUSKFboiJ4yczcXW3/ex58OTjjZWbO
OfsHh+N4zvze93mf97m8jlKbF59uwXFcvgIv8SmFap0u5Q+NA35JyM3PyshN
S/01tyAtI00XqrXEm7/h52f8/HftYox+4nXw4MFDhw6pVCpHR0crKyuO1w5e
FhYWlpaWVoaE9/FXuo0ewa+/GKOwsLAjR47ExMRoNBq1Wu3h4WFtbc3paYch
6d+G8fxujHJycrKzs3U6XV5eHgbg4+OjUCj0P3abwsibt1JLSwu7bmtra29v
r6qqys/Pj42N9fb23rVrF7O5wSlvop07d77aSq9fv8Zrf3//y5cv3759++7d
uzt37pw/fz4wMNDZ2RlzN5mOuc9vT7Ozs9PT04uLizMzM/X19UePHoXLAc28
zgRhAD+M1MePH4uLi5VKJfsEk+mQUeivX792dnbC3xwcHMyBmkYfHBzUarUH
DhyAw8hDX1lZoYsvX740NTUBTT7GmW126O+N9RcvosPrnj17lpaWxh604GUm
/Z8NBCgGsLy8TBN///59SUkJdhl7cKMIZpQ2tzmGgQtY4MGDB1FRUbt37zYT
t0366uoqXcACIyMj5eXlbm5uHG9wRAnzZ705HVAaAIJMR0dHXFycjY0Nxxtc
BjpWnPwNu+zixYvu7u7sEfOdbUs6rTgGgPASERFBNxvMp+LSV3nR9djYWFFR
Ea04rE05RVI6c3Us/aNHj1BL2Nra0s3IKTLQae6Tk5MVFRWooIgoLtcgnZkd
exwJ/ezZs6gfOH7WKISkpsPmbKM1Njb6+/vTbaCL6Oob0dk2f/PmDUo4e3t7
TlAlykAns3d1daFq5dbCi+jcdXSaMtHHx8dRwHh6enJroVVqOkU20L9//97X
13fy5EnyN5bNZaDDAvC3uro6VMt0g3RofTo0PDyclZW1d+9eTrKNto6OKa/w
wnVPT09oaChNmZovGeg0gKWlpdraWtTqnMQ2F9IpsEOjo6Po0Tje2cQqXLek
Y4PTRXd39/Hjx+lPVE7IQGfV4/Xr111dXelPkvqbPh2tSmpqKkujUoRWg3RY
HnEGPVpkZCQnWU7RFwuwCwsLT548CQgI4ETqFLYjFuKmpqZqamq8vLzofTnp
0IcPH3Jzc52cnKgll4fOdvrAwAAWHd0K0WVwOSH98ePH6E8xZXOOI0yjY93v
3r3LMos8aJiX1v3bt2/V1dW01tLVEuuEaEY7Dg5/5coVelM2OoxMZkdOz8nJ
+V/oMP7z589RutOZmzx0gGB5Sq/379+Pjo6mslker6PDZAqzra2tISEh7H0Z
6FSzEf3mzZu+vr5y0ml/UYK7evUqS+tSx1hhCqPkXlBQwI4fpabTinNr57Sg
o2VjTboMc6eLffv2Ef3ChQvM1SWl06bm+InDz0FH65SUlMS6VOmym/C8y87O
Lj09nehnzpxhXElzKysafXx80DgQ/fTp01LThR+LbiUhIaG3t5foiYmJUtOF
lWpQUNCtW7fGxsaIjiAvNR29CTk2qgg4eX9/P7o2op87d05qOmtL/f39Kysr
0TtQTQV6cnKycC+ICKXDB2ZzFxeXlJSUp0+fss4d9MzMTPSMUtDp4IW1hMeO
HWtqavr06ROjI9rodDoq6jixow3lcaoZUDCjQR4cHGSHwEQvLi52dnYWl77u
kM3e3h7Brbm5eW5ujhIrNc54vXHjBjIsBklDFYWOzxH24H5+foWFhXB1dlBD
52N4bWtrCw8PJ7pYtQ3RafqwJwLaw4cPZ2dn2YpTQYtVQCsRFxdHT4leWSkU
Cm9v72vXrn3+/Jmg7ESU/vE0NDSk1WrpZtGrSqwpwgtKRwovWGi0D9SzL/Ga
mJi4fPmyFHRMHDbv6OgYGRmhMwpscNABxQWdxkP19fXsMNx8KHPdgIAAFI3o
VpibrQrEfODFixdqtRq7XpQdh63t7u5++PDhS5cuoTv+sZUWFhZKS0tVKhU9
blrEY0/t378f/Tg8ra+vj7XJm+vevXvsf52m0Znd3Nzc4Gnd3d3z8/ObEBFy
sRH+5AV6cHDwuu+lGCU6WYU8PT0zMjJ6enomJyex6Ejlo6OjxBLq9u3bCPsN
DQ1oZ8rKyuAkKG4pF+t/YUYog1+qQaqCk2PRlUqlRqNBCdHV1dXe3g6Xrqur
I5ZQJ9aEaBMVFeXl5QXHwwCsTRLQe/bsQeGE3gSLGBMTc+rUqfj4eHw+rk/o
6V+fySy7
      "], {{0, 74}, {42, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{42, 74},
    PlotRange->{{0, 42}, {0, 74}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJztmltIXFcUhk+8O17iPZPBitEQkAQcSR4UJ3NRk0ZSU4hKvLx4qcYWMgUt
lpqHCZhRnwzYmqTGhkgwIIoIBto8hODtwQd9CBExJkRrEdOMJKiT1jS2/TOL
2RyrI+OcvefB5gMPZ87s2f9Ze6291j77eKji6/PVPpIk1QXhcL78W1Ntbfl3
+RH4UGiu+/KiueqLXPM3VReratMrfHHxK/wl4e/D+T/ieffu3V/iefv27Z+e
8od7oOXq6urf4llfX/eCX/YYv3nKwsLCr65ZcIKWL168+MkNOjs7Ozo6fpRx
8+bNGzdutLe3/+Dg+83gCr66fv062qAxTj7bkby8PBzPnj2bm5t75syZT52c
Pn06JyfHaDQaDAa9Xn/Sid6JyWTKyso6deoUNQ5xj9DN4EpQUJCfn5+vr6+P
z4e0Q+xzgCv+/v4BAQHBwcHUXvrILvnENfHx8UlJSUeOHElMTIyKioIj/GUE
uAFr/LkLEF0IraKiosrKSnxMSUmBx+Fu/MTPyVZF/82wlk3bYbVaGxsbr1y5
0traisivq6vLyMiAiuSIIhqEfe5BjX92wYMHD35x0NPTc/nyZZ1ORwHJfrgr
nsl4/vw5jk+fPp2dnZ2fn19cXJyYmIAtZWVlqampKpXqP3foDtR+zQlqDR1f
v3795s0bVJ/379+PjY1VV1drtdoDBw5gnHcrwdhadND5xsYGEikUu7u7T5w4
gf5pgnsmIbleXaBeT05O1tfXR0dHy83nq7K0tITsiqQHQ7irYMToZHR0tKCg
AJPR457lbDhh7sDyaW5urq2tLTk5mdqQ35WoUOc4IqjIEJvN1t/fX1xcjJTC
VOTp3QOoZxyxdqLzx48fw+mHDx9mbSCh0BZ5UOEIo/r6+lAHqVukICWdy1Vo
muAEQzc1NdXQ0IAkTN9i0Lh4n+6fDFlZWcFaIjs7G8mEvlXud7kKwMnMzExV
VRWSiTzxKpeQnN4Hdrt9cHAwPT2drsMjCuNKDmYHqSAVWywWtVotQgXThFRg
CIoj6h1d9zj9bgv5HTm/paWF5ghM4BXADPI+0m9paSnVXCro3FVQtrAMTktL
oys+DrirTE9PoyCyOsLRHQw8Wt6/fz8zM5OSlfKUtS14uMDSSKPRSM6xEqHy
6NEjLO0ogLGA594/Ab8fP35cchjCPbQYtbW1SFySwxDu04TB5ruIAGYcO3ZM
ckSvOAkQGxsr8c6NW2HDJSKAGXxz7w6IC2A5rKYIxTu2iJuMDESXuPTF8E6M
eSeMvaMiNLF8VPEMzBQveJ/X48nOILeIVhG3+mKgcyR80SqSo6wITWLynsWp
sBWL0OHCWFHlioyMFKfCDNFqtSL6R8+sMh48eLC8vFyECiTYTpHBYLh165YI
FYwVrYtUKtWlS5fw0Mq3f/nUgDl4VoUheG7lK4GxYuuuhIQEs9k8Pj6OR1eO
wYyuELqBgYH00WQy9fX1LS8v81VhwC8hISHwyOzsLO2Mcali8tAFERERMKSr
q8tut9O2m3IVksBAsWE5evSo1Wp98uQJ267kbgvGqqCgYGhoaH19na8KAw/C
Op2uubn55cuX1D/t8fL1vl6vt1gsDx8+pG039I8TCEn8MvP+/fsxQYaHh1+9
ekUb4LRTzUUFHgkLC4uJiTEajXfv3l1bW6NtPRIiJAVLMrq90NDQ1NTU/Pz8
pqYmxNW27yaUq+BZ/ty5c9euXRsZGbHZbKxn8jttVitXUavVJSUl9+7dgyH0
zgtT/tlmaJfSxyPoJXJcXBzZMjAw0Nvbe/v2beThO3fudMlAIcC0decVpyui
oqKQ4S9cuFBTU1NRUVFUVFRYWIhjsQw/xeAmw8PDYZFGo8Ho4STWQZwMzzzy
fyaQByjxwQ6wnAjejpOKQYZEbsnKyspxTSMPrl69irK17et1Ysgr/O4VNryC
q/fIfBH7r2NOvGPLXsI7MbaXvP8vRSQZ7g==
      "], {{0, 106}, {34, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{34, 106},
    PlotRange->{{0, 34}, {0, 106}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
ffEff9wkMw==
      "], {{0, 82}, {42, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{42, 82},
    PlotRange->{{0, 42}, {0, 82}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJy9mmssXFsUx09RRlXMeIzST0JbufEMkStBOgktEoLSGNJI67qIhESvx5VG
aUoIqkV88IjcjxI0Ecltm/og8fxC0g+It3hEFfWKZ+91/3dW7JzMjAmdc85K
5mQ7M2f/9lp77bXX2ofLs5y43004jnsuwyXuaYEqN/fpn4/k+CMh+3lmenba
bxHZf6Slp+X++swUNyPx+QWf/9vlBuX169elpaVVVVV1dXUvXrxQqVQKhYLT
yLVr1+h6GWG/NzMzu3XrFuvkb4Py4cOHT58+odHe3l5WVhYWFmZra8unX14Y
3dnZ2c7Ojm7O6Mjs7Cw1JicnFxYWvn37Njo62trampmZGRAQIJfL+RpdiQ4B
3d7eHp3QzX19sre3t7u7C+7BwcHZ2dnIyEheXh7Qt2/ftrS0NEZ3ExOTGzdu
sE7+vViOj4+B/vHjR0dHx8OHD2UyGZ7F4K8E1TsM1smZQcEYJiYmiouL3dzc
jIRqDeAy9O3t7aampvDwcBsbG+npY2NjarXa0dHReIPzBTNIjX/0Cdl8a2ur
paXl7t279EtTU1P2lDECxdGVLh0Odnp6iivoJycnvb29KSkpcFFGZ08ZSWeW
ZB4OIg2AdF9fX3/16hUUZ3P0E2v8ImFaaHk4NWCBoaGhqKgo/oAF4V5EB5q0
hiwuLtbW1t65c4d+c/36dUFsboBOZqfwgvAOxa2trek3JhoRm066r62tVVZW
KpVKYYl8YT1rTToU7+/vT05Opm8puopKJ58nxXd2dt69e+fj40PfWlhYiEHn
xzqi06QjqkNxFldFMr4WnYyPvfX9+/ekOLjC+rleOn+hTU1NFRYWUuKBVSZs
bL+ITjZHo6enJygoiKCCrzK+8HcZsjwymYqKCppx8bTWopPikMHBwaSkJLqJ
hSYNHXsZ0EiikDN7eXnRTXNzc1HpzJ+xoYC+srLy5MkTFlqF3VMM0Cm+9fX1
+fn5ccKlEJenw99qamoQ2DmNv4m3zLXosDDoX758iY+Pp7nGHQl0pzVFdCzz
e/fucbzSTBo6BNtKfX29lZUVd+7qEtARSKmBbSUnJ4faYi80XTrq0+joaGqL
HeJ06Y2Njb6+vuRsEtMBzc3NdXJyogxfgrVGAjVBRCUbGxuLBIbTxF4J/I07
X9TQ1NnZOTAwkJNqmZMQCFfMOJVpou7mWsJCDcyOSZeSDii5HFZ3QUEBnQIJ
WKNdkq5QKJqbm7GrwgGkpJPlXV1dP378CAtItsxZVAE0JCQEuxu/mhZbyLvo
0Cw1NXV5eZnjxT0J6NTAllpdXf39+3dOqs2Fb+TQ0FBM+tHRkZR0ZuSMjIyl
pSVk8lLSaVk5ODi8ffuWigjckYDOIjmu9+/fx7ZORQQnvu6EJrMjvBQVFc3M
zDC62D7Pp8Pbu7u7Dw8PpaRTA9ljXFzc9PQ0VU9EFzXa8M8BPDw8UDjs7+8T
nXxeVDrQrH+1Wj08PMwOiCTQndUIyGQqKyt3d3fpfIzGIB6dn6rdvHkzKiqK
LTQqnEX1OjONUNvNzQ0zPj8/T1B2aCAenZXDuEZERAwNDTGV2TmVGHR+roIx
QHFEmM3NTebqjM4P/kKhQWR9IoOCq6NQZTPO0CLRMd1UI3CaNd7Q0LC6uqpl
c7HnHcOQy+WPHz/u7+8nLpt3Pl2oXYbiOT+uBgcHv3nzZmVlhdY40gk26dTg
NEfBgtBpK2FxFVkrMnYEN7annJ6ear1w5ISzPLk60XGNjIzs6upCVOcfxupa
XvBMHn7u7+9fXFw8Pj5OFLK5XjondC3j7e1dWFiIuLqxscHo9LZLS+h1m4B0
dJiUlNTb2/v161dAyd/oNZ+uuLu7Uy1vJB3OA66dnR1K8tra2p2dHb0TrSVI
NvAI0X+ijOXvYlAkOjr65cuXAwMDl0FD8vPzXVxcqIefODlhA0ZxFBYWVlZW
9vnzZxbZzs5fdV30ir+kpISOCo2kK5XKmJgYFMVjY2Nzc3Ozs7PI33T/rUJL
srKyEBaovsPcmVxR4DPUQI3w4MGD8vLyzs5OLPO2tjaMBNe/DIpKpXJycjLX
CIKe+RWFPYKQ7unpGRsbm56enpaWhn0tISEhMTFRbVAQGWQymZnRggGgUoAF
kL9BHUyEg0aUBuWqEy2s/AcRy4wn
      "], {{0, 74}, {42, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{42, 74},
    PlotRange->{{0, 42}, {0, 74}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJztmUtrWkEUgK1GTRsMBUnrxhoDlkbyA9zFEFN156vGBrsw1IZCsGAK1SxC
Y4iCv0CyiIoiBf0HAWvFqEgWWYp0ZzcpRElSyKN5nd4BF063M7eF84HD0cV8
zrlz75y5o1/+4HonlUgka6PQuAKf5sLhQNT9GL68Cq29XwkF39pDH4MrwbBp
WQY/huFjhM+fOJPJ3AhcXFzccCedTotoz2aztwKXl5e33AH7ncDV1dUdd9CO
drSjHe1oRzva0Y52tKMd7WhHO9rRjna0ox3taEe7iHZRziYymQwJ8GSEM5D5
awGxzuN+C5yfn19zJ5fLkSTAP+Gf+UKhwF86AK47CUS545LJ5A+Bdrv9nTvB
YPCLwO7ubpY7JpPpjcDi4uJr7oyPjz8VmJiYeMIdCSISCoXikcBDMZienrZY
LAsLC2azeY4l8/PzFgqn0xmPxxOJxMbGxmeWbG1txSmi0Wi9Xm80Gnt7e19Z
UqlUvlHs7OxAXQErbL/f/8WAs7Mz0vZ6vZ8UpVKJ24pGVxfFYpGbnSaVSp0I
HB8fnzDg9PSUtLCCg25ohY1EIuVyGWYFzLoyA0jP0Ha7XXrscMdtbm7GYjFG
dxz0vL6+Dor9/X3aPjMzY7PZ7HY7PHBeMgB6np2dtVqt+XweymYihZyTQK1W
T05O6vV6rVb7jAFTU1MajUan021vbx8dHZGpDtUsCeRyOTxv4Tk/ygaVSkUU
q6urnU4HvDBw0gIPGAOrGKxlEPj9/oODA/BCwkkLsF5DR0ZGSODxeGq1Gme7
VColgcvlqlarYtndbvdfx04uECM7TDkS+Hw+WEmH7OCVskSpVJIA6udms0nb
Wc95EsDYaTujhNOZh90KnXm0ox3taEc72tH+v9v/teqCW2UF9nq9PmSXyWRy
lsAejQRQVdJ22GsoWDI2NkaCpaUl2s76ug92E16vl/+cH+BwOFqtFjn94W+H
fdzh4aFY9kAg0G63yVuLwfmXRqN5IWAwGJ4zwGg0Qgv9x2KxbrdL7IM3J/cw
PcK3
      "], {{0, 114}, {42, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{42, 114},
    PlotRange->{{0, 42}, {0, 114}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzNWgtIFFsYXh9llpY9vFipYYqPqEwttZYw0cjsrd01qdDsmpSkqBduF0vK
6GEWJWEvDTKiCDZ7YZEpWqQ9lDJ6p1EWaWpJDzSt1Pu1Px6Os7qNuzvT/WCH
M8uZmW/+/z/f+f8zxykmMWyNqUKhSBmEQ9iqfwKTk1f9G26Dkz8TUtbGJcT+
NTfh79i42GT/GLOfPfDzxu9nu8tgdHZ28qdtbW3Nzc11dXXV1dXl5eVnzpw5
duxYTk4OjqdOnVKr1ZcvX66qqqqtrUUf9Pzy5QtdWFRU5OPjY2FhYTirjo6O
79+/8/+8fv26tLT05MmTe/bsSU1NXbduXXR09MqVK3Fcs2bN2rVrk5KStm7d
mp2djT7oCfJ04Y0bN7y9vQcOHGgUVu3t7TjS6Y8fP0pKSjIyMqKiopRK5eTJ
k93d3Z2dncePH4+jq6urm5vbhAkTYJOgoCD02blzJ0z36dMnYuXl5WUUVgyw
2NevX588ebJ///6IiAiQMTExUfSNQYMGoY9KpcrMzKysrPz27VthYSFsZaAH
OzRgp4gTuOPgwYOwgKenp6WlpQ5KBPRBz8jIyL179966dev48ePTpk0bPHiw
IaxgHLwgY3jlypUNGzaEhoZOnDhx5MiRv6REQE8PD4+QkJBt27alpaX5+voO
HTrUWLZChMMR/v7+VlZWCAwzMzORrMzNzdF/2LBhIAajId5sbGz0Y9WpAbUR
6qCUn5+/YsUKuiEBQYXHIUhwHNCNgd3A/zjlA8/R0REvBbvpzQomYr5raGg4
ffp0XFzclClTBHYYwAE2GdAT+IfvDJ729vZjx461trbWjxWGP0xEbQyf+Ph4
jHqKBx4mOqHtTQQ/AsDAaAe3+vp6KPaMGTPotqamprAAgqqv5/ZKG1exOERb
D2VAODElb2xsPH/+PHxnZ2fH3xPeIWJiWNGLkHIS9FBRRBSkktoVFRWJiYlQ
b/6e4IMH9ddWgCGsujQyRfTy8vL8/PwoaMVwEIn+smJqgAF4//59GIqpJaYP
0DOEG1mM9EQ8K1BimtnU1JSVlTV9+nQWpeJjqS8wp+vBisyFiFqyZAkEmb+n
3nwE6C8rOn748CE3N9fFxUXBSYGxKIlnRfMLuQ8RVVxcjKyAtA4mIt/9Flag
BM1E+927d+np6WQogkgRkIIVuQ+GKisrW7hwIV1uYHgbwoofejAUhh5SXHY5
r35ysmK+A27fvh0eHs5m4d9oK0rtYLHW1laI+bhx46Swjx6sqIEyARUTGQcp
h3TcdLOiCKdZD05EgRkQEEAXIjGQwnf9ZYWEMzk5edSoUXShpE4Uw4qIQRCC
g4OJj3E1sy9Wnb2BIooayO5Qm6P4VWjGnSDflpMVyRS5D5n5okWLhgwZoujO
HmVg1Zf7CNDzEydOODg4gI/UvvslKyYIL1++TElJoRGH1E66oSdg1dEb2tra
iFVBQQETBD4/lw5U4/zoDaxkQPkvjyAIWOlQBpR7qNMVXFL921nBiUVFRUjO
FRpBkCHU6a2RRiq0lAHuo1B/8+bNjh07MB3TJTK4j1iRHtb0xPPnz6urq6Gc
yIRVKhVbZpHBffQIev28njimgVqtRpx7enpi3FGhJycrILInli1bFhERsXz5
ckx8VITKM/QYqG76g4NtN6AGyDnlEXMBxEwi8qjB/xz/TyMwVpYaoBbmG5Ay
2cRcmxiiPZhDUFDQnDlzAgMDx4wZQwvUsg1AJj4wC0rO7RygUZmZmampqR4e
HlTuycaK5d6Ojo4QqGscSkpKysvLUc5MnTqVOssmDmQEHJVKJRLyRg1QxeCI
mh3Hq1ev0qQsJyua/pAwxMTEFBYWUppHkzKOLS0tFy9elNNWFFGUUmI22bdv
HxJgQQLT3Nx85MgRxBVdIk+qQOtgaE+aNAmeQs7JEhhqIIHZvHkzQk5OVtRA
XbB06VL2aZUvH168eLF+/XrMiYJLpKPEggSm2LVrF31XFeDZs2dRUVGypVXk
O/LIrFmzrl+/zhameFs9ePAgPDycalJ5WNEjYLH4+Pj37993aRZbaAyiTKbG
3bt3Ie+U0kvNildpd3f3nJwcskx7ezsFOVhR486dOzNnzmTreNKxIkqsxkTY
VFZWEiv2AYtfZvTz82OGlYcVBtehQ4dYnPP7EKhx8+ZNHx8fxkdSVtTAdIx8
oKysjKzEfz5mrDAP0rdaSVnx62BQ7C1btrx9+5Zo8PtbeFYobaRmZa4BtTHk
IQhsZYMH70EvLy+pWRFwcyRy6enpHz9+5Dlos0K0+/r6skTU6Kz4L6dWVlbz
58+/cOECEwQBKxb2FRUVAQEBzLxGZ0XbBqjt4uKye/duzHECy2izunfvXkhI
iHQqyr7cgdvcuXMx9NjWCG3wM05YWJgUMw5/K8gUhh5S8aamJvIdvxFIm9XT
p08hsyNGjCDvG4sV1eksMEaPHh0dHV1QUEDPpflOByvkgUlJSRgaZGdj5VeC
fQvIwDHr1dfX9+U7Aau6urqMjAzplq3Azc7OLjY2FhNul2ZFUUdcsc/KkA7U
OK6urgpjrPlTUscn/w4ODojbo0ePomyhR2sLgoAVbdKDkFI1wY9i/QBT4w5s
RAOohQ8fPvzw4UNmIm1BEIA61NbWhoaGKnqmr3qDT6JsbW0RtKAk2DapG9T5
8+fPSAsF30zFD0a2+4W/BKf29vZ42by8vNbWVuY7wV5THaxgsezsbFZ8WVpa
IrpELoawbUIC71tbW8+bNy8rK6uqqop/nBhWzMXFxcWLFy+mGyL/YTuFRLJC
f8FuNCTAKOjgO7aTtktrU64OVtQTRdnGjRtRyfbLcdp/gh6sBJ1RqVRnz55l
minSSgT2TRD6oFarZ8+eTXs8CDSgSKLNesK8GwJWyAr8/f1Xr1594MCBx48f
s3fHAOxVzHsFy05xIaYepIhOTk7sEXiohQb8tka2uZH+F6ius7NzQkLCuXPn
Hj16REmU4EHiiVGjpaXl0qVLmNbZertIb7IxOHz4cEQ4Bh0TzH4x6dVcQE1N
DcylVCoRGGJ28BIgKeiP5H/BggXIM2lmIcBx/YqoXoHxUlpaun37dmSMUBuR
rNzc3NAfapmbm3vt2rWGhgZ2Q8HWZf2AO4AYXjYtLQ0JKtKbX1JCigJKmzZt
ys/Pf/XqFS7vl4wz/Ae97EXX
      "], {{0, 82}, {50, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{50, 82},
    PlotRange->{{0, 50}, {0, 82}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJztl8tLG0Ecx/NQSeorClYQrNZDxBpFfGBPUVGizUWwVKwYRamVQkhBi6Gg
WJV48G8wkIJ48oXeBFvjwYNiFA8etCB4EYMIhWKMedhv/cEShFnX7LbpYT6Q
YTI72c/Ob2d+M3ne97HtvUalUg3pULT1OhsGB3s/vzbgyxvH0IcBR/+7V45P
/QP9gy/7tGi04vMCnz/1WzbBYJAqo6OjBoNBrVajf1VV1d7eHhrD4TDKaDQq
cgc5cDu3czu3czu3czu3c/ujiLK5vr4WsYdCIfSJRCIid5AD7FQZGRmJtft8
PjQqYk9s5BNrj7AJBAIILyr3Ir+7uwv1zc0NLqEicocHCbO5urqCHZVYe2Vl
JdkRGZTUIW5EwiJcHRsbE+zV1dUHBwdyov1YxsfHBXtNTc3h4aFSdxZZDnjv
1AeRz8zM/Bvr/QcbjPH8/Pzk5MRut6enp5PdZDKtrq6enp4eHR2hz/Hxscgd
HuQrG7fbPT8/Pzs729raqtfryV5YWDg5OTk3N+fxeER+K5G3bNrb23t6ejo7
O0tLS5OTk1V3ZGdnt7S0dHV1dXR0oA+VcfOUTU5OTm5uLiqpqak0cJCUlIQH
oKtCGTcqToLQi/LkDkw54b1rNBqdTodG8R9KpIFNfX19c3NzY2MjVhkmG9mx
8Gtray0WC9qbmpqojJsvbLCxTk9PY3XX1dVhvDT8vLw8JB+0u1yuqakpKuPm
O5u1tbWdnZ3Nzc3u7u60tDSyG43GmZmZra0tdPB6vRsbG14Z/GJzeXmJVIx9
1ul0Cnm+vLx8fX0dl87Ozvx+P1KxXwZSdiKEKCsrK3Z/R6MipwspdrxcwY49
bn9//1ahE91PNhcXF1QZHh6+t8NGFTrTfmODWUfTz2azCTusMHZFTpXiK25i
YgIHG7PZjMyAPEPvXcHIW9ggG1itViScoqKilJQUsldUVGxvb9/eHYblP8Mz
Nvn5+fAWFBRkZGQg15G9rKwMGYBOpPLnvE4U7OyIOdRarZbsOGlgPtBykz/r
1BKgzYXsJSUlKysrwh9MmZGXuBUK9uLi4sXFRSTARNkXFhYSaP9nY489VAj2
paUlpewaCeAZYu3Ly8tK2aXM+Xt2Bccex3vndm7ndm7ndm7ndm7/b+2/Ae9z
8Qk=
      "], {{0, 74}, {42, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{42, 74},
    PlotRange->{{0, 42}, {0, 74}}]}], "}"}]], "Output",
 CellChangeTimes->{3.771766731913014*^9, 3.771771206156034*^9, 
  3.771853783467849*^9, 3.771855099453822*^9, 3.771865059727365*^9, 
  3.7761725090292788`*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"3cede728-4d6a-4d3b-a2e0-6a68b06722df"]
}, Closed]],

Cell["Resizing the trimmed images:", "Text",
 CellChangeTimes->{{3.77176682856004*^9, 
  3.771766839525466*^9}},ExpressionUUID->"a7c37ca1-efc6-4bed-8ae3-\
dce420b713fe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"resizedBBoxTrimmed", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"ImageResize", "[", 
     RowBox[{"#", ",", 
      RowBox[{"{", 
       RowBox[{"64", ",", "64"}], "}"}]}], "]"}], "&"}], "/@", 
   "bboxesTrimmed"}]}]], "Input",
 CellChangeTimes->{{3.771637156033901*^9, 3.771637176190154*^9}, {
  3.77166226160531*^9, 3.7716622700052*^9}, {3.7716686184528646`*^9, 
  3.7716686207406797`*^9}, {3.771699995811638*^9, 3.7716999980224953`*^9}, {
  3.771766739914722*^9, 3.7717667542956753`*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"ab79f1a7-48ff-46f4-aead-eaa87fdb43a9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzVWntIVGkUv2qtr8pNK8siMw0tArNSV4twicolRG0astDIXEdEc8FWpq0s
i0gqi6wg/U8h0qAoCCoMK8mgP6KHgvSwh2SlFWRm+cjH/nZOczh7x8psmns7
4OWbz/v4nXvO7zzu9wWs/2uFyVlRlI1uOKxINf+em5v6j+FX/DDmbMzMyEn/
84+cv9Mz0nN/W++CyZhPf/+NpTg7O4+wCAbKt4iTk9PIkSN/sQgu53k3N7fp
06cvXbo0Ly+voqKirq6uo6NjwCo9PT3d3d049vb2DgxX7IKfVCDBtXR0cfn0
ftzd3WfNmpWSklJSUkIq9Pf349G9Fvn48WNfX5/m+FkLQg5zSEN4enoGBwcn
JiYWFhaeO3fu8ePH79+/JwB9Qvotojl+MgHP0MDV1XX8+PGRkZEmk6msrKy+
vv7du3esAqwAX4I5tMWvWB2JdSFDSF8KCQlZu3ZtaWnp9evXW1paPnz4QEgI
OZmAbKEJ/kFvKO8JUpMvbdu27eTJk3fu3Glra2M8MAQYjeMQbfFD8SuCEcxr
TCJMTZo0KTo6Oisrq7y8vKGhAZj1iZ9UAH66MzsSJn18fKKiorKzs48fPw4V
2tvbKSIRHSgu9QvREL+0As/DCn5+fgsWLMjMzAQdamtrm5ubEZfI/wn8V4OS
A/ArIi6xF5E6iKu+vr5z5sxJSkoqKiqqqal5/vw53jzD+2pcdRh+KS4Wocfh
CEb7+/vHx8cfOHAAVmhtbYUKBJiys3QkTfCrdMEjqN7gHIcnBgYGwgr79++v
rq5+9OgR0jRHURx7raJSQRP8lKAhTGeIh4dHUFBQbGys2WyurKwEo7u6uggk
MPdYxLbYcDx+1kK6E6U8DMaOHTt//nwwGio0NTURFwg/ByU94GcVyBZsCDza
29s7IiICqQFxFfXemzdvUFqwIVSiLX4ZlBRrsQRdoEJoaGhycjLocOXKlWfP
npEKTAcu+TTEr4hiiZ9OvoQxKiX0DgkJCQhK165dQ1DiHM34QWdt8UsBckQk
4jXNYDBjxgwUe0ePHkVcffr0KfUOXOOBDvrBT0+nuMpG8fLyAhfS0tIOHjxY
VVX14MEDStBkCF29f258JJ0xQNcQFhZmNBp37dqF3ufFixccfOBR+sEvO1BJ
agxQZoALcXFxu3fvRteASo+rC/3gZ+FiT2Y31BjIbgaDobi4GHRG49PZ2alt
/P+cSBMoogNFgiYrFBQUnD17FlxAByov1A9+2T5z1U2FE+gQExOTn59/4cKF
xsZGeaFO8EvhYk+SeuLEieRIUEGerGf8slgFF8LDwzMyMkBnebI+8VPvKT8o
YWbq1Klo3MAFebI+8XMsYlSYhAlQqU6YMEGerEP8UmTJPegJesZvm9ds5afA
L0OrShGd47cttkeIT8TKT4Wf45I8R8/4VTLo+5dfZrQCNkShStvV1VVOslKy
8NOnfA4/TUIoXxPfvxx1NRFu1lSTgI3G2dMiGOAnNdS6Aq+IcKqahFJ4+e4W
AXh5gj4NoZLP1Rs0ydFJzyoMKj/Ry8cbhuegwCMvgjvZutlQqhHHC8AA7Zgx
Y1CX+vv7h4SEzJ49G0cU297e3viXTN86AS8BwMNHjx49ZcqU0NDQJUuWJCcn
b9iwITc3Nysra9WqVQsXLgwICMAJlB2cxCKphrrIh8JzfHx8Zs6cuWzZspyc
nJKSkqqqqlu3bt2+ffv8+fOHDx9OT0+PiopCB81XcXOHoyYqSN8GBl9f37Cw
MLxttJYAzx+7Ojs7GxoaKisr8/LyFi9eDO8CNfi188DxHFfhR2s/b9681atX
79mz59KlS69fv+aPde3t7ffv34ch9u7dm5KSEhkZ6efn5+HhIWtC228FjsRP
y8pz5841Go07duw4c+YMfS/lRcDu7u5Xr17duHHj2LFjmzZtWr58Odg9atQo
vsMIq2iIH/5jMBi2bt0Kb6mrq4MJurq6eOEMx7a2tnv37sEQRUVF69ati4iI
wFWIt4pIE5wBf7Q7qfDDf4B/5cqV27dvP3Xq1N27d+E2quVLHKFRa2srDHHi
xIn8/PzExEQYAr5E9yFHIl9iLRyJH/5TUFAA/2lsbOT9IbQOS0JadHR0NDU1
VVdXFxcXp6amhoeHg/5IE7weZ0tquyvyBfynT58m/2f8tF1KbvfCTzgYAiyc
bfPmzQkJCUh5CLC4Fd+Wv+rDIhripzcv94fwUiaiKxniyJEjJpNp0aJFCE1c
nMvNG9riB2badEf77uRGBcy0tLTcvHmzoqJiy5YtcXFxwcHBXl5e8v4yU9tL
kWG8f0kEpgM5GBjx8OFDGOLQoUNpaWnR0dFgBPsSgbcvo78Vv9xNITcQ8poa
DPHy5UsYAjnCbDajFAkKCkKOkN0EV7Dfn6+/B79q3yCrgAGi1pMnTy5evIg8
vmbNGuREGIJzhGJdrSNxJH7V22bhTVNMCpyDZF1bW1taWpqdnY2qCeUrqiZ+
HDFaP/h5iwhPwliIrvX19bjVzp07kdZBaq43iA4cl4bnS/bCP/D/bQlyow6S
dXNzc01NDUiNwg++NG7cOFqkdrIub0k6aIV/wLrRiHMEkwJjqjfKysrQEMGX
pk2bJmtXZbjR1b74Bwbb4kLzuBCkhiEuX75cWFgYHx8fGBhIjFbE5o1vDUp2
x68iBcIp/AdHThNv3769evXqvn37kpKS0Kii2JCfYZ1svvNri583ycvoClKj
LUXJhAQRGxs7efJkVUM69GLpX/zDPQk=
      "], {{0, 64}, {64, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzVWntMjv0bvx85dxClHMopqRQZLamEUNJGXpRmpLfyrj88bZUzs7GHckiM
ETGN1BaqMTQso7HV5DSHWmNRlJ9yKsXvffX7/J7rfa7d7ufgeTs993ttPbvv
u/vwua7v5zp9v9/Rvyf8trqHIAhJffHzW/T6WYmJ0RsXW+NkqTIp/g9lXGyI
Mjnuj7hEn9/NcHHm33//P27rYvnx48dfIvlTI//VyJ8i+etnwbNdDU8bLQEm
PPoAGA8Md7Jq9PLOA6tDCDms+l0tBlQwUvCGb9++4VU0Ul2E/4dG9GFoaWlp
amr6/Pnzhw8fGhoa3r9//x+14KBBLY2NjR8/fvz06dOXL1++fv0KzHjKwOc6
ETxsTgbHr/Z/m5ubq6ury8rKrl27lp+fn52dnZmZeejQofT09AMHDhw+fDgj
I+PEiRNZWVlnz569cOFCUVHR3bt3nzx5UltbC0V0fguCg87CL/ZQ5j8+0dra
+u7dOyDPy8tLS0tbt25dXFxceHh4SEhIQECAj4/PtGnTZsyYMXfu3NDQ0LCw
sIiIiJiYmKSkpJSUFGhUWFiIZ/EGjAWTh/jZcdfW9yp8qL6+/tGjRzdu3MjJ
ydm/f/+GDRuio6OBEIDd3d1HjRplZ2dnZWXVXy04sLGxGTJkyPDhw/EvNzc3
b2/voKCgpUuXxsbG4tmDBw/m5uZi7MrLy+vq6uhb/NtuLSgscACkizgAVa5e
vbp79+6oqCg/Pz9nZ2dHR0fAGzRokIWFRZ8+fXr16tWjRw+FQiGoBQc4NTMz
69mzJ/6FG8zNza2trW1tbe3t7fGsq6urr69vZGTk9u3bQS04iGTE24FcrDUp
gtfW1NRguEHj5OTk4OBgfBqQBD2iUIu+/2rfDAvMnDkTDIQHPXv2DEGg3ZYH
WgqMfAVxo7i4eN++faB3YGAgSALTwar0aSNBGgBPv6AZ2AXLrF279tKlS/ho
W7sCEY0djQIUAScBftu2bdOnT8cnwASihEQU/1D4QbyQTEG/OAUnlUrlrVu3
MOjG4yezM99wCj+9efMmAmB8fLy/v//AgQMlFgN/evfuDVb3VIuZRrS1E6Nl
XyDBGyQ87Nev38SJExMSEuDUSBxG4gdycYRHWLty5UpiYiLCBeIJIgm+wtZr
H88ltNF+lq5AQejl4OCASFtSUvJLtki8FSq8fPmyoKAA4L28vGANernY2sSi
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
QBkDsxvYz9wR+R/HBKXJ
      "], {{0, 64}, {64, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
27e8p0XLtp/Bx//TJQ4qif39/bds2VJSUsK7TXiznKZP7fzRc3DAk8HhdGLc
wwk6ERA+Ozv77t27KCzFCEkOq8n+g4Zf1vqRwOw2NjYeHh5r167Nyclpbm4W
zd6T7Q2G3WLULTrUhaxNlYy40EFiamo6ffr0mJiYjIyM4uLiR48e8X4GTd6q
Cb+BILoCzyqIlaTU/SkKGgH8pk2bCgoKnj9/DuR92/apTh6OaTw1DEAdnljf
issy6h8O6BywEdt9fX3DwsJoMw86EeYJ7wbs+cYqdYPzZglRBUOt23j4HkLO
m2dkKmNk8uTJERER6enpZWVlT548QZzhCM/SK/uzH1laWqK11GE6I8tAHYVC
gTLMxcVlzpw56LuPHj2KSlLcuiPupuvtlip6ka2tbUBAwOzZszG52r/witb+
pbOAQuPGjUNUj46OPnDgAOqBysrKxsZG2j3Fpha/O/cKPOGXVHsh4Ep79uwB
LR0dHaECggO1P7KyUJOnM38Q2EEec3NzOzs7T09PFJDbt29HMQC2wOa8b60/
mNXxu7u7I4hdv379zJkzSN+RkZHod/z8/FxdXZFZrK2taaVXnVpUN1pYWACt
s7Ozl5dXYGBgaGgoSkc02mlpabm5ueXl5U+fPqWUJOLnzbT9UYHM6O3tnZeX
h8TX0dHR1NRUVVWFy9TU1Pj4eLhbUFAQGn83NzdME+1BhYDSUA0jGFcqlQsX
Lly3bl1ycnJmZmZRUVFdXR2iYnt7O6iC0h30HqDd1/8DrXTE+w==
      "], {{0, 64}, {64, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 64}, {64, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
MfNb/Nye/Q8MjOuV
      "], {{0, 64}, {64, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzVmguQjmUbx19nRYW1OeTQJqQIUyRFiyI7U8vypWRHCWtjqLVah5VDDsM4
dFBJOrLis5IYh6aaNJSY1UqkyCFbSCdSJNb38/y/95q75919vfsuZrpm9p1n
n/d+7ud/X/d1/a//9bxPXJ8hSf1LBgKBoeX5SHo4o11a2sMjulXin/8MHpqa
Mrhf386D0/ul9Etr1acUJ+P//3f2+Exklp+ff/r0aT71719//bV79+433nij
U6dOFSpUYJ6SJc8CwGrVqjVw4MCcnJxTp07le/b333/rqq+//nrUqFGxsbEa
X65cuTJlyug4Li4uPT39m2++Oe2ZXXK+zIf/jz/+2LZt26xZs+64445LLrnE
xX/VVVcNGDBg06ZNJ0+e1Hgu5PP48ePr169naVWqVNH40qVL6xLO4IeXX375
p59+0vxHjx7ds2dPbm7uxx9/vHLlykWLFs32bPny5Vu3bv3ll18MSZHwC4nm
x8NTpky59dZbQ/GnpqaCHx/aXbgwLy8vOzv7wQcfvPzyyzW+VKlSOmjUqFFK
SsqCBQtyPFu6dOmYMWO6du164403xsTEaI/OhkupUg0aNOjXr9+KFStwINOy
xZHjZ7Dh/+2333Dmk08+edNNNxEGLv7atWsPGjRo8+bNpzxjFVyF89mvOXPm
JCYmVqxYkWElSpQw/Nddd13nzp0TEhKaN29erVq18uXL22xYac8YzCfO6dKl
C3F75MiR4uA/fPjw+++/P3To0MaNG5ctW1bO0e3q1KnD+Z07dyqMdQmf69at
y8zMZL+AJ/zgEU5hM8x8VTJonMf/DNB6mbx79+7z58+PDr+NP3jw4Lvvvsum
169fX/tr+MlEdp8QZdiff/5JpBHVRPLo0aPZLCU7YOR5188ubKyEZwozjeeg
Xr16ycnJixcv/v3336PGzzHBTE716tWrbt26SkOXfx555BFuQRgTYGw3sK++
+urLLrvM1uizEo75vnLx46gmTZqQXMT/sWPHzgSZIRID+UnPtJDvvvuOTWQr
a9asKVQGgLtUqlSpRo0aRPKll14aCrXAJRRmCi1dRaK1bNly+PDhH374ITt7
TvxiDzEPyE+cOGH7BflPmzatadOmoLVgKBCbHOiGd9T4Ibp27dpNnjz5s88+
owCFxy/MLgdiZA3XTp8+Hc9DZWIe39YraEUahS0qclP+au0Qb48ePaDZvXv3
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
CwMu/4CK/KWSEv8w4f8A8DKcIw==
      "], {{0, 64}, {64, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
oFVRWYXzmQuCimQR/Lq5HckmMRz7H2sXHjc=
      "], {{0, 64}, {64, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
sUSRetBR0pYJjjGEFIOS6U+U2Qj+f851pLs=
      "], {{0, 64}, {64, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzNWntQTWsU33nnlZRTiUrMCYmTqEvjUWk6pRvFZZjMEG4ZJqPUdRkNGo+R
Sxjj/CH0h/EcjAYpJmOajDwmeR3jREXeRDlxuer+7l63Zd9zepzb4+zzm7Hn
O9mP37e+tX5rrW/vQTHLo37tIAhCYjccohb8FpCQsOD3GX3w45f4xCWx8YsX
hcavXBy7OOGnmI744+R///0z7tAWECSwsrLCXzo2BPwd/yv8F1b1aOwqQHoV
nclo7BITQZS6dOnSo0cPGxub3r17Yyy0NfAUur+1tTU9lAkMaAX69+/v6Ojo
4ODg6urq6enp7e09fPhwJycnmoKxqVuMnj17uru7e3l5KZVKPBSPYA4/tw7h
IiIiIiIjI3GcNGnS0KFDbW1tO3XqxF5h4GDNgq5iv4I1QHjs2LFhYWHTpk3D
46QE/mgp0tLStm3btmfPHo1Gs2XLlvj4+KioKH9/f5jI3t6+a9eutL6YiIG/
NQbpaXwVBt27d3d2dlapVDDRqlWrdu/evWvXrm0iQONWi3Djxo2rV68WFhY+
fPhQp9NlZWUlJydPmDDBxcXFzs4Oy925c2e2v9X/B1+FAW4Fz1coFJMnT05P
Ty8qKrp37951EWDyV0vxp4i6urpPnz6dP38+Li5uyJAhpBVk59a7PU8HN8RP
eCYW/eXLl3joVxGgUddS1NbW4ogpwAhYx5CQEFhe+ty24i+I+oNjv379YCWY
/fv370ygNfxxn7t3765ZsyYgIACeA3FrPecG+dMRMeXj47N582ZaAprFd5NB
hGnWGHz79q2srGz79u0jR47s1q0bhZvQprLJsxDqlwAPCgwMzMnJgfMQh6+m
AX7y5csXHGnW8HmtVnvw4EGoGeKLn0IR1+b8AVIk/ISWQoJevXoFPp8/f242
Tsn4mCnOx5Gcp6Ki4sCBAxBMKJvUSkI72J9AWoqbQ06TkpKKi4v1er3p8Vtb
D4yrq6vz8vIWLVqE5Mv60E60GSBPC40oiI6OvnDhwvv3702PU+ZfWVmZn5+/
bt26UaNG4Z6CaHDck8btyp/KEgyCgoL27dtXXl5uCn+sEQULxjU1NchcGzZs
8PPzQ0HFNzeD/cl/BNFcUAwYEC5kCn9yflqI0tJSTFytVkMH6J4UU2YA11E4
Dhw4MDY2tqCgwBTPYc2E55w9e3bhwoVubm50TywoJtLeliewssFiqNKnT5+e
m5vbLH9YnmIcg5s3byJVkdqzTcxmf64laDxx4sQzZ840y58sjyMEMyMjIzg4
GLUZM29zqTeRP4BEfOLEiWbJE/+qqqqLFy9CMNE7EPnOIszJX5CEAAA3OHTo
UBPkKXNhAPFBvbpp06YRI0ZwV2JgDbPxZ3dFo4fs3yx/jJGpjx49OnPmTCQ+
XEiWNydtKX/OMqil9+/f3yDzOlEzKWxR8ECmVqxYMWzYMJo7yCNbycIfBNh0
4A8lb4I/AM9BhYlmbdy4cZytWtDPthWk9vfw8GiMP/cFHz58yM7OnjdvHhoH
vlwu8oLJ/sNFXUlJSWpqKiKFu0LZ+XP8enp6ZmZmNmh8qhZwhGaGhYWRt8ul
OQb82Xoqlerw4cPGlpcmrB07dri6ugpizKJUkJG5YJS/fH19T506ZcCf60y0
V+fOnZs9ezZlW7gNVsES+NMAfFAJgKGUP5hDLcl5YPyUlJTBgwdzyWe2Oqcx
MAcMFArF3LlzL1++bMwfS4AxSrXIyEgS2/ZuTEwE1//gD/FMTExEJyLVfPIf
dMRoDxEaY8aMofWinTS56f9IXpiFv7//zp07Hz16xJanKSB+QR59zdq1awcN
GkQXypiwpOD+EccZM2YgeF+/fs38KWwBNMWoS3ECfIyd30L4k/2tra2XLl16
/fp1vV5vzP/Zs2coNZEdUK1J92Dlpv/D/jY2Nhs3bnz69CmkhrfgOOfev38/
JiYG5Gm+lsCcwGTc3d2ReaHwnGqZPwb5+fkhISGCGC+Yr+z8efXpiDQ0ZcqU
S5cuUcyCv3RXk5wfyiPUr5cl8KddDpoIUlJycrJWq2Wzs/PjqNPp0tPTlUql
UK9XlsC/kwhBjFy1Wn38+HHaeSPm3GdRq7Jy5UoXFxehPt4thD/RcHJyWr58
OZpZ9nbpDgnk6OTJk3PmzLG3txck+6WykycaMKafn59Go6msrKRUxRs7VDOg
W8H/BgYGUqtF18rLnxoW0nBnZ+f58+fn5uYybRIfrnnevn0LXfXy8jJ49SYL
c35nQZ4DSqgZEJsPHjwgnWfxp7cSdeI+Q1JSEnyMLpSXP1WbXDra2dktWbLk
ypUrvGfOsoOCDVPA4Pnz57GxsVTwk17J6Dz8kYAgKomPjw+69Tdv3pDzSPfW
mD8qB7TqvLEsI39pq4VZoJKMi4u7du0apSoWTEJNTQ3xLy0tjYqK4ncE8m6S
8OZqr169wOrYsWOs+dzkGvB//Pjx1KlTyeX4ZZn5wYJPmReV5NatW1+8eGFQ
ZxrzRzsQGhpK/M35YkLKXOqx8AQ3NzcUkzk5ObwZSFIpBfyf9AfShMqNamxZ
+PNnG/RzwIAB0dHRR44cKS8vJ7NjFvwC1Jg/Kmfwl9F/uE4TRLcPCgrKyMio
qKgwtrml8TfwHJD39fVdvXr17du3SS1pY6TBDx7k5W9V/4UMCnuu8FUqFTIp
SgUqdbhIa5o/+b/5+Qv1tTo90dHREXVOVlbWu3fvaiVo1n/Mz99YcFD6gsPe
vXufPHlCnOnTCwvkT/2p9EEODg7h4eEo0m7dugVWRI/fPlsaf/7gjd/qjh8/
Pi0trbi4GCmp7r9vIpoATqbJyhW/8HyUl6NHj05ISMjLy6uqqiJiVBjTLJr4
Kunjx4/V1dU4HxMPDg4m2u2XvwxeQ+PYp08fSP369euzs7ORqsgZ4DM1Ivjr
o8ZApxnYv135U1dC5Q3U0tvbOzU1taioCJYEHyoVKNWSbDYNivE6sf40T/1G
PtO3b18PDw+1Wp2SklJQUGBcmJkOqt/KysoiIiLamz/5DLoktCTLli3LzMy8
c+eOXq83kPpak8GNsE6n4/qzzflLpR4DhUIBqdRoNBA9cvgWg75iBfnTp09D
waTxK5U4q9aBuhL6TN3W1lapVM6aNQt5qrCwsKSkRKvVggMxuS0CYsKDpvE3
pWYAYQ==
      "], {{0, 64}, {64, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 64}, {64, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
/P8DEtCx7Q==
      "], {{0, 64}, {64, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzNWgtQTVsYPqcuelBXuKQH0gzyqhExHhMTQ2qiPDKjKHS7qEtlTIQmYxrR
NOORGRQxhIQZFCFqPIpqkiKVKBp5VUfpoZvud89/W7Ps3UmP0+l8M+3ZrbP3
Wt/+17f+9f9rrRGefzt7aUgkEn8tXJw9ts728/MIdPkd/yz19f/rT991axf4
Bqz7c53fVE9NFNr+//fffXPX8OPHj6ampn9aIPipQ+DfbZKD6hT8pHSgocbG
xu/fv+OKe6U0B9oNDQ2os5v4k9l5tsyGaFQmk5WXl79586agoCAvLy87Ozsz
M/OJHI8fP8Y1IyMjKysL5Tk5Obm5uXjs9evXZWVlnz59qqmpEVTYzHWlssjD
LN/lwCfwP6GktLQ0NTX17NmzERERO3bs2Lhxo7u7u7Ozs6Oj48IWLF682NXV
1c3NzdPTc8OGDUFBQeHh4VFRUZcvX05PT//w4QMvRTTXKEfXO1fwOvVCfX19
VVUVGi0qKrpz5w5ogDa42dnZTZw40cTERF9fv3fv3pqamhoaGlKpFNdevXpp
a2v369evf//+xsbGEyZMsLW1dXFx8fb23r17d2xs7MOHDwsLC1FndXU1mIub
7gRI5wI7fPv27fnz53FxcaGhoevXr4eRp0+fDj6mpqYDBgwASRCWtAk8oKWl
hQ8ZOnSoubm5paXl7Nmz0UFeXl579+69cePGu3fvmLmYbjvBn70LQCd1dXUV
FRXQc2RkJBQybtw4PT09ZmSeHtlcUwQNOcQPA/gVvWNlZQX5wTivXr2CoUhU
HR0IeJh8S3NLJ6Ke4uLia9euwT5r166dM2eOmZkZbMg4iC0MPr9xYJ/Zdu+g
+0aPHu3k5IQBgubQEWR5fly35xOYb8fzMPvLly9jYmKg8JEjR+rq6vbp04cZ
k4FZsm3xCMzOOov6C1d8LCwDNXp4eGB04xMYk18KCU/y34txmp+fj0pCQkKg
T5DnDU5G7tUCXh6Cb5GKwAhT7+B12ARXvjeHDx8OZwUtsV74JX8arUQeN8+e
PYOXs7e3R1V9+/Zl9bcq4PaYve2OoBLWEQAGOOQKIcEvEatW9UNdw64owfNw
6fAwkLqBgQGrmWzF67lztBUBdaIjMArQBP5FK2PHjt20adPt27cxnKkLWiXP
/CRKKisrz58/Dw9jYWEBs6MScdcrnTkDeSrWI/gcOOfg4GBM7gL+4oCqtra2
pKQkPj5+5cqVRkZGrEIyO1XbTbQFQEOYAakXdHR0MPru378Pr8jrh8V79FH4
FUFLWFjY/PnzDQ0N8TqrimlSNeSpURIq9bWNjQ0cIOIlxHhi2QOYtUEe7h2T
KTFnNlcZZwF/shjJCUreuXNnWloatN3EgT4EhRgg/v7++ExM61SDOvBnszZC
Jsw+Fy5cQNTKwmC6QUhw7949X19fOEnqLxVLRRF/3lHAB8ITHjhwABE4nzd9
+fIlISHBx8dn1KhR9CSZHVCHT2BeCJP+pEmTEKk+evSIEhzg69evsDziJUS8
4kGqMlejCDx/DEnERYGBgZiVyAVBNomJiZs3b0b4Sm6K5g6aZNUBPH8YFvLG
CE1OTgZ5WB55x5o1a0aMGIHJTsIFvT1udgZBXAGXDqkkJSXB8ikpKQEBAYiB
JS2eVh0EL4CA/5AhQ5AuIbtBF6Aj0B1EmPlY9bE8geePK+IB2B/8kRrAz9Mz
veVQN+YEnj8yAkRBCOOR/VlbWw8ePJiegWzAX92UIxH5f2TWiGqio6NLS0vh
ZGieYo+pof0ZMQLE7+zsDP55eXkSuTuiAduV1KO7weyPKwRjZ2e3ZcuWQ4cO
dTFjUhn4jANpCLLXyZMnz5w5s7sTEGWBmLN7Gqosqld/8PwF5aon037wuSqV
wOa08DhADvXnTwqne319fcTGs2bNWrBggYODg6Ojo5qLn+IBYohhO3XqVC8v
rz179hw8ePCwHOrJn2mGpb2QDebc7du3I2Z78eJFUVHRSznUnD8ZH5MsZIOA
DXGyTCbjlwfVkLyEWxwj5WPCQniPaO3z58+C9eeeZtoK2DxFywU6Ojrz5s1D
to48hW39sKWSnib7E6Qti8CUAwIDBw6Eqzly5AhCNTJ4fX19XV0dbe0BPUtY
DLaILZGvHsDyp06dev/+Pb8qy28A9TTf/yAVraOC/6BBg+bOnYsIrbCwkK2H
s+VBtdK/lFueohJEyMuXL4fm3759C8Gw1XLxFmSPMxc4cFgeyezSpUvPnDlT
VVVFZm9oaFC0+dWD5GkjlbZWqQT348ePR2B/8+ZNaJ75ebaYL4bqafPWZvbH
VU9Pz9LS0t/fPzU1lbYnaOe67U0i1ZOnYABTKh/PGxoaOjk5hYeHp6WlkWwY
f8GxEHWwP784SYJfsmTJ8ePHS0pKaD2TDie0Z3tUNYTZrMTnICgxMTGxt7ff
tm0bXE1+fj7bj4DPwb368Kd4hm2gUOGwYcPc3d1jY2Ph4REb0F6nohNBisAn
CMpiK+UODPCE6QHkIObm5nZ2dhiq8fHx8PCMKrmaDp35Ue6CofTnzWjxUiqG
7ZQpUwICAq5cuVJQUIChyhw78enoORNB6/zJhPaDHRsQd4REHsYgYzU1NYVv
h9p37dp19+5dCIZxoONbbfuZX/JHW2iIFiXYKYtfgu344y1Fm6rIsm1tbf38
/I4dO3br1i1kT5WVlc3cZCoIyToEAwMDTBzoVkGa3wnl8EmTlpYWbI4YzMLC
YtGiRaGhoSkpKR8/fmSTEfPtXTyYhHGEMM/a2hrNdY65ANra2sbGxjY2NitW
rEC6evTo0YSEhNzcXEhdMJPy5ys6DTiBkJCQwMBAfAgmQV1dXW05SA+Cszq8
2tkIRd/B2ngFjgUz0bRp05YtWwbmcOmQCjlGdo5F6Uci9+/ff/Xq1fT09HPn
zgUHB3t7e7u6ui5cuHDGjBlWVlZjxowxMzMzMjJCBvqHHLjBZ8LCKIc20HHQ
NhSyevVqeJV9+/ZFRUVdunTpwYMH7KwOAztZocRPQIKQmZmJCpGUlZeX5+Xl
JSUlnTx5MiwsbOvWrUj53dzcXFxc2OlBBwcHBCqw8KpVq3x8fIKCgiIiIuLi
4p48eQJPDpHU1NTU1tZi9mSndJR7+lEApJY5OTl8iUwmKy4uzsjISE5Ovn79
OridPn36xIkTUXJER0fHxMQgOL948WJiYiJixezs7LKyMjhAceU0SJV7tFWA
yMjIp0+fNnPBKh3kQHfAklAvTAp3V1FR8aUFuEcJyqurqxHoMlO3OvV3q/GB
w4cPZ2VlUUMgA9qdO51I2m6QgwwuzlW7A+APAdC9oqhPfDSoVZMy98I0393k
BfzZkeAfP58qbxSB/cSmTpURbj9/hn8UgD3QI8wJ/wI1+AWK
      "], {{0, 64}, {64, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
neaik0Uq1+Jfaacbmw==
      "], {{0, 64}, {64, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzNWgtMzW8fP8pLJMqlGiWlTLmtJqOLW2iViVzKbCh0X6G3sFZqFmMrEiIr
SzVjbGEybCSXkhi1+OeSS7m1iKLykvN+3t/3Pd/9nNM5qnM6x3fz29Px+z3P
5/k+n+/teR7roGi/YD2JRBJjgIdf4JY5mzcHbltqjD+WR8WEhURtWO8V9e8N
IRs2Tw/Sx4+z///vf22pRuXXr18/f/7s6OhQ/F21yL3/UxD0o/hfvScYDoP+
RxDFKXSrH+oEvWkHv3gU1idgtLa2NjU1NTQ0vH379vXr1y9fvnwhE7TxS11d
XX19/bt37xobGz9//oz3gVnciRaE1SXWOUb/+PFjRUXFuXPncnJyUlNTExMT
Y2NjN23aFB0djWdcXFx8fDx+TElJycjIKCgoKCoqKi8vx1zk+vnx40evLgTp
irmKsb59+wb1XrlyZe/eveHh4b6+vtOmTbOxsTE1NTUxMRkyZMjQoUPNzMxG
jx5tbW09ceLE2bNn+/v7b9y4EdPEfGtqalpaWgCb+uyltSBT5eXGE0sAPty4
cSM/P3/Xrl1hYWHe3t6Ojo4WFhYDBgyQKBF9fX1jY2PMburUqV5eXkFBQdu3
b8/Ozsb0QbPv37/TcDSWBieCrog2/CeYfPr0adDD3d0dih0xYgRUbWhoCIR9
OhOApyekX79+eBPvDx8+HPOdMmXKmjVroAfYCPX/QxCN4JfrBGoBae/evXv8
+PHQ0FAMDTBySgZOPT29vn37/ksmaOsLwlOQE2gAU8jLy6uurm5ubmajUHMK
ZFBETvrlzZs3ubm5wcHBc+bMsbW1hRoZsxwkvd9FGXISAwMDGMi8efMSEhJK
SkpgU6Qr9VeBDIpcPTR/5syZgIAA2CaUCVREaVYv4WTCyC2KWPAmfULLhAbx
ChYEHwWHoCZ+Ijw+pz/h2MvKyuD6Vq5caWVlRcMRSADAuH0FUTYFOeQEnj4B
eHzOL2MhPD09QU7YF8yZrLgHTkmMH53At8N7Ozs7Dxo0iC1UUcMqGKIochOk
1YSYm5tjiQsLC6E09tJdD/Fi944nrAngd+/e7erqCuXQEKQ0aI8HVVOgEzJz
TARtLDHiXW1tLUHqFn682d7eTq6+ra3t9u3bW7duRUgyMjJipXXRKrsuYmoR
u3x8fIqLi8ljkz67OAXmG8jz6NEjWJOTkxOUQ1qC2jWlc0VBz/3796exJkyY
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

      "], {{0, 64}, {64, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
B/5fCQKVBQ==
      "], {{0, 64}, {64, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
/uyYMXMdf3UO/jSsLPz/D/KLnnY=
      "], {{0, 64}, {64, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 64}, {64, 0}}, {0, 
      255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
QpjKXRTRfGysTAE3A1TdycWf/wIQr3hk
      "], {{0, 64}, {64, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzNWn1MjX8bv6snKr1IeiEPSjUlU9gya6aYlEllXlroTT+J9VDeCw9rNf5A
ZMiK2WQSnVj5ZbMaNjZCY0M5o9ITec/729Pzee7Pz3f373ROKqdzurbufc/d
/fL5Xue6Pt/PdX2PW8K/ov4wlSQp3QKHqPj1QWlp8RvnDsSHeanpy5elJi0N
TV2TtCwpbVKCGU5O/evv/+N/9shcXV1x9PT09JXN3d3dwcGhX79+JiYmksLw
0dTU1MzM7B86zOyn4TKTn8Z7cRIP7N+/v7m5Of+LkxjY29vj1SNGjCCS0O5b
SEjI9OnTZ8yYERkZGRMTM3/+/ODgYA8PjwEDBkjdNCVgDcPs8EAbGxscMQsg
x0nMyNvbGwDCw8Nnyvbvrtm2bdt41LCMjIyUlBQ8zcfHx9bWFk7r7hR0GTAP
HDgQ3sYULC0tMR2ctLKyAubNmzfn5ORsle3PrlllZSWO58+fr6iouHDhwmXZ
ioqKMjMzo6OjAwMD3dzc8CK8xURPBvw2sgEz8MPzwA8XJScnl5WVVVdXAwnw
PO2y/Ue2pqamlpaWtra21tZWlUqVmJjo7+/v7OxsbW2NV+jR/wgYc9ngEwsL
C0wHJ/F1ZGVlqdXqt2/fNjc3A89/u2nfv3/Hsb29vaGh4eDBg4h8+IQxzGzV
F35heKyFbBgPHjx437598B4AfPv2jUi6buJ6gD9+/HhcXBzSViRgJ8moR/xw
2vv374EBnuwWeNiPHz9wfPfuHSIfOQsSQ3zqHXBH/AgegX///v1K/J1Hyw/Z
lMGDwKuqqkpKSho0aJAkR6kg517Fz/jHKrNnzx5gAPKvX79++5V9+fLl8+fP
uJL+f/bsGYho/fr1fn5+yCwGvDjqfRbigUr8u3fvfvXqFcB8+vQJ8HR5noAx
BYBn2ODiGzdubNq0CYRjgLBRzkKX/3+ZAmIuAF9XV3f48OGgoCAuJSS33iCc
zvHn5uYK/qFjdaWquADTfPDgwZEjR6AWIDn42L6PHz7HNRjj+youLgb4kSNH
CpFmgMz9HfyCf+D82tratWvXenl50duIHyZvbyPvGX7yJP+Fax4/fsywJwNT
7homcrTiR/52jh/gyUsYg6nKy8tjY2NdXFzE0yQFsxkXf0f9IGKmXSao27dv
b9++HYRJb1NNGQy5VvzK+NHAz8gR63JjY2NhYWFYWBiXWjynL+Dfu3cvBIwu
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
      "], {{0, 64}, {64, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
yab7
      "], {{0, 64}, {64, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 64}, {64, 0}}, {0,
       255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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

      "], {{0, 64}, {64, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJztWmlMFGcYXoG2HMqleCACiwu0bAEjpwEUlD9ARMNm/SMqmKVKYkRXtBpB
jAdia6VA12gIGI8f3onxhyg1YGIi0UQTEkSzVfEKJILGA88CfTqv+2aYXXCX
wO406ZPsZGZ2jud753mvb0a5sijnJyeFQrHBFYuc/J/T9Pr8LRpvbGjXbihc
tbZAl7G2uGBVgT5xpTN2pn75/btuGBH+MKG6urqqqup3M1QK2L9//759+34V
4Rcz8F848jcBOKtSBFwf/27evDknJycsLMzNzU0hwMvLKzg4OMIWqE0Q7/xB
wPeDER4ejnupVCqlUom7BAYGzhAQYMIMEQIF4DAcPHPmzNDQUJyLK4ivFhIS
MnXqVA8PDycnJ+Lv4uLCY/kfFjFuRLDpFt/Yjm9FwKazs7OTvSAeHQ023mrE
CkhISEhJSZk/f356enpSUhL0T7KksfDoJMNkfGeCxX/5XAlcXV0nTJjg6emJ
FZiL+OPI8ePHl1qHkpKSLQKwsmvXLsSNioqK4uLiRYsWwXkRCnBZMggbSrxp
q5ElwHgnTpw4ZcoU3AjDIf4w2rRp0/60Ao0Crly50tzc3NTU1NDQcO7cubq6
urKyMq1WGxkZ6e3t7WQKCyPQ8PAg/pMmTQJbHx8fmJ32Yx1hqnMIdHV10cqz
Z88ePXr0+PHj7u7u3t7enp6elpYWkN+4cSMCMhSF0IeHy/YfRf58NdgctwBh
LNn+fn5+0dHRf38Nnz9/fvfu3fv37/v7+wcGBp4/f37mzJnCwsKYmBhcEJaB
JnHN0bW5+UDwfBHwKVzQTsgJHAasADHHQPAsLl68uGnTpri4OPiOxEpjx18y
EOYPGsPTJuZAX19fR0fH0aNHdTodzoLl+Tr2hDn//qHRJ4DW4Q4nTpxYsmQJ
Uj88SBxY7GN5APdyFsD84X19g0GCB4g5LA/xt7e3Hzt2LD8/H67KbLECQZLb
OpA/W5sEQ0MAaA82jUYjKsDMzEwUWiBsngHtxh83EvOfPHmyxH/Fggc+fPjw
8OFDaD47OxuCp7MwBFaOfWgPxR8ZAalHTJ7EgyU2P3361NraeuDAAY1GgwqB
jcwP0SH8xXZD0kT+Yv6QCsseQ0C0qa2tzcjIQMoWe70DIeGPAI5gYi4eDAFx
/uTJk8uWLYPD0sFUREE8jqMv5Y/UCVVzqITxif+rV68uXLiwYsUKtELgTAfj
LAzBsU+B+LOSYUx3d3dxtAd5VDg3b95EhkUrR4O1c5AcBhL+sCdKUAr7JKE3
b96gNtu9e3diYiKVSSSbsS5vrIREPyDm6+sLVyX+WN65c6e8vBxBlfpicTHv
UOJfQPGT+aMWhXsyeYT6+vr6rKwsiAr/4kjUCY51WAkk8R8dDbo/4o+qGHkK
5U1wcDAdgINlyJ+ckTapfqA8e+3ateXLlyNPkdTpGdmzNrAGxJ9N6u/vn5yc
jMakra1t7969aGMVJrMjtMqKOUHCPygoKD09HT578OBBrJDPUpyXlWwY1Egy
N5VKtXjx4rNnzyJVoZZQDJ5ucihTyyD+3P9CMLm5udu3b58zZw7todHJk7xC
0AZNENHmrFmz1qxZg/ISD4L2yCfVWgT7Jm3C7Dt27MAo0AjQHoqucuZP03q0
uWDBApT3yAI0KS3JbjIExR/SP6hqtdrTp09zPyJbsysGBxYqaaZPn75u3brm
5maFMBaH18bDQzLXgconNTXVYDDcvXuX/qWu1tE0hwQzJP5oTPR6PYz/8uVL
eiIyVz7xJ/2gbJ43b96RI0eePn2K4s1Rzbj1IPNS2sUKyra8vLzr16+jYUTx
RuRl67ysDYowqBPQW6Fae/LkCZX9/wn+RA9BRq1Wr169Gu05WkXwR/Ml58hD
CQsJlxgi7CDmHz9+vKOjg9oWSAjpTLb8FaKSBkDBBuUYjUbuGWF/efLnGpiW
GIVSqSwoKGhsbHz9+jXNNtA8rQz1w29bOCuhMUSRf/78+c7OTpreJPsDMsxc
4lJBIcwTolRDe97d3S2ZasNSVvw5mYonGdLS0vbs2YNSgcz+8eNHNOw8Ty4r
/pyqiD9WUlJSKisrW1tb0aeLZc/TtnLgb559QMnd3T06Onrr1q03btygVEtv
VcRvKGTCn23OskGeTU5OLisru3r1KmQvdlie7ZQbf57bREhHV7ht27bbt2+/
ffuWvdUiHBg/zSc6MBBYPj4+vqioqKGhAa5Kb4LgsCQhczgqf1EzSF+bMAEv
L6+5c+fu3Lmzqampq6uLZcOTzPLhrxDNbxM8PT3j4uLgsC0tLb29veSqwzB3
CH+aJZDIxsPDA+VBZmZmSUnJpUuX0FWx2SEeVo7Fl+z21D+R58KAK5zQ0NDc
3NxDhw7dunXrxYsXQ30DYBH2nzDkO6IThODDwsKWLl1aV1fX3t5ODks+O5TD
SqAwe6801uDJ+ZCQkOzs7NLS0lOnTiHDUktCoZKKBBL/8FCIerQxpS0uiXE7
f39/jUZTW1vb1tbW09MDhxVXZRxzvgqkafu4sJubm4+PD2iHh4cnJSXpdDpo
5t69e+yb1qjFHAEBAejL6Baj+7ZOLEssfX19IyIisrKy1q9fbzAYLl++fP/+
fZhdwsfWgahUKpr8H2v+fn5+sbGxeXl51dXVaKMgG7SxDx48MJrw14gQFBSE
IEDM6e2AyyiBv96kK6OSV6vVCxcu1Ov1VVVVhw8frq+vr6mpqaioKC8vR2PL
32/bBGQ9KNOaT09HDLogkhQkFBgYCBXFxMQkCJg9e3ZUVNSPAiIjI6Nsx6hI
ZcQCk7yxGmc7/gGqvU+t
      "], {{0, 64}, {64, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 64}, {64, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJztmk9LG0EYh5OYEBthaQsBYwUpsWoSkBw89CK0Bw8hN0sv4kWt1eSQks3S
pFKwiVj8AP45eBU8+AkChiQnD0LixUNWiDWiRQrVg5K2Sdf+nKmhhFhoC32z
Mg9kmZlLnn135p13Nnk4/mr4pclgMERacRkeiz6V5bE3z+6i8zwUCUyFJl/4
Qsrk1KT8eLwFg09+fq7ai4uL+Xz+kvGFUa1WNU37rhOWlpZ2dna4/1cGBtHW
dMKv/t8YGLzUD8KfFuFPi/CnRfjTIvxpEf60CH9ahD8twp8W4U+L8KdF+NMi
/GkR7z9pgX8ul+Nt/v4c8acO6h+wvLwMf94ul8uYP5VKBbdQ1Qmrq6u7u7u0
c+BfiMfjyWTyE6NYLO7t7e3v7x8cHHzQCYODgyMjI5FIRJblYDA4PT0dCASC
+sFisVit1juMVh1i0Dk2m02SpPuMezpkaGhoYmLiHSMajSqK8rqZiMViMzMz
b29mfn5+c3PzM6NUKiEFIfkcHh6WmgOeCYs3s7a2pqoqdRb/exYWFlKpFM//
uF9E/vj4+GMTcHR0hOvp6SlKGo2VZA3rB7/fjyz6noElMDs7i2ucjkQiMTc3
Bw3MfJisr68XCgVeEvNrHXa7vaurq6+vz+Vy9fT0dHd3P6ID397b2wsTtB0O
B7qjo6MbGxsnJye8JNOu/5hRi7/JZGphmM3mFmogg/0UuxK2VOR2dAcGBvA4
tre3z8/Pefx52Vbzp95/6uHxRDCNRiO6eBbhcJhnSD5huH9t/lD71gNt/ix4
1+12ozZDhsFCbuhvZJiuMVIDcyuD30t/fz8WcjabPTs700X8+RIAvOvxeLAL
ZzIZ4f9/EP60CH9ahD8tt88fp9pbvP/yYs/SHMAElU9bW5vNZoM8ul6vF/VP
Op3+Tf1maiZq8eRiiL+iKDqa/3U4nU5Zlre2ti4uLhr6S5KEI+QDBo5s7e3t
Djrw7R0dHTDp7OyEFUZ8Pt/KyoqqqrUfVvixq+b/A+nVb8w=
      "], {{0, 64}, {64, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzdWmswlVsY3m6HIumikdARRaYII7qMWxISDZ36lcklMpl9mp1ydP/T5EeN
MJxuw5TKji5TuvxI02UyJtkyNWXGSVIylVCUcst5+t5jzWrvTRvb3ua8M/as
/dnf9z3rfZ/1rPdda9nG/BkRrysSibYa4SMiOsVPIolOjTTDlz/EWxMTxBvj
gsXJGxM2Srxi9HDR97+/H+2+UbDvgvFfe3p62tvb379/X19fX1NTI5PJSkpK
CgoKTpw4kZOTk52dffTo0by8vPz8fFwsLi4uKyt79uxZbW3tq1evcFdra2tn
Zyee09XVdfv27bCwMFNTU319/dHA39vbi3cBMHWBPj99+lReXi6VSg8dOpSc
nBwdHb127drQ0NDly5f7CxYQEBAUFBQSEoKLERERUVFRSUlJO3fuPHz4cFFR
EbrT3NyM53R3d6MdHh5uYmIySvgBuFcwigIabW1tAJ+ZmRkbG+vt7W1paTl+
/Phx48YZGRkZGhr+1m+GghkJhh+YmZnZ2dn5+fklJCRkZGTcu3cPEYRb7ty5
s2rVqgkTJqgXP4Pd1+9zRKGurq60tBRu37dv35o1a1xcXCZOnChS2XR0dCZP
nuzu7o57U1NTL126BOKBY4jR1KlT0WU14gfybsHYlcbGxtOnT4MG8OHcuXOt
rKzgNEAiYKqA/zFE9fTQ5RkzZjg4OKxevRqM2rZtG1iHKwiTev3PCPP169eG
hobLly8j9Pb29hRoZrq6uvqC6Q1s9F/8kjpCfZk0aZKnp2dgYCA+ra2twUC1
4CfPg5nUCww0cBXjbsOGDQsWLDAwMJBzOLAx2htw9puCEX6+45Cd3wUzNzdX
i//J4ZA1wg/OP3jwYNeuXQsXLsQrjI2NdfqNJ4YqNhCp0HeMbjwZjRHi53Ue
IWhpaXn48OHBgwchMhRcchr5lvigCvPleoq7cC8egk/2L3rmSPDTbAKH09em
pqbr169jcPn6+kI0mA/xCcLQ24eHH0YjgqcTPXOE/gdnSHDQF3heIpE4OTlR
WMlvqkMdqo0QP58edHR0VFZWpqWlQRYopiIhvhhf8NuQHD64kU8oiCPBLzdV
VVdX796928PDA+LA3kWkVSN4ORshftYFTFK5ubmLFi0izzMBHz3kw8bPw6Yr
L1++RNKIdIuyAoovHouHj038LDHDV6hlYWEhUhEkWqLRH7AjxE/g2bBFSok8
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
wWdVVexfnuxDAA==
      "], {{0, 64}, {64, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJztl0lIHEEUhmfRZNwzrucc9OhyiM5BcUtcEEVGxYsXQ1SCYGTGGIJ3T0oE
nUnccLnoSQRFUcQNQa8awbhF1IsnFzQziTpj/vSLTUcTUjNJd8dQH0xRVbya
/uv166r3Hj59Ya7UaTQaqwGNufxVusVS/rroAQYlNdbnVTUVz3Jr6iqqKiym
p3pMpn3/fetfsXF5eflFgIajo6NFRUWhoaH4B61WizY4OLi4uHhubg42brfb
5XJhCSzdAoxPkQ+uX124fnXh+tWF61cXrl9duH514frVheuXCTcDMLu4uPgs
8Fv95+fnWALxWEIbASxPkY/b+kdGRsxmM+knoB87mp2dhQ05Xxn9jK/pn40f
Rkg/S/worP+SAYhBVDscjrOzMyzBEPEj6hfjBxE1PT0NM0QO7LERiiLA8hTv
cDHgFr5H0f8Ywv/wttT/QUFB2BH5X4x/lj//Qzx6WZBEnfHx8dLS0rCwMGn8
YGZpacnT/1QGlxBCgIZjY2Pwv9FolOovKSlZWFgQw16ZjXxkYGdnZ2NjY21t
bXd39/j4eG9vr7u7OycnJyQkRNQfGBiImcHBwa2tLRhsb29vbm5i7bYAy1O8
4x0D7e3tNputra2tq6trYGCgs7Ozuro6ISHB399f1G8wGDBjtVphDzO0drsd
7VsBlqd4RzoDGRkZaWlpqampmZmZcDKGsbGxERERPj4+4vmDPmawBdjDDC2W
UEsdmbjPxr1raOjr66vT6TQ/ghnM3zCWrpIDDUdVPHpZhmsQEogW+nIJ9DGD
eTKQKVpu84SNxwL4ePPz87Ozs/GdRkZGItpF/Xq9PioqKjExETZ5eXloYUYt
dWTiDQMtLS3Nzc1NTU04Qnt6elpbWysrK+Pi4m6cn/Hx8bW1tThpOzo6cHjC
DK1NwC4bHxhYX19fXV1dWVnB3XRwcIAWB29WVpb0/goICMALwu5ghiWwX15e
RvteYFU2GMsEyscoN7j6Wf6D/K2wsHBycvL09BQpHCWrTqfTIeCUDY+SDSqp
0JmamiorKwsPD5fqR0Y0Pz8v5kjK5D+fGIAD4dWTk5OjoyOownBoaAjevpH/
i/WLS8H6cZqBmZkZOHxSYHFxEUVuY2NjSkoK4l88QqX+dytYf71ko66uzmKx
ID1raGior69HqRUTE+Pn5yfeAsg/qX5ROH4S2XgkYDKZkpOTk5KSoqOjETy4
rXDsk/+hv6CgYGJiAvEmfvIKxI/RE3DgIMmEcqgl8WIKirsgNzd3eHj48PCQ
ylKqH9mrVO/QewWFDVqpftwIqA5wQVDkU/zIHf9eJ0439ONbQDbe29u7v79P
nwDJvlv6cf+ieLy7+uF/hfVrveJX+vv6+hSOH51X0C7QEc9P6Edd3N/ff7fi
X6pfFf//3fjn+rl+rp/r5/q5fq6f6+f6uf7/W/9XfwLVvA==
      "], {{0, 64}, {64, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{64, 64},
    PlotRange->{{0, 64}, {0, 64}}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7716622705617323`*^9, 3.771662595429779*^9, {3.771667869790441*^9, 
   3.771667889231174*^9}, 3.7716679755780287`*^9, 3.771668137000823*^9, {
   3.771668334299925*^9, 3.7716683561259947`*^9}, {3.771668430018837*^9, 
   3.771668445548759*^9}, 3.771668621228848*^9, 3.771699085861216*^9, 
   3.771699158478586*^9, {3.771699310474606*^9, 3.771699316945808*^9}, 
   3.7716993632343063`*^9, {3.771699757290876*^9, 3.771699768039166*^9}, {
   3.7716999772710867`*^9, 3.7717000063299026`*^9}, {3.771701539065711*^9, 
   3.771701562391274*^9}, 3.7717547262937593`*^9, 3.771755200357068*^9, 
   3.771756329789562*^9, {3.771758541299656*^9, 3.771758563571789*^9}, {
   3.7717667459962177`*^9, 3.771766754645874*^9}, 3.771771207378433*^9, 
   3.771853785275878*^9, 3.771855410866404*^9, 3.771865061384288*^9, 
   3.776172513290483*^9},
 CellLabel->"Out[82]=",ExpressionUUID->"66a62956-298d-48ae-8062-1b45b4d2bb44"]
}, Closed]],

Cell["Classifying them:", "Text",
 CellChangeTimes->{{3.771766843915066*^9, 
  3.771766845911867*^9}},ExpressionUUID->"c159cdac-2711-43ee-b4bd-\
c52327877d00"],

Cell[BoxData[
 RowBox[{
  RowBox[{"classified", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"symbolClassifier", "[", 
      RowBox[{"(*", 
       RowBox[{"Binarize", "@", 
        RowBox[{"Blur", "@"}]}], "*)"}], "#", 
      RowBox[{"(*", 
       RowBox[{",", "\"\<TopProbabilities\>\""}], "*)"}], "]"}], "&"}], "/@", 
    "resizedBBoxTrimmed"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771637192766062*^9, 3.771637204994647*^9}, {
  3.7716679964020042`*^9, 3.771668000695478*^9}, {3.771668711789016*^9, 
  3.7716687136595716`*^9}, {3.77166890272149*^9, 3.7716689037075768`*^9}, {
  3.77169912552392*^9, 3.771699128020554*^9}, {3.7716991939611473`*^9, 
  3.771699200880949*^9}, {3.771699258250289*^9, 3.77169926072795*^9}, {
  3.771703039423897*^9, 3.77170304088072*^9}, {3.771703083174609*^9, 
  3.771703084932817*^9}, {3.77176676281909*^9, 3.7717667925701723`*^9}, {
  3.771853810446328*^9, 3.7718538126292877`*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"a227f1d3-33a0-49ec-aa68-abab33d9dc44"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"(*", 
       RowBox[{"Binarize", "@", 
        RowBox[{"Blur", "@"}]}], "*)"}], 
      RowBox[{
       RowBox[{
        RowBox[{"#", "&"}], "/@", "#1"}], ",", "#2"}], "}"}], "&"}], "[", 
    RowBox[{"resizedBBoxTrimmed", ",", "classified"}], "]"}], "]"}], "//", 
  "TableForm"}]], "Input",
 CellChangeTimes->{{3.77163722245358*^9, 3.7716372387670097`*^9}, {
  3.7716623918514833`*^9, 3.7716624209545403`*^9}, {3.771668722099538*^9, 
  3.77166873005586*^9}, {3.77166877271131*^9, 3.771668887403062*^9}, {
  3.77166909237035*^9, 3.7716690961980658`*^9}, {3.771699230268752*^9, 
  3.771699252263075*^9}, {3.7717030244415073`*^9, 3.7717030258496733`*^9}, {
  3.7717667873058023`*^9, 3.77176679537461*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"cdf8fc08-fd56-48d8-925b-65e91cd8e1f5"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJzVWntIVGkUv2qtr8pNK8siMw0tArNSV4twicolRG0astDIXEdEc8FWpq0s
i0gqi6wg/U8h0qAoCCoMK8mgP6KHgvSwh2SlFWRm+cjH/nZOczh7x8psmns7
4OWbz/v4nXvO7zzu9wWs/2uFyVlRlI1uOKxINf+em5v6j+FX/DDmbMzMyEn/
84+cv9Mz0nN/W++CyZhPf/+NpTg7O4+wCAbKt4iTk9PIkSN/sQgu53k3N7fp
06cvXbo0Ly+voqKirq6uo6NjwCo9PT3d3d049vb2DgxX7IKfVCDBtXR0cfn0
ftzd3WfNmpWSklJSUkIq9Pf349G9Fvn48WNfX5/m+FkLQg5zSEN4enoGBwcn
JiYWFhaeO3fu8ePH79+/JwB9Qvotojl+MgHP0MDV1XX8+PGRkZEmk6msrKy+
vv7du3esAqwAX4I5tMWvWB2JdSFDSF8KCQlZu3ZtaWnp9evXW1paPnz4QEgI
OZmAbKEJ/kFvKO8JUpMvbdu27eTJk3fu3Glra2M8MAQYjeMQbfFD8SuCEcxr
TCJMTZo0KTo6Oisrq7y8vKGhAZj1iZ9UAH66MzsSJn18fKKiorKzs48fPw4V
2tvbKSIRHSgu9QvREL+0As/DCn5+fgsWLMjMzAQdamtrm5ubEZfI/wn8V4OS
A/ArIi6xF5E6iKu+vr5z5sxJSkoqKiqqqal5/vw53jzD+2pcdRh+KS4Wocfh
CEb7+/vHx8cfOHAAVmhtbYUKBJiys3QkTfCrdMEjqN7gHIcnBgYGwgr79++v
rq5+9OgR0jRHURx7raJSQRP8lKAhTGeIh4dHUFBQbGys2WyurKwEo7u6uggk
MPdYxLbYcDx+1kK6E6U8DMaOHTt//nwwGio0NTURFwg/ByU94GcVyBZsCDza
29s7IiICqQFxFfXemzdvUFqwIVSiLX4ZlBRrsQRdoEJoaGhycjLocOXKlWfP
npEKTAcu+TTEr4hiiZ9OvoQxKiX0DgkJCQhK165dQ1DiHM34QWdt8UsBckQk
4jXNYDBjxgwUe0ePHkVcffr0KfUOXOOBDvrBT0+nuMpG8fLyAhfS0tIOHjxY
VVX14MEDStBkCF29f258JJ0xQNcQFhZmNBp37dqF3ufFixccfOBR+sEvO1BJ
agxQZoALcXFxu3fvRteASo+rC/3gZ+FiT2Y31BjIbgaDobi4GHRG49PZ2alt
/P+cSBMoogNFgiYrFBQUnD17FlxAByov1A9+2T5z1U2FE+gQExOTn59/4cKF
xsZGeaFO8EvhYk+SeuLEieRIUEGerGf8slgFF8LDwzMyMkBnebI+8VPvKT8o
YWbq1Klo3MAFebI+8XMsYlSYhAlQqU6YMEGerEP8UmTJPegJesZvm9ds5afA
L0OrShGd47cttkeIT8TKT4Wf45I8R8/4VTLo+5dfZrQCNkShStvV1VVOslKy
8NOnfA4/TUIoXxPfvxx1NRFu1lSTgI3G2dMiGOAnNdS6Aq+IcKqahFJ4+e4W
AXh5gj4NoZLP1Rs0ydFJzyoMKj/Ry8cbhuegwCMvgjvZutlQqhHHC8AA7Zgx
Y1CX+vv7h4SEzJ49G0cU297e3viXTN86AS8BwMNHjx49ZcqU0NDQJUuWJCcn
b9iwITc3Nysra9WqVQsXLgwICMAJlB2cxCKphrrIh8JzfHx8Zs6cuWzZspyc
nJKSkqqqqlu3bt2+ffv8+fOHDx9OT0+PiopCB81XcXOHoyYqSN8GBl9f37Cw
MLxttJYAzx+7Ojs7GxoaKisr8/LyFi9eDO8CNfi188DxHFfhR2s/b9681atX
79mz59KlS69fv+aPde3t7ffv34ch9u7dm5KSEhkZ6efn5+HhIWtC228FjsRP
y8pz5841Go07duw4c+YMfS/lRcDu7u5Xr17duHHj2LFjmzZtWr58Odg9atQo
vsMIq2iIH/5jMBi2bt0Kb6mrq4MJurq6eOEMx7a2tnv37sEQRUVF69ati4iI
wFWIt4pIE5wBf7Q7qfDDf4B/5cqV27dvP3Xq1N27d+E2quVLHKFRa2srDHHi
xIn8/PzExEQYAr5E9yFHIl9iLRyJH/5TUFAA/2lsbOT9IbQOS0JadHR0NDU1
VVdXFxcXp6amhoeHg/5IE7weZ0tquyvyBfynT58m/2f8tF1KbvfCTzgYAiyc
bfPmzQkJCUh5CLC4Fd+Wv+rDIhripzcv94fwUiaiKxniyJEjJpNp0aJFCE1c
nMvNG9riB2badEf77uRGBcy0tLTcvHmzoqJiy5YtcXFxwcHBXl5e8v4yU9tL
kWG8f0kEpgM5GBjx8OFDGOLQoUNpaWnR0dFgBPsSgbcvo78Vv9xNITcQ8poa
DPHy5UsYAjnCbDajFAkKCkKOkN0EV7Dfn6+/B79q3yCrgAGi1pMnTy5evIg8
vmbNGuREGIJzhGJdrSNxJH7V22bhTVNMCpyDZF1bW1taWpqdnY2qCeUrqiZ+
HDFaP/h5iwhPwliIrvX19bjVzp07kdZBaq43iA4cl4bnS/bCP/D/bQlyow6S
dXNzc01NDUiNwg++NG7cOFqkdrIub0k6aIV/wLrRiHMEkwJjqjfKysrQEMGX
pk2bJmtXZbjR1b74Bwbb4kLzuBCkhiEuX75cWFgYHx8fGBhIjFbE5o1vDUp2
x68iBcIp/AdHThNv3769evXqvn37kpKS0Kii2JCfYZ1svvNri583ycvoClKj
LUXJhAQRGxs7efJkVUM69GLpX/zDPQk=
        "], {{0, 64}, {64, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"accidentalNatural\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJzVWntMjv0bvx85dxClHMopqRQZLamEUNJGXpRmpLfyrj88bZUzs7GHckiM
ETGN1BaqMTQso7HV5DSHWmNRlJ9yKsXvffX7/J7rfa7d7ufgeTs993ttPbvv
u/vwua7v5zp9v9/Rvyf8trqHIAhJffHzW/T6WYmJ0RsXW+NkqTIp/g9lXGyI
Mjnuj7hEn9/NcHHm33//P27rYvnx48dfIvlTI//VyJ8i+etnwbNdDU8bLQEm
PPoAGA8Md7Jq9PLOA6tDCDms+l0tBlQwUvCGb9++4VU0Ul2E/4dG9GFoaWlp
amr6/Pnzhw8fGhoa3r9//x+14KBBLY2NjR8/fvz06dOXL1++fv0KzHjKwOc6
ETxsTgbHr/Z/m5ubq6ury8rKrl27lp+fn52dnZmZeejQofT09AMHDhw+fDgj
I+PEiRNZWVlnz569cOFCUVHR3bt3nzx5UltbC0V0fguCg87CL/ZQ5j8+0dra
+u7dOyDPy8tLS0tbt25dXFxceHh4SEhIQECAj4/PtGnTZsyYMXfu3NDQ0LCw
sIiIiJiYmKSkpJSUFGhUWFiIZ/EGjAWTh/jZcdfW9yp8qL6+/tGjRzdu3MjJ
ydm/f/+GDRuio6OBEIDd3d1HjRplZ2dnZWXVXy04sLGxGTJkyPDhw/EvNzc3
b2/voKCgpUuXxsbG4tmDBw/m5uZi7MrLy+vq6uhb/NtuLSgscACkizgAVa5e
vbp79+6oqCg/Pz9nZ2dHR0fAGzRokIWFRZ8+fXr16tWjRw+FQiGoBQc4NTMz
69mzJ/6FG8zNza2trW1tbe3t7fGsq6urr69vZGTk9u3bQS04iGTE24FcrDUp
gtfW1NRguEHj5OTk4OBgfBqQBD2iUIu+/2rfDAvMnDkTDIQHPXv2DEGg3ZYH
WgqMfAVxo7i4eN++faB3YGAgSALTwar0aSNBGgBPv6AZ2AXLrF279tKlS/ho
W7sCEY0djQIUAScBftu2bdOnT8cnwASihEQU/1D4QbyQTEG/OAUnlUrlrVu3
MOjG4yezM99wCj+9efMmAmB8fLy/v//AgQMlFgN/evfuDVb3VIuZRrS1E6Nl
XyDBGyQ87Nev38SJExMSEuDUSBxG4gdycYRHWLty5UpiYiLCBeIJIgm+wtZr
H88ltNF+lq5AQejl4OCASFtSUvJLtki8FSq8fPmyoKAA4L28vGANernY2sSi
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
QBkDsxvYz9wR+R/HBKXJ
        "], {{0, 64}, {64, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"restHalf\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
27e8p0XLtp/Bx//TJQ4qif39/bds2VJSUsK7TXiznKZP7fzRc3DAk8HhdGLc
wwk6ERA+Ozv77t27KCzFCEkOq8n+g4Zf1vqRwOw2NjYeHh5r167Nyclpbm4W
zd6T7Q2G3WLULTrUhaxNlYy40EFiamo6ffr0mJiYjIyM4uLiR48e8X4GTd6q
Cb+BILoCzyqIlaTU/SkKGgH8pk2bCgoKnj9/DuR92/apTh6OaTw1DEAdnljf
issy6h8O6BywEdt9fX3DwsJoMw86EeYJ7wbs+cYqdYPzZglRBUOt23j4HkLO
m2dkKmNk8uTJERER6enpZWVlT548QZzhCM/SK/uzH1laWqK11GE6I8tAHYVC
gTLMxcVlzpw56LuPHj2KSlLcuiPupuvtlip6ka2tbUBAwOzZszG52r/witb+
pbOAQuPGjUNUj46OPnDgAOqBysrKxsZG2j3Fpha/O/cKPOGXVHsh4Ep79uwB
LR0dHaECggO1P7KyUJOnM38Q2EEec3NzOzs7T09PFJDbt29HMQC2wOa8b60/
mNXxu7u7I4hdv379zJkzSN+RkZHod/z8/FxdXZFZrK2taaVXnVpUN1pYWACt
s7Ozl5dXYGBgaGgoSkc02mlpabm5ueXl5U+fPqWUJOLnzbT9UYHM6O3tnZeX
h8TX0dHR1NRUVVWFy9TU1Pj4eLhbUFAQGn83NzdME+1BhYDSUA0jGFcqlQsX
Lly3bl1ycnJmZmZRUVFdXR2iYnt7O6iC0h30HqDd1/8DrXTE+w==
        "], {{0, 64}, {
        64, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"restHalf\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
        "], {{0, 64}, {64, 
        0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"flag64thDown\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
MfNb/Nye/Q8MjOuV
        "], {{0, 64}, {64, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"noteheadBlack\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJzVmguQjmUbx19nRYW1OeTQJqQIUyRFiyI7U8vypWRHCWtjqLVah5VDDsM4
dFBJOrLis5IYh6aaNJSY1UqkyCFbSCdSJNb38/y/95q75919vfsuZrpm9p1n
n/d+7ud/X/d1/a//9bxPXJ8hSf1LBgKBoeX5SHo4o11a2sMjulXin/8MHpqa
Mrhf386D0/ul9Etr1acUJ+P//3f2+Exklp+ff/r0aT71719//bV79+433nij
U6dOFSpUYJ6SJc8CwGrVqjVw4MCcnJxTp07le/b333/rqq+//nrUqFGxsbEa
X65cuTJlyug4Li4uPT39m2++Oe2ZXXK+zIf/jz/+2LZt26xZs+64445LLrnE
xX/VVVcNGDBg06ZNJ0+e1Hgu5PP48ePr169naVWqVNH40qVL6xLO4IeXX375
p59+0vxHjx7ds2dPbm7uxx9/vHLlykWLFs32bPny5Vu3bv3ll18MSZHwC4nm
x8NTpky59dZbQ/GnpqaCHx/aXbgwLy8vOzv7wQcfvPzyyzW+VKlSOmjUqFFK
SsqCBQtyPFu6dOmYMWO6du164403xsTEaI/OhkupUg0aNOjXr9+KFStwINOy
xZHjZ7Dh/+2333Dmk08+edNNNxEGLv7atWsPGjRo8+bNpzxjFVyF89mvOXPm
JCYmVqxYkWElSpQw/Nddd13nzp0TEhKaN29erVq18uXL22xYac8YzCfO6dKl
C3F75MiR4uA/fPjw+++/P3To0MaNG5ctW1bO0e3q1KnD+Z07dyqMdQmf69at
y8zMZL+AJ/zgEU5hM8x8VTJonMf/DNB6mbx79+7z58+PDr+NP3jw4Lvvvsum
169fX/tr+MlEdp8QZdiff/5JpBHVRPLo0aPZLCU7YOR5188ubKyEZwozjeeg
Xr16ycnJixcv/v3336PGzzHBTE716tWrbt26SkOXfx555BFuQRgTYGw3sK++
+urLLrvM1uizEo75vnLx46gmTZqQXMT/sWPHzgSZIRID+UnPtJDvvvuOTWQr
a9asKVQGgLtUqlSpRo0aRPKll14aCrXAJRRmCi1dRaK1bNly+PDhH374ITt7
TvxiDzEPyE+cOGH7BflPmzatadOmoLVgKBCbHOiGd9T4Ibp27dpNnjz5s88+
owCFxy/MLgdiZA3XTp8+Hc9DZWIe39YraEUahS0qclP+au0Qb48ePaDZvXv3
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
CwMu/4CK/KWSEv8w4f8A8DKcIw==
        "], {{0, 64}, {64, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"flag32ndDown\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
oFVRWYXzmQuCimQR/Lq5HckmMRz7H2sXHjc=
        "], {{0, 64}, {64, 0}}, {0, 255},
        
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"flag32ndDown\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJzFmgdMlFsWxwff7mJBrFiwYQkGu2LBXvMQUIwiljUWEDDE3oJEY4kaC/YS
S+y9xkYUjV3XoCKuGsUWsGLv5ako7M/vLDf3DcM4lMGTMPlmmLnf//T/ufer
HDy8W1g+k8k0Oj8v3YIi2o4aFRQZUJQ3gcNGhw8aFhriM2xM6KDQUV7Bf/Bh
m////bxOSUn5/v37169f79+/HxUV5eHhkS/fz6X+MMTBwcFkCNf/MkTe+vr6
7ty58+XLl6mpqT9+/EhLS0s1JO13COATExM3bNgQEBBQqlQp4DkYgiIKP9f/
NETeNm3adPbs2fHx8Z8/f5ZFUgxJ/R3y5s2bEydODB8+vEaNGgUKFBD8SguF
/x+GyNtq1aoNHDhwx44dT548YQU8+Jch4s2UPBRMB/7du3e3a9cO8GJzCSEd
v3wonyNOTk4NGzacNGnS3bt3xf7A/l3xk5ycvHTp0goVKqg4V3bWxSFd5G3h
woX9/f1xHMhJgW/fvsmFZIRc5IEcPXp09erVffv2BY/gJ8gt4s8YUW5ubkFB
QStWrNi1a9eBAwcOHjx4+PDhmJiYQ4cOxeSVeHt7e3l5VapUSdUWPU4ywy8X
qOns7Fy5cmXS2cfHx8/Pj9Xat2/foUOHP/NKsDY210uNLaI7AmERR0dHLKDS
R/worrSrFCxYMH/+/FxkCb+uhfohS7m6uuLK0qVL45f8hlATChUq5GQ36dOn
D16gHkptN6sztqhgMkIO8KRDmzZtevToMWDAgNDQ0EGGhIWFhYSEDDQkxA4S
Fxe3Zs0aOhe6mNL7VGb5a1GkNRA/qFC+fHlaM63tzJkzjx8/fvHixcOHD2/e
vHn9+vWEhIRbt27dvn37bq4K9TM2NjY8PLxo0Z98w0r9tOIC3WUVK1YMDAyc
P38+pRXw9m4KFO1z584NHjw42/iVFqoo4YtixYrRzfv167d+/fobN27QImEa
X758oWPSGr6nyw9N1IcW+6zZf/UVrly5EhERUbx4ccHP3RXPyQZ+/UNiEi06
duxIIsybN2/fvn0EkqJMuuAmUMHE/tLkiyZf0+WbITp/EOZZtmxZ7oj1smd/
XRGMwAq8qg+l2dEjxo4dS7ukaWK0O3fucGty5OPHj1gy2yH09OnTVatW1alT
R24kzDnb+E2aL1QvkAs8W6RIEaorLQ/61LVr11GjRi1evHj//v2XLl0iWT58
+CAmtUWEN3Lx6tWrvXv3spqLi4tEju3107oWirXqo4QS1MHpdevWhTp269aN
qjtkyJDIyMhZs2bBx6iKW7duBRi05NixY2fPnkVHShkue/78OS6TuQP59OnT
xYsXp0yZAg0QFpSRP+eiOqovZ/ZNAhg3UYpr1qwJJAgJRLF3794k0bhx42bM
mIF2mzZtQi+qtDgCjaKjo4ODg/mVcACz+SVX8KtKq25hUfSfoClNnA5OQ6em
MV6VK1eOFl+lSpXq1aujYIoxNOELJpGFCxfWrl1bgl9IUW6Bt6iOKCLJLn6R
EZVr200npUkC6eTJk7QefGdKTwGLVdFOYmZ5M3/pykr4SZ2Riir4qQArV67s
3LkziSzryDfzBr9FjTJqIRUeYGJh6X2A5xVdYBTUZwqCrCAOtWsg2S7SWVRt
p3a1aNFCkEsjFjpBi2SwdXd3l6Kn7P+7vKBE0lkKFxnNzEhDV/gV0aK/X716
debMmVRmhVzGnN8FW8Je3hIPsP3+/fszsdLvVC8zc8SDBw9QoVGjRnQEVUvt
XZQsir51wyuEasyYMVT+t2/fmnVkRQJFnXv37m3evLlnz55SkUxGx1Rjcp6B
V8ZnvsCe48ePpxcLCVQtWCcVKqPTjK0h2hxjTtWqVSV+LNKzXBdVeVSdwW70
4kWLFpGe79+/1/lPRhVERAs0hSvOmTOnVatWzAgSQmrkt1N3UD1aXum8rVu3
BnxycrKYXZFnKyJ7UGnG3iY/xBGMCQ0aNFC3ECZjkZvlHL9alujt1asXHBWe
KajU/tgv8astNXnLAAvTZjXIdokSJfQ7SlApu2UbuVRsVW2gOkTv4cOHIZyC
SoYX68gzRpSozA/hGwzm27ZtYzYkKQoUKKD4Uva2kjJaXnED1p84cSIBD2Yw
yKsK7GzgVz98/fr15cuX0QK67u3tXaZMGTMbZjW0zMzOMNu2bdvZs2czO4v3
AQ89yOFugLhAb3aPHj2ij6CFn58f/Q76TZXLqs3NahoB36lTp3Xr1uFoNdpn
NWYsir7xq1YmosispKQkegplqkuXLhUrVhRL2jIHKcvL16D3EAM8SwOVmwr4
rMaMdS2UTcyW5aanTp2CAVKpSPNmzZrBsijdFhXRWbHJ4LrMxWFhYUyLxKcs
nqrtxucWfjNdRBHZ/1efUy4uXLgwefLkxo0bw7V0wEoFiRl5y5Dl6ekJMWAG
kXmE1VgzF82eGX49nFRPRKO4uDjyol69emDLiF/CRlm+YcOGxF5CQoKAN6OU
ViQnZ09qQ0yKgzQLXvE+FAWigvGpJIoDqPjRGzf57uPjs3z5csALZtnFkgXz
5jRN8Iuvnz17Fh0dPXToUOZrga3S0ww5erm6uvbu3ZuAhwnru2q2S+6G09On
Tzdu3Ni1a1fSVoq/g7aPYcaEoTRLlixJTEzMyR3/m12hf8XHx18yhFCPjY2F
IE2fPr19+/aKb0sbVSODIsOoA/3o06fPjh07aK/Xrl07f/58nCGXMpH4v8tl
Q4DRJmfS2hDmUHhdlSpVIIpqBy+zmo8KTk5O9Ij69evDaZm1abWtDGltsygA
WemTtor1SY3/UpGcnZ2pq2qIsLiRZQs/d86iFDYEO7u4uFBb1JG32obKKp22
jlxlkGybUKzU3Usb8u+sCBHb05Dg4ODQ0FB/f39Gaf3gNRvjzC+/L2wQ2LBE
d3d3OkWHDh0CAwPBEB4efvZX8h9DTp8+fdKQixcvkk1UyKlTp8KyIGwq4LM0
2ttidmV8bkGwkfIVKlTw8PAgccg4+MnIkSNtOaNP03iCXIMfL2AQZfCs4s+G
yL1UN6RiDBs27JcFVtcCFWhPjHJBQUFMRrKOvp9sV/wmo3bJXUqWLEmLJDC+
WxXprTBksf+9e/dWrlxJxWOQV9Z2yO2ddjNxSN82lFtQMYifCRMmEMbWCZIa
fkURwNNbO3fuLAkr+8B5sJ2lnkYwGZSjefPmy5Yto9GnWdr/0UVYjVwnJycv
WrSIxiG9VdU0e58RyBwqlsfp3bt337Jly8OHDwWVRfzKKXJeifE/f/5MwjLn
Ojo6mtJZgf1gm7TqJGHDfakVFJwjR44wWejFJKPoO+p8hyGUCZexiOFIp2R2
tbzajTEZMcNkPXr06KNHj757904FdmbBo/+LzKXyM5CiPr1PPxq2R8LqBV/A
k63UyYkTJ9J3GArSbBiHFX7cRNiTLHQ9k5FHrIYrbTx9y4aonUkBT8+Fzc6d
OxeqKeDlmD7FOLOzGPm68V+9enX8+PERI0ZA5lkQ49ME8YLFp5IUVTY7XrTd
8vm0Z5+4gKPCS9euXYsNZRCW6Uw1I4uWTzGmwrT03ULGOl9fXzWAZ1Uc/s7r
rLQJB20cRsqVKwfd2r59+/PnzwWbPPZgveCbHSTduXNn06ZNtFriB8pXNF1w
K8YRXxBRkGE5F1DHgjpIW/A7pPNt+QK5FhIScuLECTlYVE82WkGu4kcnPFQq
Ki2xR+Lv3bt3165d1N7Vq1cvWLBgxowZkydPjoiIoInDA6lsXbp0ocC2bNnS
09MTigXRQmUbDzv04/hatWpNmzaNwerTp09p2l5TLu7/0BTev3+PZx88eJCQ
kMDQd+rUqZiYmD179uCvFStWzJ8/HwyRkZHw24CAAPhGkyZNateu7ebmRvvT
x0nFoDA7nvXy8oqKipKdN9mIyMlzKfo+m0hGO8gXpFNTbKkS2O2DIdTq169f
P3nyJCkpCXviQTQCoWwHAVh/IBxuDKWX3qr2unNodh2/pI9iRFaKQGby5s0b
4BFj8oi1FHm5cHV1hY2TrS9evJAvWymSORezPTeLT3+JO+RwP9V4RJzZZ+zY
sUSRetBR0pYJjjGEFIOS6U+U2Qj+f851pLs=
        "], {{0, 64}, {64, 0}}, {0, 255},
        
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"timeSig1\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJzNWntQTWsU33nnlZRTiUrMCYmTqEvjUWk6pRvFZZjMEG4ZJqPUdRkNGo+R
Sxjj/CH0h/EcjAYpJmOajDwmeR3jREXeRDlxuer+7l63Zd9zepzb4+zzm7Hn
O9mP37e+tX5rrW/vQTHLo37tIAhCYjccohb8FpCQsOD3GX3w45f4xCWx8YsX
hcavXBy7OOGnmI744+R///0z7tAWECSwsrLCXzo2BPwd/yv8F1b1aOwqQHoV
nclo7BITQZS6dOnSo0cPGxub3r17Yyy0NfAUur+1tTU9lAkMaAX69+/v6Ojo
4ODg6urq6enp7e09fPhwJycnmoKxqVuMnj17uru7e3l5KZVKPBSPYA4/tw7h
IiIiIiIjI3GcNGnS0KFDbW1tO3XqxF5h4GDNgq5iv4I1QHjs2LFhYWHTpk3D
46QE/mgp0tLStm3btmfPHo1Gs2XLlvj4+KioKH9/f5jI3t6+a9eutL6YiIG/
NQbpaXwVBt27d3d2dlapVDDRqlWrdu/evWvXrm0iQONWi3Djxo2rV68WFhY+
fPhQp9NlZWUlJydPmDDBxcXFzs4Oy925c2e2v9X/B1+FAW4Fz1coFJMnT05P
Ty8qKrp37951EWDyV0vxp4i6urpPnz6dP38+Li5uyJAhpBVk59a7PU8HN8RP
eCYW/eXLl3joVxGgUddS1NbW4ogpwAhYx5CQEFhe+ty24i+I+oNjv379YCWY
/fv370ygNfxxn7t3765ZsyYgIACeA3FrPecG+dMRMeXj47N582ZaAprFd5NB
hGnWGHz79q2srGz79u0jR47s1q0bhZvQprLJsxDqlwAPCgwMzMnJgfMQh6+m
AX7y5csXHGnW8HmtVnvw4EGoGeKLn0IR1+b8AVIk/ISWQoJevXoFPp8/f242
Tsn4mCnOx5Gcp6Ki4sCBAxBMKJvUSkI72J9AWoqbQ06TkpKKi4v1er3p8Vtb
D4yrq6vz8vIWLVqE5Mv60E60GSBPC40oiI6OvnDhwvv3702PU+ZfWVmZn5+/
bt26UaNG4Z6CaHDck8btyp/KEgyCgoL27dtXXl5uCn+sEQULxjU1NchcGzZs
8PPzQ0HFNzeD/cl/BNFcUAwYEC5kCn9yflqI0tJSTFytVkMH6J4UU2YA11E4
Dhw4MDY2tqCgwBTPYc2E55w9e3bhwoVubm50TywoJtLeliewssFiqNKnT5+e
m5vbLH9YnmIcg5s3byJVkdqzTcxmf64laDxx4sQzZ840y58sjyMEMyMjIzg4
GLUZM29zqTeRP4BEfOLEiWbJE/+qqqqLFy9CMNE7EPnOIszJX5CEAAA3OHTo
UBPkKXNhAPFBvbpp06YRI0ZwV2JgDbPxZ3dFo4fs3yx/jJGpjx49OnPmTCQ+
XEiWNydtKX/OMqil9+/f3yDzOlEzKWxR8ECmVqxYMWzYMJo7yCNbycIfBNh0
4A8lb4I/AM9BhYlmbdy4cZytWtDPthWk9vfw8GiMP/cFHz58yM7OnjdvHhoH
vlwu8oLJ/sNFXUlJSWpqKiKFu0LZ+XP8enp6ZmZmNmh8qhZwhGaGhYWRt8ul
OQb82Xoqlerw4cPGlpcmrB07dri6ugpizKJUkJG5YJS/fH19T506ZcCf60y0
V+fOnZs9ezZlW7gNVsES+NMAfFAJgKGUP5hDLcl5YPyUlJTBgwdzyWe2Oqcx
MAcMFArF3LlzL1++bMwfS4AxSrXIyEgS2/ZuTEwE1//gD/FMTExEJyLVfPIf
dMRoDxEaY8aMofWinTS56f9IXpiFv7//zp07Hz16xJanKSB+QR59zdq1awcN
GkQXypiwpOD+EccZM2YgeF+/fs38KWwBNMWoS3ECfIyd30L4k/2tra2XLl16
/fp1vV5vzP/Zs2coNZEdUK1J92Dlpv/D/jY2Nhs3bnz69CmkhrfgOOfev38/
JiYG5Gm+lsCcwGTc3d2ReaHwnGqZPwb5+fkhISGCGC+Yr+z8efXpiDQ0ZcqU
S5cuUcyCv3RXk5wfyiPUr5cl8KddDpoIUlJycrJWq2Wzs/PjqNPp0tPTlUql
UK9XlsC/kwhBjFy1Wn38+HHaeSPm3GdRq7Jy5UoXFxehPt4thD/RcHJyWr58
OZpZ9nbpDgnk6OTJk3PmzLG3txck+6WykycaMKafn59Go6msrKRUxRs7VDOg
W8H/BgYGUqtF18rLnxoW0nBnZ+f58+fn5uYybRIfrnnevn0LXfXy8jJ49SYL
c35nQZ4DSqgZEJsPHjwgnWfxp7cSdeI+Q1JSEnyMLpSXP1WbXDra2dktWbLk
ypUrvGfOsoOCDVPA4Pnz57GxsVTwk17J6Dz8kYAgKomPjw+69Tdv3pDzSPfW
mD8qB7TqvLEsI39pq4VZoJKMi4u7du0apSoWTEJNTQ3xLy0tjYqK4ncE8m6S
8OZqr169wOrYsWOs+dzkGvB//Pjx1KlTyeX4ZZn5wYJPmReV5NatW1+8eGFQ
ZxrzRzsQGhpK/M35YkLKXOqx8AQ3NzcUkzk5ObwZSFIpBfyf9AfShMqNamxZ
+PNnG/RzwIAB0dHRR44cKS8vJ7NjFvwC1Jg/Kmfwl9F/uE4TRLcPCgrKyMio
qKgwtrml8TfwHJD39fVdvXr17du3SS1pY6TBDx7k5W9V/4UMCnuu8FUqFTIp
SgUqdbhIa5o/+b/5+Qv1tTo90dHREXVOVlbWu3fvaiVo1n/Mz99YcFD6gsPe
vXufPHlCnOnTCwvkT/2p9EEODg7h4eEo0m7dugVWRI/fPlsaf/7gjd/qjh8/
Pi0trbi4GCmp7r9vIpoATqbJyhW/8HyUl6NHj05ISMjLy6uqqiJiVBjTLJr4
Kunjx4/V1dU4HxMPDg4m2u2XvwxeQ+PYp08fSP369euzs7ORqsgZ4DM1Ivjr
o8ZApxnYv135U1dC5Q3U0tvbOzU1taioCJYEHyoVKNWSbDYNivE6sf40T/1G
PtO3b18PDw+1Wp2SklJQUGBcmJkOqt/KysoiIiLamz/5DLoktCTLli3LzMy8
c+eOXq83kPpak8GNsE6n4/qzzflLpR4DhUIBqdRoNBA9cvgWg75iBfnTp09D
waTxK5U4q9aBuhL6TN3W1lapVM6aNQt5qrCwsKSkRKvVggMxuS0CYsKDpvE3
pWYAYQ==
        "], {{0, 64}, {64, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"flag64thDown\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
        "], {{0, 64}, {
        64, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"flag16thUp\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
/P8DEtCx7Q==
        "], {{0, 64}, {64, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"noteheadBlack\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
        "], {{0, 64}, {64, 
        0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"noteheadBlack\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
neaik0Uq1+Jfaacbmw==
        "], {{0, 64}, {64, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"noteheadBlack\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJzNWgtMzW8fP8pLJMqlGiWlTLmtJqOLW2iViVzKbCh0X6G3sFZqFmMrEiIr
SzVjbGEybCSXkhi1+OeSS7m1iKLykvN+3t/3Pd/9nNM5qnM6x3fz29Px+z3P
5/k+n+/teR7roGi/YD2JRBJjgIdf4JY5mzcHbltqjD+WR8WEhURtWO8V9e8N
IRs2Tw/Sx4+z///vf22pRuXXr18/f/7s6OhQ/F21yL3/UxD0o/hfvScYDoP+
RxDFKXSrH+oEvWkHv3gU1idgtLa2NjU1NTQ0vH379vXr1y9fvnwhE7TxS11d
XX19/bt37xobGz9//oz3gVnciRaE1SXWOUb/+PFjRUXFuXPncnJyUlNTExMT
Y2NjN23aFB0djWdcXFx8fDx+TElJycjIKCgoKCoqKi8vx1zk+vnx40evLgTp
irmKsb59+wb1XrlyZe/eveHh4b6+vtOmTbOxsTE1NTUxMRkyZMjQoUPNzMxG
jx5tbW09ceLE2bNn+/v7b9y4EdPEfGtqalpaWgCb+uyltSBT5eXGE0sAPty4
cSM/P3/Xrl1hYWHe3t6Ojo4WFhYDBgyQKBF9fX1jY2PMburUqV5eXkFBQdu3
b8/Ozsb0QbPv37/TcDSWBieCrog2/CeYfPr0adDD3d0dih0xYgRUbWhoCIR9
OhOApyekX79+eBPvDx8+HPOdMmXKmjVroAfYCPX/QxCN4JfrBGoBae/evXv8
+PHQ0FAMDTBySgZOPT29vn37/ksmaOsLwlOQE2gAU8jLy6uurm5ubmajUHMK
ZFBETvrlzZs3ubm5wcHBc+bMsbW1hRoZsxwkvd9FGXISAwMDGMi8efMSEhJK
SkpgU6Qr9VeBDIpcPTR/5syZgIAA2CaUCVREaVYv4WTCyC2KWPAmfULLhAbx
ChYEHwWHoCZ+Ijw+pz/h2MvKyuD6Vq5caWVlRcMRSADAuH0FUTYFOeQEnj4B
eHzOL2MhPD09QU7YF8yZrLgHTkmMH53At8N7Ozs7Dxo0iC1UUcMqGKIochOk
1YSYm5tjiQsLC6E09tJdD/Fi944nrAngd+/e7erqCuXQEKQ0aI8HVVOgEzJz
TARtLDHiXW1tLUHqFn682d7eTq6+ra3t9u3bW7duRUgyMjJipXXRKrsuYmoR
u3x8fIqLi8ljkz67OAXmG8jz6NEjWJOTkxOUQ1qC2jWlc0VBz/3796exJkyY
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

        "], {{0, 64}, {64, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"restHalf\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
B/5fCQKVBQ==
        "], {{0, 64}, {64, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"noteheadBlackSmall\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
/uyYMXMdf3UO/jSsLPz/D/KLnnY=
        "], {{0, 64}, {64, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"noteheadBlack\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
        "], {{0, 64}, {64, 0}}, {0, 
        255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"noteheadBlack\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
QpjKXRTRfGysTAE3A1TdycWf/wIQr3hk
        "], {{0, 64}, {64, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"gClef\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJzNWn1MjX8bv6snKr1IeiEPSjUlU9gya6aYlEllXlroTT+J9VDeCw9rNf5A
ZMiK2WQSnVj5ZbMaNjZCY0M5o9ITec/729Pzee7Pz3f373ROKqdzurbufc/d
/fL5Xue6Pt/PdX2PW8K/ov4wlSQp3QKHqPj1QWlp8RvnDsSHeanpy5elJi0N
TV2TtCwpbVKCGU5O/evv/+N/9shcXV1x9PT09JXN3d3dwcGhX79+JiYmksLw
0dTU1MzM7B86zOyn4TKTn8Z7cRIP7N+/v7m5Of+LkxjY29vj1SNGjCCS0O5b
SEjI9OnTZ8yYERkZGRMTM3/+/ODgYA8PjwEDBkjdNCVgDcPs8EAbGxscMQsg
x0nMyNvbGwDCw8Nnyvbvrtm2bdt41LCMjIyUlBQ8zcfHx9bWFk7r7hR0GTAP
HDgQ3sYULC0tMR2ctLKyAubNmzfn5ORsle3PrlllZSWO58+fr6iouHDhwmXZ
ioqKMjMzo6OjAwMD3dzc8CK8xURPBvw2sgEz8MPzwA8XJScnl5WVVVdXAwnw
PO2y/Ue2pqamlpaWtra21tZWlUqVmJjo7+/v7OxsbW2NV+jR/wgYc9ngEwsL
C0wHJ/F1ZGVlqdXqt2/fNjc3A89/u2nfv3/Hsb29vaGh4eDBg4h8+IQxzGzV
F35heKyFbBgPHjx437598B4AfPv2jUi6buJ6gD9+/HhcXBzSViRgJ8moR/xw
2vv374EBnuwWeNiPHz9wfPfuHSIfOQsSQ3zqHXBH/AgegX///v1K/J1Hyw/Z
lMGDwKuqqkpKSho0aJAkR6kg517Fz/jHKrNnzx5gAPKvX79++5V9+fLl8+fP
uJL+f/bsGYho/fr1fn5+yCwGvDjqfRbigUr8u3fvfvXqFcB8+vQJ8HR5noAx
BYBn2ODiGzdubNq0CYRjgLBRzkKX/3+ZAmIuAF9XV3f48OGgoCAuJSS33iCc
zvHn5uYK/qFjdaWquADTfPDgwZEjR6AWIDn42L6PHz7HNRjj+youLgb4kSNH
CpFmgMz9HfyCf+D82tratWvXenl50duIHyZvbyPvGX7yJP+Fax4/fsywJwNT
7homcrTiR/52jh/gyUsYg6nKy8tjY2NdXFzE0yQFsxkXf0f9IGKmXSao27dv
b9++HYRJb1NNGQy5VvzK+NHAz8gR63JjY2NhYWFYWBiXWjynL+Dfu3cvBIwu
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
        "], {{0, 64}, {64, 
        0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"noteheadBlack\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
yab7
        "], {{0, 64}, {64, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"noteheadBlack\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
        "], {{0, 64}, {64, 0}}, {
        0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"gClef\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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

        "], {{0, 64}, {64, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"restHalf\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJztWmlMFGcYXoG2HMqleCACiwu0bAEjpwEUlD9ARMNm/SMqmKVKYkRXtBpB
jAdia6VA12gIGI8f3onxhyg1YGIi0UQTEkSzVfEKJILGA88CfTqv+2aYXXCX
wO406ZPsZGZ2jud753mvb0a5sijnJyeFQrHBFYuc/J/T9Pr8LRpvbGjXbihc
tbZAl7G2uGBVgT5xpTN2pn75/btuGBH+MKG6urqqqup3M1QK2L9//759+34V
4Rcz8F848jcBOKtSBFwf/27evDknJycsLMzNzU0hwMvLKzg4OMIWqE0Q7/xB
wPeDER4ejnupVCqlUom7BAYGzhAQYMIMEQIF4DAcPHPmzNDQUJyLK4ivFhIS
MnXqVA8PDycnJ+Lv4uLCY/kfFjFuRLDpFt/Yjm9FwKazs7OTvSAeHQ023mrE
CkhISEhJSZk/f356enpSUhL0T7KksfDoJMNkfGeCxX/5XAlcXV0nTJjg6emJ
FZiL+OPI8ePHl1qHkpKSLQKwsmvXLsSNioqK4uLiRYsWwXkRCnBZMggbSrxp
q5ElwHgnTpw4ZcoU3AjDIf4w2rRp0/60Ao0Crly50tzc3NTU1NDQcO7cubq6
urKyMq1WGxkZ6e3t7WQKCyPQ8PAg/pMmTQJbHx8fmJ32Yx1hqnMIdHV10cqz
Z88ePXr0+PHj7u7u3t7enp6elpYWkN+4cSMCMhSF0IeHy/YfRf58NdgctwBh
LNn+fn5+0dHRf38Nnz9/fvfu3fv37/v7+wcGBp4/f37mzJnCwsKYmBhcEJaB
JnHN0bW5+UDwfBHwKVzQTsgJHAasADHHQPAsLl68uGnTpri4OPiOxEpjx18y
EOYPGsPTJuZAX19fR0fH0aNHdTodzoLl+Tr2hDn//qHRJ4DW4Q4nTpxYsmQJ
Uj88SBxY7GN5APdyFsD84X19g0GCB4g5LA/xt7e3Hzt2LD8/H67KbLECQZLb
OpA/W5sEQ0MAaA82jUYjKsDMzEwUWiBsngHtxh83EvOfPHmyxH/Fggc+fPjw
8OFDaD47OxuCp7MwBFaOfWgPxR8ZAalHTJ7EgyU2P3361NraeuDAAY1GgwqB
jcwP0SH8xXZD0kT+Yv6QCsseQ0C0qa2tzcjIQMoWe70DIeGPAI5gYi4eDAFx
/uTJk8uWLYPD0sFUREE8jqMv5Y/UCVVzqITxif+rV68uXLiwYsUKtELgTAfj
LAzBsU+B+LOSYUx3d3dxtAd5VDg3b95EhkUrR4O1c5AcBhL+sCdKUAr7JKE3
b96gNtu9e3diYiKVSSSbsS5vrIREPyDm6+sLVyX+WN65c6e8vBxBlfpicTHv
UOJfQPGT+aMWhXsyeYT6+vr6rKwsiAr/4kjUCY51WAkk8R8dDbo/4o+qGHkK
5U1wcDAdgINlyJ+ckTapfqA8e+3ateXLlyNPkdTpGdmzNrAGxJ9N6u/vn5yc
jMakra1t7969aGMVJrMjtMqKOUHCPygoKD09HT578OBBrJDPUpyXlWwY1Egy
N5VKtXjx4rNnzyJVoZZQDJ5ucihTyyD+3P9CMLm5udu3b58zZw7todHJk7xC
0AZNENHmrFmz1qxZg/ISD4L2yCfVWgT7Jm3C7Dt27MAo0AjQHoqucuZP03q0
uWDBApT3yAI0KS3JbjIExR/SP6hqtdrTp09zPyJbsysGBxYqaaZPn75u3brm
5maFMBaH18bDQzLXgconNTXVYDDcvXuX/qWu1tE0hwQzJP5oTPR6PYz/8uVL
eiIyVz7xJ/2gbJ43b96RI0eePn2K4s1Rzbj1IPNS2sUKyra8vLzr16+jYUTx
RuRl67ysDYowqBPQW6Fae/LkCZX9/wn+RA9BRq1Wr169Gu05WkXwR/Ml58hD
CQsJlxgi7CDmHz9+vKOjg9oWSAjpTLb8FaKSBkDBBuUYjUbuGWF/efLnGpiW
GIVSqSwoKGhsbHz9+jXNNtA8rQz1w29bOCuhMUSRf/78+c7OTpreJPsDMsxc
4lJBIcwTolRDe97d3S2ZasNSVvw5mYonGdLS0vbs2YNSgcz+8eNHNOw8Ty4r
/pyqiD9WUlJSKisrW1tb0aeLZc/TtnLgb559QMnd3T06Onrr1q03btygVEtv
VcRvKGTCn23OskGeTU5OLisru3r1KmQvdlie7ZQbf57bREhHV7ht27bbt2+/
ffuWvdUiHBg/zSc6MBBYPj4+vqioqKGhAa5Kb4LgsCQhczgqf1EzSF+bMAEv
L6+5c+fu3Lmzqampq6uLZcOTzPLhrxDNbxM8PT3j4uLgsC0tLb29veSqwzB3
CH+aJZDIxsPDA+VBZmZmSUnJpUuX0FWx2SEeVo7Fl+z21D+R58KAK5zQ0NDc
3NxDhw7dunXrxYsXQ30DYBH2nzDkO6IThODDwsKWLl1aV1fX3t5ODks+O5TD
SqAwe6801uDJ+ZCQkOzs7NLS0lOnTiHDUktCoZKKBBL/8FCIerQxpS0uiXE7
f39/jUZTW1vb1tbW09MDhxVXZRxzvgqkafu4sJubm4+PD2iHh4cnJSXpdDpo
5t69e+yb1qjFHAEBAejL6Baj+7ZOLEssfX19IyIisrKy1q9fbzAYLl++fP/+
fZhdwsfWgahUKpr8H2v+fn5+sbGxeXl51dXVaKMgG7SxDx48MJrw14gQFBSE
IEDM6e2AyyiBv96kK6OSV6vVCxcu1Ov1VVVVhw8frq+vr6mpqaioKC8vR2PL
32/bBGQ9KNOaT09HDLogkhQkFBgYCBXFxMQkCJg9e3ZUVNSPAiIjI6Nsx6hI
ZcQCk7yxGmc7/gGqvU+t
        "], {{0, 64}, {64, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"noteheadBlack\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
        "], {{0, 64}, {
        64, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"noteheadBlack\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJztmk9LG0EYh5OYEBthaQsBYwUpsWoSkBw89CK0Bw8hN0sv4kWt1eSQks3S
pFKwiVj8AP45eBU8+AkChiQnD0LixUNWiDWiRQrVg5K2Sdf+nKmhhFhoC32z
Mg9kmZlLnn135p13Nnk4/mr4pclgMERacRkeiz6V5bE3z+6i8zwUCUyFJl/4
Qsrk1KT8eLwFg09+fq7ai4uL+Xz+kvGFUa1WNU37rhOWlpZ2dna4/1cGBtHW
dMKv/t8YGLzUD8KfFuFPi/CnRfjTIvxpEf60CH9ahD8twp8W4U+L8KdF+NMi
/GkR7z9pgX8ul+Nt/v4c8acO6h+wvLwMf94ul8uYP5VKBbdQ1Qmrq6u7u7u0
c+BfiMfjyWTyE6NYLO7t7e3v7x8cHHzQCYODgyMjI5FIRJblYDA4PT0dCASC
+sFisVit1juMVh1i0Dk2m02SpPuMezpkaGhoYmLiHSMajSqK8rqZiMViMzMz
b29mfn5+c3PzM6NUKiEFIfkcHh6WmgOeCYs3s7a2pqoqdRb/exYWFlKpFM//
uF9E/vj4+GMTcHR0hOvp6SlKGo2VZA3rB7/fjyz6noElMDs7i2ucjkQiMTc3
Bw3MfJisr68XCgVeEvNrHXa7vaurq6+vz+Vy9fT0dHd3P6ID397b2wsTtB0O
B7qjo6MbGxsnJye8JNOu/5hRi7/JZGphmM3mFmogg/0UuxK2VOR2dAcGBvA4
tre3z8/Pefx52Vbzp95/6uHxRDCNRiO6eBbhcJhnSD5huH9t/lD71gNt/ix4
1+12ozZDhsFCbuhvZJiuMVIDcyuD30t/fz8WcjabPTs700X8+RIAvOvxeLAL
ZzIZ4f9/EP60CH9ahD8tt88fp9pbvP/yYs/SHMAElU9bW5vNZoM8ul6vF/VP
Op3+Tf1maiZq8eRiiL+iKDqa/3U4nU5Zlre2ti4uLhr6S5KEI+QDBo5s7e3t
Djrw7R0dHTDp7OyEFUZ8Pt/KyoqqqrUfVvixq+b/A+nVb8w=
        "], {{0, 64}, {64, 
        0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"restHBar\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJzdWmswlVsY3m6HIumikdARRaYII7qMWxISDZ36lcklMpl9mp1ydP/T5EeN
MJxuw5TKji5TuvxI02UyJtkyNWXGSVIylVCUcst5+t5jzWrvTRvb3ua8M/as
/dnf9z3rfZ/1rPdda9nG/BkRrysSibYa4SMiOsVPIolOjTTDlz/EWxMTxBvj
gsXJGxM2Srxi9HDR97+/H+2+UbDvgvFfe3p62tvb379/X19fX1NTI5PJSkpK
CgoKTpw4kZOTk52dffTo0by8vPz8fFwsLi4uKyt79uxZbW3tq1evcFdra2tn
Zyee09XVdfv27bCwMFNTU319/dHA39vbi3cBMHWBPj99+lReXi6VSg8dOpSc
nBwdHb127drQ0NDly5f7CxYQEBAUFBQSEoKLERERUVFRSUlJO3fuPHz4cFFR
EbrT3NyM53R3d6MdHh5uYmIySvgBuFcwigIabW1tAJ+ZmRkbG+vt7W1paTl+
/Phx48YZGRkZGhr+1m+GghkJhh+YmZnZ2dn5+fklJCRkZGTcu3cPEYRb7ty5
s2rVqgkTJqgXP4Pd1+9zRKGurq60tBRu37dv35o1a1xcXCZOnChS2XR0dCZP
nuzu7o57U1NTL126BOKBY4jR1KlT0WU14gfybsHYlcbGxtOnT4MG8OHcuXOt
rKzgNEAiYKqA/zFE9fTQ5RkzZjg4OKxevRqM2rZtG1iHKwiTev3PCPP169eG
hobLly8j9Pb29hRoZrq6uvqC6Q1s9F/8kjpCfZk0aZKnp2dgYCA+ra2twUC1
4CfPg5nUCww0cBXjbsOGDQsWLDAwMJBzOLAx2htw9puCEX6+45Cd3wUzNzdX
i//J4ZA1wg/OP3jwYNeuXQsXLsQrjI2NdfqNJ4YqNhCp0HeMbjwZjRHi53Ue
IWhpaXn48OHBgwchMhRcchr5lvigCvPleoq7cC8egk/2L3rmSPDTbAKH09em
pqbr169jcPn6+kI0mA/xCcLQ24eHH0YjgqcTPXOE/gdnSHDQF3heIpE4OTlR
WMlvqkMdqo0QP58edHR0VFZWpqWlQRYopiIhvhhf8NuQHD64kU8oiCPBLzdV
VVdX796928PDA+LA3kWkVSN4ORshftYFTFK5ubmLFi0izzMBHz3kw8bPw6Yr
L1++RNKIdIuyAoovHouHj038LDHDV6hlYWEhUhEkWqLRH7AjxE/g2bBFSok8
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
wWdVVexfnuxDAA==
        "], {{0, 64}, {64, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"timeSig4\"\>"},
    {
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJztl0lIHEEUhmfRZNwzrucc9OhyiM5BcUtcEEVGxYsXQ1SCYGTGGIJ3T0oE
nUnccLnoSQRFUcQNQa8awbhF1IsnFzQziTpj/vSLTUcTUjNJd8dQH0xRVbya
/uv166r3Hj59Ya7UaTQaqwGNufxVusVS/rroAQYlNdbnVTUVz3Jr6iqqKiym
p3pMpn3/fetfsXF5eflFgIajo6NFRUWhoaH4B61WizY4OLi4uHhubg42brfb
5XJhCSzdAoxPkQ+uX124fnXh+tWF61cXrl9duH514frVheuXCTcDMLu4uPgs
8Fv95+fnWALxWEIbASxPkY/b+kdGRsxmM+knoB87mp2dhQ05Xxn9jK/pn40f
Rkg/S/worP+SAYhBVDscjrOzMyzBEPEj6hfjBxE1PT0NM0QO7LERiiLA8hTv
cDHgFr5H0f8Ywv/wttT/QUFB2BH5X4x/lj//Qzx6WZBEnfHx8dLS0rCwMGn8
YGZpacnT/1QGlxBCgIZjY2Pwv9FolOovKSlZWFgQw16ZjXxkYGdnZ2NjY21t
bXd39/j4eG9vr7u7OycnJyQkRNQfGBiImcHBwa2tLRhsb29vbm5i7bYAy1O8
4x0D7e3tNputra2tq6trYGCgs7Ozuro6ISHB399f1G8wGDBjtVphDzO0drsd
7VsBlqd4RzoDGRkZaWlpqampmZmZcDKGsbGxERERPj4+4vmDPmawBdjDDC2W
UEsdmbjPxr1raOjr66vT6TQ/ghnM3zCWrpIDDUdVPHpZhmsQEogW+nIJ9DGD
eTKQKVpu84SNxwL4ePPz87Ozs/GdRkZGItpF/Xq9PioqKjExETZ5eXloYUYt
dWTiDQMtLS3Nzc1NTU04Qnt6elpbWysrK+Pi4m6cn/Hx8bW1tThpOzo6cHjC
DK1NwC4bHxhYX19fXV1dWVnB3XRwcIAWB29WVpb0/goICMALwu5ghiWwX15e
RvteYFU2GMsEyscoN7j6Wf6D/K2wsHBycvL09BQpHCWrTqfTIeCUDY+SDSqp
0JmamiorKwsPD5fqR0Y0Pz8v5kjK5D+fGIAD4dWTk5OjoyOownBoaAjevpH/
i/WLS8H6cZqBmZkZOHxSYHFxEUVuY2NjSkoK4l88QqX+dytYf71ko66uzmKx
ID1raGior69HqRUTE+Pn5yfeAsg/qX5ROH4S2XgkYDKZkpOTk5KSoqOjETy4
rXDsk/+hv6CgYGJiAvEmfvIKxI/RE3DgIMmEcqgl8WIKirsgNzd3eHj48PCQ
ylKqH9mrVO/QewWFDVqpftwIqA5wQVDkU/zIHf9eJ0439ONbQDbe29u7v79P
nwDJvlv6cf+ieLy7+uF/hfVrveJX+vv6+hSOH51X0C7QEc9P6Edd3N/ff7fi
X6pfFf//3fjn+rl+rp/r5/q5fq6f6+f6uf7/W/9XfwLVvA==
        "], {{0, 64}, {64, 
        0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageMargins->0.,
      ImageSizeRaw->{64, 64},
      PlotRange->{{0, 64}, {0, 64}}], "\<\"graceNoteAcciaccaturaStemUp\"\>"}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.771637239350418*^9, 3.771637296916094*^9, 3.771637337490156*^9, 
   3.771637374555922*^9, 3.7716618809945107`*^9, 3.771662285662088*^9, {
   3.77166239308003*^9, 3.771662421483807*^9}, 3.771662762710083*^9, {
   3.771667873839604*^9, 3.771667892816783*^9}, {3.771667981183794*^9, 
   3.7716680024876137`*^9}, 3.771668144604767*^9, 3.7716682827577467`*^9, 
   3.77166836686017*^9, 3.771668624852627*^9, {3.771668715714924*^9, 
   3.771668730768013*^9}, {3.77166877547892*^9, 3.771668905916363*^9}, 
   3.7716690968355827`*^9, {3.771699102363904*^9, 3.771699132150069*^9}, 
   3.771699164354607*^9, 3.771699207608453*^9, {3.7716992533522863`*^9, 
   3.771699265996464*^9}, 3.771699327314209*^9, 3.771699376637875*^9, 
   3.7716997786342993`*^9, 3.771701572257567*^9, {3.771703032273367*^9, 
   3.7717030544270887`*^9}, 3.771703087575859*^9, 3.7717547388028193`*^9, 
   3.7717562522519913`*^9, 3.771756338043948*^9, 3.77175640095411*^9, 
   3.771758509949482*^9, {3.77175854653321*^9, 3.77175856763666*^9}, 
   3.771771211870854*^9, {3.771853789912551*^9, 3.771853819705139*^9}, 
   3.7718554485083313`*^9, 3.771865067422023*^9, 3.776172517962792*^9},
 CellLabel->
  "Out[84]//TableForm=",ExpressionUUID->"1089f733-ce18-4b27-93e3-\
9c2a160f7baa"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Parsing the Sheet Music", "Chapter",
 CellChangeTimes->{{3.771585187860888*^9, 
  3.771585192301586*^9}},ExpressionUUID->"866af321-fa15-4122-9cba-\
69ef6078de00"],

Cell["\<\
Get the bounding boxes associated with what symbol they contain:\
\>", "Text",
 CellChangeTimes->{{3.771766866476013*^9, 
  3.771766908175145*^9}},ExpressionUUID->"f471702e-8354-41bc-b43a-\
fe26de2f3399"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bboxesClassified", "=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#1", "\[Rule]", "#2"}], "&"}], "[", 
    RowBox[{
     RowBox[{"Select", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Rectangle", "@@", "#"}], "&"}], "/@", "bboxes"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"Area", "[", "#", "]"}], "\[GreaterEqual]", "25"}], "&"}]}], 
      "]"}], ",", "classified"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771758622577249*^9, 3.771758732673039*^9}, {
  3.771766871730657*^9, 3.771766889778863*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"46d23d87-7d6d-4d83-a4b8-3bbf05ea629a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"289.`", ",", "70.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"292.`", ",", "81.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"accidentalNatural\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"214.`", ",", "69.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"219.`", ",", "80.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"restHalf\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"454.`", ",", "69.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"459.`", ",", "80.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"restHalf\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"416.`", ",", "68.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"422.`", ",", "79.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"flag64thDown\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"436.`", ",", "69.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"441.`", ",", "79.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"noteheadBlack\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"43.`", ",", "69.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"48.`", ",", "94.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"flag32ndDown\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"48.`", ",", "56.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"53.`", ",", "78.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"flag32ndDown\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"392.`", ",", "59.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"397.`", ",", "76.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"timeSig1\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"472.`", ",", "65.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"478.`", ",", "74.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"flag64thDown\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"268.`", ",", "64.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"272.`", ",", "72.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"flag16thUp\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"64.`", ",", "58.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"69.`", ",", "70.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"noteheadBlack\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"95.`", ",", "58.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"100.`", ",", "70.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"noteheadBlack\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"134.`", ",", "59.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"139.`", ",", "70.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"noteheadBlack\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"156.`", ",", "59.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"162.`", ",", "70.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"restHalf\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"177.`", ",", "61.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"183.`", ",", "70.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"noteheadBlackSmall\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"194.`", ",", "58.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"199.`", ",", "70.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"noteheadBlack\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"118.`", ",", "59.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"124.`", ",", "69.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"noteheadBlack\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"28.`", ",", "29.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"40.`", ",", "102.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"gClef\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"244.`", ",", "55.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"250.`", ",", "64.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"noteheadBlack\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"341.`", ",", "55.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"346.`", ",", "64.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"noteheadBlack\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"363.`", ",", "55.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"368.`", ",", "64.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"gClef\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"378.`", ",", "43.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"382.`", ",", "56.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"restHalf\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"325.`", ",", "45.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"330.`", ",", "55.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"noteheadBlack\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"284.`", ",", "45.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"289.`", ",", "54.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"noteheadBlack\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"95.`", ",", "39.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"100.`", ",", "53.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"restHBar\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"299.`", ",", "40.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"305.`", ",", "50.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"timeSig4\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"176.`", ",", "40.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"181.`", ",", "49.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"graceNoteAcciaccaturaStemUp\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.771758656802496*^9, 3.7717587331044483`*^9}, 
   3.771771224986803*^9, 3.771853834760427*^9, 3.776172587450015*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"307378a3-b33a-4a05-b848-dc0344d982d1"]
}, Closed]],

Cell[CellGroupData[{

Cell["Getting the Notes", "Section",
 CellChangeTimes->{{3.771610249898144*^9, 3.771610287034793*^9}, {
  3.7717586171717854`*^9, 
  3.771758618895441*^9}},ExpressionUUID->"1632b429-3fed-4474-bdce-\
a8355d77a9f9"],

Cell["Select bounding boxes for the black notes:", "Text",
 CellChangeTimes->{{3.7717669171415854`*^9, 
  3.771766940054525*^9}},ExpressionUUID->"3510b99d-f9ba-405b-90b0-\
404475f80a9b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"notes", "=", 
  RowBox[{"Keys", "@", 
   RowBox[{"Select", "[", 
    RowBox[{"bboxesClassified", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Values", "@", "#"}], "\[Equal]", "\"\<noteheadBlack\>\""}], 
      "&"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.771758712769198*^9, 3.771758792545685*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"624046b8-4127-4c47-818c-69b000f074e9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Rectangle", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"436.`", ",", "69.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"441.`", ",", "79.`"}], "}"}]}], "]"}], ",", 
   RowBox[{"Rectangle", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"64.`", ",", "58.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"69.`", ",", "70.`"}], "}"}]}], "]"}], ",", 
   RowBox[{"Rectangle", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"95.`", ",", "58.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"100.`", ",", "70.`"}], "}"}]}], "]"}], ",", 
   RowBox[{"Rectangle", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"134.`", ",", "59.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"139.`", ",", "70.`"}], "}"}]}], "]"}], ",", 
   RowBox[{"Rectangle", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"194.`", ",", "58.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"199.`", ",", "70.`"}], "}"}]}], "]"}], ",", 
   RowBox[{"Rectangle", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"118.`", ",", "59.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"124.`", ",", "69.`"}], "}"}]}], "]"}], ",", 
   RowBox[{"Rectangle", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"244.`", ",", "55.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"250.`", ",", "64.`"}], "}"}]}], "]"}], ",", 
   RowBox[{"Rectangle", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"341.`", ",", "55.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"346.`", ",", "64.`"}], "}"}]}], "]"}], ",", 
   RowBox[{"Rectangle", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"325.`", ",", "45.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"330.`", ",", "55.`"}], "}"}]}], "]"}], ",", 
   RowBox[{"Rectangle", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"284.`", ",", "45.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"289.`", ",", "54.`"}], "}"}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.771758780730275*^9, 3.771758793378551*^9}, 
   3.771771228145722*^9, 3.77185383736605*^9, 3.7718652404642067`*^9, {
   3.776172581191991*^9, 3.776172589524166*^9}},
 CellLabel->"Out[87]=",ExpressionUUID->"0b933a6d-585b-4a35-8844-56c448f6a5bb"]
}, Closed]],

Cell["Get their centroids:", "Text",
 CellChangeTimes->{{3.7717669455477123`*^9, 
  3.7717669482765293`*^9}},ExpressionUUID->"2ef82ddf-af8b-4819-be4c-\
d3f8d755ee9c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"noteCentroids", "=", 
  RowBox[{"RegionCentroid", "/@", "notes"}]}]], "Input",
 CellChangeTimes->{{3.771758801511661*^9, 3.771758809773369*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"537bf524-83b5-4259-9b88-9052fc7673b4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"438.5`", ",", "74.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"66.5`", ",", "64.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"97.5`", ",", "64.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"136.5`", ",", "64.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"196.5`", ",", "64.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"121.`", ",", "64.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"247.`", ",", "59.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"343.5`", ",", "59.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"327.5`", ",", "50.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"286.5`", ",", "49.5`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.771758810144596*^9, 3.771771230254236*^9, 
  3.7718538387700233`*^9, 3.771865241865787*^9, 3.776172590825473*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"550defb3-aab7-4a7a-a06f-e5eb11f9b195"]
}, Closed]],

Cell["Plot them:", "Text",
 CellChangeTimes->{{3.771766950772241*^9, 
  3.771766952108938*^9}},ExpressionUUID->"366075de-5861-4fd6-9566-\
b20c908f6272"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ImageResize", "[", 
    RowBox[{
     RowBox[{"staffs", "\[LeftDoubleBracket]", "8", "\[RightDoubleBracket]"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"512", ",", "128"}], "}"}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", "noteCentroids", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.771758814112187*^9, 3.771758874078582*^9}, {
   3.771758905030847*^9, 3.7717589414060307`*^9}, 3.771771234384933*^9},
 CellLabel->"In[89]:=",ExpressionUUID->"a9de604f-2027-4ded-bae9-f8e14b310993"],

Cell[BoxData[
 GraphicsBox[{RasterBox[CompressedData["
1:eJztnQm4TdX//2/8EiFzZB4jJCJlppChUoakSCRDZZ6SsciQkESZikyVKUqK
EmkWKWN9FckQyZQhdd39f/33+znr2Z3p7nPOvdfFfj+P82z7ruGz1vqs9/p8
1l5Dkfbdm3ZMExcX1zs9P03b9a/Tq1e7Ac2y8p8W3Xp36dTtsQ4Nu/V5rNNj
vW5rn5aXw/gXR/j//2xdzEhISPj333/j4+PPnz9/oWVJHPE2UkBUslC1UD/J
nddFAdX8hZbCw6WAeB8utCAe/gOP6zx48JBi8AjnAkKVf+bMmQkTJrRp0+bz
zz+3UmuLSCoM8u7du7dr165fv37JndeOHTs6d+5MdsePH0+wkXw5pnKo7DNn
zuzZs+c///xzocXxcBFDXWnlypUQzuTJk63USjiXA6BTfvv27ZstW7YHHniA
359//pnmSLUTQTiMqE1cXFyXLl2SKQtpIyxXoECB22+//dZbb7377ruVdTLl
mPqhOqlWrVqOHDkWLFhg+TTHg4eIIGL58ssvr7jiigcffBB10hBwOXeuCwj1
4kceeeTdd9/lAXO3R48eVtjeHelg7T58qJDmvR5OnTp10003oUihbPIYzQlF
P3ToUN26dfWmZMmS33//veXTXpfC+71JtHTuU3aZY5LApPn333+PHDlyy5Yt
3bp1s5Ktw3qmYGpG7ContXnzzTc7derEw7p168qVK6e+nLQZJVUilwAotT61
mIfzNng4d+4cASZNmrRnzx6eV61aVbt2bcvxdcYZxfIRYGBjGWL0+1qq5g5s
38CvPybloJqgLBiVeDhw4EDp0qX//PNPK4CQTXSVzhTTWRCTfmAZ9UAuxDp4
8OBLL72EF8Bz69ateSYKVRQ0NeevX3Gc/w0cPpylC1PhfokrjF/FOgseWKgo
vpj7VSbVcvz48bNnz2IkJJPxb4qsHJ1FMOVyho/3YCOZ2kKJG00O1GG/N0F1
2O8lPYgHeGb58uU8Y1RUqFBh165dlkOBnYlb/9VDk7Uzi6AaHkray3wiNyhM
d96xYwfNEZ4o3NOI6tmNfkbUIjDzDTfcADPDRe5jRQqnnvTr1693795hQlrB
iuBXUUGHzkRlCPNXjd2Rphk7unfvvnfv3iTPN1Q1ekg9cOqw+94dKh2hWrVq
a9assQLo3QqmDC7VI1C2y1OvVKWff/75QBs7d+6cMGHCoEGDFi5cyPj7nI0/
/viDMPx38ODBBMAdo66++eabp59+miiMCBMnTiTKzJkzCbZ69eqiRYs+//zz
lmM1IKP5iy++qOx69eq1b98+y1f5L7/8cpEiRR555BEZ1WoFTPchQ4aQHcKY
kO+//z4p33777UePHpWxocBY+wxJeIvff/99nz59Nm3aRIDKlSvjQubMmfPx
xx+3fGYwwJxo2rQpOSLns88+O2fOHMRG+HHjxuFpUhwK9fXXX6typkyZwp+m
TZv2ww8/qH6++uor7Hzq5I033rDsTwDDhg2jZsaPH//oo4+qOER55ZVXtmzZ
oiibN2/mPWIUL15827ZtimWKQ9UpL8rLfxHJ+q9l8thjjxEROl26dCkpU7E/
/fQTgUlZneLbb7/F2aEG/ve//1k+94ome/jhhylmmzZt5JLwp6FDh5YoUWLj
xo1jx47FoaO6JOHWrVspKbU9ffp0y11HUGWePn26UaNGpIkk1MO8efMk81NP
PbV27VorEksgUSgpKqFw4cIDBgx47733+vfvv2HDBgpFEWgycqd+XnjhBScz
0BwIw/unL0tQM9TV8OHDaamkagjTFh988AEVS/pLliyhts+cOdOyZUt0+PXX
X7d8FuOIESNQwh49eqg53nrrLaKgKujemDFj+Cu9AKrhJT0IbpFCfvbZZwT+
9ddf+/bt++OPP959991kYfk6zsqVK6EgMlq8eLGEweusX79+sWLF1COUNVmo
BmbNmkWX0fPbb79t+fiELo9s8IZ8EMumKRKpVasW3Sc1f+JMQqgqli1bliFD
hmuvvfa7775r3LhxXFzc6NGj4SIeChUqRG3QCmnSpMmbN++DDz542223UcMf
fvjh1VdfDcHCJ02aNCEk3EtSd9xxR9euXUlEo4aaDG6pUqUKDydOnCCj9evX
W3YPhbsyZco0e/bsmjVraoBQ+MOHD5cpU4Y027dvL6phRMiVKxfcy0ghpo23
Jxx4IF9ku/XWW8k6e/bsEDvaTjs2bNgQzU+bNu3HH39s2bPTlk0IV155JSxa
p04d0oc9evbsyYN0LGvWrNdccw2Krcrp0KGDZGB8zJw5M4mvWLGCgvASWiYA
GsVzxYoV77nnnieffNJEgXUZKbJkyUJqDJS//fYbJImc1IzlM8tr166Nndyg
QQMKAptR+SgqZUS9TT0wiODIEAw5J0+eTMooJ4NRwYIFKQXKjIpef/31UBwB
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
USPdyJAk8/9KpFevXp07dx46dOiAAQOeTjqQ2qBBg6pVq9azZ08eYkmkS5cu
NWvWHDJkSKISEmDw4ME1atR48skniRhFiZRj165dq1evTlLRpYCotWrVolbd
yCCZ69evr5uPPP734MGD4LeTomHDhkm4/keJDB8+XHf5JQeeffZZHQAeCw4d
OvT888+7Dz9q1Ch9S40aJ06ceO6552JJAYF1BJxLjBkzxhy0GEu+Hjx4uDRg
qGD37t2bNm2CSDGDk/CUMPH/M888A/PoTp/4pMO/NgYOHOh3Z0EUifz444/D
hg3TVSnhw+seFszpX375RXGjE3vPnj1I7iZHJ5zFZAzavn27GxnIgjAUUOf/
RMH/3pBh+XaDemtoPVwakOWPHduqVav06dOnTZu2ePHiuXPnTqrzHywH/5sz
jWNP00AS9ujRY+HChR9//PHq1atXrVqFJR9RRgoJMeow6vjEvB5lOnTo0KhP
6VSU3377zXk4sxvA4WvXrqWMH3744SeffNKhQwdzBUz4iMqCAkbN/x6cleYN
AZcAEkIgcNe802xz31tTP1TA+vXr+30l1Gn2SVLSZOV/JX733Xc75Y908epF
wf8JvnvrrrrqKlPSDBkyuBzsYuf/06dPxz7JdvFCjb5169aXXnopaU/n9uAG
YSjaj6X96NoP8b7rlrzmEye88cYbMEm6dOmusHHllVfy36AH1MeSS7Ly/z33
3JMmTRotdORh9uzZ1qXL/9myZaOMjNH8XnPNNS7X88TC//G+O8hwOlxKe4lB
dPHnn3/my5eP3lGwYEHvGO0kR1AaP5/M12md993HrdOkaeLDhw/TMf/3v/8x
1n/77beff/75xx9/vGLFiiVLlixYsGD69Om6fewSgOr2lltugfadO7MgFn51
yULsS0BThv+RP50NHhjRrEuX/7Nnz65dA/ymJP/jVQVe1nCZQLq0fPly+Vz8
VqtWTZanZ0amDOLtS95Pnjx59OhResG+fft27979008/bd++ffPmzRs2bFi/
fv2qVatoo7feegsGmDp16sSJE8eMGTNs2LCnnnqqe/fuHTt2bNOmTYsWLZo0
adKgQYM6depUrVq1YsWKZcuWLVGiBGN67ty5s2bNSvviYsu+CrqIunjx4he6
MmKC9BaV5pfag0Zk+ZsC6g2Vg27r3thYQAq0nb48ms9nSQWJ17hxY2cDMUbz
8ty5cy4TkUjoEoNUvP15N3x4eZFDhgxBA89HVSJFYfgYNGiQmxxNlAMHDjhL
ynh38OBBNzKoFSggxYxUZsWdNWsWncultJcY9IH+tddeo1/oPA0qH55JsK+u
vtDSXfRQh1q7dm2XLl1g6Yceeqhp06aNGjWComvUqHHbbbfdfPPNN954Y8mS
JYsWLZo/f36IGisoU6ZMELWTuJIJokc53XAjwkRUugvN9+GASsfZE/76NUOe
PAKdAp0kGD16tGaqkwM9evRgrJ83b96cOXMoUXQZQaRYC+7Djxw58siRI1Fk
ZHDs2LHhw4dHGmvhwoWzZ8/GwqG8Dz74YEQyUMCI1os6Ad199NFH0cW9NPD+
+++rX8hAwgW40BJdUoAioubnNA6kdcDvCCy/3feh9s4HPUHLON3ly5e/0FUV
JeS5T5o0qVatWnfccUf9+vULFy7sN/ljqpRfPKN69eoRuE4MqF27dt26dYsU
KcI4Tqb8N5bUAhMnTayCu+66q1mzZvfddx+WA+WKIhHEQ0jKm6iEKhFVV6VK
lehKpBzxsEiEpNyncPvtt997772UkZLef//9N9xwQ+XKld3IEEsrEJgqJS9s
MDf1Ex4kdeedd8aSQlKBCrnbB0QKUy7+RMEpvukaspd4T4tEUSGkRqYoLb88
x1IKcqeHYifXrFnTSELRKJHzTUQgrqrlnnvuQVtiEc8NpGAlSpQQIYdi7PCn
oIiigUYBvzmNJET69Olp9EQLRRMQDLK1Us2UqZyRTZs2zZ8/f8GCBW+//TZ1
rkJlzJixTZs2uDZx9vyPHIGCBQsSZr6NBdECMxWTtXnz5pjo2JCxJBUIUiNN
KHHKlClz587FKsYFIMcoEnnxxRdbtGiBqIlGJwDVwnBD40ZXIuU4efJkmJyk
3AtMxDk2cAH4L7U6YcIEtVGiMlM0CkgxI5WZuIsWLcI379u3Lw+RVq8BDbRk
yZJWrVo1aNBg6dKl/De6dGIHRaASxo0bZzo1RaN+Qomk6uI3T548xuDkoV+/
flRIRAVRQzz11FMm6+eff/7NN9+MrlbJmohU5ocffrhixYrFixeT1LJlywYM
GIBxgr9GMSPqESRIiR599FHJBhVMmzYtRgZwkymS0xeSg64F+QUZMmTImjXr
tddeW6hQoZw5c2IOwXhYUIye0HWjRo0wq/Cp27dvj7b37NmTZho6dCie/vjx
4+mtM2bMQNQmTZq8/vrr1HOYElHhlKh///4MoFaq4f9AYNRRLY8//rjufEdO
nqkurQLKlStXkhwBZNk7VXXyZHJg+PDhscv5xx9/6B5wl8Bd1fXTUePkyZMx
7v994YUXIprsooBR78KGFnRJd4yYOXPmiBEjYk8ndnz88cfiBH6rV6/uJsoT
TzwRZ1v+cplJIbqsp06dSgoYXfw+9NBD0SViQJti+dBzsdUrVKigCXNoTeu1
ogDEJfGgzaeffjpG8VyCDpUuXbrs2bND0Tly5MidO3e+fPlw7UuXLk2hGM4w
qhs2bAhFP/DAA4888kjnzp27des2ePBgzOxevXphCGEEwswMVZgZ77///po1
a7744ouNGzdu27bt559//u233/bv33/IBl2P0Z8AUezmGzJkiMuQGzZsYDSx
Uhn/mw8ux44do5Ux+3///ffMmTNrNcuoUaPQojjfKiBMCO0eDbe5NCwUl2E0
mfb/8ouKUoSoE1cs7f+Nd1FYfQ9FDX755ZfoMlWUPXv26PtvFNWrKM8888yO
HTvcyKDwFJBiRiqz4mr9T3TSCn///Te/OCBYp+a/FwTKevr06U4yf/XVV+ka
oaRSo8MkmmTQSmPGxPgIK0Tpy/43X9xWrVoVUTpayk5vXbt2bc2aNWXiMpBh
0MKWZcqUgTz1EjkZs7RIzE36Eg+ClXiaRdm6daupgaAQsbgUPhASDBMRz0gs
ja146tQp5ZjoCquJEyceOHAgUhrEntcth+d92wHO2+siQu0aMMDpO3HiRPgS
SfLVq1dTk1Yq43/LNxG0b98+Whm38ejRo7Tyt99+SyUwpPJQrVo1zZ5RS1bo
tZRuFr/FJ+f6T6U2cOBAmbXRJX5RrP/0Q7zvVKWffvrJjQzxMa//nD179rvv
vhudtIK06KWXXpJJmVSuZdSSwDaa4tD33EqVKp0PuzNIBe/UqZOZVdAa6Ygq
RFmPGTPGLCXioXnz5u7TMRJ27doVGcqXL4/pu2XLFkjJhGFAuffee+nIPXr0
YCzAumOocpOFxOvSpYv4XytDevfubYVoL0lCRpFuundCUmGQa9tpKDh3folm
Ga1gWtxJIiKeDmbxo2K/1Tha08gvevjpp5/y4GaIcQLnyO+0mUCIInAPUzP/
YzpifmCWU420ss58xrGC1rD0pOFhmt4lPP4PlaPH/9GlEzvUgt99990VPshU
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
MGTIkBi34lr2VHBEu3GfffbZA5HvOnGCvj9s2LBYUmCA1v1fLkEB3cxsB8W8
efM++OCD6OI6MWXKFK16Mvjnn38wxtKkSZMuXTr0be7cubGkr80sWugSEZYt
W/b2229b9nbatm3bJhqeLOjgUUgYiGnTpmkvUij89NNPWqSkU3GwHMIniG0W
OP9PByeF9OnTU8kR7eodM2aMlo2Fwrlz5xjC3CcYFBgY7j+COJGoeEHxyiuv
YJFGkR1Vp8UDieLTTz9Nhfyf4NtDwQMe/V133aVv1tqTiIYsX77csnvlxo0b
eYPu+X0lV/Qff/wRQ44h4NixY2E+hTvX/yjZiL62h4dKgQGg9Z/RJW7W/4iN
tYUkTHjn+p/oMjXrfwYOHOgmx0A41/+4kcG5/idSmZNv/Y/q4c8//8Rij/Md
PF6kSJEzZ86EX6MSFGaPDx46LmGC6yVGKtHixYsZ4xQLG5txJCHEkhKFX7Jk
SXTrfwKTYkzEbUkIthbFrLXTYlEtyLnzzjstm1UCxQtc/2NKUb58ebOr9+qr
r8YSCJpjYGrhF9goDD4CPleoMG4qwVv/k5LQCtXq1atff/31eoOLJ/cQY0zf
03XhhXjbuUo2wbf+H/7v2rWrDvZJCLtrkjYiHa2bTcIzsZUpvI2jevr06egS
VyIQI4YEiUjgUMUxWQwfPhz+j65EShz+xy2C67QgMEyOgTCfcmgpbR1yswuD
VqCYkcqcfOv/VWSsRzhftoe+w2qhUdTbImrWrKmjvF1uMVAsXfCkN4899liY
jRIKv3Tp0ijW/wdNCltUZysFNore/PLLL3KOzCV9oS4gM+v/dayQ/qtgOtdF
p2XyMH78eCuxKnKzwF4pUBuTJ09O8K1ujaISvPX/KQlVwsMPP4xeqThQX758
+bQhpWDBgrTmDTfcQH/UjIGpJQ1wBGaw7t27d5cuXY6E3fehsg8dOrRSpUrF
ixfX5bxJNQSc993/jm3DQKar2aJj44MHD9avX79kyZK1a9fWUtVQ6ahEGDwV
K1akRLpuLKJMlSPjZsOGDUuVKoVjHul9gmb/F7VarFix6dOnh49u9n8hM+Fn
zpzpPrtk3f8lGTBotRhS1ildzIpqg5ii9OnTx+VxB0Ig/2PYfP3111aIKkpJ
/jdDZNGiRc05ljzMmTPHClZFQflfwfCJ5EHIz3JzNKVLgoVApk6dKq8kiq7t
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
GcU=
    "], {{0, 0}, {512, 128}}, {0, 255},
    ColorFunction->RGBColor], {{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      PointBox[{{438.5, 74.}, {66.5, 64.}, {97.5, 64.}, {136.5, 64.5}, {196.5,
        64.}, {121., 64.}, {247., 59.5}, {343.5, 59.5}, {327.5, 50.}, {286.5, 
       49.5}}]}, {
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.012833333333333334`], AbsoluteThickness[1.6]}, {}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.012833333333333334`], AbsoluteThickness[1.6]}, {}}}, {{}, {}}}},
  ImageSize->{1041., 263.},
  PlotRange->{{0, 512}, {0, 128}}]], "Output",
 CellChangeTimes->{{3.771758827564897*^9, 3.771758874685851*^9}, {
   3.7717589139133997`*^9, 3.771758941711804*^9}, {3.7717712318840237`*^9, 
   3.771771234884665*^9}, 3.771853840431036*^9, 3.771865243526264*^9, 
   3.776172592527193*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"ac114642-adf0-4b47-8804-a2afb2ddcd19"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Getting the Clef", "Section",
 CellChangeTimes->{{3.771759034364122*^9, 
  3.771759036192932*^9}},ExpressionUUID->"b38dd681-7a59-46a1-b49d-\
c391b3a61a6e"],

Cell["Get all the clefs in the staff:", "Text",
 CellChangeTimes->{{3.7717669827452717`*^9, 
  3.771766989993318*^9}},ExpressionUUID->"be2a02ac-3a28-4e65-8ce0-\
a44480f09209"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"clef", "=", 
  RowBox[{"Select", "[", 
   RowBox[{"bboxesClassified", ",", 
    RowBox[{
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<gClef\>\"", ",", "\"\<gClefChange\>\"", ",", "\"\<fClef\>\"", 
         ",", "\"\<fClefChange\>\"", ",", "\"\<cClefAlto\>\"", ",", 
         "\"\<cClefTenor\>\"", ",", "\"\<cClefAltoChange\>\"", ",", 
         "\"\<cClefTenorChange\>\""}], "}"}], ",", 
       RowBox[{"Values", "@", "#"}]}], "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771759039872691*^9, 3.771759147348922*^9}, {
  3.771759222606709*^9, 3.771759224616235*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"0e6db5b1-d601-47ab-8da8-0d3b464a5930"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"28.`", ",", "29.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"40.`", ",", "102.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"gClef\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"363.`", ",", "55.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"368.`", ",", "64.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"gClef\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{3.771759088623186*^9, 3.77175914779981*^9, 
  3.771759234463399*^9, 3.771771246714921*^9, 3.77185384483082*^9, 
  3.771865255687801*^9, 3.776172605386677*^9},
 CellLabel->"Out[90]=",ExpressionUUID->"b5463f85-93b2-468e-9a79-2085ac782895"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Getting the Rests", "Section",
 CellChangeTimes->{{3.771777565914764*^9, 
  3.771777569003387*^9}},ExpressionUUID->"8d5b5bdf-7318-4d70-a7f7-\
7cd20258715a"],

Cell["Select annotated bounding boxes for the rests:", "Text",
 CellChangeTimes->{{3.7718502700384483`*^9, 
  3.771850293417357*^9}},ExpressionUUID->"86dde1db-4e1b-4a74-bdff-\
431da39cce74"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rests", "=", 
  RowBox[{"Select", "[", 
   RowBox[{"bboxesClassified", ",", 
    RowBox[{
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<restMaxima\>\"", ",", "\"\<restLonga\>\"", ",", 
         "\"\<restDoubleWhole\>\"", ",", "\"\<restWhole\>\"", ",", 
         "\"\<restHalf\>\"", ",", "\"\<restQuarter\>\"", ",", 
         "\"\<rest8th\>\"", ",", "\"\<rest16th\>\"", ",", "\"\<rest32nd\>\"", 
         ",", "\"\<rest64th\>\"", ",", "\"\<rest128th\>\"", ",", 
         "\"\<restHBar\>\""}], "}"}], ",", 
       RowBox[{"Values", "@", "#"}]}], "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7717775699979057`*^9, 3.771777573112049*^9}, {
  3.771777679037443*^9, 3.771777744753964*^9}, {3.771777778698401*^9, 
  3.771777783753272*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"f63f0ce7-9116-4bc4-9679-996bdeed4b53"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"214.`", ",", "69.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"219.`", ",", "80.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"restHalf\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"454.`", ",", "69.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"459.`", ",", "80.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"restHalf\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"156.`", ",", "59.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"162.`", ",", "70.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"restHalf\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"378.`", ",", "43.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"382.`", ",", "56.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"restHalf\"\>"}], ",", 
   RowBox[{
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"95.`", ",", "39.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"100.`", ",", "53.`"}], "}"}]}], "]"}], 
    "\[Rule]", "\<\"restHBar\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{3.771777746037655*^9, 3.771777784416368*^9, 
  3.771853848371993*^9, 3.771865259836979*^9, 3.776172610254766*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"f0674dab-0aac-4dfe-a923-ed971e2443c1"]
}, Closed]],

Cell["Put them in the correct notation:", "Text",
 CellChangeTimes->{{3.7718503011062517`*^9, 
  3.7718503053888607`*^9}},ExpressionUUID->"6410d5b6-d28d-462c-a78d-\
5545727f9f80"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"restsNotation", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"SheetMusicRest", "[", 
     RowBox[{
      RowBox[{"RegionCentroid", "[", 
       RowBox[{"Keys", "@", "#"}], "]"}], ",", 
      RowBox[{"Values", "@", "#"}]}], "]"}], "&"}], "/@", 
   "rests"}]}]], "Input",
 CellChangeTimes->{{3.7717777903245163`*^9, 3.771777860610503*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"eda03463-c8e0-49a1-a94e-be432cb37e7a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"SheetMusicRest", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"216.5`", ",", "74.5`"}], "}"}], ",", "\<\"restHalf\"\>"}], 
    "]"}], ",", 
   RowBox[{"SheetMusicRest", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"456.5`", ",", "74.5`"}], "}"}], ",", "\<\"restHalf\"\>"}], 
    "]"}], ",", 
   RowBox[{"SheetMusicRest", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"159.`", ",", "64.5`"}], "}"}], ",", "\<\"restHalf\"\>"}], 
    "]"}], ",", 
   RowBox[{"SheetMusicRest", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"380.`", ",", "49.5`"}], "}"}], ",", "\<\"restHalf\"\>"}], 
    "]"}], ",", 
   RowBox[{"SheetMusicRest", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"97.5`", ",", "46.`"}], "}"}], ",", "\<\"restHBar\"\>"}], 
    "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7717778610105457`*^9, 3.771853849602736*^9, 
  3.7718652609313307`*^9, 3.776172611552334*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"40b2fefa-f236-4e14-b4c1-cb974c6a8f61"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Pitching the Notes", "Section",
 CellChangeTimes->{{3.7717590266758833`*^9, 
  3.771759028942731*^9}},ExpressionUUID->"41a12c39-ee4a-4d91-a71b-\
c8aa318c720e"],

Cell["\<\
To find the note\[CloseCurlyQuote]s pitch, we need to compare its distance \
from the bottom of the staff in relation to the distance between the staff \
lines with some reference pitch given by the clef.\
\>", "Text",
 CellChangeTimes->{{3.771770068211375*^9, 
  3.771770150519218*^9}},ExpressionUUID->"5d3d7d07-8274-4110-bd1a-\
3cf9f14453fe"],

Cell[TextData[{
 StyleBox["PitchNumber", "Input"],
 " finds the distance from the note to the bottom of the image, taking into \
consideration the distance between the staff lines. However, before that can \
be done, we need to resize everything to the same dimensions as the bounding \
boxes (512 by 128); for this, we find a resize factor, and multiply them \
anywhere that data not from the bounding boxes come in."
}], "Text",
 CellChangeTimes->{{3.7717701593588657`*^9, 3.771770203205736*^9}, {
  3.771772253499082*^9, 3.771772280540925*^9}, {3.771772369633951*^9, 
  3.771772422366198*^9}},ExpressionUUID->"fd021135-45d2-4aae-99be-\
7207d1bbdaa6"],

Cell["\<\
Distance between the staff lines in the resized images (constant since the \
staff trimming from the beginning is constant as well)\
\>", "Text",
 CellChangeTimes->{{3.771776349208926*^9, 3.771776374096808*^9}, 
   3.771778313521804*^9},ExpressionUUID->"d978b088-6baf-471a-abef-\
230bf6cea089"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Delta]", "=", "10"}]], "Input",
 CellChangeTimes->{{3.771776344794056*^9, 3.771776346985876*^9}, {
  3.77177691557403*^9, 3.771776915693101*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"6a1ecac4-4616-467c-9b54-c2cb421fbc82"],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{3.771776915909423*^9, 3.771853854334054*^9, 
  3.7761726247727537`*^9},
 CellLabel->"Out[93]=",ExpressionUUID->"890473f2-300a-43c9-8fbe-967a31d78c35"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"resizeFactor", "=", 
  RowBox[{"128", "/", 
   RowBox[{
    RowBox[{"ImageDimensions", "[", 
     RowBox[{"staffs", "\[LeftDoubleBracket]", "8", "\[RightDoubleBracket]"}],
      "]"}], "\[LeftDoubleBracket]", "2", 
    "\[RightDoubleBracket]"}]}]}]], "Input",
 CellChangeTimes->{{3.7717722392150097`*^9, 3.77177224207593*^9}, {
  3.771772424803056*^9, 3.771772438480138*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"27ed5bc3-02eb-4bc2-9f77-158d8cfa3a5d"],

Cell[BoxData[
 FractionBox["32", "75"]], "Output",
 CellChangeTimes->{3.771772439112217*^9, 3.771853855067276*^9, 
  3.776172625724359*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"020f9b43-f25f-4202-9336-84aa8220db37"]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{"PitchNumber", "[", 
   RowBox[{"noteCentroid_", ",", "\[Delta]_", ",", "bottom_"}], "]"}], " ", ":=",
   " ", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{
     "noteCentroid", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
     "-", "bottom"}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{"0.5", "\[Delta]"}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.770565851596305*^9, 3.7705659597842817`*^9}, {
   3.7708298347636538`*^9, 3.770829861646861*^9}, {3.77115618855201*^9, 
   3.771156253198101*^9}, {3.7717713597153873`*^9, 3.771771382401807*^9}, {
   3.771771431823805*^9, 3.771771436907078*^9}, {3.771771618060727*^9, 
   3.771771618192095*^9}, 3.771771690923058*^9, {3.771772567297579*^9, 
   3.7717725763739643`*^9}, {3.771772672648465*^9, 3.771772691516901*^9}, {
   3.7717765011908007`*^9, 3.771776507266096*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"a9f57888-ed87-4cc4-874f-b620ea67c610"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"naturalNotes", " ", "=", " ", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"#", "<>", 
         RowBox[{"ToString", "[", "i", "]"}]}], "&"}], "/@", 
       RowBox[{"{", 
        RowBox[{
        "\"\<A\>\"", ",", "\"\<B\>\"", ",", "\"\<C\>\"", ",", "\"\<D\>\"", 
         ",", "\"\<E\>\"", ",", "\"\<F\>\"", ",", "\"\<G\>\""}], "}"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "7"}], "}"}]}], "]"}], ",", "1"}], 
   "]"}]}]], "Input",
 CellLabel->"In[96]:=",ExpressionUUID->"dc3ed7ee-25e7-40e8-a509-3e1e7a02debb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"A1\"\>", ",", "\<\"B1\"\>", ",", "\<\"C1\"\>", 
   ",", "\<\"D1\"\>", ",", "\<\"E1\"\>", ",", "\<\"F1\"\>", ",", "\<\"G1\"\>",
    ",", "\<\"A2\"\>", ",", "\<\"B2\"\>", ",", "\<\"C2\"\>", 
   ",", "\<\"D2\"\>", ",", "\<\"E2\"\>", ",", "\<\"F2\"\>", ",", "\<\"G2\"\>",
    ",", "\<\"A3\"\>", ",", "\<\"B3\"\>", ",", "\<\"C3\"\>", 
   ",", "\<\"D3\"\>", ",", "\<\"E3\"\>", ",", "\<\"F3\"\>", ",", "\<\"G3\"\>",
    ",", "\<\"A4\"\>", ",", "\<\"B4\"\>", ",", "\<\"C4\"\>", 
   ",", "\<\"D4\"\>", ",", "\<\"E4\"\>", ",", "\<\"F4\"\>", ",", "\<\"G4\"\>",
    ",", "\<\"A5\"\>", ",", "\<\"B5\"\>", ",", "\<\"C5\"\>", 
   ",", "\<\"D5\"\>", ",", "\<\"E5\"\>", ",", "\<\"F5\"\>", ",", "\<\"G5\"\>",
    ",", "\<\"A6\"\>", ",", "\<\"B6\"\>", ",", "\<\"C6\"\>", 
   ",", "\<\"D6\"\>", ",", "\<\"E6\"\>", ",", "\<\"F6\"\>", ",", "\<\"G6\"\>",
    ",", "\<\"A7\"\>", ",", "\<\"B7\"\>", ",", "\<\"C7\"\>", 
   ",", "\<\"D7\"\>", ",", "\<\"E7\"\>", ",", "\<\"F7\"\>", 
   ",", "\<\"G7\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.771156261490233*^9, 3.7717702788477583`*^9, 
  3.771771330018364*^9, 3.771853856557292*^9, 3.776172641775345*^9},
 CellLabel->"Out[96]=",ExpressionUUID->"7dd9a520-b5cb-4e18-9811-985cee5a1893"]
}, Closed]],

Cell[TextData[{
 "In ",
 StyleBox["PitchToLetter", "Input"],
 ", we compare the result of a note\[CloseCurlyQuote]s ",
 StyleBox["PitchNumber", "Input"],
 " with a clef\[CloseCurlyQuote]s ",
 StyleBox["PitchNumber", "Input"],
 ", naming the note along the way:"
}], "Text",
 CellChangeTimes->{{3.7717702219657593`*^9, 3.7717702719576263`*^9}, {
  3.7717713305674677`*^9, 
  3.7717713323660994`*^9}},ExpressionUUID->"cd0eccee-99af-49f8-b130-\
62015c6b6880"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PitchToLetter", "[", 
   RowBox[{"pitchNumber_", ",", "referenceNumber_", ",", "referenceLetter_"}],
    "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"RotateLeft", "[", 
    RowBox[{"naturalNotes", ",", 
     RowBox[{
      RowBox[{"FirstPosition", "[", 
       RowBox[{"naturalNotes", ",", "referenceLetter"}], "]"}], "-", "1"}]}], 
    "]"}], "\[LeftDoubleBracket]", 
   RowBox[{
    RowBox[{"Round", "[", 
     RowBox[{"pitchNumber", "-", "referenceNumber"}], "]"}], "+", "1"}], 
   "\[RightDoubleBracket]"}]}]], "Input",
 CellChangeTimes->{{3.771156335211897*^9, 3.771156352236828*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"9de7e074-a4f7-47df-8557-8245b03f7d2d"],

Cell[TextData[{
 "We know from the way that we trimmed the staff images that the staff bottom \
has the Y coordinate of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2.25", " ", "\[CapitalDelta]"}], TraditionalForm]],ExpressionUUID->
  "83ac06cd-bca3-44b7-b872-619932c1db96"],
 " in the original image. Hence, to find the pitch, we just need to compare \
the notes to that with the resize factor applied, along with a clef:"
}], "Text",
 CellChangeTimes->{{3.771770285273403*^9, 3.7717703405749187`*^9}, {
  3.771772510264002*^9, 
  3.771772521667453*^9}},ExpressionUUID->"d40e2c90-48ac-4f38-a1d1-\
07d928a904ab"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pitchNumbers", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"PitchNumber", "[", 
     RowBox[{"#", ",", "\[Delta]", ",", 
      RowBox[{"resizeFactor", " ", "2.25", " ", "\[CapitalDelta]"}]}], "]"}], 
    "&"}], "/@", 
   RowBox[{"SortBy", "[", 
    RowBox[{"noteCentroids", ",", 
     RowBox[{
      RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
      "&"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.771770343162979*^9, 3.771770375253601*^9}, 
   3.771771260488345*^9, {3.771771370487795*^9, 3.771771372725615*^9}, {
   3.771771415823303*^9, 3.7717714174600697`*^9}, {3.77177148306548*^9, 
   3.771771485894435*^9}, {3.7717716573835363`*^9, 3.7717716672677307`*^9}, {
   3.7717721424456577`*^9, 3.771772144302635*^9}, {3.771772459570306*^9, 
   3.771772461834943*^9}, {3.771776383547892*^9, 3.771776385461803*^9}, {
   3.771776510644902*^9, 3.771776580432303*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"be49faef-f490-4710-a390-7ceb97be07cc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3.9652938819878174`", ",", "3.9652938819878174`", ",", 
   "3.9652938819878174`", ",", "4.0652938819878175`", ",", 
   "3.9652938819878174`", ",", "3.0652938819878175`", ",", 
   "1.0652938819878173`", ",", "1.1652938819878174`", ",", 
   "3.0652938819878175`", ",", "5.965293881987818`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.771770375744114*^9, {3.771771254791402*^9, 3.7717712609235363`*^9}, 
   3.7717713353019867`*^9, {3.7717713733160353`*^9, 3.771771438891499*^9}, {
   3.771771483481063*^9, 3.771771486353088*^9}, 3.771771620567155*^9, 
   3.771771667857419*^9, 3.771771700329694*^9, {3.77177213612866*^9, 
   3.771772144688425*^9}, 3.771772462342454*^9, {3.771772542200634*^9, 
   3.771772578159643*^9}, {3.771772681564476*^9, 3.771772693791431*^9}, 
   3.771776386194468*^9, {3.771776517184825*^9, 3.771776580943034*^9}, 
   3.771776857552554*^9, 3.771776923497609*^9, 3.771853860333263*^9, 
   3.771865210609343*^9, 3.771867577808937*^9, 3.7761726532100058`*^9},
 CellLabel->"Out[98]=",ExpressionUUID->"7a9cf003-6b3a-4d8b-9258-f12ceb189cb8"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"noteLetters", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"PitchToLetter", "[", 
     RowBox[{"#", ",", "0", ",", "\"\<E4\>\""}], "]"}], "&"}], "/@", 
   "pitchNumbers"}]}]], "Input",
 CellChangeTimes->{{3.7717714439107857`*^9, 3.771771520467383*^9}, {
   3.771771703638239*^9, 3.771771748918108*^9}, {3.771772106922855*^9, 
   3.7717721313033733`*^9}, {3.771772163526464*^9, 3.771772228667314*^9}, {
   3.7717724664164248`*^9, 3.7717724685405617`*^9}, {3.7717725807824917`*^9, 
   3.77177260191331*^9}, {3.771776405239604*^9, 3.771776407299637*^9}, {
   3.771776468096829*^9, 3.771776482592894*^9}, 3.7717765211731987`*^9},
 CellLabel->"In[99]:=",ExpressionUUID->"aef14d67-90dc-44b4-963a-7cdb39d6e257"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"B5\"\>", ",", "\<\"B5\"\>", ",", "\<\"B5\"\>", 
   ",", "\<\"B5\"\>", ",", "\<\"B5\"\>", ",", "\<\"A5\"\>", ",", "\<\"F4\"\>",
    ",", "\<\"F4\"\>", ",", "\<\"A5\"\>", ",", "\<\"D5\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.77177148891827*^9, 3.771771521204117*^9}, 
   3.7717716704171047`*^9, {3.77177170138264*^9, 3.7717717077300797`*^9}, {
   3.771771738453443*^9, 3.771771749606011*^9}, {3.771772112770761*^9, 
   3.771772231753249*^9}, 3.77177246889935*^9, {3.771772581549265*^9, 
   3.7717726023316936`*^9}, {3.7717726838609343`*^9, 3.771772694533675*^9}, {
   3.771776388013056*^9, 3.771776407988596*^9}, {3.771776470891308*^9, 
   3.771776477592067*^9}, {3.771776521783442*^9, 3.7717765820325603`*^9}, 
   3.7717768584436913`*^9, 3.771776924470992*^9, 3.7718538611872673`*^9, 
   3.771865212841921*^9, 3.7718675787276993`*^9, 3.776172653818363*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"17663ccf-826b-460b-88ee-56befcb61da9"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pitchedNotes", "=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"SheetMusicNote", "[", 
      RowBox[{"#2", ",", "#1"}], "]"}], "&"}], "[", 
    RowBox[{"noteLetters", ",", 
     RowBox[{"SortBy", "[", 
      RowBox[{"noteCentroids", ",", 
       RowBox[{
        RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
        "&"}]}], "]"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.77177757767229*^9, 3.771777643679894*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"eb417518-1849-4b84-8f04-2e2a47750697"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"SheetMusicNote", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"66.5`", ",", "64.`"}], "}"}], ",", "\<\"B5\"\>"}], "]"}], ",", 
   
   RowBox[{"SheetMusicNote", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"97.5`", ",", "64.`"}], "}"}], ",", "\<\"B5\"\>"}], "]"}], ",", 
   
   RowBox[{"SheetMusicNote", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"121.`", ",", "64.`"}], "}"}], ",", "\<\"B5\"\>"}], "]"}], ",", 
   
   RowBox[{"SheetMusicNote", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"136.5`", ",", "64.5`"}], "}"}], ",", "\<\"B5\"\>"}], "]"}], 
   ",", 
   RowBox[{"SheetMusicNote", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"196.5`", ",", "64.`"}], "}"}], ",", "\<\"B5\"\>"}], "]"}], ",", 
   RowBox[{"SheetMusicNote", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"247.`", ",", "59.5`"}], "}"}], ",", "\<\"A5\"\>"}], "]"}], ",", 
   RowBox[{"SheetMusicNote", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"286.5`", ",", "49.5`"}], "}"}], ",", "\<\"F4\"\>"}], "]"}], 
   ",", 
   RowBox[{"SheetMusicNote", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"327.5`", ",", "50.`"}], "}"}], ",", "\<\"F4\"\>"}], "]"}], ",", 
   RowBox[{"SheetMusicNote", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"343.5`", ",", "59.5`"}], "}"}], ",", "\<\"A5\"\>"}], "]"}], 
   ",", 
   RowBox[{"SheetMusicNote", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"438.5`", ",", "74.`"}], "}"}], ",", "\<\"D5\"\>"}], "]"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.771777644886759*^9, 3.771853861940118*^9, 
  3.771865226260087*^9, 3.7718675803852177`*^9, 3.776172654707958*^9},
 CellLabel->
  "Out[100]=",ExpressionUUID->"37bfa62d-0e68-465c-9528-505985cd1973"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Final Parsing", "Section",
 CellChangeTimes->{{3.7717778748311367`*^9, 3.7717778814492903`*^9}, {
  3.771857032059561*^9, 
  3.771857040187571*^9}},ExpressionUUID->"334b33d5-026f-40d8-a4bd-\
4a357f8e04c5"],

Cell["The parsing in here is so simple that it\[CloseCurlyQuote]s just \
sorting:", "Text",
 CellChangeTimes->{{3.771850354849164*^9, 
  3.771850361697575*^9}},ExpressionUUID->"e0a9ee34-4a85-4b5a-bcee-\
6cc179909670"],

Cell[BoxData[
 RowBox[{
  RowBox[{"NotationCentroid", "[", 
   RowBox[{"SheetMusicNote", "[", 
    RowBox[{"c_", ",", "_"}], "]"}], "]"}], " ", ":=", " ", "c"}]], "Input",
 CellChangeTimes->{{3.77177793225184*^9, 3.7717779510253763`*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"54eb354f-fcc7-41b7-b6a8-3e758631bff7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"NotationCentroid", "[", 
   RowBox[{"SheetMusicRest", "[", 
    RowBox[{"c_", ",", "_"}], "]"}], "]"}], " ", ":=", " ", "c"}]], "Input",
 CellChangeTimes->{{3.77177795359396*^9, 3.771777960458096*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"0a5fa538-2ef8-4feb-8df0-762de2b7bb12"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ParseSheetMusic", "[", 
   RowBox[{"pitchedNotes_", ",", "rests_"}], "]"}], " ", ":=", " ", 
  RowBox[{"SheetMusic", "@", 
   RowBox[{"SortBy", "[", 
    RowBox[{
     RowBox[{"Join", "[", 
      RowBox[{"pitchedNotes", ",", "restsNotation"}], "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"NotationCentroid", "[", "#", "]"}], "\[LeftDoubleBracket]", 
       "1", "\[RightDoubleBracket]"}], "&"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.771778009577868*^9, 3.771778026869245*^9}, {
  3.771856140576696*^9, 3.771856142059504*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"35e6ca64-3ab4-4e9b-bce3-008d55299e0d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ParseSheetMusic", "[", 
  RowBox[{"pitchedNotes", ",", "restsNotation"}], "]"}]], "Input",
 CellChangeTimes->{{3.771853885077115*^9, 3.771853898416449*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"c7e0fa6a-d0f2-40fd-93f2-6b52041010c3"],

Cell[BoxData[
 RowBox[{"SheetMusic", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"SheetMusicNote", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"66.5`", ",", "64.`"}], "}"}], ",", "\<\"B5\"\>"}], "]"}], ",", 
    RowBox[{"SheetMusicNote", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"97.5`", ",", "64.`"}], "}"}], ",", "\<\"B5\"\>"}], "]"}], ",", 
    RowBox[{"SheetMusicRest", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"97.5`", ",", "46.`"}], "}"}], ",", "\<\"restHBar\"\>"}], 
     "]"}], ",", 
    RowBox[{"SheetMusicNote", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"121.`", ",", "64.`"}], "}"}], ",", "\<\"B5\"\>"}], "]"}], ",", 
    RowBox[{"SheetMusicNote", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"136.5`", ",", "64.5`"}], "}"}], ",", "\<\"B5\"\>"}], "]"}], 
    ",", 
    RowBox[{"SheetMusicRest", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"159.`", ",", "64.5`"}], "}"}], ",", "\<\"restHalf\"\>"}], 
     "]"}], ",", 
    RowBox[{"SheetMusicNote", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"196.5`", ",", "64.`"}], "}"}], ",", "\<\"B5\"\>"}], "]"}], 
    ",", 
    RowBox[{"SheetMusicRest", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"216.5`", ",", "74.5`"}], "}"}], ",", "\<\"restHalf\"\>"}], 
     "]"}], ",", 
    RowBox[{"SheetMusicNote", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"247.`", ",", "59.5`"}], "}"}], ",", "\<\"A5\"\>"}], "]"}], 
    ",", 
    RowBox[{"SheetMusicNote", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"286.5`", ",", "49.5`"}], "}"}], ",", "\<\"F4\"\>"}], "]"}], 
    ",", 
    RowBox[{"SheetMusicNote", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"327.5`", ",", "50.`"}], "}"}], ",", "\<\"F4\"\>"}], "]"}], 
    ",", 
    RowBox[{"SheetMusicNote", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"343.5`", ",", "59.5`"}], "}"}], ",", "\<\"A5\"\>"}], "]"}], 
    ",", 
    RowBox[{"SheetMusicRest", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"380.`", ",", "49.5`"}], "}"}], ",", "\<\"restHalf\"\>"}], 
     "]"}], ",", 
    RowBox[{"SheetMusicNote", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"438.5`", ",", "74.`"}], "}"}], ",", "\<\"D5\"\>"}], "]"}], 
    ",", 
    RowBox[{"SheetMusicRest", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"456.5`", ",", "74.5`"}], "}"}], ",", "\<\"restHalf\"\>"}], 
     "]"}]}], "}"}], "]"}]], "Output",
 CellChangeTimes->{3.7718538994377832`*^9, 3.7718561435226994`*^9, 
  3.7718652792850647`*^9, 3.776172680429194*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"03f0f5f1-895f-42e5-a04b-2132f85c61d9"]
}, Closed]]
}, Closed]]
}, Closed]]
}, Open  ]]
},
WindowSize->{1920, 1021},
WindowMargins->{{0, Automatic}, {0, Automatic}},
FrontEndVersion->"12.0 for Linux x86 (64-bit) (April 11, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[583, 22, 162, 3, 99, "Title",ExpressionUUID->"304d7b4f-525d-47b2-8d27-52f7023b6fcf"],
Cell[748, 27, 194, 3, 54, "Subtitle",ExpressionUUID->"a502bbf1-7728-4e09-bf0e-ed402a3c8f04"],
Cell[945, 32, 164, 3, 54, "Subtitle",ExpressionUUID->"6f34044e-f150-4ace-8e2a-b018baa1e1ea"],
Cell[1112, 37, 219, 3, 53, "Code",ExpressionUUID->"6a3870a3-0f24-4c37-87c0-8e754816e49e"],
Cell[CellGroupData[{
Cell[1356, 44, 249, 4, 53, "Code",ExpressionUUID->"3c5a3b11-7203-4f9e-b247-58e3360ee17f"],
Cell[1608, 50, 469, 7, 35, "Output",ExpressionUUID->"215c2f0c-0819-4f81-a9be-9fc30256c787"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2114, 62, 161, 3, 70, "Chapter",ExpressionUUID->"160e4edf-d88e-43a2-a2b8-fe0fc491cdf8"],
Cell[2278, 67, 377, 8, 36, "Text",ExpressionUUID->"aab3be59-8c4f-40d9-aff7-0c0f4f4a068b"],
Cell[CellGroupData[{
Cell[2680, 79, 209, 4, 68, "Section",ExpressionUUID->"e4bd7dd5-3d6d-40f0-8fc9-3b3b05f111d4"],
Cell[2892, 85, 1386, 21, 108, "Text",ExpressionUUID->"5e4ae5f6-7bbf-48e5-8cd1-b68f4dc9ceb1"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[4327, 112, 153, 3, 59, "Chapter",ExpressionUUID->"18ce7658-92cd-4e66-a117-beee0528c3e9"],
Cell[4483, 117, 233, 4, 36, "Text",ExpressionUUID->"edc157c7-97b3-4ac2-bde2-76e6804844d1"],
Cell[CellGroupData[{
Cell[4741, 125, 321, 5, 33, "Item",ExpressionUUID->"67a04f79-8727-4601-9e66-2c628bc05b51"],
Cell[5065, 132, 617, 13, 28, "Subitem",ExpressionUUID->"d7516f79-3583-4805-b1e0-e7d59e939f46"],
Cell[5685, 147, 323, 5, 33, "Item",ExpressionUUID->"4acdda3b-c908-41b4-812e-f1ad124cc1cb"],
Cell[6011, 154, 611, 13, 28, "Subitem",ExpressionUUID->"0538c523-2274-4dde-aa66-2204f550db61"]
}, Closed]],
Cell[CellGroupData[{
Cell[6659, 172, 167, 3, 54, "Section",ExpressionUUID->"b5abda3a-5643-491b-9744-d5660163ecb3"],
Cell[6829, 177, 261, 4, 36, "Text",ExpressionUUID->"d418d747-9d3c-417e-90b6-0a2da6f9a569"],
Cell[CellGroupData[{
Cell[7115, 185, 154, 3, 55, "Subsection",ExpressionUUID->"91078346-8d10-4571-b19b-f6e7025bd26e"],
Cell[7272, 190, 1623, 45, 124, "Input",ExpressionUUID->"5597a45f-71c0-4617-9f25-a058b6e3260a"]
}, Closed]],
Cell[CellGroupData[{
Cell[8932, 240, 165, 3, 39, "Subsection",ExpressionUUID->"ab975a4e-0532-499e-8ad6-e3cb5a9ca6df"],
Cell[9100, 245, 460, 11, 55, "Input",ExpressionUUID->"1f8a36b7-961c-435e-897a-9f839bad4b9f"],
Cell[9563, 258, 12339, 214, 276, "Input",ExpressionUUID->"a0a7d66f-2781-4655-b3de-18e08cf328bc"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[21963, 479, 181, 3, 59, "Chapter",ExpressionUUID->"98ee5f3d-6901-421c-a313-fe5c510ecef6"],
Cell[22147, 484, 633781, 10395, 1096, "Input",ExpressionUUID->"87f2f3a0-d60a-45fe-b4c3-137357041d29"]
}, Closed]],
Cell[CellGroupData[{
Cell[655965, 10884, 172, 3, 59, "Chapter",ExpressionUUID->"d385d2a4-222b-4f95-8e5c-79616f85baa9"],
Cell[CellGroupData[{
Cell[656162, 10891, 218, 4, 68, "Section",ExpressionUUID->"e3cba559-bdb4-4e02-9fc5-e1e746f7b3a0"],
Cell[656383, 10897, 505, 9, 36, "Text",ExpressionUUID->"42aa4747-20b8-40eb-a229-fb40c8a1b7ee"],
Cell[656891, 10908, 291, 6, 36, "Text",ExpressionUUID->"e34a248b-447a-42f2-a3f6-cdd97b77c514"],
Cell[657185, 10916, 4164, 103, 331, "Input",ExpressionUUID->"53051d17-72af-47c2-87af-291582cee282"],
Cell[661352, 11021, 4103, 96, 285, "Input",ExpressionUUID->"0133cd74-b451-4a4a-a6fc-427ef6a45d0c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[665492, 11122, 220, 4, 68, "Section",ExpressionUUID->"abc35530-432c-400e-a0d5-e8a703958f7b"],
Cell[665715, 11128, 537, 9, 60, "Text",ExpressionUUID->"e11e1d51-ac0e-4a02-8b07-19acf1bd51c2"],
Cell[666255, 11139, 372, 9, 31, "Input",ExpressionUUID->"6f2cd697-80f5-49a1-99dd-b0f2a539faf3"],
Cell[666630, 11150, 330, 8, 31, "Input",ExpressionUUID->"9dd19415-42f5-45fe-b627-628552df561e"],
Cell[666963, 11160, 1288, 33, 124, "Input",ExpressionUUID->"883fe860-7518-475e-9d9e-676cc5255f87"]
}, Open  ]],
Cell[CellGroupData[{
Cell[668288, 11198, 155, 3, 68, "Section",ExpressionUUID->"cef6d98e-3d8c-493b-96bc-b6d7d852cab9"],
Cell[668446, 11203, 197, 3, 36, "Text",ExpressionUUID->"0244fe8c-2195-4680-a030-dec75aef8fdc"],
Cell[CellGroupData[{
Cell[668668, 11210, 640, 12, 31, "Input",ExpressionUUID->"bdba51ed-bae1-4dc3-a54f-b5ae97988dc6"],
Cell[669311, 11224, 6240, 188, 114, "Echo",ExpressionUUID->"3a689369-3c93-4142-aee1-25842f29d7d6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[675588, 11417, 536, 12, 31, "Input",ExpressionUUID->"0cbe471a-12de-4339-9775-dab5ea37d1ed"],
Cell[676127, 11431, 599178, 9864, 674, "Output",ExpressionUUID->"3e8e4571-849e-46ce-a9b9-5df8358d91cc"]
}, Open  ]],
Cell[1275320, 21298, 180, 3, 36, "Text",ExpressionUUID->"3364c239-1395-4e05-b39a-a617809ca863"],
Cell[1275503, 21303, 460, 11, 31, "Input",ExpressionUUID->"d0d53082-01d4-4489-80ca-d24325852871"],
Cell[CellGroupData[{
Cell[1275988, 21318, 433, 10, 31, "Input",ExpressionUUID->"66dcc800-83ba-4577-908a-84fc7c1b5761"],
Cell[1276424, 21330, 268634, 4445, 671, "Output",ExpressionUUID->"9ff27847-2767-41d2-88ba-701eb1711230"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1545119, 25782, 191, 3, 59, "Chapter",ExpressionUUID->"4542faf4-5391-4679-9e07-ca150fa80708"],
Cell[CellGroupData[{
Cell[1545335, 25789, 174, 3, 68, "Section",ExpressionUUID->"ee076c53-509e-4ccb-afb5-6895d724ed6b"],
Cell[1545512, 25794, 320, 5, 36, "Text",ExpressionUUID->"a006051c-e82a-43a0-86c3-05adea0ce073"],
Cell[CellGroupData[{
Cell[1545857, 25803, 155, 3, 55, "Subsection",ExpressionUUID->"bfc273fa-3add-438c-85c3-cfb35a3389e8"],
Cell[1546015, 25808, 2499, 62, 124, "Input",ExpressionUUID->"ead1ecb4-bd63-4e35-ad3e-f0382d42c5ca"],
Cell[CellGroupData[{
Cell[1548539, 25874, 2665, 52, 147, "Input",ExpressionUUID->"0ced5a47-b985-4a6c-87ba-024686e39afd"],
Cell[1551207, 25928, 130185, 2582, 78, "Output",ExpressionUUID->"11d0b718-68b7-4783-ad2c-a7d14db49d26"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1681441, 28516, 157, 3, 39, "Subsection",ExpressionUUID->"31206e9d-f90c-49a1-84c8-36fc41b2d505"],
Cell[1681601, 28521, 4273, 96, 170, "Input",ExpressionUUID->"d44d1b63-4eef-468c-a853-9090d3991601"],
Cell[1685877, 28619, 3075, 67, 147, "Input",ExpressionUUID->"2afb449d-c3fa-40db-9f53-ed45c2fa1791"],
Cell[CellGroupData[{
Cell[1688977, 28690, 1384, 31, 216, "Input",ExpressionUUID->"b32f285d-a99c-485b-a299-cfbfbef1a8ec"],
Cell[1690364, 28723, 147476, 2920, 78, "Output",ExpressionUUID->"aacfaecc-2230-49f4-8a59-cd968093e864"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1837889, 31649, 162, 3, 39, "Subsection",ExpressionUUID->"607a76d4-ce2b-48ac-b993-f4660bfc3f40"],
Cell[CellGroupData[{
Cell[1838076, 31656, 2310, 44, 101, "Input",ExpressionUUID->"f314d736-8550-42f0-b03a-5f8ea4a9bd0d"],
Cell[1840389, 31702, 138462, 2551, 77, "Output",ExpressionUUID->"5ebcb8bc-f012-4e5a-bd65-8554fc7f1462"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1978900, 34259, 160, 3, 39, "Subsection",ExpressionUUID->"0d339269-2363-4e9f-8b01-e5299c4f2c92"],
Cell[1979063, 34264, 157, 3, 36, "Text",ExpressionUUID->"d3bea29e-bfa0-499b-9c27-6ddc0eac4df3"],
Cell[CellGroupData[{
Cell[1979245, 34271, 492, 9, 31, "Input",ExpressionUUID->"2da3aac9-a8cb-4d20-8d8e-7308154cc03b"],
Cell[1979740, 34282, 454, 6, 35, "Output",ExpressionUUID->"e43f88ff-9f94-4462-bb8d-67bfd6fc5a15"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1980255, 34295, 172, 3, 54, "Section",ExpressionUUID->"ca67de10-a865-46ef-be8f-4c7525e712a5"],
Cell[1980430, 34300, 310, 9, 36, "Text",ExpressionUUID->"885b68d1-3579-4c4e-88cc-07208915eec8"],
Cell[1980743, 34311, 415, 8, 60, "Text",ExpressionUUID->"13abc6d4-d62c-421d-896c-610b9598c4a2"],
Cell[1981161, 34321, 490, 11, 31, "Input",ExpressionUUID->"e70921c3-797d-4228-8f94-940bd8e741d6"],
Cell[1981654, 34334, 1435, 39, 124, "Input",ExpressionUUID->"73c496f4-db9e-40bb-88ac-1d66acaabd14"],
Cell[1983092, 34375, 4414, 104, 492, "Input",ExpressionUUID->"fcf33422-bb05-480a-96b6-7a34bdf983c7"]
}, Closed]],
Cell[CellGroupData[{
Cell[1987543, 34484, 167, 3, 54, "Section",ExpressionUUID->"d50e15f5-df63-49f1-9678-44aa4d53b2f4"],
Cell[CellGroupData[{
Cell[1987735, 34491, 162, 2, 55, "Subsection",ExpressionUUID->"7d2dc0ad-a113-41bc-ab37-6624d4318f6d"],
Cell[1987900, 34495, 305, 6, 31, "Input",ExpressionUUID->"88a2e177-2a6b-42bc-a443-400317e7ccf7"],
Cell[1988208, 34503, 326, 7, 31, "Input",ExpressionUUID->"bfb5cbcb-7e2e-4068-a4d8-9cfd0ba02571"]
}, Closed]],
Cell[CellGroupData[{
Cell[1988571, 34515, 158, 3, 39, "Subsection",ExpressionUUID->"448559d8-e0aa-41f7-b85d-cc3769bf36ff"],
Cell[1988732, 34520, 947, 18, 101, "Input",ExpressionUUID->"574390a4-2a2b-4bb2-9655-a6d710b4baaa"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1989728, 34544, 176, 3, 54, "Section",ExpressionUUID->"06d81fea-af5f-4603-b8ed-a96d48658b7a"],
Cell[CellGroupData[{
Cell[1989929, 34551, 328, 6, 31, "Input",ExpressionUUID->"f7989afe-cf97-480a-b9f6-c0c3644cafc0"],
Cell[1990260, 34559, 186744, 3457, 77, "Output",ExpressionUUID->"8b34ec87-0ace-4053-8117-2a89ba16c022"]
}, Closed]],
Cell[CellGroupData[{
Cell[2177041, 38021, 188, 3, 31, "Input",ExpressionUUID->"a321be99-bbce-4d7c-a18d-51d142abab9a"],
Cell[2177232, 38026, 189243, 3504, 863, "Output",ExpressionUUID->"c24bb1ae-eb3d-4cb3-9323-2ebd4cd45c83"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[2366524, 41536, 155, 3, 68, "Section",ExpressionUUID->"87c0347c-a2c0-4062-9297-8c69566236b5"],
Cell[2366682, 41541, 167, 3, 36, "Text",ExpressionUUID->"0106c190-daf7-43c6-9512-3f983610b903"],
Cell[CellGroupData[{
Cell[2366874, 41548, 394, 6, 31, "Input",ExpressionUUID->"9d8e475a-5033-45d5-a230-477721a4ccf5"],
Cell[2367271, 41556, 32472, 536, 195, "Output",ExpressionUUID->"6d729963-a6b1-4710-b05f-40916b0b4ebe"]
}, Closed]],
Cell[2399758, 42095, 158, 3, 36, "Text",ExpressionUUID->"c1d85225-9c1e-473f-a5e8-48cb44967424"],
Cell[CellGroupData[{
Cell[2399941, 42102, 368, 8, 31, "Input",ExpressionUUID->"021779f7-c64f-4733-b703-50d659f57621"],
Cell[2400312, 42112, 281791, 4624, 380, "Output",ExpressionUUID->"f0f85539-a2d3-43ad-a422-5f7f48f2de33"]
}, Closed]],
Cell[2682118, 46739, 166, 3, 36, "Text",ExpressionUUID->"f1ac4bcf-cf64-4c1b-a11c-72b5e1bcf5ac"],
Cell[CellGroupData[{
Cell[2682309, 46746, 404, 7, 31, "Input",ExpressionUUID->"00d6d9cb-5a36-4ecd-ad7c-729ac18191de"],
Cell[2682716, 46755, 1823, 34, 200, "Output",ExpressionUUID->"0979f5ab-9a31-4e4b-ab60-3652520ae60e"]
}, Closed]],
Cell[2684554, 46792, 278, 7, 36, "Text",ExpressionUUID->"40924536-f277-49a7-8378-bbbb74352700"],
Cell[CellGroupData[{
Cell[2684857, 46803, 635, 13, 31, "Input",ExpressionUUID->"f5d8699b-4e37-4b98-a816-a7b585df420f"],
Cell[2685495, 46818, 6003, 198, 105, "Output",ExpressionUUID->"86674a7d-3f7e-46cb-921a-56f5b2205424"]
}, Closed]],
Cell[2691513, 47019, 619, 17, 31, "Input",ExpressionUUID->"24255036-c9a5-472c-9bbe-63305e1f7ac4"],
Cell[CellGroupData[{
Cell[2692157, 47040, 1083, 25, 31, "Input",ExpressionUUID->"8dbbe3c7-2193-42ff-b2d7-501e7a9cbd00"],
Cell[2693243, 47067, 32523, 533, 334, "Output",ExpressionUUID->"aa329b1e-f7a3-4997-b5a5-3afff60cb049"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[2725827, 47607, 176, 3, 59, "Chapter",ExpressionUUID->"b19622b1-2c78-4f60-8c76-4a9269c16c3d"],
Cell[CellGroupData[{
Cell[2726028, 47614, 217, 4, 68, "Section",ExpressionUUID->"c8c5cdce-ac36-4248-823d-5548afb394a6"],
Cell[2726248, 47620, 247, 4, 36, "Text",ExpressionUUID->"f0a6ec5a-9f48-4787-bc67-4413e2d1a937"],
Cell[2726498, 47626, 427, 9, 31, "Input",ExpressionUUID->"775f375a-dee9-4fee-ad0c-8b6b10a7c5c7"],
Cell[2726928, 47637, 486, 10, 31, "Input",ExpressionUUID->"e46b8d2d-4e39-4814-95c3-f159d531e1e0"],
Cell[CellGroupData[{
Cell[2727439, 47651, 272, 5, 31, "Input",ExpressionUUID->"76b01357-56ed-4028-9f4e-fd6ebee2f1c1"],
Cell[2727714, 47658, 78285, 1476, 323, "Output",ExpressionUUID->"4fbbea4a-3c09-4559-88b1-a701770cfc7c"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[2806048, 49140, 216, 4, 54, "Section",ExpressionUUID->"b2de478e-368d-49b3-809d-18afb5d4650c"],
Cell[2806267, 49146, 300, 8, 36, "Text",ExpressionUUID->"2b2e49ee-3174-479b-a491-1c69106c4e46"],
Cell[CellGroupData[{
Cell[2806592, 49158, 476, 10, 31, "Input",ExpressionUUID->"258022d2-d663-4b2a-9762-98cabea20c79"],
Cell[2807071, 49170, 410, 10, 23, "Message",ExpressionUUID->"dd45533c-cc0b-4070-a078-6ed90ea2fcc7"],
Cell[2807484, 49182, 475, 10, 35, "Output",ExpressionUUID->"d87320b7-49fd-4914-bd13-cf67091e95b6"]
}, Closed]],
Cell[CellGroupData[{
Cell[2807996, 49197, 273, 5, 31, "Input",ExpressionUUID->"ca525484-189e-45d9-ab9d-fa1b080869a1"],
Cell[2808272, 49204, 177, 2, 35, "Output",ExpressionUUID->"d74e76b3-add8-4108-bce9-49e9c05c0a79"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[2808498, 49212, 183, 3, 68, "Section",ExpressionUUID->"9ded45fc-7f8b-4b9a-8916-d57a87b4c887"],
Cell[CellGroupData[{
Cell[2808706, 49219, 272, 4, 31, "Input",ExpressionUUID->"bbb119f1-6a74-4e9d-b5ca-e68140a6fda8"],
Cell[2808981, 49225, 17907, 327, 118, "Output",ExpressionUUID->"a3b3b5ce-03ea-4660-af02-cd7b1bd381d2"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[2826937, 49558, 170, 3, 68, "Section",ExpressionUUID->"a51f8687-b50d-477f-828d-61cc50a8fb43"],
Cell[2827110, 49563, 243, 7, 36, "Text",ExpressionUUID->"d8ec0c46-9d20-4e36-b202-b4c056fc7e0b"],
Cell[CellGroupData[{
Cell[2827378, 49574, 469, 8, 31, "Input",ExpressionUUID->"81002a2f-368d-4320-a129-dd848a798ab4"],
Cell[2827850, 49584, 434, 11, 23, "Message",ExpressionUUID->"66423b58-ad95-4fbc-b18b-c935d1ca65a1"],
Cell[2828287, 49597, 18375, 330, 86, "Output",ExpressionUUID->"0d1bbc6a-9dd7-47d1-b6e6-1b3741d7ed2e"]
}, Closed]],
Cell[2846677, 49930, 159, 3, 36, "Text",ExpressionUUID->"f533ba27-5f22-4518-819d-171dceb50cfa"],
Cell[CellGroupData[{
Cell[2846861, 49937, 226, 4, 31, "Input",ExpressionUUID->"cf5b0281-42ad-429b-a3df-9b0b104d69ec"],
Cell[2847090, 49943, 1311, 26, 59, "Output",ExpressionUUID->"bd60ef72-e9be-4b6a-bca3-8bcc276c3a34"]
}, Closed]],
Cell[2848416, 49972, 151, 3, 32, "Text",ExpressionUUID->"9f3e13e1-6dd5-42bc-8276-e4c21d37897b"],
Cell[CellGroupData[{
Cell[2848592, 49979, 221, 4, 31, "Input",ExpressionUUID->"b5d28b0b-e1be-41f4-880c-201ff25bb1bd"],
Cell[2848816, 49985, 426, 7, 35, "Output",ExpressionUUID->"f1156fbc-26bc-4fc3-846a-792fc4eb6d06"]
}, Closed]],
Cell[2849257, 49995, 159, 3, 32, "Text",ExpressionUUID->"bbb99447-cad1-4460-95f7-942057af6c0d"],
Cell[CellGroupData[{
Cell[2849441, 50002, 232, 4, 31, "Input",ExpressionUUID->"6e7c78f8-9a72-44a7-8216-97b01b7b6271"],
Cell[2849676, 50008, 165630, 3151, 1219, 53162, 1307, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"748d41ae-5572-4a4b-a691-5f93007102a4"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[3015355, 53165, 154, 3, 54, "Section",ExpressionUUID->"3654b1b4-9f66-446d-947e-86b46ad4345f"],
Cell[3015512, 53170, 159, 3, 36, "Text",ExpressionUUID->"c87c7328-8a45-446f-a4c1-7b7ef7f614de"],
Cell[CellGroupData[{
Cell[3015696, 53177, 322, 5, 31, "Input",ExpressionUUID->"1da5be04-d177-4f75-813e-1c30eb6718f6"],
Cell[3016021, 53184, 71626, 1178, 195, "Output",ExpressionUUID->"2690516c-5e30-4ce9-ad26-94a0a6a012f8"]
}, Closed]],
Cell[3087662, 54365, 167, 3, 36, "Text",ExpressionUUID->"65e64af2-f776-4f5c-a96f-916a2e29b74f"],
Cell[CellGroupData[{
Cell[3087854, 54372, 1948, 40, 31, "Input",ExpressionUUID->"fae6df9a-8f3e-4ab9-b757-7dd49e25bfd6"],
Cell[3089805, 54414, 129505, 2240, 235, "Output",ExpressionUUID->"3cede728-4d6a-4d3b-a2e0-6a68b06722df"]
}, Closed]],
Cell[3219325, 56657, 169, 3, 36, "Text",ExpressionUUID->"a7c37ca1-efc6-4bed-8ae3-dce420b713fe"],
Cell[CellGroupData[{
Cell[3219519, 56664, 591, 13, 31, "Input",ExpressionUUID->"ab79f1a7-48ff-46f4-aead-eaa87fdb43a9"],
Cell[3220113, 56679, 97143, 1709, 163, "Output",ExpressionUUID->"66a62956-298d-48ae-8062-1b45b4d2bb44"]
}, Closed]],
Cell[3317271, 58391, 159, 3, 36, "Text",ExpressionUUID->"c159cdac-2711-43ee-b4bd-c52327877d00"],
Cell[3317433, 58396, 998, 20, 31, "Input",ExpressionUUID->"a227f1d3-33a0-49ec-aa68-abab33d9dc44"],
Cell[CellGroupData[{
Cell[3318456, 58420, 889, 20, 31, "Input",ExpressionUUID->"cdf8fc08-fd56-48d8-925b-65e91cd8e1f5"],
Cell[3319348, 58442, 99046, 1755, 1892, "Output",ExpressionUUID->"1089f733-ce18-4b27-93e3-9c2a160f7baa"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[3418455, 60204, 168, 3, 59, "Chapter",ExpressionUUID->"866af321-fa15-4122-9cba-69ef6078de00"],
Cell[3418626, 60209, 214, 5, 36, "Text",ExpressionUUID->"f471702e-8354-41bc-b43a-fe26de2f3399"],
Cell[CellGroupData[{
Cell[3418865, 60218, 680, 18, 31, "Input",ExpressionUUID->"46d23d87-7d6d-4d83-a4b8-3bbf05ea629a"],
Cell[3419548, 60238, 7057, 221, 174, "Output",ExpressionUUID->"307378a3-b33a-4a05-b848-dc0344d982d1"]
}, Closed]],
Cell[CellGroupData[{
Cell[3426642, 60464, 213, 4, 68, "Section",ExpressionUUID->"1632b429-3fed-4474-bdce-a8355d77a9f9"],
Cell[3426858, 60470, 186, 3, 36, "Text",ExpressionUUID->"3510b99d-f9ba-405b-90b0-404475f80a9b"],
Cell[CellGroupData[{
Cell[3427069, 60477, 413, 10, 31, "Input",ExpressionUUID->"624046b8-4127-4c47-818c-69b000f074e9"],
Cell[3427485, 60489, 2236, 66, 59, "Output",ExpressionUUID->"0b933a6d-585b-4a35-8844-56c448f6a5bb"]
}, Closed]],
Cell[3429736, 60558, 166, 3, 36, "Text",ExpressionUUID->"2ef82ddf-af8b-4819-be4c-d3f8d755ee9c"],
Cell[CellGroupData[{
Cell[3429927, 60565, 247, 4, 31, "Input",ExpressionUUID->"537bf524-83b5-4259-9b88-9052fc7673b4"],
Cell[3430177, 60571, 937, 25, 35, "Output",ExpressionUUID->"550defb3-aab7-4a7a-a06f-e5eb11f9b195"]
}, Closed]],
Cell[3431129, 60599, 152, 3, 36, "Text",ExpressionUUID->"366075de-5861-4fd6-9566-b20c908f6272"],
Cell[CellGroupData[{
Cell[3431306, 60606, 549, 12, 31, "Input",ExpressionUUID->"a9de604f-2027-4ded-bae9-f8e14b310993"],
Cell[3431858, 60620, 29439, 485, 280, "Output",ExpressionUUID->"ac114642-adf0-4b47-8804-a2afb2ddcd19"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[3461346, 61111, 161, 3, 68, "Section",ExpressionUUID->"b38dd681-7a59-46a1-b49d-c391b3a61a6e"],
Cell[3461510, 61116, 175, 3, 36, "Text",ExpressionUUID->"be2a02ac-3a28-4e65-8ce0-a44480f09209"],
Cell[CellGroupData[{
Cell[3461710, 61123, 729, 16, 31, "Input",ExpressionUUID->"0e6db5b1-d601-47ab-8da8-0d3b464a5930"],
Cell[3462442, 61141, 799, 22, 35, "Output",ExpressionUUID->"b5463f85-93b2-468e-9a79-2085ac782895"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[3463290, 61169, 162, 3, 68, "Section",ExpressionUUID->"8d5b5bdf-7318-4d70-a7f7-7cd20258715a"],
Cell[3463455, 61174, 190, 3, 36, "Text",ExpressionUUID->"86dde1db-4e1b-4a74-bdff-431da39cce74"],
Cell[CellGroupData[{
Cell[3463670, 61181, 897, 19, 31, "Input",ExpressionUUID->"f63f0ce7-9116-4bc4-9679-996bdeed4b53"],
Cell[3464570, 61202, 1504, 45, 59, "Output",ExpressionUUID->"f0674dab-0aac-4dfe-a923-ed971e2443c1"]
}, Closed]],
Cell[3466089, 61250, 179, 3, 36, "Text",ExpressionUUID->"6410d5b6-d28d-462c-a78d-5545727f9f80"],
Cell[CellGroupData[{
Cell[3466293, 61257, 436, 11, 31, "Input",ExpressionUUID->"eda03463-c8e0-49a1-a94e-be432cb37e7a"],
Cell[3466732, 61270, 1038, 30, 35, "Output",ExpressionUUID->"40b2fefa-f236-4e14-b4c1-cb974c6a8f61"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[3467819, 61306, 165, 3, 68, "Section",ExpressionUUID->"41a12c39-ee4a-4d91-a71b-c8aa318c720e"],
Cell[3467987, 61311, 354, 7, 36, "Text",ExpressionUUID->"5d3d7d07-8274-4110-bd1a-3cf9f14453fe"],
Cell[3468344, 61320, 653, 11, 60, "Text",ExpressionUUID->"fd021135-45d2-4aae-99be-7207d1bbdaa6"],
Cell[3469000, 61333, 304, 6, 36, "Text",ExpressionUUID->"d978b088-6baf-471a-abef-230bf6cea089"],
Cell[CellGroupData[{
Cell[3469329, 61343, 250, 4, 31, "Input",ExpressionUUID->"6a1ecac4-4616-467c-9b54-c2cb421fbc82"],
Cell[3469582, 61349, 199, 3, 35, "Output",ExpressionUUID->"890473f2-300a-43c9-8fbe-967a31d78c35"]
}, Closed]],
Cell[CellGroupData[{
Cell[3469818, 61357, 478, 10, 31, "Input",ExpressionUUID->"27ed5bc3-02eb-4bc2-9f77-158d8cfa3a5d"],
Cell[3470299, 61369, 218, 4, 53, "Output",ExpressionUUID->"020f9b43-f25f-4202-9336-84aa8220db37"]
}, Closed]],
Cell[3470532, 61376, 952, 20, 31, "Input",ExpressionUUID->"a9f57888-ed87-4cc4-874f-b620ea67c610"],
Cell[CellGroupData[{
Cell[3471509, 61400, 641, 17, 31, "Input",ExpressionUUID->"dc3ed7ee-25e7-40e8-a509-3e1e7a02debb"],
Cell[3472153, 61419, 1254, 19, 35, "Output",ExpressionUUID->"7dd9a520-b5cb-4e18-9811-985cee5a1893"]
}, Closed]],
Cell[3473422, 61441, 456, 12, 36, "Text",ExpressionUUID->"cd0eccee-99af-49f8-b130-62015c6b6880"],
Cell[3473881, 61455, 705, 17, 31, "Input",ExpressionUUID->"9de7e074-a4f7-47df-8557-8245b03f7d2d"],
Cell[3474589, 61474, 608, 13, 36, "Text",ExpressionUUID->"d40e2c90-48ac-4f38-a1d1-07d928a904ab"],
Cell[CellGroupData[{
Cell[3475222, 61491, 992, 20, 31, "Input",ExpressionUUID->"be49faef-f490-4710-a390-7ceb97be07cc"],
Cell[3476217, 61513, 1100, 18, 35, "Output",ExpressionUUID->"7a9cf003-6b3a-4d8b-9258-f12ceb189cb8"]
}, Closed]],
Cell[CellGroupData[{
Cell[3477354, 61536, 724, 13, 31, "Input",ExpressionUUID->"aef14d67-90dc-44b4-963a-7cdb39d6e257"],
Cell[3478081, 61551, 988, 15, 35, "Output",ExpressionUUID->"17663ccf-826b-460b-88ee-56befcb61da9"]
}, Closed]],
Cell[CellGroupData[{
Cell[3479106, 61571, 578, 15, 31, "Input",ExpressionUUID->"eb417518-1849-4b84-8f04-2e2a47750697"],
Cell[3479687, 61588, 1768, 53, 59, "Output",ExpressionUUID->"37bfa62d-0e68-465c-9528-505985cd1973"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[3481504, 61647, 211, 4, 68, "Section",ExpressionUUID->"334b33d5-026f-40d8-a4bd-4a357f8e04c5"],
Cell[3481718, 61653, 217, 4, 36, "Text",ExpressionUUID->"e0a9ee34-4a85-4b5a-bcee-6cc179909670"],
Cell[3481938, 61659, 321, 7, 31, "Input",ExpressionUUID->"54eb354f-fcc7-41b7-b6a8-3e758631bff7"],
Cell[3482262, 61668, 319, 7, 31, "Input",ExpressionUUID->"0a5fa538-2ef8-4feb-8df0-762de2b7bb12"],
Cell[3482584, 61677, 664, 16, 31, "Input",ExpressionUUID->"35e6ca64-3ab4-4e9b-bce3-008d55299e0d"],
Cell[CellGroupData[{
Cell[3483273, 61697, 263, 5, 31, "Input",ExpressionUUID->"c7e0fa6a-d0f2-40fd-93f2-6b52041010c3"],
Cell[3483539, 61704, 2652, 79, 82, "Output",ExpressionUUID->"03f0f5f1-895f-42e5-a04b-2132f85c61d9"]
}, Closed]]
}, Closed]]
}, Closed]]
}, Open  ]]
}
]
*)

